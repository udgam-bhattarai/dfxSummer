
taskArrayTransmission.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000aaec  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  0800ac74  0800ac74  0000bc74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ac98  0800ac98  0000c084  2**0
                  CONTENTS
  4 .ARM          00000008  0800ac98  0800ac98  0000bc98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aca0  0800aca0  0000c084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aca0  0800aca0  0000bca0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aca4  0800aca4  0000bca4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000084  20000000  0800aca8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c084  2**0
                  CONTENTS
 10 .bss          00000b1c  20000084  20000084  0000c084  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000ba0  20000ba0  0000c084  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c084  2**0
                  CONTENTS, READONLY
 13 .debug_info   00017db4  00000000  00000000  0000c0b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003e57  00000000  00000000  00023e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012d0  00000000  00000000  00027cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e58  00000000  00000000  00028f90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023960  00000000  00000000  00029de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001923d  00000000  00000000  0004d748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cd630  00000000  00000000  00066985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00133fb5  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000511c  00000000  00000000  00133ff8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00139114  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000084 	.word	0x20000084
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800ac5c 	.word	0x0800ac5c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000088 	.word	0x20000088
 80001c4:	0800ac5c 	.word	0x0800ac5c

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004b8:	b580      	push	{r7, lr}
 80004ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004bc:	f000 fd4e 	bl	8000f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c0:	f000 f822 	bl	8000508 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004c4:	f000 f96e 	bl	80007a4 <MX_GPIO_Init>
  MX_DMA_Init();
 80004c8:	f000 f944 	bl	8000754 <MX_DMA_Init>
  MX_I2S3_Init();
 80004cc:	f000 f886 	bl	80005dc <MX_I2S3_Init>
  MX_SPI1_Init();
 80004d0:	f000 f8b4 	bl	800063c <MX_SPI1_Init>
  MX_USB_HOST_Init();
 80004d4:	f009 ff6c 	bl	800a3b0 <MX_USB_HOST_Init>
  MX_UART4_Init();
 80004d8:	f000 f8e6 	bl	80006a8 <MX_UART4_Init>
  MX_USART1_Init();
 80004dc:	f000 f90e 	bl	80006fc <MX_USART1_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    MX_USB_HOST_Process();
 80004e0:	f009 ff8c 	bl	800a3fc <MX_USB_HOST_Process>

    /* USER CODE BEGIN 3 */
    HAL_UART_Transmit_DMA(&huart4, tx_buffer,sizeof(tx_buffer));
 80004e4:	2205      	movs	r2, #5
 80004e6:	4905      	ldr	r1, [pc, #20]	@ (80004fc <main+0x44>)
 80004e8:	4805      	ldr	r0, [pc, #20]	@ (8000500 <main+0x48>)
 80004ea:	f005 f905 	bl	80056f8 <HAL_UART_Transmit_DMA>

    HAL_UART_Receive_DMA(&huart4, rx_buffer, sizeof(rx_buffer));
 80004ee:	2205      	movs	r2, #5
 80004f0:	4904      	ldr	r1, [pc, #16]	@ (8000504 <main+0x4c>)
 80004f2:	4803      	ldr	r0, [pc, #12]	@ (8000500 <main+0x48>)
 80004f4:	f005 f970 	bl	80057d8 <HAL_UART_Receive_DMA>
    MX_USB_HOST_Process();
 80004f8:	bf00      	nop
 80004fa:	e7f1      	b.n	80004e0 <main+0x28>
 80004fc:	20000000 	.word	0x20000000
 8000500:	20000140 	.word	0x20000140
 8000504:	2000028c 	.word	0x2000028c

08000508 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b094      	sub	sp, #80	@ 0x50
 800050c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800050e:	f107 0320 	add.w	r3, r7, #32
 8000512:	2230      	movs	r2, #48	@ 0x30
 8000514:	2100      	movs	r1, #0
 8000516:	4618      	mov	r0, r3
 8000518:	f00a fb12 	bl	800ab40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800051c:	f107 030c 	add.w	r3, r7, #12
 8000520:	2200      	movs	r2, #0
 8000522:	601a      	str	r2, [r3, #0]
 8000524:	605a      	str	r2, [r3, #4]
 8000526:	609a      	str	r2, [r3, #8]
 8000528:	60da      	str	r2, [r3, #12]
 800052a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800052c:	2300      	movs	r3, #0
 800052e:	60bb      	str	r3, [r7, #8]
 8000530:	4b28      	ldr	r3, [pc, #160]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000532:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000534:	4a27      	ldr	r2, [pc, #156]	@ (80005d4 <SystemClock_Config+0xcc>)
 8000536:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800053a:	6413      	str	r3, [r2, #64]	@ 0x40
 800053c:	4b25      	ldr	r3, [pc, #148]	@ (80005d4 <SystemClock_Config+0xcc>)
 800053e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000540:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000544:	60bb      	str	r3, [r7, #8]
 8000546:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000548:	2300      	movs	r3, #0
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	4b22      	ldr	r3, [pc, #136]	@ (80005d8 <SystemClock_Config+0xd0>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	4a21      	ldr	r2, [pc, #132]	@ (80005d8 <SystemClock_Config+0xd0>)
 8000552:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000556:	6013      	str	r3, [r2, #0]
 8000558:	4b1f      	ldr	r3, [pc, #124]	@ (80005d8 <SystemClock_Config+0xd0>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000560:	607b      	str	r3, [r7, #4]
 8000562:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000564:	2301      	movs	r3, #1
 8000566:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000568:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800056c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056e:	2302      	movs	r3, #2
 8000570:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000572:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000576:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000578:	2308      	movs	r3, #8
 800057a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800057c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000580:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000582:	2302      	movs	r3, #2
 8000584:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000586:	2307      	movs	r3, #7
 8000588:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800058a:	f107 0320 	add.w	r3, r7, #32
 800058e:	4618      	mov	r0, r3
 8000590:	f004 f9fe 	bl	8004990 <HAL_RCC_OscConfig>
 8000594:	4603      	mov	r3, r0
 8000596:	2b00      	cmp	r3, #0
 8000598:	d001      	beq.n	800059e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800059a:	f000 fa03 	bl	80009a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059e:	230f      	movs	r3, #15
 80005a0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a2:	2302      	movs	r3, #2
 80005a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a6:	2300      	movs	r3, #0
 80005a8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80005aa:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80005ae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80005b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80005b4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005b6:	f107 030c 	add.w	r3, r7, #12
 80005ba:	2105      	movs	r1, #5
 80005bc:	4618      	mov	r0, r3
 80005be:	f004 fc5f 	bl	8004e80 <HAL_RCC_ClockConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80005c8:	f000 f9ec 	bl	80009a4 <Error_Handler>
  }
}
 80005cc:	bf00      	nop
 80005ce:	3750      	adds	r7, #80	@ 0x50
 80005d0:	46bd      	mov	sp, r7
 80005d2:	bd80      	pop	{r7, pc}
 80005d4:	40023800 	.word	0x40023800
 80005d8:	40007000 	.word	0x40007000

080005dc <MX_I2S3_Init>:
  * @brief I2S3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S3_Init(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE END I2S3_Init 0 */

  /* USER CODE BEGIN I2S3_Init 1 */

  /* USER CODE END I2S3_Init 1 */
  hi2s3.Instance = SPI3;
 80005e0:	4b13      	ldr	r3, [pc, #76]	@ (8000630 <MX_I2S3_Init+0x54>)
 80005e2:	4a14      	ldr	r2, [pc, #80]	@ (8000634 <MX_I2S3_Init+0x58>)
 80005e4:	601a      	str	r2, [r3, #0]
  hi2s3.Init.Mode = I2S_MODE_MASTER_TX;
 80005e6:	4b12      	ldr	r3, [pc, #72]	@ (8000630 <MX_I2S3_Init+0x54>)
 80005e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80005ec:	605a      	str	r2, [r3, #4]
  hi2s3.Init.Standard = I2S_STANDARD_PHILIPS;
 80005ee:	4b10      	ldr	r3, [pc, #64]	@ (8000630 <MX_I2S3_Init+0x54>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	609a      	str	r2, [r3, #8]
  hi2s3.Init.DataFormat = I2S_DATAFORMAT_16B;
 80005f4:	4b0e      	ldr	r3, [pc, #56]	@ (8000630 <MX_I2S3_Init+0x54>)
 80005f6:	2200      	movs	r2, #0
 80005f8:	60da      	str	r2, [r3, #12]
  hi2s3.Init.MCLKOutput = I2S_MCLKOUTPUT_ENABLE;
 80005fa:	4b0d      	ldr	r3, [pc, #52]	@ (8000630 <MX_I2S3_Init+0x54>)
 80005fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000600:	611a      	str	r2, [r3, #16]
  hi2s3.Init.AudioFreq = I2S_AUDIOFREQ_96K;
 8000602:	4b0b      	ldr	r3, [pc, #44]	@ (8000630 <MX_I2S3_Init+0x54>)
 8000604:	4a0c      	ldr	r2, [pc, #48]	@ (8000638 <MX_I2S3_Init+0x5c>)
 8000606:	615a      	str	r2, [r3, #20]
  hi2s3.Init.CPOL = I2S_CPOL_LOW;
 8000608:	4b09      	ldr	r3, [pc, #36]	@ (8000630 <MX_I2S3_Init+0x54>)
 800060a:	2200      	movs	r2, #0
 800060c:	619a      	str	r2, [r3, #24]
  hi2s3.Init.ClockSource = I2S_CLOCK_PLL;
 800060e:	4b08      	ldr	r3, [pc, #32]	@ (8000630 <MX_I2S3_Init+0x54>)
 8000610:	2200      	movs	r2, #0
 8000612:	61da      	str	r2, [r3, #28]
  hi2s3.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8000614:	4b06      	ldr	r3, [pc, #24]	@ (8000630 <MX_I2S3_Init+0x54>)
 8000616:	2200      	movs	r2, #0
 8000618:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s3) != HAL_OK)
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <MX_I2S3_Init+0x54>)
 800061c:	f003 fd18 	bl	8004050 <HAL_I2S_Init>
 8000620:	4603      	mov	r3, r0
 8000622:	2b00      	cmp	r3, #0
 8000624:	d001      	beq.n	800062a <MX_I2S3_Init+0x4e>
  {
    Error_Handler();
 8000626:	f000 f9bd 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2S3_Init 2 */

  /* USER CODE END I2S3_Init 2 */

}
 800062a:	bf00      	nop
 800062c:	bd80      	pop	{r7, pc}
 800062e:	bf00      	nop
 8000630:	200000a0 	.word	0x200000a0
 8000634:	40003c00 	.word	0x40003c00
 8000638:	00017700 	.word	0x00017700

0800063c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000640:	4b17      	ldr	r3, [pc, #92]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000642:	4a18      	ldr	r2, [pc, #96]	@ (80006a4 <MX_SPI1_Init+0x68>)
 8000644:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000646:	4b16      	ldr	r3, [pc, #88]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000648:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800064c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800064e:	4b14      	ldr	r3, [pc, #80]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000650:	2200      	movs	r2, #0
 8000652:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000654:	4b12      	ldr	r3, [pc, #72]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000656:	2200      	movs	r2, #0
 8000658:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800065a:	4b11      	ldr	r3, [pc, #68]	@ (80006a0 <MX_SPI1_Init+0x64>)
 800065c:	2200      	movs	r2, #0
 800065e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000660:	4b0f      	ldr	r3, [pc, #60]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000662:	2200      	movs	r2, #0
 8000664:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000666:	4b0e      	ldr	r3, [pc, #56]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000668:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800066c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800066e:	4b0c      	ldr	r3, [pc, #48]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000670:	2200      	movs	r2, #0
 8000672:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000674:	4b0a      	ldr	r3, [pc, #40]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000676:	2200      	movs	r2, #0
 8000678:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800067a:	4b09      	ldr	r3, [pc, #36]	@ (80006a0 <MX_SPI1_Init+0x64>)
 800067c:	2200      	movs	r2, #0
 800067e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000682:	2200      	movs	r2, #0
 8000684:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000686:	4b06      	ldr	r3, [pc, #24]	@ (80006a0 <MX_SPI1_Init+0x64>)
 8000688:	220a      	movs	r2, #10
 800068a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	@ (80006a0 <MX_SPI1_Init+0x64>)
 800068e:	f004 ff59 	bl	8005544 <HAL_SPI_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000698:	f000 f984 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	200000e8 	.word	0x200000e8
 80006a4:	40013000 	.word	0x40013000

080006a8 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80006ac:	4b11      	ldr	r3, [pc, #68]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006ae:	4a12      	ldr	r2, [pc, #72]	@ (80006f8 <MX_UART4_Init+0x50>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 9600;
 80006b2:	4b10      	ldr	r3, [pc, #64]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006b4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80006b8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b0e      	ldr	r3, [pc, #56]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0c      	ldr	r3, [pc, #48]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b09      	ldr	r3, [pc, #36]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b08      	ldr	r3, [pc, #32]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b06      	ldr	r3, [pc, #24]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80006de:	4805      	ldr	r0, [pc, #20]	@ (80006f4 <MX_UART4_Init+0x4c>)
 80006e0:	f004 ffb9 	bl	8005656 <HAL_UART_Init>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80006ea:	f000 f95b 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80006ee:	bf00      	nop
 80006f0:	bd80      	pop	{r7, pc}
 80006f2:	bf00      	nop
 80006f4:	20000140 	.word	0x20000140
 80006f8:	40004c00 	.word	0x40004c00

080006fc <MX_USART1_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_Init(void)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  husart1.Instance = USART1;
 8000700:	4b12      	ldr	r3, [pc, #72]	@ (800074c <MX_USART1_Init+0x50>)
 8000702:	4a13      	ldr	r2, [pc, #76]	@ (8000750 <MX_USART1_Init+0x54>)
 8000704:	601a      	str	r2, [r3, #0]
  husart1.Init.BaudRate = 115200;
 8000706:	4b11      	ldr	r3, [pc, #68]	@ (800074c <MX_USART1_Init+0x50>)
 8000708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800070c:	605a      	str	r2, [r3, #4]
  husart1.Init.WordLength = USART_WORDLENGTH_8B;
 800070e:	4b0f      	ldr	r3, [pc, #60]	@ (800074c <MX_USART1_Init+0x50>)
 8000710:	2200      	movs	r2, #0
 8000712:	609a      	str	r2, [r3, #8]
  husart1.Init.StopBits = USART_STOPBITS_1;
 8000714:	4b0d      	ldr	r3, [pc, #52]	@ (800074c <MX_USART1_Init+0x50>)
 8000716:	2200      	movs	r2, #0
 8000718:	60da      	str	r2, [r3, #12]
  husart1.Init.Parity = USART_PARITY_NONE;
 800071a:	4b0c      	ldr	r3, [pc, #48]	@ (800074c <MX_USART1_Init+0x50>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  husart1.Init.Mode = USART_MODE_TX_RX;
 8000720:	4b0a      	ldr	r3, [pc, #40]	@ (800074c <MX_USART1_Init+0x50>)
 8000722:	220c      	movs	r2, #12
 8000724:	615a      	str	r2, [r3, #20]
  husart1.Init.CLKPolarity = USART_POLARITY_LOW;
 8000726:	4b09      	ldr	r3, [pc, #36]	@ (800074c <MX_USART1_Init+0x50>)
 8000728:	2200      	movs	r2, #0
 800072a:	619a      	str	r2, [r3, #24]
  husart1.Init.CLKPhase = USART_PHASE_1EDGE;
 800072c:	4b07      	ldr	r3, [pc, #28]	@ (800074c <MX_USART1_Init+0x50>)
 800072e:	2200      	movs	r2, #0
 8000730:	61da      	str	r2, [r3, #28]
  husart1.Init.CLKLastBit = USART_LASTBIT_DISABLE;
 8000732:	4b06      	ldr	r3, [pc, #24]	@ (800074c <MX_USART1_Init+0x50>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  if (HAL_USART_Init(&husart1) != HAL_OK)
 8000738:	4804      	ldr	r0, [pc, #16]	@ (800074c <MX_USART1_Init+0x50>)
 800073a:	f006 f971 	bl	8006a20 <HAL_USART_Init>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <MX_USART1_Init+0x4c>
  {
    Error_Handler();
 8000744:	f000 f92e 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000748:	bf00      	nop
 800074a:	bd80      	pop	{r7, pc}
 800074c:	20000188 	.word	0x20000188
 8000750:	40011000 	.word	0x40011000

08000754 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800075a:	2300      	movs	r3, #0
 800075c:	607b      	str	r3, [r7, #4]
 800075e:	4b10      	ldr	r3, [pc, #64]	@ (80007a0 <MX_DMA_Init+0x4c>)
 8000760:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000762:	4a0f      	ldr	r2, [pc, #60]	@ (80007a0 <MX_DMA_Init+0x4c>)
 8000764:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000768:	6313      	str	r3, [r2, #48]	@ 0x30
 800076a:	4b0d      	ldr	r3, [pc, #52]	@ (80007a0 <MX_DMA_Init+0x4c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800076e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000772:	607b      	str	r3, [r7, #4]
 8000774:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 0, 0);
 8000776:	2200      	movs	r2, #0
 8000778:	2100      	movs	r1, #0
 800077a:	200d      	movs	r0, #13
 800077c:	f000 fd5f 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000780:	200d      	movs	r0, #13
 8000782:	f000 fd78 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8000786:	2200      	movs	r2, #0
 8000788:	2100      	movs	r1, #0
 800078a:	200f      	movs	r0, #15
 800078c:	f000 fd57 	bl	800123e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000790:	200f      	movs	r0, #15
 8000792:	f000 fd70 	bl	8001276 <HAL_NVIC_EnableIRQ>

}
 8000796:	bf00      	nop
 8000798:	3708      	adds	r7, #8
 800079a:	46bd      	mov	sp, r7
 800079c:	bd80      	pop	{r7, pc}
 800079e:	bf00      	nop
 80007a0:	40023800 	.word	0x40023800

080007a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b08c      	sub	sp, #48	@ 0x30
 80007a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007aa:	f107 031c 	add.w	r3, r7, #28
 80007ae:	2200      	movs	r2, #0
 80007b0:	601a      	str	r2, [r3, #0]
 80007b2:	605a      	str	r2, [r3, #4]
 80007b4:	609a      	str	r2, [r3, #8]
 80007b6:	60da      	str	r2, [r3, #12]
 80007b8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	61bb      	str	r3, [r7, #24]
 80007be:	4b74      	ldr	r3, [pc, #464]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007c2:	4a73      	ldr	r2, [pc, #460]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007c4:	f043 0310 	orr.w	r3, r3, #16
 80007c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ca:	4b71      	ldr	r3, [pc, #452]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ce:	f003 0310 	and.w	r3, r3, #16
 80007d2:	61bb      	str	r3, [r7, #24]
 80007d4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	4b6d      	ldr	r3, [pc, #436]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007de:	4a6c      	ldr	r2, [pc, #432]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007e0:	f043 0304 	orr.w	r3, r3, #4
 80007e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80007e6:	4b6a      	ldr	r3, [pc, #424]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007ea:	f003 0304 	and.w	r3, r3, #4
 80007ee:	617b      	str	r3, [r7, #20]
 80007f0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	613b      	str	r3, [r7, #16]
 80007f6:	4b66      	ldr	r3, [pc, #408]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007fa:	4a65      	ldr	r2, [pc, #404]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 80007fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000800:	6313      	str	r3, [r2, #48]	@ 0x30
 8000802:	4b63      	ldr	r3, [pc, #396]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000804:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000806:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800080e:	2300      	movs	r3, #0
 8000810:	60fb      	str	r3, [r7, #12]
 8000812:	4b5f      	ldr	r3, [pc, #380]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000816:	4a5e      	ldr	r2, [pc, #376]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	6313      	str	r3, [r2, #48]	@ 0x30
 800081e:	4b5c      	ldr	r3, [pc, #368]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000820:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60fb      	str	r3, [r7, #12]
 8000828:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	2300      	movs	r3, #0
 800082c:	60bb      	str	r3, [r7, #8]
 800082e:	4b58      	ldr	r3, [pc, #352]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000830:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000832:	4a57      	ldr	r2, [pc, #348]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000834:	f043 0302 	orr.w	r3, r3, #2
 8000838:	6313      	str	r3, [r2, #48]	@ 0x30
 800083a:	4b55      	ldr	r3, [pc, #340]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 800083c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083e:	f003 0302 	and.w	r3, r3, #2
 8000842:	60bb      	str	r3, [r7, #8]
 8000844:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000846:	2300      	movs	r3, #0
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	4b51      	ldr	r3, [pc, #324]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 800084c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800084e:	4a50      	ldr	r2, [pc, #320]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000850:	f043 0308 	orr.w	r3, r3, #8
 8000854:	6313      	str	r3, [r2, #48]	@ 0x30
 8000856:	4b4e      	ldr	r3, [pc, #312]	@ (8000990 <MX_GPIO_Init+0x1ec>)
 8000858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800085a:	f003 0308 	and.w	r3, r3, #8
 800085e:	607b      	str	r3, [r7, #4]
 8000860:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CS_I2C_SPI_GPIO_Port, CS_I2C_SPI_Pin, GPIO_PIN_RESET);
 8000862:	2200      	movs	r2, #0
 8000864:	2108      	movs	r1, #8
 8000866:	484b      	ldr	r0, [pc, #300]	@ (8000994 <MX_GPIO_Init+0x1f0>)
 8000868:	f001 fabe 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 800086c:	2201      	movs	r2, #1
 800086e:	2101      	movs	r1, #1
 8000870:	4849      	ldr	r0, [pc, #292]	@ (8000998 <MX_GPIO_Init+0x1f4>)
 8000872:	f001 fab9 	bl	8001de8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000876:	2200      	movs	r2, #0
 8000878:	f24f 0110 	movw	r1, #61456	@ 0xf010
 800087c:	4847      	ldr	r0, [pc, #284]	@ (800099c <MX_GPIO_Init+0x1f8>)
 800087e:	f001 fab3 	bl	8001de8 <HAL_GPIO_WritePin>
                          |Audio_RST_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : CS_I2C_SPI_Pin */
  GPIO_InitStruct.Pin = CS_I2C_SPI_Pin;
 8000882:	2308      	movs	r3, #8
 8000884:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000886:	2301      	movs	r3, #1
 8000888:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088a:	2300      	movs	r3, #0
 800088c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800088e:	2300      	movs	r3, #0
 8000890:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(CS_I2C_SPI_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 031c 	add.w	r3, r7, #28
 8000896:	4619      	mov	r1, r3
 8000898:	483e      	ldr	r0, [pc, #248]	@ (8000994 <MX_GPIO_Init+0x1f0>)
 800089a:	f001 f909 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin;
 800089e:	2301      	movs	r3, #1
 80008a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a2:	2301      	movs	r3, #1
 80008a4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(OTG_FS_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4838      	ldr	r0, [pc, #224]	@ (8000998 <MX_GPIO_Init+0x1f4>)
 80008b6:	f001 f8fb 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PDM_OUT_Pin */
  GPIO_InitStruct.Pin = PDM_OUT_Pin;
 80008ba:	2308      	movs	r3, #8
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008be:	2302      	movs	r3, #2
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80008ca:	2305      	movs	r3, #5
 80008cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(PDM_OUT_GPIO_Port, &GPIO_InitStruct);
 80008ce:	f107 031c 	add.w	r3, r7, #28
 80008d2:	4619      	mov	r1, r3
 80008d4:	4830      	ldr	r0, [pc, #192]	@ (8000998 <MX_GPIO_Init+0x1f4>)
 80008d6:	f001 f8eb 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008da:	2304      	movs	r3, #4
 80008dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008de:	2300      	movs	r3, #0
 80008e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008e6:	f107 031c 	add.w	r3, r7, #28
 80008ea:	4619      	mov	r1, r3
 80008ec:	482c      	ldr	r0, [pc, #176]	@ (80009a0 <MX_GPIO_Init+0x1fc>)
 80008ee:	f001 f8df 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : CLK_IN_Pin */
  GPIO_InitStruct.Pin = CLK_IN_Pin;
 80008f2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f8:	2302      	movs	r3, #2
 80008fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	2300      	movs	r3, #0
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000900:	2300      	movs	r3, #0
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000904:	2305      	movs	r3, #5
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(CLK_IN_GPIO_Port, &GPIO_InitStruct);
 8000908:	f107 031c 	add.w	r3, r7, #28
 800090c:	4619      	mov	r1, r3
 800090e:	4824      	ldr	r0, [pc, #144]	@ (80009a0 <MX_GPIO_Init+0x1fc>)
 8000910:	f001 f8ce 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD4_Pin LD3_Pin LD5_Pin LD6_Pin
                           Audio_RST_Pin */
  GPIO_InitStruct.Pin = LD4_Pin|LD3_Pin|LD5_Pin|LD6_Pin
 8000914:	f24f 0310 	movw	r3, #61456	@ 0xf010
 8000918:	61fb      	str	r3, [r7, #28]
                          |Audio_RST_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800091a:	2301      	movs	r3, #1
 800091c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091e:	2300      	movs	r3, #0
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000922:	2300      	movs	r3, #0
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000926:	f107 031c 	add.w	r3, r7, #28
 800092a:	4619      	mov	r1, r3
 800092c:	481b      	ldr	r0, [pc, #108]	@ (800099c <MX_GPIO_Init+0x1f8>)
 800092e:	f001 f8bf 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OverCurrent_Pin;
 8000932:	2320      	movs	r3, #32
 8000934:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000936:	2300      	movs	r3, #0
 8000938:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093a:	2300      	movs	r3, #0
 800093c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(OTG_FS_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800093e:	f107 031c 	add.w	r3, r7, #28
 8000942:	4619      	mov	r1, r3
 8000944:	4815      	ldr	r0, [pc, #84]	@ (800099c <MX_GPIO_Init+0x1f8>)
 8000946:	f001 f8b3 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : Audio_SDA_Pin */
  GPIO_InitStruct.Pin = Audio_SDA_Pin;
 800094a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800094e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000950:	2312      	movs	r3, #18
 8000952:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000958:	2300      	movs	r3, #0
 800095a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800095c:	2304      	movs	r3, #4
 800095e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(Audio_SDA_GPIO_Port, &GPIO_InitStruct);
 8000960:	f107 031c 	add.w	r3, r7, #28
 8000964:	4619      	mov	r1, r3
 8000966:	480e      	ldr	r0, [pc, #56]	@ (80009a0 <MX_GPIO_Init+0x1fc>)
 8000968:	f001 f8a2 	bl	8001ab0 <HAL_GPIO_Init>

  /*Configure GPIO pin : MEMS_INT2_Pin */
  GPIO_InitStruct.Pin = MEMS_INT2_Pin;
 800096c:	2302      	movs	r3, #2
 800096e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000970:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000974:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000976:	2300      	movs	r3, #0
 8000978:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MEMS_INT2_GPIO_Port, &GPIO_InitStruct);
 800097a:	f107 031c 	add.w	r3, r7, #28
 800097e:	4619      	mov	r1, r3
 8000980:	4804      	ldr	r0, [pc, #16]	@ (8000994 <MX_GPIO_Init+0x1f0>)
 8000982:	f001 f895 	bl	8001ab0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000986:	bf00      	nop
 8000988:	3730      	adds	r7, #48	@ 0x30
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40023800 	.word	0x40023800
 8000994:	40021000 	.word	0x40021000
 8000998:	40020800 	.word	0x40020800
 800099c:	40020c00 	.word	0x40020c00
 80009a0:	40020400 	.word	0x40020400

080009a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009a8:	b672      	cpsid	i
}
 80009aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009ac:	bf00      	nop
 80009ae:	e7fd      	b.n	80009ac <Error_Handler+0x8>

080009b0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b0:	b580      	push	{r7, lr}
 80009b2:	b082      	sub	sp, #8
 80009b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009b6:	2300      	movs	r3, #0
 80009b8:	607b      	str	r3, [r7, #4]
 80009ba:	4b10      	ldr	r3, [pc, #64]	@ (80009fc <HAL_MspInit+0x4c>)
 80009bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009be:	4a0f      	ldr	r2, [pc, #60]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009c4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c6:	4b0d      	ldr	r3, [pc, #52]	@ (80009fc <HAL_MspInit+0x4c>)
 80009c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ca:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	2300      	movs	r3, #0
 80009d4:	603b      	str	r3, [r7, #0]
 80009d6:	4b09      	ldr	r3, [pc, #36]	@ (80009fc <HAL_MspInit+0x4c>)
 80009d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009da:	4a08      	ldr	r2, [pc, #32]	@ (80009fc <HAL_MspInit+0x4c>)
 80009dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009e2:	4b06      	ldr	r3, [pc, #24]	@ (80009fc <HAL_MspInit+0x4c>)
 80009e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009ee:	2007      	movs	r0, #7
 80009f0:	f000 fc1a 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009f4:	bf00      	nop
 80009f6:	3708      	adds	r7, #8
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	40023800 	.word	0x40023800

08000a00 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	b08e      	sub	sp, #56	@ 0x38
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a08:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	601a      	str	r2, [r3, #0]
 8000a10:	605a      	str	r2, [r3, #4]
 8000a12:	609a      	str	r2, [r3, #8]
 8000a14:	60da      	str	r2, [r3, #12]
 8000a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a18:	f107 0314 	add.w	r3, r7, #20
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	601a      	str	r2, [r3, #0]
 8000a20:	605a      	str	r2, [r3, #4]
 8000a22:	609a      	str	r2, [r3, #8]
 8000a24:	60da      	str	r2, [r3, #12]
  if(hi2s->Instance==SPI3)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	681b      	ldr	r3, [r3, #0]
 8000a2a:	4a31      	ldr	r2, [pc, #196]	@ (8000af0 <HAL_I2S_MspInit+0xf0>)
 8000a2c:	4293      	cmp	r3, r2
 8000a2e:	d15a      	bne.n	8000ae6 <HAL_I2S_MspInit+0xe6>

  /* USER CODE END SPI3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000a30:	2301      	movs	r3, #1
 8000a32:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLLI2S.PLLI2SN = 192;
 8000a34:	23c0      	movs	r3, #192	@ 0xc0
 8000a36:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLLI2S.PLLI2SR = 2;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4618      	mov	r0, r3
 8000a42:	f004 fc3d 	bl	80052c0 <HAL_RCCEx_PeriphCLKConfig>
 8000a46:	4603      	mov	r3, r0
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d001      	beq.n	8000a50 <HAL_I2S_MspInit+0x50>
    {
      Error_Handler();
 8000a4c:	f7ff ffaa 	bl	80009a4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8000a50:	2300      	movs	r3, #0
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	4b27      	ldr	r3, [pc, #156]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a58:	4a26      	ldr	r2, [pc, #152]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a5a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8000a5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a60:	4b24      	ldr	r3, [pc, #144]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a64:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000a68:	613b      	str	r3, [r7, #16]
 8000a6a:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a6c:	2300      	movs	r3, #0
 8000a6e:	60fb      	str	r3, [r7, #12]
 8000a70:	4b20      	ldr	r3, [pc, #128]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a74:	4a1f      	ldr	r2, [pc, #124]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a76:	f043 0301 	orr.w	r3, r3, #1
 8000a7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a7c:	4b1d      	ldr	r3, [pc, #116]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a80:	f003 0301 	and.w	r3, r3, #1
 8000a84:	60fb      	str	r3, [r7, #12]
 8000a86:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
 8000a8c:	4b19      	ldr	r3, [pc, #100]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a90:	4a18      	ldr	r2, [pc, #96]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a92:	f043 0304 	orr.w	r3, r3, #4
 8000a96:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a98:	4b16      	ldr	r3, [pc, #88]	@ (8000af4 <HAL_I2S_MspInit+0xf4>)
 8000a9a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a9c:	f003 0304 	and.w	r3, r3, #4
 8000aa0:	60bb      	str	r3, [r7, #8]
 8000aa2:	68bb      	ldr	r3, [r7, #8]
    PA4     ------> I2S3_WS
    PC7     ------> I2S3_MCK
    PC10     ------> I2S3_CK
    PC12     ------> I2S3_SD
    */
    GPIO_InitStruct.Pin = I2S3_WS_Pin;
 8000aa4:	2310      	movs	r3, #16
 8000aa6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aac:	2300      	movs	r3, #0
 8000aae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab4:	2306      	movs	r3, #6
 8000ab6:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(I2S3_WS_GPIO_Port, &GPIO_InitStruct);
 8000ab8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000abc:	4619      	mov	r1, r3
 8000abe:	480e      	ldr	r0, [pc, #56]	@ (8000af8 <HAL_I2S_MspInit+0xf8>)
 8000ac0:	f000 fff6 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = I2S3_MCK_Pin|I2S3_SCK_Pin|I2S3_SD_Pin;
 8000ac4:	f44f 53a4 	mov.w	r3, #5248	@ 0x1480
 8000ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aca:	2302      	movs	r3, #2
 8000acc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ad2:	2300      	movs	r3, #0
 8000ad4:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ad6:	2306      	movs	r3, #6
 8000ad8:	637b      	str	r3, [r7, #52]	@ 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ada:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ade:	4619      	mov	r1, r3
 8000ae0:	4806      	ldr	r0, [pc, #24]	@ (8000afc <HAL_I2S_MspInit+0xfc>)
 8000ae2:	f000 ffe5 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 8000ae6:	bf00      	nop
 8000ae8:	3738      	adds	r7, #56	@ 0x38
 8000aea:	46bd      	mov	sp, r7
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	40003c00 	.word	0x40003c00
 8000af4:	40023800 	.word	0x40023800
 8000af8:	40020000 	.word	0x40020000
 8000afc:	40020800 	.word	0x40020800

08000b00 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	@ 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a19      	ldr	r2, [pc, #100]	@ (8000b84 <HAL_SPI_MspInit+0x84>)
 8000b1e:	4293      	cmp	r3, r2
 8000b20:	d12b      	bne.n	8000b7a <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b18      	ldr	r3, [pc, #96]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b28:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b2a:	4a17      	ldr	r2, [pc, #92]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b2c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000b30:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b32:	4b15      	ldr	r3, [pc, #84]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b36:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b3e:	2300      	movs	r3, #0
 8000b40:	60fb      	str	r3, [r7, #12]
 8000b42:	4b11      	ldr	r3, [pc, #68]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b46:	4a10      	ldr	r2, [pc, #64]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <HAL_SPI_MspInit+0x88>)
 8000b50:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000b52:	f003 0301 	and.w	r3, r3, #1
 8000b56:	60fb      	str	r3, [r7, #12]
 8000b58:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = SPI1_SCK_Pin|SPI1_MISO_Pin|SPI1_MOSI_Pin;
 8000b5a:	23e0      	movs	r3, #224	@ 0xe0
 8000b5c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5e:	2302      	movs	r3, #2
 8000b60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b62:	2300      	movs	r3, #0
 8000b64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b66:	2300      	movs	r3, #0
 8000b68:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b6e:	f107 0314 	add.w	r3, r7, #20
 8000b72:	4619      	mov	r1, r3
 8000b74:	4805      	ldr	r0, [pc, #20]	@ (8000b8c <HAL_SPI_MspInit+0x8c>)
 8000b76:	f000 ff9b 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000b7a:	bf00      	nop
 8000b7c:	3728      	adds	r7, #40	@ 0x28
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40013000 	.word	0x40013000
 8000b88:	40023800 	.word	0x40023800
 8000b8c:	40020000 	.word	0x40020000

08000b90 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b08a      	sub	sp, #40	@ 0x28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b98:	f107 0314 	add.w	r3, r7, #20
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]
 8000ba6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	681b      	ldr	r3, [r3, #0]
 8000bac:	4a4b      	ldr	r2, [pc, #300]	@ (8000cdc <HAL_UART_MspInit+0x14c>)
 8000bae:	4293      	cmp	r3, r2
 8000bb0:	f040 8090 	bne.w	8000cd4 <HAL_UART_MspInit+0x144>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8000bb4:	2300      	movs	r3, #0
 8000bb6:	613b      	str	r3, [r7, #16]
 8000bb8:	4b49      	ldr	r3, [pc, #292]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000bba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbc:	4a48      	ldr	r2, [pc, #288]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000bbe:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8000bc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bc4:	4b46      	ldr	r3, [pc, #280]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000bc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8000bcc:	613b      	str	r3, [r7, #16]
 8000bce:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	60fb      	str	r3, [r7, #12]
 8000bd4:	4b42      	ldr	r3, [pc, #264]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000bd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bd8:	4a41      	ldr	r2, [pc, #260]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000bda:	f043 0301 	orr.w	r3, r3, #1
 8000bde:	6313      	str	r3, [r2, #48]	@ 0x30
 8000be0:	4b3f      	ldr	r3, [pc, #252]	@ (8000ce0 <HAL_UART_MspInit+0x150>)
 8000be2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000be4:	f003 0301 	and.w	r3, r3, #1
 8000be8:	60fb      	str	r3, [r7, #12]
 8000bea:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PA0-WKUP     ------> UART4_TX
    PA1     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000bec:	2303      	movs	r3, #3
 8000bee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8000bfc:	2308      	movs	r3, #8
 8000bfe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c00:	f107 0314 	add.w	r3, r7, #20
 8000c04:	4619      	mov	r1, r3
 8000c06:	4837      	ldr	r0, [pc, #220]	@ (8000ce4 <HAL_UART_MspInit+0x154>)
 8000c08:	f000 ff52 	bl	8001ab0 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8000c0c:	4b36      	ldr	r3, [pc, #216]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c0e:	4a37      	ldr	r2, [pc, #220]	@ (8000cec <HAL_UART_MspInit+0x15c>)
 8000c10:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8000c12:	4b35      	ldr	r3, [pc, #212]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c14:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c18:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000c1a:	4b33      	ldr	r3, [pc, #204]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c1c:	2200      	movs	r2, #0
 8000c1e:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c20:	4b31      	ldr	r3, [pc, #196]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000c26:	4b30      	ldr	r3, [pc, #192]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c28:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c2c:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c2e:	4b2e      	ldr	r3, [pc, #184]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c34:	4b2c      	ldr	r3, [pc, #176]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 8000c3a:	4b2b      	ldr	r3, [pc, #172]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000c40:	4b29      	ldr	r3, [pc, #164]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c42:	2200      	movs	r2, #0
 8000c44:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000c46:	4b28      	ldr	r3, [pc, #160]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8000c4c:	4826      	ldr	r0, [pc, #152]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c4e:	f000 fb2d 	bl	80012ac <HAL_DMA_Init>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 8000c58:	f7ff fea4 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_uart4_rx);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	4a22      	ldr	r2, [pc, #136]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c60:	63da      	str	r2, [r3, #60]	@ 0x3c
 8000c62:	4a21      	ldr	r2, [pc, #132]	@ (8000ce8 <HAL_UART_MspInit+0x158>)
 8000c64:	687b      	ldr	r3, [r7, #4]
 8000c66:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8000c68:	4b21      	ldr	r3, [pc, #132]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c6a:	4a22      	ldr	r2, [pc, #136]	@ (8000cf4 <HAL_UART_MspInit+0x164>)
 8000c6c:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 8000c6e:	4b20      	ldr	r3, [pc, #128]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c70:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000c74:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8000c76:	4b1e      	ldr	r3, [pc, #120]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c78:	2240      	movs	r2, #64	@ 0x40
 8000c7a:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000c7c:	4b1c      	ldr	r3, [pc, #112]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c7e:	2200      	movs	r2, #0
 8000c80:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000c82:	4b1b      	ldr	r3, [pc, #108]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c84:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000c88:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000c8a:	4b19      	ldr	r3, [pc, #100]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000c90:	4b17      	ldr	r3, [pc, #92]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8000c96:	4b16      	ldr	r3, [pc, #88]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8000c9c:	4b14      	ldr	r3, [pc, #80]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000ca2:	4b13      	ldr	r3, [pc, #76]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8000ca8:	4811      	ldr	r0, [pc, #68]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000caa:	f000 faff 	bl	80012ac <HAL_DMA_Init>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d001      	beq.n	8000cb8 <HAL_UART_MspInit+0x128>
    {
      Error_Handler();
 8000cb4:	f7ff fe76 	bl	80009a4 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_uart4_tx);
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	4a0d      	ldr	r2, [pc, #52]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000cbc:	639a      	str	r2, [r3, #56]	@ 0x38
 8000cbe:	4a0c      	ldr	r2, [pc, #48]	@ (8000cf0 <HAL_UART_MspInit+0x160>)
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 0, 0);
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	2034      	movs	r0, #52	@ 0x34
 8000cca:	f000 fab8 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8000cce:	2034      	movs	r0, #52	@ 0x34
 8000cd0:	f000 fad1 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8000cd4:	bf00      	nop
 8000cd6:	3728      	adds	r7, #40	@ 0x28
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	40004c00 	.word	0x40004c00
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000
 8000ce8:	200001cc 	.word	0x200001cc
 8000cec:	40026040 	.word	0x40026040
 8000cf0:	2000022c 	.word	0x2000022c
 8000cf4:	40026070 	.word	0x40026070

08000cf8 <HAL_USART_MspInit>:
* This function configures the hardware resources used in this example
* @param husart: USART handle pointer
* @retval None
*/
void HAL_USART_MspInit(USART_HandleTypeDef* husart)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b08a      	sub	sp, #40	@ 0x28
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d00:	f107 0314 	add.w	r3, r7, #20
 8000d04:	2200      	movs	r2, #0
 8000d06:	601a      	str	r2, [r3, #0]
 8000d08:	605a      	str	r2, [r3, #4]
 8000d0a:	609a      	str	r2, [r3, #8]
 8000d0c:	60da      	str	r2, [r3, #12]
 8000d0e:	611a      	str	r2, [r3, #16]
  if(husart->Instance==USART1)
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	4a28      	ldr	r2, [pc, #160]	@ (8000db8 <HAL_USART_MspInit+0xc0>)
 8000d16:	4293      	cmp	r3, r2
 8000d18:	d14a      	bne.n	8000db0 <HAL_USART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	613b      	str	r3, [r7, #16]
 8000d1e:	4b27      	ldr	r3, [pc, #156]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d22:	4a26      	ldr	r2, [pc, #152]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d24:	f043 0310 	orr.w	r3, r3, #16
 8000d28:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d2a:	4b24      	ldr	r3, [pc, #144]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d2e:	f003 0310 	and.w	r3, r3, #16
 8000d32:	613b      	str	r3, [r7, #16]
 8000d34:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d36:	2300      	movs	r3, #0
 8000d38:	60fb      	str	r3, [r7, #12]
 8000d3a:	4b20      	ldr	r3, [pc, #128]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	4a1f      	ldr	r2, [pc, #124]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d40:	f043 0301 	orr.w	r3, r3, #1
 8000d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d46:	4b1d      	ldr	r3, [pc, #116]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4a:	f003 0301 	and.w	r3, r3, #1
 8000d4e:	60fb      	str	r3, [r7, #12]
 8000d50:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d52:	2300      	movs	r3, #0
 8000d54:	60bb      	str	r3, [r7, #8]
 8000d56:	4b19      	ldr	r3, [pc, #100]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	4a18      	ldr	r2, [pc, #96]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d5c:	f043 0302 	orr.w	r3, r3, #2
 8000d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d62:	4b16      	ldr	r3, [pc, #88]	@ (8000dbc <HAL_USART_MspInit+0xc4>)
 8000d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d66:	f003 0302 	and.w	r3, r3, #2
 8000d6a:	60bb      	str	r3, [r7, #8]
 8000d6c:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA8     ------> USART1_CK
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000d6e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d72:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d74:	2302      	movs	r3, #2
 8000d76:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d78:	2300      	movs	r3, #0
 8000d7a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d7c:	2303      	movs	r3, #3
 8000d7e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d80:	2307      	movs	r3, #7
 8000d82:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d84:	f107 0314 	add.w	r3, r7, #20
 8000d88:	4619      	mov	r1, r3
 8000d8a:	480d      	ldr	r0, [pc, #52]	@ (8000dc0 <HAL_USART_MspInit+0xc8>)
 8000d8c:	f000 fe90 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d90:	23c0      	movs	r3, #192	@ 0xc0
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000da0:	2307      	movs	r3, #7
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4806      	ldr	r0, [pc, #24]	@ (8000dc4 <HAL_USART_MspInit+0xcc>)
 8000dac:	f000 fe80 	bl	8001ab0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40011000 	.word	0x40011000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dcc:	bf00      	nop
 8000dce:	e7fd      	b.n	8000dcc <NMI_Handler+0x4>

08000dd0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd4:	bf00      	nop
 8000dd6:	e7fd      	b.n	8000dd4 <HardFault_Handler+0x4>

08000dd8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ddc:	bf00      	nop
 8000dde:	e7fd      	b.n	8000ddc <MemManage_Handler+0x4>

08000de0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000de0:	b480      	push	{r7}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de4:	bf00      	nop
 8000de6:	e7fd      	b.n	8000de4 <BusFault_Handler+0x4>

08000de8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de8:	b480      	push	{r7}
 8000dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dec:	bf00      	nop
 8000dee:	e7fd      	b.n	8000dec <UsageFault_Handler+0x4>

08000df0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e10:	bf00      	nop
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e1a:	b580      	push	{r7, lr}
 8000e1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1e:	f000 f8ef 	bl	8001000 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
	...

08000e28 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8000e2c:	4802      	ldr	r0, [pc, #8]	@ (8000e38 <DMA1_Stream2_IRQHandler+0x10>)
 8000e2e:	f000 fbd5 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8000e32:	bf00      	nop
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	200001cc 	.word	0x200001cc

08000e3c <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8000e40:	4802      	ldr	r0, [pc, #8]	@ (8000e4c <DMA1_Stream4_IRQHandler+0x10>)
 8000e42:	f000 fbcb 	bl	80015dc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	bd80      	pop	{r7, pc}
 8000e4a:	bf00      	nop
 8000e4c:	2000022c 	.word	0x2000022c

08000e50 <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8000e54:	4802      	ldr	r0, [pc, #8]	@ (8000e60 <UART4_IRQHandler+0x10>)
 8000e56:	f004 fce5 	bl	8005824 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8000e5a:	bf00      	nop
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	20000140 	.word	0x20000140

08000e64 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8000e68:	4802      	ldr	r0, [pc, #8]	@ (8000e74 <OTG_FS_IRQHandler+0x10>)
 8000e6a:	f001 fab7 	bl	80023dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000e6e:	bf00      	nop
 8000e70:	bd80      	pop	{r7, pc}
 8000e72:	bf00      	nop
 8000e74:	20000678 	.word	0x20000678

08000e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b086      	sub	sp, #24
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e80:	4a14      	ldr	r2, [pc, #80]	@ (8000ed4 <_sbrk+0x5c>)
 8000e82:	4b15      	ldr	r3, [pc, #84]	@ (8000ed8 <_sbrk+0x60>)
 8000e84:	1ad3      	subs	r3, r2, r3
 8000e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e88:	697b      	ldr	r3, [r7, #20]
 8000e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e8c:	4b13      	ldr	r3, [pc, #76]	@ (8000edc <_sbrk+0x64>)
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	d102      	bne.n	8000e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e94:	4b11      	ldr	r3, [pc, #68]	@ (8000edc <_sbrk+0x64>)
 8000e96:	4a12      	ldr	r2, [pc, #72]	@ (8000ee0 <_sbrk+0x68>)
 8000e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e9a:	4b10      	ldr	r3, [pc, #64]	@ (8000edc <_sbrk+0x64>)
 8000e9c:	681a      	ldr	r2, [r3, #0]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	693a      	ldr	r2, [r7, #16]
 8000ea4:	429a      	cmp	r2, r3
 8000ea6:	d207      	bcs.n	8000eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ea8:	f009 fe62 	bl	800ab70 <__errno>
 8000eac:	4603      	mov	r3, r0
 8000eae:	220c      	movs	r2, #12
 8000eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000eb2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000eb6:	e009      	b.n	8000ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000eb8:	4b08      	ldr	r3, [pc, #32]	@ (8000edc <_sbrk+0x64>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000ebe:	4b07      	ldr	r3, [pc, #28]	@ (8000edc <_sbrk+0x64>)
 8000ec0:	681a      	ldr	r2, [r3, #0]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	4413      	add	r3, r2
 8000ec6:	4a05      	ldr	r2, [pc, #20]	@ (8000edc <_sbrk+0x64>)
 8000ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000eca:	68fb      	ldr	r3, [r7, #12]
}
 8000ecc:	4618      	mov	r0, r3
 8000ece:	3718      	adds	r7, #24
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}
 8000ed4:	20020000 	.word	0x20020000
 8000ed8:	00000400 	.word	0x00000400
 8000edc:	20000294 	.word	0x20000294
 8000ee0:	20000ba0 	.word	0x20000ba0

08000ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee8:	4b06      	ldr	r3, [pc, #24]	@ (8000f04 <SystemInit+0x20>)
 8000eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000eee:	4a05      	ldr	r2, [pc, #20]	@ (8000f04 <SystemInit+0x20>)
 8000ef0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	e000ed00 	.word	0xe000ed00

08000f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000f08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000f0c:	f7ff ffea 	bl	8000ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f10:	480c      	ldr	r0, [pc, #48]	@ (8000f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000f12:	490d      	ldr	r1, [pc, #52]	@ (8000f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000f14:	4a0d      	ldr	r2, [pc, #52]	@ (8000f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f18:	e002      	b.n	8000f20 <LoopCopyDataInit>

08000f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f1e:	3304      	adds	r3, #4

08000f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f24:	d3f9      	bcc.n	8000f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f26:	4a0a      	ldr	r2, [pc, #40]	@ (8000f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000f28:	4c0a      	ldr	r4, [pc, #40]	@ (8000f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f2c:	e001      	b.n	8000f32 <LoopFillZerobss>

08000f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f30:	3204      	adds	r2, #4

08000f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f34:	d3fb      	bcc.n	8000f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f36:	f009 fe21 	bl	800ab7c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f3a:	f7ff fabd 	bl	80004b8 <main>
  bx  lr    
 8000f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f48:	20000084 	.word	0x20000084
  ldr r2, =_sidata
 8000f4c:	0800aca8 	.word	0x0800aca8
  ldr r2, =_sbss
 8000f50:	20000084 	.word	0x20000084
  ldr r4, =_ebss
 8000f54:	20000ba0 	.word	0x20000ba0

08000f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f58:	e7fe      	b.n	8000f58 <ADC_IRQHandler>
	...

08000f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000f60:	4b0e      	ldr	r3, [pc, #56]	@ (8000f9c <HAL_Init+0x40>)
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a0d      	ldr	r2, [pc, #52]	@ (8000f9c <HAL_Init+0x40>)
 8000f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000f9c <HAL_Init+0x40>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a0a      	ldr	r2, [pc, #40]	@ (8000f9c <HAL_Init+0x40>)
 8000f72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f78:	4b08      	ldr	r3, [pc, #32]	@ (8000f9c <HAL_Init+0x40>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a07      	ldr	r2, [pc, #28]	@ (8000f9c <HAL_Init+0x40>)
 8000f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f84:	2003      	movs	r0, #3
 8000f86:	f000 f94f 	bl	8001228 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f8a:	2000      	movs	r0, #0
 8000f8c:	f000 f808 	bl	8000fa0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f90:	f7ff fd0e 	bl	80009b0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f94:	2300      	movs	r3, #0
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	bd80      	pop	{r7, pc}
 8000f9a:	bf00      	nop
 8000f9c:	40023c00 	.word	0x40023c00

08000fa0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b082      	sub	sp, #8
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000fa8:	4b12      	ldr	r3, [pc, #72]	@ (8000ff4 <HAL_InitTick+0x54>)
 8000faa:	681a      	ldr	r2, [r3, #0]
 8000fac:	4b12      	ldr	r3, [pc, #72]	@ (8000ff8 <HAL_InitTick+0x58>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	4619      	mov	r1, r3
 8000fb2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fb6:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fba:	fbb2 f3f3 	udiv	r3, r2, r3
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f000 f967 	bl	8001292 <HAL_SYSTICK_Config>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	e00e      	b.n	8000fec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	2b0f      	cmp	r3, #15
 8000fd2:	d80a      	bhi.n	8000fea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	6879      	ldr	r1, [r7, #4]
 8000fd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fdc:	f000 f92f 	bl	800123e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fe0:	4a06      	ldr	r2, [pc, #24]	@ (8000ffc <HAL_InitTick+0x5c>)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	e000      	b.n	8000fec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
}
 8000fec:	4618      	mov	r0, r3
 8000fee:	3708      	adds	r7, #8
 8000ff0:	46bd      	mov	sp, r7
 8000ff2:	bd80      	pop	{r7, pc}
 8000ff4:	20000008 	.word	0x20000008
 8000ff8:	20000010 	.word	0x20000010
 8000ffc:	2000000c 	.word	0x2000000c

08001000 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001004:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_IncTick+0x20>)
 8001006:	781b      	ldrb	r3, [r3, #0]
 8001008:	461a      	mov	r2, r3
 800100a:	4b06      	ldr	r3, [pc, #24]	@ (8001024 <HAL_IncTick+0x24>)
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	4413      	add	r3, r2
 8001010:	4a04      	ldr	r2, [pc, #16]	@ (8001024 <HAL_IncTick+0x24>)
 8001012:	6013      	str	r3, [r2, #0]
}
 8001014:	bf00      	nop
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr
 800101e:	bf00      	nop
 8001020:	20000010 	.word	0x20000010
 8001024:	20000298 	.word	0x20000298

08001028 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
  return uwTick;
 800102c:	4b03      	ldr	r3, [pc, #12]	@ (800103c <HAL_GetTick+0x14>)
 800102e:	681b      	ldr	r3, [r3, #0]
}
 8001030:	4618      	mov	r0, r3
 8001032:	46bd      	mov	sp, r7
 8001034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001038:	4770      	bx	lr
 800103a:	bf00      	nop
 800103c:	20000298 	.word	0x20000298

08001040 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b084      	sub	sp, #16
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001048:	f7ff ffee 	bl	8001028 <HAL_GetTick>
 800104c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001058:	d005      	beq.n	8001066 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800105a:	4b0a      	ldr	r3, [pc, #40]	@ (8001084 <HAL_Delay+0x44>)
 800105c:	781b      	ldrb	r3, [r3, #0]
 800105e:	461a      	mov	r2, r3
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	4413      	add	r3, r2
 8001064:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001066:	bf00      	nop
 8001068:	f7ff ffde 	bl	8001028 <HAL_GetTick>
 800106c:	4602      	mov	r2, r0
 800106e:	68bb      	ldr	r3, [r7, #8]
 8001070:	1ad3      	subs	r3, r2, r3
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	429a      	cmp	r2, r3
 8001076:	d8f7      	bhi.n	8001068 <HAL_Delay+0x28>
  {
  }
}
 8001078:	bf00      	nop
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	20000010 	.word	0x20000010

08001088 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0c      	ldr	r3, [pc, #48]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80010b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80010b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010ba:	4a04      	ldr	r2, [pc, #16]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010bc:	68bb      	ldr	r3, [r7, #8]
 80010be:	60d3      	str	r3, [r2, #12]
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	e000ed00 	.word	0xe000ed00

080010d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	db0b      	blt.n	8001116 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	f003 021f 	and.w	r2, r3, #31
 8001104:	4907      	ldr	r1, [pc, #28]	@ (8001124 <__NVIC_EnableIRQ+0x38>)
 8001106:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800110a:	095b      	lsrs	r3, r3, #5
 800110c:	2001      	movs	r0, #1
 800110e:	fa00 f202 	lsl.w	r2, r0, r2
 8001112:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001116:	bf00      	nop
 8001118:	370c      	adds	r7, #12
 800111a:	46bd      	mov	sp, r7
 800111c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001120:	4770      	bx	lr
 8001122:	bf00      	nop
 8001124:	e000e100 	.word	0xe000e100

08001128 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	4603      	mov	r3, r0
 8001130:	6039      	str	r1, [r7, #0]
 8001132:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001134:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001138:	2b00      	cmp	r3, #0
 800113a:	db0a      	blt.n	8001152 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	b2da      	uxtb	r2, r3
 8001140:	490c      	ldr	r1, [pc, #48]	@ (8001174 <__NVIC_SetPriority+0x4c>)
 8001142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001146:	0112      	lsls	r2, r2, #4
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	440b      	add	r3, r1
 800114c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001150:	e00a      	b.n	8001168 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	b2da      	uxtb	r2, r3
 8001156:	4908      	ldr	r1, [pc, #32]	@ (8001178 <__NVIC_SetPriority+0x50>)
 8001158:	79fb      	ldrb	r3, [r7, #7]
 800115a:	f003 030f 	and.w	r3, r3, #15
 800115e:	3b04      	subs	r3, #4
 8001160:	0112      	lsls	r2, r2, #4
 8001162:	b2d2      	uxtb	r2, r2
 8001164:	440b      	add	r3, r1
 8001166:	761a      	strb	r2, [r3, #24]
}
 8001168:	bf00      	nop
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr
 8001174:	e000e100 	.word	0xe000e100
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800117c:	b480      	push	{r7}
 800117e:	b089      	sub	sp, #36	@ 0x24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f003 0307 	and.w	r3, r3, #7
 800118e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001190:	69fb      	ldr	r3, [r7, #28]
 8001192:	f1c3 0307 	rsb	r3, r3, #7
 8001196:	2b04      	cmp	r3, #4
 8001198:	bf28      	it	cs
 800119a:	2304      	movcs	r3, #4
 800119c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	3304      	adds	r3, #4
 80011a2:	2b06      	cmp	r3, #6
 80011a4:	d902      	bls.n	80011ac <NVIC_EncodePriority+0x30>
 80011a6:	69fb      	ldr	r3, [r7, #28]
 80011a8:	3b03      	subs	r3, #3
 80011aa:	e000      	b.n	80011ae <NVIC_EncodePriority+0x32>
 80011ac:	2300      	movs	r3, #0
 80011ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80011b4:	69bb      	ldr	r3, [r7, #24]
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43da      	mvns	r2, r3
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	401a      	ands	r2, r3
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43d9      	mvns	r1, r3
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011d4:	4313      	orrs	r3, r2
         );
}
 80011d6:	4618      	mov	r0, r3
 80011d8:	3724      	adds	r7, #36	@ 0x24
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
	...

080011e4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	3b01      	subs	r3, #1
 80011f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011f4:	d301      	bcc.n	80011fa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011f6:	2301      	movs	r3, #1
 80011f8:	e00f      	b.n	800121a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011fa:	4a0a      	ldr	r2, [pc, #40]	@ (8001224 <SysTick_Config+0x40>)
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3b01      	subs	r3, #1
 8001200:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001202:	210f      	movs	r1, #15
 8001204:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001208:	f7ff ff8e 	bl	8001128 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800120c:	4b05      	ldr	r3, [pc, #20]	@ (8001224 <SysTick_Config+0x40>)
 800120e:	2200      	movs	r2, #0
 8001210:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001212:	4b04      	ldr	r3, [pc, #16]	@ (8001224 <SysTick_Config+0x40>)
 8001214:	2207      	movs	r2, #7
 8001216:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001218:	2300      	movs	r3, #0
}
 800121a:	4618      	mov	r0, r3
 800121c:	3708      	adds	r7, #8
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	e000e010 	.word	0xe000e010

08001228 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b082      	sub	sp, #8
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001230:	6878      	ldr	r0, [r7, #4]
 8001232:	f7ff ff29 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 8001236:	bf00      	nop
 8001238:	3708      	adds	r7, #8
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}

0800123e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800123e:	b580      	push	{r7, lr}
 8001240:	b086      	sub	sp, #24
 8001242:	af00      	add	r7, sp, #0
 8001244:	4603      	mov	r3, r0
 8001246:	60b9      	str	r1, [r7, #8]
 8001248:	607a      	str	r2, [r7, #4]
 800124a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800124c:	2300      	movs	r3, #0
 800124e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001250:	f7ff ff3e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001254:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001256:	687a      	ldr	r2, [r7, #4]
 8001258:	68b9      	ldr	r1, [r7, #8]
 800125a:	6978      	ldr	r0, [r7, #20]
 800125c:	f7ff ff8e 	bl	800117c <NVIC_EncodePriority>
 8001260:	4602      	mov	r2, r0
 8001262:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001266:	4611      	mov	r1, r2
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff5d 	bl	8001128 <__NVIC_SetPriority>
}
 800126e:	bf00      	nop
 8001270:	3718      	adds	r7, #24
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}

08001276 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	b082      	sub	sp, #8
 800127a:	af00      	add	r7, sp, #0
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001280:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff ff31 	bl	80010ec <__NVIC_EnableIRQ>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}

08001292 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b082      	sub	sp, #8
 8001296:	af00      	add	r7, sp, #0
 8001298:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800129a:	6878      	ldr	r0, [r7, #4]
 800129c:	f7ff ffa2 	bl	80011e4 <SysTick_Config>
 80012a0:	4603      	mov	r3, r0
}
 80012a2:	4618      	mov	r0, r3
 80012a4:	3708      	adds	r7, #8
 80012a6:	46bd      	mov	sp, r7
 80012a8:	bd80      	pop	{r7, pc}
	...

080012ac <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	b086      	sub	sp, #24
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80012b8:	f7ff feb6 	bl	8001028 <HAL_GetTick>
 80012bc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d101      	bne.n	80012c8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80012c4:	2301      	movs	r3, #1
 80012c6:	e099      	b.n	80013fc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	2202      	movs	r2, #2
 80012cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	681b      	ldr	r3, [r3, #0]
 80012dc:	681a      	ldr	r2, [r3, #0]
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f022 0201 	bic.w	r2, r2, #1
 80012e6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012e8:	e00f      	b.n	800130a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80012ea:	f7ff fe9d 	bl	8001028 <HAL_GetTick>
 80012ee:	4602      	mov	r2, r0
 80012f0:	693b      	ldr	r3, [r7, #16]
 80012f2:	1ad3      	subs	r3, r2, r3
 80012f4:	2b05      	cmp	r3, #5
 80012f6:	d908      	bls.n	800130a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	2220      	movs	r2, #32
 80012fc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2203      	movs	r2, #3
 8001302:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e078      	b.n	80013fc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0301 	and.w	r3, r3, #1
 8001314:	2b00      	cmp	r3, #0
 8001316:	d1e8      	bne.n	80012ea <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001320:	697a      	ldr	r2, [r7, #20]
 8001322:	4b38      	ldr	r3, [pc, #224]	@ (8001404 <HAL_DMA_Init+0x158>)
 8001324:	4013      	ands	r3, r2
 8001326:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	685a      	ldr	r2, [r3, #4]
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	689b      	ldr	r3, [r3, #8]
 8001330:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001336:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	691b      	ldr	r3, [r3, #16]
 800133c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001342:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	699b      	ldr	r3, [r3, #24]
 8001348:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800134e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	6a1b      	ldr	r3, [r3, #32]
 8001354:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001356:	697a      	ldr	r2, [r7, #20]
 8001358:	4313      	orrs	r3, r2
 800135a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001360:	2b04      	cmp	r3, #4
 8001362:	d107      	bne.n	8001374 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800136c:	4313      	orrs	r3, r2
 800136e:	697a      	ldr	r2, [r7, #20]
 8001370:	4313      	orrs	r3, r2
 8001372:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	697a      	ldr	r2, [r7, #20]
 800137a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	f023 0307 	bic.w	r3, r3, #7
 800138a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001390:	697a      	ldr	r2, [r7, #20]
 8001392:	4313      	orrs	r3, r2
 8001394:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800139a:	2b04      	cmp	r3, #4
 800139c:	d117      	bne.n	80013ce <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	4313      	orrs	r3, r2
 80013a6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d00e      	beq.n	80013ce <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f000 fb01 	bl	80019b8 <DMA_CheckFifoParam>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d008      	beq.n	80013ce <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	2240      	movs	r2, #64	@ 0x40
 80013c0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2201      	movs	r2, #1
 80013c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80013ca:	2301      	movs	r3, #1
 80013cc:	e016      	b.n	80013fc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	697a      	ldr	r2, [r7, #20]
 80013d4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80013d6:	6878      	ldr	r0, [r7, #4]
 80013d8:	f000 fab8 	bl	800194c <DMA_CalcBaseAndBitshift>
 80013dc:	4603      	mov	r3, r0
 80013de:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80013e4:	223f      	movs	r2, #63	@ 0x3f
 80013e6:	409a      	lsls	r2, r3
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2200      	movs	r2, #0
 80013f0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	2201      	movs	r2, #1
 80013f6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80013fa:	2300      	movs	r3, #0
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	f010803f 	.word	0xf010803f

08001408 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
 800140e:	60f8      	str	r0, [r7, #12]
 8001410:	60b9      	str	r1, [r7, #8]
 8001412:	607a      	str	r2, [r7, #4]
 8001414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001416:	2300      	movs	r3, #0
 8001418:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800141e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001420:	68fb      	ldr	r3, [r7, #12]
 8001422:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8001426:	2b01      	cmp	r3, #1
 8001428:	d101      	bne.n	800142e <HAL_DMA_Start_IT+0x26>
 800142a:	2302      	movs	r3, #2
 800142c:	e040      	b.n	80014b0 <HAL_DMA_Start_IT+0xa8>
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	2201      	movs	r2, #1
 8001432:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001436:	68fb      	ldr	r3, [r7, #12]
 8001438:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800143c:	b2db      	uxtb	r3, r3
 800143e:	2b01      	cmp	r3, #1
 8001440:	d12f      	bne.n	80014a2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001442:	68fb      	ldr	r3, [r7, #12]
 8001444:	2202      	movs	r2, #2
 8001446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	2200      	movs	r2, #0
 800144e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	687a      	ldr	r2, [r7, #4]
 8001454:	68b9      	ldr	r1, [r7, #8]
 8001456:	68f8      	ldr	r0, [r7, #12]
 8001458:	f000 fa4a 	bl	80018f0 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001460:	223f      	movs	r2, #63	@ 0x3f
 8001462:	409a      	lsls	r2, r3
 8001464:	693b      	ldr	r3, [r7, #16]
 8001466:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	681a      	ldr	r2, [r3, #0]
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	f042 0216 	orr.w	r2, r2, #22
 8001476:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800147c:	2b00      	cmp	r3, #0
 800147e:	d007      	beq.n	8001490 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001480:	68fb      	ldr	r3, [r7, #12]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	681a      	ldr	r2, [r3, #0]
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 0208 	orr.w	r2, r2, #8
 800148e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	681a      	ldr	r2, [r3, #0]
 8001496:	68fb      	ldr	r3, [r7, #12]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f042 0201 	orr.w	r2, r2, #1
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	e005      	b.n	80014ae <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	2200      	movs	r2, #0
 80014a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80014aa:	2302      	movs	r3, #2
 80014ac:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80014ae:	7dfb      	ldrb	r3, [r7, #23]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3718      	adds	r7, #24
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bd80      	pop	{r7, pc}

080014b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b084      	sub	sp, #16
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80014c4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80014c6:	f7ff fdaf 	bl	8001028 <HAL_GetTick>
 80014ca:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d008      	beq.n	80014ea <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	2280      	movs	r2, #128	@ 0x80
 80014dc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	2200      	movs	r2, #0
 80014e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80014e6:	2301      	movs	r3, #1
 80014e8:	e052      	b.n	8001590 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	681a      	ldr	r2, [r3, #0]
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f022 0216 	bic.w	r2, r2, #22
 80014f8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	695a      	ldr	r2, [r3, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	681b      	ldr	r3, [r3, #0]
 8001504:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001508:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	2b00      	cmp	r3, #0
 8001510:	d103      	bne.n	800151a <HAL_DMA_Abort+0x62>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001516:	2b00      	cmp	r3, #0
 8001518:	d007      	beq.n	800152a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	681a      	ldr	r2, [r3, #0]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	f022 0208 	bic.w	r2, r2, #8
 8001528:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	681a      	ldr	r2, [r3, #0]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f022 0201 	bic.w	r2, r2, #1
 8001538:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800153a:	e013      	b.n	8001564 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800153c:	f7ff fd74 	bl	8001028 <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b05      	cmp	r3, #5
 8001548:	d90c      	bls.n	8001564 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	2220      	movs	r2, #32
 800154e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2203      	movs	r2, #3
 8001554:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001560:	2303      	movs	r3, #3
 8001562:	e015      	b.n	8001590 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	681b      	ldr	r3, [r3, #0]
 800156a:	f003 0301 	and.w	r3, r3, #1
 800156e:	2b00      	cmp	r3, #0
 8001570:	d1e4      	bne.n	800153c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001576:	223f      	movs	r2, #63	@ 0x3f
 8001578:	409a      	lsls	r2, r3
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	2201      	movs	r2, #1
 8001582:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2200      	movs	r2, #0
 800158a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 800158e:	2300      	movs	r3, #0
}
 8001590:	4618      	mov	r0, r3
 8001592:	3710      	adds	r7, #16
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}

08001598 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d004      	beq.n	80015b6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2280      	movs	r2, #128	@ 0x80
 80015b0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80015b2:	2301      	movs	r3, #1
 80015b4:	e00c      	b.n	80015d0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2205      	movs	r2, #5
 80015ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f022 0201 	bic.w	r2, r2, #1
 80015cc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80015ce:	2300      	movs	r3, #0
}
 80015d0:	4618      	mov	r0, r3
 80015d2:	370c      	adds	r7, #12
 80015d4:	46bd      	mov	sp, r7
 80015d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015da:	4770      	bx	lr

080015dc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b086      	sub	sp, #24
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80015e8:	4b8e      	ldr	r3, [pc, #568]	@ (8001824 <HAL_DMA_IRQHandler+0x248>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	4a8e      	ldr	r2, [pc, #568]	@ (8001828 <HAL_DMA_IRQHandler+0x24c>)
 80015ee:	fba2 2303 	umull	r2, r3, r2, r3
 80015f2:	0a9b      	lsrs	r3, r3, #10
 80015f4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80015fa:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001606:	2208      	movs	r2, #8
 8001608:	409a      	lsls	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4013      	ands	r3, r2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d01a      	beq.n	8001648 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f003 0304 	and.w	r3, r3, #4
 800161c:	2b00      	cmp	r3, #0
 800161e:	d013      	beq.n	8001648 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	681a      	ldr	r2, [r3, #0]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f022 0204 	bic.w	r2, r2, #4
 800162e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001634:	2208      	movs	r2, #8
 8001636:	409a      	lsls	r2, r3
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001640:	f043 0201 	orr.w	r2, r3, #1
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800164c:	2201      	movs	r2, #1
 800164e:	409a      	lsls	r2, r3
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	4013      	ands	r3, r2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d012      	beq.n	800167e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	695b      	ldr	r3, [r3, #20]
 800165e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001662:	2b00      	cmp	r3, #0
 8001664:	d00b      	beq.n	800167e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800166a:	2201      	movs	r2, #1
 800166c:	409a      	lsls	r2, r3
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001676:	f043 0202 	orr.w	r2, r3, #2
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001682:	2204      	movs	r2, #4
 8001684:	409a      	lsls	r2, r3
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d012      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f003 0302 	and.w	r3, r3, #2
 8001698:	2b00      	cmp	r3, #0
 800169a:	d00b      	beq.n	80016b4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016a0:	2204      	movs	r2, #4
 80016a2:	409a      	lsls	r2, r3
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80016ac:	f043 0204 	orr.w	r2, r3, #4
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016b8:	2210      	movs	r2, #16
 80016ba:	409a      	lsls	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4013      	ands	r3, r2
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d043      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f003 0308 	and.w	r3, r3, #8
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d03c      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80016d6:	2210      	movs	r2, #16
 80016d8:	409a      	lsls	r2, r3
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d018      	beq.n	800171e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d108      	bne.n	800170c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d024      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001706:	6878      	ldr	r0, [r7, #4]
 8001708:	4798      	blx	r3
 800170a:	e01f      	b.n	800174c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001710:	2b00      	cmp	r3, #0
 8001712:	d01b      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	4798      	blx	r3
 800171c:	e016      	b.n	800174c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001728:	2b00      	cmp	r3, #0
 800172a:	d107      	bne.n	800173c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	681a      	ldr	r2, [r3, #0]
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f022 0208 	bic.w	r2, r2, #8
 800173a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001740:	2b00      	cmp	r3, #0
 8001742:	d003      	beq.n	800174c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001748:	6878      	ldr	r0, [r7, #4]
 800174a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001750:	2220      	movs	r2, #32
 8001752:	409a      	lsls	r2, r3
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	4013      	ands	r3, r2
 8001758:	2b00      	cmp	r3, #0
 800175a:	f000 808f 	beq.w	800187c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f003 0310 	and.w	r3, r3, #16
 8001768:	2b00      	cmp	r3, #0
 800176a:	f000 8087 	beq.w	800187c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001772:	2220      	movs	r2, #32
 8001774:	409a      	lsls	r2, r3
 8001776:	693b      	ldr	r3, [r7, #16]
 8001778:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001780:	b2db      	uxtb	r3, r3
 8001782:	2b05      	cmp	r3, #5
 8001784:	d136      	bne.n	80017f4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	681a      	ldr	r2, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	f022 0216 	bic.w	r2, r2, #22
 8001794:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	695a      	ldr	r2, [r3, #20]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80017a4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017aa:	2b00      	cmp	r3, #0
 80017ac:	d103      	bne.n	80017b6 <HAL_DMA_IRQHandler+0x1da>
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d007      	beq.n	80017c6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	681a      	ldr	r2, [r3, #0]
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	f022 0208 	bic.w	r2, r2, #8
 80017c4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ca:	223f      	movs	r2, #63	@ 0x3f
 80017cc:	409a      	lsls	r2, r3
 80017ce:	693b      	ldr	r3, [r7, #16]
 80017d0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2201      	movs	r2, #1
 80017d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2200      	movs	r2, #0
 80017de:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d07e      	beq.n	80018e8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80017ee:	6878      	ldr	r0, [r7, #4]
 80017f0:	4798      	blx	r3
        }
        return;
 80017f2:	e079      	b.n	80018e8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80017fe:	2b00      	cmp	r3, #0
 8001800:	d01d      	beq.n	800183e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800180c:	2b00      	cmp	r3, #0
 800180e:	d10d      	bne.n	800182c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001814:	2b00      	cmp	r3, #0
 8001816:	d031      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800181c:	6878      	ldr	r0, [r7, #4]
 800181e:	4798      	blx	r3
 8001820:	e02c      	b.n	800187c <HAL_DMA_IRQHandler+0x2a0>
 8001822:	bf00      	nop
 8001824:	20000008 	.word	0x20000008
 8001828:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001830:	2b00      	cmp	r3, #0
 8001832:	d023      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	6878      	ldr	r0, [r7, #4]
 800183a:	4798      	blx	r3
 800183c:	e01e      	b.n	800187c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001848:	2b00      	cmp	r3, #0
 800184a:	d10f      	bne.n	800186c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	681a      	ldr	r2, [r3, #0]
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f022 0210 	bic.w	r2, r2, #16
 800185a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	2201      	movs	r2, #1
 8001860:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	2200      	movs	r2, #0
 8001868:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001880:	2b00      	cmp	r3, #0
 8001882:	d032      	beq.n	80018ea <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8001888:	f003 0301 	and.w	r3, r3, #1
 800188c:	2b00      	cmp	r3, #0
 800188e:	d022      	beq.n	80018d6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	2205      	movs	r2, #5
 8001894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681a      	ldr	r2, [r3, #0]
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f022 0201 	bic.w	r2, r2, #1
 80018a6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80018a8:	68bb      	ldr	r3, [r7, #8]
 80018aa:	3301      	adds	r3, #1
 80018ac:	60bb      	str	r3, [r7, #8]
 80018ae:	697a      	ldr	r2, [r7, #20]
 80018b0:	429a      	cmp	r2, r3
 80018b2:	d307      	bcc.n	80018c4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 0301 	and.w	r3, r3, #1
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1f2      	bne.n	80018a8 <HAL_DMA_IRQHandler+0x2cc>
 80018c2:	e000      	b.n	80018c6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80018c4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	2201      	movs	r2, #1
 80018ca:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	2200      	movs	r2, #0
 80018d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d005      	beq.n	80018ea <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	4798      	blx	r3
 80018e6:	e000      	b.n	80018ea <HAL_DMA_IRQHandler+0x30e>
        return;
 80018e8:	bf00      	nop
    }
  }
}
 80018ea:	3718      	adds	r7, #24
 80018ec:	46bd      	mov	sp, r7
 80018ee:	bd80      	pop	{r7, pc}

080018f0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b085      	sub	sp, #20
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
 80018fc:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681a      	ldr	r2, [r3, #0]
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800190c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	683a      	ldr	r2, [r7, #0]
 8001914:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	689b      	ldr	r3, [r3, #8]
 800191a:	2b40      	cmp	r3, #64	@ 0x40
 800191c:	d108      	bne.n	8001930 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	687a      	ldr	r2, [r7, #4]
 8001924:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800192e:	e007      	b.n	8001940 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	68ba      	ldr	r2, [r7, #8]
 8001936:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	687a      	ldr	r2, [r7, #4]
 800193e:	60da      	str	r2, [r3, #12]
}
 8001940:	bf00      	nop
 8001942:	3714      	adds	r7, #20
 8001944:	46bd      	mov	sp, r7
 8001946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800194a:	4770      	bx	lr

0800194c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800194c:	b480      	push	{r7}
 800194e:	b085      	sub	sp, #20
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	b2db      	uxtb	r3, r3
 800195a:	3b10      	subs	r3, #16
 800195c:	4a14      	ldr	r2, [pc, #80]	@ (80019b0 <DMA_CalcBaseAndBitshift+0x64>)
 800195e:	fba2 2303 	umull	r2, r3, r2, r3
 8001962:	091b      	lsrs	r3, r3, #4
 8001964:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001966:	4a13      	ldr	r2, [pc, #76]	@ (80019b4 <DMA_CalcBaseAndBitshift+0x68>)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	4413      	add	r3, r2
 800196c:	781b      	ldrb	r3, [r3, #0]
 800196e:	461a      	mov	r2, r3
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8001974:	68fb      	ldr	r3, [r7, #12]
 8001976:	2b03      	cmp	r3, #3
 8001978:	d909      	bls.n	800198e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001982:	f023 0303 	bic.w	r3, r3, #3
 8001986:	1d1a      	adds	r2, r3, #4
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	659a      	str	r2, [r3, #88]	@ 0x58
 800198c:	e007      	b.n	800199e <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8001996:	f023 0303 	bic.w	r3, r3, #3
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3714      	adds	r7, #20
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	aaaaaaab 	.word	0xaaaaaaab
 80019b4:	0800ac90 	.word	0x0800ac90

080019b8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80019b8:	b480      	push	{r7}
 80019ba:	b085      	sub	sp, #20
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80019c0:	2300      	movs	r3, #0
 80019c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	699b      	ldr	r3, [r3, #24]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d11f      	bne.n	8001a12 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	2b03      	cmp	r3, #3
 80019d6:	d856      	bhi.n	8001a86 <DMA_CheckFifoParam+0xce>
 80019d8:	a201      	add	r2, pc, #4	@ (adr r2, 80019e0 <DMA_CheckFifoParam+0x28>)
 80019da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019de:	bf00      	nop
 80019e0:	080019f1 	.word	0x080019f1
 80019e4:	08001a03 	.word	0x08001a03
 80019e8:	080019f1 	.word	0x080019f1
 80019ec:	08001a87 	.word	0x08001a87
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019f4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d046      	beq.n	8001a8a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a00:	e043      	b.n	8001a8a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a06:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a0a:	d140      	bne.n	8001a8e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a10:	e03d      	b.n	8001a8e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	699b      	ldr	r3, [r3, #24]
 8001a16:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001a1a:	d121      	bne.n	8001a60 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	2b03      	cmp	r3, #3
 8001a20:	d837      	bhi.n	8001a92 <DMA_CheckFifoParam+0xda>
 8001a22:	a201      	add	r2, pc, #4	@ (adr r2, 8001a28 <DMA_CheckFifoParam+0x70>)
 8001a24:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a28:	08001a39 	.word	0x08001a39
 8001a2c:	08001a3f 	.word	0x08001a3f
 8001a30:	08001a39 	.word	0x08001a39
 8001a34:	08001a51 	.word	0x08001a51
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001a38:	2301      	movs	r3, #1
 8001a3a:	73fb      	strb	r3, [r7, #15]
      break;
 8001a3c:	e030      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d025      	beq.n	8001a96 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001a4e:	e022      	b.n	8001a96 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a54:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8001a58:	d11f      	bne.n	8001a9a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001a5e:	e01c      	b.n	8001a9a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	2b02      	cmp	r3, #2
 8001a64:	d903      	bls.n	8001a6e <DMA_CheckFifoParam+0xb6>
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	2b03      	cmp	r3, #3
 8001a6a:	d003      	beq.n	8001a74 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001a6c:	e018      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001a6e:	2301      	movs	r3, #1
 8001a70:	73fb      	strb	r3, [r7, #15]
      break;
 8001a72:	e015      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001a78:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d00e      	beq.n	8001a9e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001a80:	2301      	movs	r3, #1
 8001a82:	73fb      	strb	r3, [r7, #15]
      break;
 8001a84:	e00b      	b.n	8001a9e <DMA_CheckFifoParam+0xe6>
      break;
 8001a86:	bf00      	nop
 8001a88:	e00a      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8a:	bf00      	nop
 8001a8c:	e008      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a8e:	bf00      	nop
 8001a90:	e006      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a92:	bf00      	nop
 8001a94:	e004      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a96:	bf00      	nop
 8001a98:	e002      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;   
 8001a9a:	bf00      	nop
 8001a9c:	e000      	b.n	8001aa0 <DMA_CheckFifoParam+0xe8>
      break;
 8001a9e:	bf00      	nop
    }
  } 
  
  return status; 
 8001aa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop

08001ab0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b089      	sub	sp, #36	@ 0x24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001aba:	2300      	movs	r3, #0
 8001abc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ac6:	2300      	movs	r3, #0
 8001ac8:	61fb      	str	r3, [r7, #28]
 8001aca:	e16b      	b.n	8001da4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001acc:	2201      	movs	r2, #1
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad6:	683b      	ldr	r3, [r7, #0]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	697a      	ldr	r2, [r7, #20]
 8001adc:	4013      	ands	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ae0:	693a      	ldr	r2, [r7, #16]
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	f040 815a 	bne.w	8001d9e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001aea:	683b      	ldr	r3, [r7, #0]
 8001aec:	685b      	ldr	r3, [r3, #4]
 8001aee:	f003 0303 	and.w	r3, r3, #3
 8001af2:	2b01      	cmp	r3, #1
 8001af4:	d005      	beq.n	8001b02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d130      	bne.n	8001b64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	689b      	ldr	r3, [r3, #8]
 8001b06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b08:	69fb      	ldr	r3, [r7, #28]
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	2203      	movs	r2, #3
 8001b0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b12:	43db      	mvns	r3, r3
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	4013      	ands	r3, r2
 8001b18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001b1a:	683b      	ldr	r3, [r7, #0]
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	69fb      	ldr	r3, [r7, #28]
 8001b20:	005b      	lsls	r3, r3, #1
 8001b22:	fa02 f303 	lsl.w	r3, r2, r3
 8001b26:	69ba      	ldr	r2, [r7, #24]
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	69ba      	ldr	r2, [r7, #24]
 8001b30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001b38:	2201      	movs	r2, #1
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	685b      	ldr	r3, [r3, #4]
 8001b4c:	091b      	lsrs	r3, r3, #4
 8001b4e:	f003 0201 	and.w	r2, r3, #1
 8001b52:	69fb      	ldr	r3, [r7, #28]
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	69ba      	ldr	r2, [r7, #24]
 8001b62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 0303 	and.w	r3, r3, #3
 8001b6c:	2b03      	cmp	r3, #3
 8001b6e:	d017      	beq.n	8001ba0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	68db      	ldr	r3, [r3, #12]
 8001b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b76:	69fb      	ldr	r3, [r7, #28]
 8001b78:	005b      	lsls	r3, r3, #1
 8001b7a:	2203      	movs	r2, #3
 8001b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b80:	43db      	mvns	r3, r3
 8001b82:	69ba      	ldr	r2, [r7, #24]
 8001b84:	4013      	ands	r3, r2
 8001b86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	689a      	ldr	r2, [r3, #8]
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f003 0303 	and.w	r3, r3, #3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d123      	bne.n	8001bf4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001bac:	69fb      	ldr	r3, [r7, #28]
 8001bae:	08da      	lsrs	r2, r3, #3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	3208      	adds	r2, #8
 8001bb4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001bb8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001bba:	69fb      	ldr	r3, [r7, #28]
 8001bbc:	f003 0307 	and.w	r3, r3, #7
 8001bc0:	009b      	lsls	r3, r3, #2
 8001bc2:	220f      	movs	r2, #15
 8001bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc8:	43db      	mvns	r3, r3
 8001bca:	69ba      	ldr	r2, [r7, #24]
 8001bcc:	4013      	ands	r3, r2
 8001bce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	691a      	ldr	r2, [r3, #16]
 8001bd4:	69fb      	ldr	r3, [r7, #28]
 8001bd6:	f003 0307 	and.w	r3, r3, #7
 8001bda:	009b      	lsls	r3, r3, #2
 8001bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001be0:	69ba      	ldr	r2, [r7, #24]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	08da      	lsrs	r2, r3, #3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3208      	adds	r2, #8
 8001bee:	69b9      	ldr	r1, [r7, #24]
 8001bf0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	2203      	movs	r2, #3
 8001c00:	fa02 f303 	lsl.w	r3, r2, r3
 8001c04:	43db      	mvns	r3, r3
 8001c06:	69ba      	ldr	r2, [r7, #24]
 8001c08:	4013      	ands	r3, r2
 8001c0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c0c:	683b      	ldr	r3, [r7, #0]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	f003 0203 	and.w	r2, r3, #3
 8001c14:	69fb      	ldr	r3, [r7, #28]
 8001c16:	005b      	lsls	r3, r3, #1
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	69ba      	ldr	r2, [r7, #24]
 8001c1e:	4313      	orrs	r3, r2
 8001c20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	f000 80b4 	beq.w	8001d9e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c36:	2300      	movs	r3, #0
 8001c38:	60fb      	str	r3, [r7, #12]
 8001c3a:	4b60      	ldr	r3, [pc, #384]	@ (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c3c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c3e:	4a5f      	ldr	r2, [pc, #380]	@ (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c40:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001c44:	6453      	str	r3, [r2, #68]	@ 0x44
 8001c46:	4b5d      	ldr	r3, [pc, #372]	@ (8001dbc <HAL_GPIO_Init+0x30c>)
 8001c48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001c4a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001c4e:	60fb      	str	r3, [r7, #12]
 8001c50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001c52:	4a5b      	ldr	r2, [pc, #364]	@ (8001dc0 <HAL_GPIO_Init+0x310>)
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	089b      	lsrs	r3, r3, #2
 8001c58:	3302      	adds	r3, #2
 8001c5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	f003 0303 	and.w	r3, r3, #3
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	220f      	movs	r2, #15
 8001c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c6e:	43db      	mvns	r3, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4013      	ands	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	4a52      	ldr	r2, [pc, #328]	@ (8001dc4 <HAL_GPIO_Init+0x314>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d02b      	beq.n	8001cd6 <HAL_GPIO_Init+0x226>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4a51      	ldr	r2, [pc, #324]	@ (8001dc8 <HAL_GPIO_Init+0x318>)
 8001c82:	4293      	cmp	r3, r2
 8001c84:	d025      	beq.n	8001cd2 <HAL_GPIO_Init+0x222>
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	4a50      	ldr	r2, [pc, #320]	@ (8001dcc <HAL_GPIO_Init+0x31c>)
 8001c8a:	4293      	cmp	r3, r2
 8001c8c:	d01f      	beq.n	8001cce <HAL_GPIO_Init+0x21e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	4a4f      	ldr	r2, [pc, #316]	@ (8001dd0 <HAL_GPIO_Init+0x320>)
 8001c92:	4293      	cmp	r3, r2
 8001c94:	d019      	beq.n	8001cca <HAL_GPIO_Init+0x21a>
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	4a4e      	ldr	r2, [pc, #312]	@ (8001dd4 <HAL_GPIO_Init+0x324>)
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d013      	beq.n	8001cc6 <HAL_GPIO_Init+0x216>
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	4a4d      	ldr	r2, [pc, #308]	@ (8001dd8 <HAL_GPIO_Init+0x328>)
 8001ca2:	4293      	cmp	r3, r2
 8001ca4:	d00d      	beq.n	8001cc2 <HAL_GPIO_Init+0x212>
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	4a4c      	ldr	r2, [pc, #304]	@ (8001ddc <HAL_GPIO_Init+0x32c>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d007      	beq.n	8001cbe <HAL_GPIO_Init+0x20e>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	4a4b      	ldr	r2, [pc, #300]	@ (8001de0 <HAL_GPIO_Init+0x330>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d101      	bne.n	8001cba <HAL_GPIO_Init+0x20a>
 8001cb6:	2307      	movs	r3, #7
 8001cb8:	e00e      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cba:	2308      	movs	r3, #8
 8001cbc:	e00c      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cbe:	2306      	movs	r3, #6
 8001cc0:	e00a      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cc2:	2305      	movs	r3, #5
 8001cc4:	e008      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cc6:	2304      	movs	r3, #4
 8001cc8:	e006      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cca:	2303      	movs	r3, #3
 8001ccc:	e004      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cce:	2302      	movs	r3, #2
 8001cd0:	e002      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e000      	b.n	8001cd8 <HAL_GPIO_Init+0x228>
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	69fa      	ldr	r2, [r7, #28]
 8001cda:	f002 0203 	and.w	r2, r2, #3
 8001cde:	0092      	lsls	r2, r2, #2
 8001ce0:	4093      	lsls	r3, r2
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4313      	orrs	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001ce8:	4935      	ldr	r1, [pc, #212]	@ (8001dc0 <HAL_GPIO_Init+0x310>)
 8001cea:	69fb      	ldr	r3, [r7, #28]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3302      	adds	r3, #2
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001cf6:	4b3b      	ldr	r3, [pc, #236]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	43db      	mvns	r3, r3
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	4013      	ands	r3, r2
 8001d04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d06:	683b      	ldr	r3, [r7, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d003      	beq.n	8001d1a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001d12:	69ba      	ldr	r2, [r7, #24]
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001d1a:	4a32      	ldr	r2, [pc, #200]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001d20:	4b30      	ldr	r3, [pc, #192]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d22:	68db      	ldr	r3, [r3, #12]
 8001d24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d26:	693b      	ldr	r3, [r7, #16]
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d003      	beq.n	8001d44 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001d3c:	69ba      	ldr	r2, [r7, #24]
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	4313      	orrs	r3, r2
 8001d42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001d44:	4a27      	ldr	r2, [pc, #156]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001d4a:	4b26      	ldr	r3, [pc, #152]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d50:	693b      	ldr	r3, [r7, #16]
 8001d52:	43db      	mvns	r3, r3
 8001d54:	69ba      	ldr	r2, [r7, #24]
 8001d56:	4013      	ands	r3, r2
 8001d58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	685b      	ldr	r3, [r3, #4]
 8001d5e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d003      	beq.n	8001d6e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001d66:	69ba      	ldr	r2, [r7, #24]
 8001d68:	693b      	ldr	r3, [r7, #16]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001d6e:	4a1d      	ldr	r2, [pc, #116]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d70:	69bb      	ldr	r3, [r7, #24]
 8001d72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d74:	4b1b      	ldr	r3, [pc, #108]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d003      	beq.n	8001d98 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001d90:	69ba      	ldr	r2, [r7, #24]
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	4313      	orrs	r3, r2
 8001d96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d98:	4a12      	ldr	r2, [pc, #72]	@ (8001de4 <HAL_GPIO_Init+0x334>)
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d9e:	69fb      	ldr	r3, [r7, #28]
 8001da0:	3301      	adds	r3, #1
 8001da2:	61fb      	str	r3, [r7, #28]
 8001da4:	69fb      	ldr	r3, [r7, #28]
 8001da6:	2b0f      	cmp	r3, #15
 8001da8:	f67f ae90 	bls.w	8001acc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	3724      	adds	r7, #36	@ 0x24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40013800 	.word	0x40013800
 8001dc4:	40020000 	.word	0x40020000
 8001dc8:	40020400 	.word	0x40020400
 8001dcc:	40020800 	.word	0x40020800
 8001dd0:	40020c00 	.word	0x40020c00
 8001dd4:	40021000 	.word	0x40021000
 8001dd8:	40021400 	.word	0x40021400
 8001ddc:	40021800 	.word	0x40021800
 8001de0:	40021c00 	.word	0x40021c00
 8001de4:	40013c00 	.word	0x40013c00

08001de8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
 8001df0:	460b      	mov	r3, r1
 8001df2:	807b      	strh	r3, [r7, #2]
 8001df4:	4613      	mov	r3, r2
 8001df6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001df8:	787b      	ldrb	r3, [r7, #1]
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001dfe:	887a      	ldrh	r2, [r7, #2]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e04:	e003      	b.n	8001e0e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e06:	887b      	ldrh	r3, [r7, #2]
 8001e08:	041a      	lsls	r2, r3, #16
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	619a      	str	r2, [r3, #24]
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b086      	sub	sp, #24
 8001e1e:	af02      	add	r7, sp, #8
 8001e20:	6078      	str	r0, [r7, #4]
#if defined (USB_OTG_FS)
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d101      	bne.n	8001e2c <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001e28:	2301      	movs	r3, #1
 8001e2a:	e059      	b.n	8001ee0 <HAL_HCD_Init+0xc6>

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hhcd->Instance;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	60fb      	str	r3, [r7, #12]
#endif /* defined (USB_OTG_FS) */

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f893 33d5 	ldrb.w	r3, [r3, #981]	@ 0x3d5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d106      	bne.n	8001e4c <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001e46:	6878      	ldr	r0, [r7, #4]
 8001e48:	f008 fb10 	bl	800a46c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	2203      	movs	r2, #3
 8001e50:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e5a:	d102      	bne.n	8001e62 <HAL_HCD_Init+0x48>
  {
    hhcd->Init.dma_enable = 0U;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	4618      	mov	r0, r3
 8001e68:	f005 f929 	bl	80070be <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  if (USB_CoreInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6818      	ldr	r0, [r3, #0]
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7c1a      	ldrb	r2, [r3, #16]
 8001e74:	f88d 2000 	strb.w	r2, [sp]
 8001e78:	3304      	adds	r3, #4
 8001e7a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001e7c:	f005 f8aa 	bl	8006fd4 <USB_CoreInit>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d005      	beq.n	8001e92 <HAL_HCD_Init+0x78>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	2202      	movs	r2, #2
 8001e8a:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001e8e:	2301      	movs	r3, #1
 8001e90:	e026      	b.n	8001ee0 <HAL_HCD_Init+0xc6>
  }

  /* Force Host Mode */
  if (USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE) != HAL_OK)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	2101      	movs	r1, #1
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f005 f921 	bl	80070e0 <USB_SetCurrentMode>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d005      	beq.n	8001eb0 <HAL_HCD_Init+0x96>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001eac:	2301      	movs	r3, #1
 8001eae:	e017      	b.n	8001ee0 <HAL_HCD_Init+0xc6>
  }

  /* Init Host */
  if (USB_HostInit(hhcd->Instance, hhcd->Init) != HAL_OK)
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	6818      	ldr	r0, [r3, #0]
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	7c1a      	ldrb	r2, [r3, #16]
 8001eb8:	f88d 2000 	strb.w	r2, [sp]
 8001ebc:	3304      	adds	r3, #4
 8001ebe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ec0:	f005 fac4 	bl	800744c <USB_HostInit>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d005      	beq.n	8001ed6 <HAL_HCD_Init+0xbc>
  {
    hhcd->State = HAL_HCD_STATE_ERROR;
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2202      	movs	r2, #2
 8001ece:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5
    return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e004      	b.n	8001ee0 <HAL_HCD_Init+0xc6>
  }

  hhcd->State = HAL_HCD_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 23d5 	strb.w	r2, [r3, #981]	@ 0x3d5

  return HAL_OK;
 8001ede:	2300      	movs	r3, #0
}
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	3710      	adds	r7, #16
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	bd80      	pop	{r7, pc}

08001ee8 <HAL_HCD_HC_Init>:
  *          This parameter can be a value from 0 to32K
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Init(HCD_HandleTypeDef *hhcd, uint8_t ch_num, uint8_t epnum,
                                  uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8001ee8:	b590      	push	{r4, r7, lr}
 8001eea:	b08b      	sub	sp, #44	@ 0x2c
 8001eec:	af04      	add	r7, sp, #16
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	4608      	mov	r0, r1
 8001ef2:	4611      	mov	r1, r2
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4603      	mov	r3, r0
 8001ef8:	70fb      	strb	r3, [r7, #3]
 8001efa:	460b      	mov	r3, r1
 8001efc:	70bb      	strb	r3, [r7, #2]
 8001efe:	4613      	mov	r3, r2
 8001f00:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;
  uint32_t HostCoreSpeed;
  uint32_t HCcharMps = mps;
 8001f02:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8001f04:	617b      	str	r3, [r7, #20]

  __HAL_LOCK(hhcd);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <HAL_HCD_HC_Init+0x2c>
 8001f10:	2302      	movs	r3, #2
 8001f12:	e09d      	b.n	8002050 <HAL_HCD_HC_Init+0x168>
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	2201      	movs	r2, #1
 8001f18:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  hhcd->hc[ch_num].do_ping = 0U;
 8001f1c:	78fa      	ldrb	r2, [r7, #3]
 8001f1e:	6879      	ldr	r1, [r7, #4]
 8001f20:	4613      	mov	r3, r2
 8001f22:	011b      	lsls	r3, r3, #4
 8001f24:	1a9b      	subs	r3, r3, r2
 8001f26:	009b      	lsls	r3, r3, #2
 8001f28:	440b      	add	r3, r1
 8001f2a:	3319      	adds	r3, #25
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001f30:	78fa      	ldrb	r2, [r7, #3]
 8001f32:	6879      	ldr	r1, [r7, #4]
 8001f34:	4613      	mov	r3, r2
 8001f36:	011b      	lsls	r3, r3, #4
 8001f38:	1a9b      	subs	r3, r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	440b      	add	r3, r1
 8001f3e:	3314      	adds	r3, #20
 8001f40:	787a      	ldrb	r2, [r7, #1]
 8001f42:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001f44:	78fa      	ldrb	r2, [r7, #3]
 8001f46:	6879      	ldr	r1, [r7, #4]
 8001f48:	4613      	mov	r3, r2
 8001f4a:	011b      	lsls	r3, r3, #4
 8001f4c:	1a9b      	subs	r3, r3, r2
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	440b      	add	r3, r1
 8001f52:	3315      	adds	r3, #21
 8001f54:	78fa      	ldrb	r2, [r7, #3]
 8001f56:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001f58:	78fa      	ldrb	r2, [r7, #3]
 8001f5a:	6879      	ldr	r1, [r7, #4]
 8001f5c:	4613      	mov	r3, r2
 8001f5e:	011b      	lsls	r3, r3, #4
 8001f60:	1a9b      	subs	r3, r3, r2
 8001f62:	009b      	lsls	r3, r3, #2
 8001f64:	440b      	add	r3, r1
 8001f66:	3326      	adds	r3, #38	@ 0x26
 8001f68:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8001f6c:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001f6e:	78fa      	ldrb	r2, [r7, #3]
 8001f70:	78bb      	ldrb	r3, [r7, #2]
 8001f72:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001f76:	b2d8      	uxtb	r0, r3
 8001f78:	6879      	ldr	r1, [r7, #4]
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	011b      	lsls	r3, r3, #4
 8001f7e:	1a9b      	subs	r3, r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	3316      	adds	r3, #22
 8001f86:	4602      	mov	r2, r0
 8001f88:	701a      	strb	r2, [r3, #0]

  (void)HAL_HCD_HC_ClearHubInfo(hhcd, ch_num);
 8001f8a:	78fb      	ldrb	r3, [r7, #3]
 8001f8c:	4619      	mov	r1, r3
 8001f8e:	6878      	ldr	r0, [r7, #4]
 8001f90:	f000 fbc8 	bl	8002724 <HAL_HCD_HC_ClearHubInfo>

  if ((epnum & 0x80U) == 0x80U)
 8001f94:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	da0a      	bge.n	8001fb2 <HAL_HCD_HC_Init+0xca>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001f9c:	78fa      	ldrb	r2, [r7, #3]
 8001f9e:	6879      	ldr	r1, [r7, #4]
 8001fa0:	4613      	mov	r3, r2
 8001fa2:	011b      	lsls	r3, r3, #4
 8001fa4:	1a9b      	subs	r3, r3, r2
 8001fa6:	009b      	lsls	r3, r3, #2
 8001fa8:	440b      	add	r3, r1
 8001faa:	3317      	adds	r3, #23
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
 8001fb0:	e009      	b.n	8001fc6 <HAL_HCD_HC_Init+0xde>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001fb2:	78fa      	ldrb	r2, [r7, #3]
 8001fb4:	6879      	ldr	r1, [r7, #4]
 8001fb6:	4613      	mov	r3, r2
 8001fb8:	011b      	lsls	r3, r3, #4
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	009b      	lsls	r3, r3, #2
 8001fbe:	440b      	add	r3, r1
 8001fc0:	3317      	adds	r3, #23
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	701a      	strb	r2, [r3, #0]
  }

  HostCoreSpeed = USB_GetHostSpeed(hhcd->Instance);
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f005 fba2 	bl	8007714 <USB_GetHostSpeed>
 8001fd0:	6138      	str	r0, [r7, #16]

  if (ep_type == EP_TYPE_ISOC)
 8001fd2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d10b      	bne.n	8001ff2 <HAL_HCD_HC_Init+0x10a>
  {
    /* FS device plugged to HS HUB */
    if ((speed == HCD_DEVICE_SPEED_FULL) && (HostCoreSpeed == HPRT0_PRTSPD_HIGH_SPEED))
 8001fda:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001fde:	2b01      	cmp	r3, #1
 8001fe0:	d107      	bne.n	8001ff2 <HAL_HCD_HC_Init+0x10a>
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d104      	bne.n	8001ff2 <HAL_HCD_HC_Init+0x10a>
    {
      if (HCcharMps > ISO_SPLT_MPS)
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	2bbc      	cmp	r3, #188	@ 0xbc
 8001fec:	d901      	bls.n	8001ff2 <HAL_HCD_HC_Init+0x10a>
      {
        /* ISO Max Packet Size for Split mode */
        HCcharMps = ISO_SPLT_MPS;
 8001fee:	23bc      	movs	r3, #188	@ 0xbc
 8001ff0:	617b      	str	r3, [r7, #20]
      }
    }
  }

  hhcd->hc[ch_num].speed = speed;
 8001ff2:	78fa      	ldrb	r2, [r7, #3]
 8001ff4:	6879      	ldr	r1, [r7, #4]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	011b      	lsls	r3, r3, #4
 8001ffa:	1a9b      	subs	r3, r3, r2
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	440b      	add	r3, r1
 8002000:	3318      	adds	r3, #24
 8002002:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8002006:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = (uint16_t)HCcharMps;
 8002008:	78fa      	ldrb	r2, [r7, #3]
 800200a:	697b      	ldr	r3, [r7, #20]
 800200c:	b298      	uxth	r0, r3
 800200e:	6879      	ldr	r1, [r7, #4]
 8002010:	4613      	mov	r3, r2
 8002012:	011b      	lsls	r3, r3, #4
 8002014:	1a9b      	subs	r3, r3, r2
 8002016:	009b      	lsls	r3, r3, #2
 8002018:	440b      	add	r3, r1
 800201a:	3328      	adds	r3, #40	@ 0x28
 800201c:	4602      	mov	r2, r0
 800201e:	801a      	strh	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance, ch_num, epnum,
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6818      	ldr	r0, [r3, #0]
 8002024:	697b      	ldr	r3, [r7, #20]
 8002026:	b29b      	uxth	r3, r3
 8002028:	787c      	ldrb	r4, [r7, #1]
 800202a:	78ba      	ldrb	r2, [r7, #2]
 800202c:	78f9      	ldrb	r1, [r7, #3]
 800202e:	9302      	str	r3, [sp, #8]
 8002030:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8002034:	9301      	str	r3, [sp, #4]
 8002036:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800203a:	9300      	str	r3, [sp, #0]
 800203c:	4623      	mov	r3, r4
 800203e:	f005 fb91 	bl	8007764 <USB_HC_Init>
 8002042:	4603      	mov	r3, r0
 8002044:	73fb      	strb	r3, [r7, #15]
                        dev_address, speed, ep_type, (uint16_t)HCcharMps);

  __HAL_UNLOCK(hhcd);
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	2200      	movs	r2, #0
 800204a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 800204e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002050:	4618      	mov	r0, r3
 8002052:	371c      	adds	r7, #28
 8002054:	46bd      	mov	sp, r7
 8002056:	bd90      	pop	{r4, r7, pc}

08002058 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	b084      	sub	sp, #16
 800205c:	af00      	add	r7, sp, #0
 800205e:	6078      	str	r0, [r7, #4]
 8002060:	460b      	mov	r3, r1
 8002062:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8002064:	2300      	movs	r3, #0
 8002066:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800206e:	2b01      	cmp	r3, #1
 8002070:	d101      	bne.n	8002076 <HAL_HCD_HC_Halt+0x1e>
 8002072:	2302      	movs	r3, #2
 8002074:	e00f      	b.n	8002096 <HAL_HCD_HC_Halt+0x3e>
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	2201      	movs	r2, #1
 800207a:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_HC_Halt(hhcd->Instance, ch_num);
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	78fa      	ldrb	r2, [r7, #3]
 8002084:	4611      	mov	r1, r2
 8002086:	4618      	mov	r0, r3
 8002088:	f005 ff23 	bl	8007ed2 <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return status;
 8002094:	7bfb      	ldrb	r3, [r7, #15]
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
	...

080020a0 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	4608      	mov	r0, r1
 80020aa:	4611      	mov	r1, r2
 80020ac:	461a      	mov	r2, r3
 80020ae:	4603      	mov	r3, r0
 80020b0:	70fb      	strb	r3, [r7, #3]
 80020b2:	460b      	mov	r3, r1
 80020b4:	70bb      	strb	r3, [r7, #2]
 80020b6:	4613      	mov	r3, r2
 80020b8:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 80020ba:	78fa      	ldrb	r2, [r7, #3]
 80020bc:	6879      	ldr	r1, [r7, #4]
 80020be:	4613      	mov	r3, r2
 80020c0:	011b      	lsls	r3, r3, #4
 80020c2:	1a9b      	subs	r3, r3, r2
 80020c4:	009b      	lsls	r3, r3, #2
 80020c6:	440b      	add	r3, r1
 80020c8:	3317      	adds	r3, #23
 80020ca:	78ba      	ldrb	r2, [r7, #2]
 80020cc:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 80020ce:	78fa      	ldrb	r2, [r7, #3]
 80020d0:	6879      	ldr	r1, [r7, #4]
 80020d2:	4613      	mov	r3, r2
 80020d4:	011b      	lsls	r3, r3, #4
 80020d6:	1a9b      	subs	r3, r3, r2
 80020d8:	009b      	lsls	r3, r3, #2
 80020da:	440b      	add	r3, r1
 80020dc:	3326      	adds	r3, #38	@ 0x26
 80020de:	787a      	ldrb	r2, [r7, #1]
 80020e0:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 80020e2:	7c3b      	ldrb	r3, [r7, #16]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d114      	bne.n	8002112 <HAL_HCD_HC_SubmitRequest+0x72>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 80020e8:	78fa      	ldrb	r2, [r7, #3]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	011b      	lsls	r3, r3, #4
 80020f0:	1a9b      	subs	r3, r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	332a      	adds	r3, #42	@ 0x2a
 80020f8:	2203      	movs	r2, #3
 80020fa:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 80020fc:	78fa      	ldrb	r2, [r7, #3]
 80020fe:	6879      	ldr	r1, [r7, #4]
 8002100:	4613      	mov	r3, r2
 8002102:	011b      	lsls	r3, r3, #4
 8002104:	1a9b      	subs	r3, r3, r2
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	3319      	adds	r3, #25
 800210c:	7f3a      	ldrb	r2, [r7, #28]
 800210e:	701a      	strb	r2, [r3, #0]
 8002110:	e009      	b.n	8002126 <HAL_HCD_HC_SubmitRequest+0x86>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002112:	78fa      	ldrb	r2, [r7, #3]
 8002114:	6879      	ldr	r1, [r7, #4]
 8002116:	4613      	mov	r3, r2
 8002118:	011b      	lsls	r3, r3, #4
 800211a:	1a9b      	subs	r3, r3, r2
 800211c:	009b      	lsls	r3, r3, #2
 800211e:	440b      	add	r3, r1
 8002120:	332a      	adds	r3, #42	@ 0x2a
 8002122:	2202      	movs	r2, #2
 8002124:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8002126:	787b      	ldrb	r3, [r7, #1]
 8002128:	2b03      	cmp	r3, #3
 800212a:	f200 8102 	bhi.w	8002332 <HAL_HCD_HC_SubmitRequest+0x292>
 800212e:	a201      	add	r2, pc, #4	@ (adr r2, 8002134 <HAL_HCD_HC_SubmitRequest+0x94>)
 8002130:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002134:	08002145 	.word	0x08002145
 8002138:	0800231d 	.word	0x0800231d
 800213c:	08002209 	.word	0x08002209
 8002140:	08002293 	.word	0x08002293
  {
    case EP_TYPE_CTRL:
      if (token == 1U) /* send data */
 8002144:	7c3b      	ldrb	r3, [r7, #16]
 8002146:	2b01      	cmp	r3, #1
 8002148:	f040 80f5 	bne.w	8002336 <HAL_HCD_HC_SubmitRequest+0x296>
      {
        if (direction == 0U)
 800214c:	78bb      	ldrb	r3, [r7, #2]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d12d      	bne.n	80021ae <HAL_HCD_HC_SubmitRequest+0x10e>
        {
          if (length == 0U)
 8002152:	8b3b      	ldrh	r3, [r7, #24]
 8002154:	2b00      	cmp	r3, #0
 8002156:	d109      	bne.n	800216c <HAL_HCD_HC_SubmitRequest+0xcc>
          {
            /* For Status OUT stage, Length == 0U, Status Out PID = 1 */
            hhcd->hc[ch_num].toggle_out = 1U;
 8002158:	78fa      	ldrb	r2, [r7, #3]
 800215a:	6879      	ldr	r1, [r7, #4]
 800215c:	4613      	mov	r3, r2
 800215e:	011b      	lsls	r3, r3, #4
 8002160:	1a9b      	subs	r3, r3, r2
 8002162:	009b      	lsls	r3, r3, #2
 8002164:	440b      	add	r3, r1
 8002166:	333d      	adds	r3, #61	@ 0x3d
 8002168:	2201      	movs	r2, #1
 800216a:	701a      	strb	r2, [r3, #0]
          }

          /* Set the Data Toggle bit as per the Flag */
          if (hhcd->hc[ch_num].toggle_out == 0U)
 800216c:	78fa      	ldrb	r2, [r7, #3]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	011b      	lsls	r3, r3, #4
 8002174:	1a9b      	subs	r3, r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	333d      	adds	r3, #61	@ 0x3d
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d10a      	bne.n	8002198 <HAL_HCD_HC_SubmitRequest+0xf8>
          {
            /* Put the PID 0 */
            hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002182:	78fa      	ldrb	r2, [r7, #3]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	011b      	lsls	r3, r3, #4
 800218a:	1a9b      	subs	r3, r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	332a      	adds	r3, #42	@ 0x2a
 8002192:	2200      	movs	r2, #0
 8002194:	701a      	strb	r2, [r3, #0]
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
            }
          }
        }
      }
      break;
 8002196:	e0ce      	b.n	8002336 <HAL_HCD_HC_SubmitRequest+0x296>
            hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002198:	78fa      	ldrb	r2, [r7, #3]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	011b      	lsls	r3, r3, #4
 80021a0:	1a9b      	subs	r3, r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	332a      	adds	r3, #42	@ 0x2a
 80021a8:	2202      	movs	r2, #2
 80021aa:	701a      	strb	r2, [r3, #0]
      break;
 80021ac:	e0c3      	b.n	8002336 <HAL_HCD_HC_SubmitRequest+0x296>
          if (hhcd->hc[ch_num].do_ssplit == 1U)
 80021ae:	78fa      	ldrb	r2, [r7, #3]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	011b      	lsls	r3, r3, #4
 80021b6:	1a9b      	subs	r3, r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	331a      	adds	r3, #26
 80021be:	781b      	ldrb	r3, [r3, #0]
 80021c0:	2b01      	cmp	r3, #1
 80021c2:	f040 80b8 	bne.w	8002336 <HAL_HCD_HC_SubmitRequest+0x296>
            if (hhcd->hc[ch_num].toggle_in == 0U)
 80021c6:	78fa      	ldrb	r2, [r7, #3]
 80021c8:	6879      	ldr	r1, [r7, #4]
 80021ca:	4613      	mov	r3, r2
 80021cc:	011b      	lsls	r3, r3, #4
 80021ce:	1a9b      	subs	r3, r3, r2
 80021d0:	009b      	lsls	r3, r3, #2
 80021d2:	440b      	add	r3, r1
 80021d4:	333c      	adds	r3, #60	@ 0x3c
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d10a      	bne.n	80021f2 <HAL_HCD_HC_SubmitRequest+0x152>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80021dc:	78fa      	ldrb	r2, [r7, #3]
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	4613      	mov	r3, r2
 80021e2:	011b      	lsls	r3, r3, #4
 80021e4:	1a9b      	subs	r3, r3, r2
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	440b      	add	r3, r1
 80021ea:	332a      	adds	r3, #42	@ 0x2a
 80021ec:	2200      	movs	r2, #0
 80021ee:	701a      	strb	r2, [r3, #0]
      break;
 80021f0:	e0a1      	b.n	8002336 <HAL_HCD_HC_SubmitRequest+0x296>
              hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80021f2:	78fa      	ldrb	r2, [r7, #3]
 80021f4:	6879      	ldr	r1, [r7, #4]
 80021f6:	4613      	mov	r3, r2
 80021f8:	011b      	lsls	r3, r3, #4
 80021fa:	1a9b      	subs	r3, r3, r2
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	440b      	add	r3, r1
 8002200:	332a      	adds	r3, #42	@ 0x2a
 8002202:	2202      	movs	r2, #2
 8002204:	701a      	strb	r2, [r3, #0]
      break;
 8002206:	e096      	b.n	8002336 <HAL_HCD_HC_SubmitRequest+0x296>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8002208:	78bb      	ldrb	r3, [r7, #2]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d120      	bne.n	8002250 <HAL_HCD_HC_SubmitRequest+0x1b0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 800220e:	78fa      	ldrb	r2, [r7, #3]
 8002210:	6879      	ldr	r1, [r7, #4]
 8002212:	4613      	mov	r3, r2
 8002214:	011b      	lsls	r3, r3, #4
 8002216:	1a9b      	subs	r3, r3, r2
 8002218:	009b      	lsls	r3, r3, #2
 800221a:	440b      	add	r3, r1
 800221c:	333d      	adds	r3, #61	@ 0x3d
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d10a      	bne.n	800223a <HAL_HCD_HC_SubmitRequest+0x19a>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002224:	78fa      	ldrb	r2, [r7, #3]
 8002226:	6879      	ldr	r1, [r7, #4]
 8002228:	4613      	mov	r3, r2
 800222a:	011b      	lsls	r3, r3, #4
 800222c:	1a9b      	subs	r3, r3, r2
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	440b      	add	r3, r1
 8002232:	332a      	adds	r3, #42	@ 0x2a
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8002238:	e07e      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800223a:	78fa      	ldrb	r2, [r7, #3]
 800223c:	6879      	ldr	r1, [r7, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	011b      	lsls	r3, r3, #4
 8002242:	1a9b      	subs	r3, r3, r2
 8002244:	009b      	lsls	r3, r3, #2
 8002246:	440b      	add	r3, r1
 8002248:	332a      	adds	r3, #42	@ 0x2a
 800224a:	2202      	movs	r2, #2
 800224c:	701a      	strb	r2, [r3, #0]
      break;
 800224e:	e073      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8002250:	78fa      	ldrb	r2, [r7, #3]
 8002252:	6879      	ldr	r1, [r7, #4]
 8002254:	4613      	mov	r3, r2
 8002256:	011b      	lsls	r3, r3, #4
 8002258:	1a9b      	subs	r3, r3, r2
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	440b      	add	r3, r1
 800225e:	333c      	adds	r3, #60	@ 0x3c
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d10a      	bne.n	800227c <HAL_HCD_HC_SubmitRequest+0x1dc>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002266:	78fa      	ldrb	r2, [r7, #3]
 8002268:	6879      	ldr	r1, [r7, #4]
 800226a:	4613      	mov	r3, r2
 800226c:	011b      	lsls	r3, r3, #4
 800226e:	1a9b      	subs	r3, r3, r2
 8002270:	009b      	lsls	r3, r3, #2
 8002272:	440b      	add	r3, r1
 8002274:	332a      	adds	r3, #42	@ 0x2a
 8002276:	2200      	movs	r2, #0
 8002278:	701a      	strb	r2, [r3, #0]
      break;
 800227a:	e05d      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 800227c:	78fa      	ldrb	r2, [r7, #3]
 800227e:	6879      	ldr	r1, [r7, #4]
 8002280:	4613      	mov	r3, r2
 8002282:	011b      	lsls	r3, r3, #4
 8002284:	1a9b      	subs	r3, r3, r2
 8002286:	009b      	lsls	r3, r3, #2
 8002288:	440b      	add	r3, r1
 800228a:	332a      	adds	r3, #42	@ 0x2a
 800228c:	2202      	movs	r2, #2
 800228e:	701a      	strb	r2, [r3, #0]
      break;
 8002290:	e052      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8002292:	78bb      	ldrb	r3, [r7, #2]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d120      	bne.n	80022da <HAL_HCD_HC_SubmitRequest+0x23a>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8002298:	78fa      	ldrb	r2, [r7, #3]
 800229a:	6879      	ldr	r1, [r7, #4]
 800229c:	4613      	mov	r3, r2
 800229e:	011b      	lsls	r3, r3, #4
 80022a0:	1a9b      	subs	r3, r3, r2
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	440b      	add	r3, r1
 80022a6:	333d      	adds	r3, #61	@ 0x3d
 80022a8:	781b      	ldrb	r3, [r3, #0]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10a      	bne.n	80022c4 <HAL_HCD_HC_SubmitRequest+0x224>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022ae:	78fa      	ldrb	r2, [r7, #3]
 80022b0:	6879      	ldr	r1, [r7, #4]
 80022b2:	4613      	mov	r3, r2
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	1a9b      	subs	r3, r3, r2
 80022b8:	009b      	lsls	r3, r3, #2
 80022ba:	440b      	add	r3, r1
 80022bc:	332a      	adds	r3, #42	@ 0x2a
 80022be:	2200      	movs	r2, #0
 80022c0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 80022c2:	e039      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 80022c4:	78fa      	ldrb	r2, [r7, #3]
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	4613      	mov	r3, r2
 80022ca:	011b      	lsls	r3, r3, #4
 80022cc:	1a9b      	subs	r3, r3, r2
 80022ce:	009b      	lsls	r3, r3, #2
 80022d0:	440b      	add	r3, r1
 80022d2:	332a      	adds	r3, #42	@ 0x2a
 80022d4:	2202      	movs	r2, #2
 80022d6:	701a      	strb	r2, [r3, #0]
      break;
 80022d8:	e02e      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 80022da:	78fa      	ldrb	r2, [r7, #3]
 80022dc:	6879      	ldr	r1, [r7, #4]
 80022de:	4613      	mov	r3, r2
 80022e0:	011b      	lsls	r3, r3, #4
 80022e2:	1a9b      	subs	r3, r3, r2
 80022e4:	009b      	lsls	r3, r3, #2
 80022e6:	440b      	add	r3, r1
 80022e8:	333c      	adds	r3, #60	@ 0x3c
 80022ea:	781b      	ldrb	r3, [r3, #0]
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d10a      	bne.n	8002306 <HAL_HCD_HC_SubmitRequest+0x266>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 80022f0:	78fa      	ldrb	r2, [r7, #3]
 80022f2:	6879      	ldr	r1, [r7, #4]
 80022f4:	4613      	mov	r3, r2
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	1a9b      	subs	r3, r3, r2
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	440b      	add	r3, r1
 80022fe:	332a      	adds	r3, #42	@ 0x2a
 8002300:	2200      	movs	r2, #0
 8002302:	701a      	strb	r2, [r3, #0]
      break;
 8002304:	e018      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002306:	78fa      	ldrb	r2, [r7, #3]
 8002308:	6879      	ldr	r1, [r7, #4]
 800230a:	4613      	mov	r3, r2
 800230c:	011b      	lsls	r3, r3, #4
 800230e:	1a9b      	subs	r3, r3, r2
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	440b      	add	r3, r1
 8002314:	332a      	adds	r3, #42	@ 0x2a
 8002316:	2202      	movs	r2, #2
 8002318:	701a      	strb	r2, [r3, #0]
      break;
 800231a:	e00d      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800231c:	78fa      	ldrb	r2, [r7, #3]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	4613      	mov	r3, r2
 8002322:	011b      	lsls	r3, r3, #4
 8002324:	1a9b      	subs	r3, r3, r2
 8002326:	009b      	lsls	r3, r3, #2
 8002328:	440b      	add	r3, r1
 800232a:	332a      	adds	r3, #42	@ 0x2a
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
      break;
 8002330:	e002      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>

    default:
      break;
 8002332:	bf00      	nop
 8002334:	e000      	b.n	8002338 <HAL_HCD_HC_SubmitRequest+0x298>
      break;
 8002336:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 8002338:	78fa      	ldrb	r2, [r7, #3]
 800233a:	6879      	ldr	r1, [r7, #4]
 800233c:	4613      	mov	r3, r2
 800233e:	011b      	lsls	r3, r3, #4
 8002340:	1a9b      	subs	r3, r3, r2
 8002342:	009b      	lsls	r3, r3, #2
 8002344:	440b      	add	r3, r1
 8002346:	332c      	adds	r3, #44	@ 0x2c
 8002348:	697a      	ldr	r2, [r7, #20]
 800234a:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 800234c:	78fa      	ldrb	r2, [r7, #3]
 800234e:	8b39      	ldrh	r1, [r7, #24]
 8002350:	6878      	ldr	r0, [r7, #4]
 8002352:	4613      	mov	r3, r2
 8002354:	011b      	lsls	r3, r3, #4
 8002356:	1a9b      	subs	r3, r3, r2
 8002358:	009b      	lsls	r3, r3, #2
 800235a:	4403      	add	r3, r0
 800235c:	3334      	adds	r3, #52	@ 0x34
 800235e:	6019      	str	r1, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002360:	78fa      	ldrb	r2, [r7, #3]
 8002362:	6879      	ldr	r1, [r7, #4]
 8002364:	4613      	mov	r3, r2
 8002366:	011b      	lsls	r3, r3, #4
 8002368:	1a9b      	subs	r3, r3, r2
 800236a:	009b      	lsls	r3, r3, #2
 800236c:	440b      	add	r3, r1
 800236e:	334c      	adds	r3, #76	@ 0x4c
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002374:	78fa      	ldrb	r2, [r7, #3]
 8002376:	6879      	ldr	r1, [r7, #4]
 8002378:	4613      	mov	r3, r2
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	1a9b      	subs	r3, r3, r2
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	440b      	add	r3, r1
 8002382:	3338      	adds	r3, #56	@ 0x38
 8002384:	2200      	movs	r2, #0
 8002386:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002388:	78fa      	ldrb	r2, [r7, #3]
 800238a:	6879      	ldr	r1, [r7, #4]
 800238c:	4613      	mov	r3, r2
 800238e:	011b      	lsls	r3, r3, #4
 8002390:	1a9b      	subs	r3, r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	440b      	add	r3, r1
 8002396:	3315      	adds	r3, #21
 8002398:	78fa      	ldrb	r2, [r7, #3]
 800239a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 800239c:	78fa      	ldrb	r2, [r7, #3]
 800239e:	6879      	ldr	r1, [r7, #4]
 80023a0:	4613      	mov	r3, r2
 80023a2:	011b      	lsls	r3, r3, #4
 80023a4:	1a9b      	subs	r3, r3, r2
 80023a6:	009b      	lsls	r3, r3, #2
 80023a8:	440b      	add	r3, r1
 80023aa:	334d      	adds	r3, #77	@ 0x4d
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num], (uint8_t)hhcd->Init.dma_enable);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6818      	ldr	r0, [r3, #0]
 80023b4:	78fa      	ldrb	r2, [r7, #3]
 80023b6:	4613      	mov	r3, r2
 80023b8:	011b      	lsls	r3, r3, #4
 80023ba:	1a9b      	subs	r3, r3, r2
 80023bc:	009b      	lsls	r3, r3, #2
 80023be:	3310      	adds	r3, #16
 80023c0:	687a      	ldr	r2, [r7, #4]
 80023c2:	4413      	add	r3, r2
 80023c4:	1d19      	adds	r1, r3, #4
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	799b      	ldrb	r3, [r3, #6]
 80023ca:	461a      	mov	r2, r3
 80023cc:	f005 faf6 	bl	80079bc <USB_HC_StartXfer>
 80023d0:	4603      	mov	r3, r0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3708      	adds	r7, #8
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
 80023da:	bf00      	nop

080023dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	b086      	sub	sp, #24
 80023e0:	af00      	add	r7, sp, #0
 80023e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4618      	mov	r0, r3
 80023f4:	f004 ffea 	bl	80073cc <USB_GetMode>
 80023f8:	4603      	mov	r3, r0
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	f040 80fb 	bne.w	80025f6 <HAL_HCD_IRQHandler+0x21a>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4618      	mov	r0, r3
 8002406:	f004 ffad 	bl	8007364 <USB_ReadInterrupts>
 800240a:	4603      	mov	r3, r0
 800240c:	2b00      	cmp	r3, #0
 800240e:	f000 80f1 	beq.w	80025f4 <HAL_HCD_IRQHandler+0x218>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4618      	mov	r0, r3
 8002418:	f004 ffa4 	bl	8007364 <USB_ReadInterrupts>
 800241c:	4603      	mov	r3, r0
 800241e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002422:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002426:	d104      	bne.n	8002432 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8002430:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	4618      	mov	r0, r3
 8002438:	f004 ff94 	bl	8007364 <USB_ReadInterrupts>
 800243c:	4603      	mov	r3, r0
 800243e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002442:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002446:	d104      	bne.n	8002452 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8002450:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	f004 ff84 	bl	8007364 <USB_ReadInterrupts>
 800245c:	4603      	mov	r3, r0
 800245e:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002462:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002466:	d104      	bne.n	8002472 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002470:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f004 ff74 	bl	8007364 <USB_ReadInterrupts>
 800247c:	4603      	mov	r3, r0
 800247e:	f003 0302 	and.w	r3, r3, #2
 8002482:	2b02      	cmp	r3, #2
 8002484:	d103      	bne.n	800248e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	2202      	movs	r2, #2
 800248c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f004 ff66 	bl	8007364 <USB_ReadInterrupts>
 8002498:	4603      	mov	r3, r0
 800249a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800249e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024a2:	d120      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x10a>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 80024ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d113      	bne.n	80024e6 <HAL_HCD_IRQHandler+0x10a>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80024be:	2110      	movs	r1, #16
 80024c0:	6938      	ldr	r0, [r7, #16]
 80024c2:	f004 fe59 	bl	8007178 <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80024c6:	6938      	ldr	r0, [r7, #16]
 80024c8:	f004 fe88 	bl	80071dc <USB_FlushRxFifo>

        if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	7a5b      	ldrb	r3, [r3, #9]
 80024d0:	2b02      	cmp	r3, #2
 80024d2:	d105      	bne.n	80024e0 <HAL_HCD_IRQHandler+0x104>
        {
          /* Restore FS Clock */
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	2101      	movs	r1, #1
 80024da:	4618      	mov	r0, r3
 80024dc:	f005 f87a 	bl	80075d4 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80024e0:	6878      	ldr	r0, [r7, #4]
 80024e2:	f008 f841 	bl	800a568 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	f004 ff3a 	bl	8007364 <USB_ReadInterrupts>
 80024f0:	4603      	mov	r3, r0
 80024f2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80024f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80024fa:	d102      	bne.n	8002502 <HAL_HCD_IRQHandler+0x126>
    {
      HCD_Port_IRQHandler(hhcd);
 80024fc:	6878      	ldr	r0, [r7, #4]
 80024fe:	f001 fd33 	bl	8003f68 <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4618      	mov	r0, r3
 8002508:	f004 ff2c 	bl	8007364 <USB_ReadInterrupts>
 800250c:	4603      	mov	r3, r0
 800250e:	f003 0308 	and.w	r3, r3, #8
 8002512:	2b08      	cmp	r3, #8
 8002514:	d106      	bne.n	8002524 <HAL_HCD_IRQHandler+0x148>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f008 f80a 	bl	800a530 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	2208      	movs	r2, #8
 8002522:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4618      	mov	r0, r3
 800252a:	f004 ff1b 	bl	8007364 <USB_ReadInterrupts>
 800252e:	4603      	mov	r3, r0
 8002530:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002534:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002538:	d139      	bne.n	80025ae <HAL_HCD_IRQHandler+0x1d2>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	4618      	mov	r0, r3
 8002540:	f005 fcb6 	bl	8007eb0 <USB_HC_ReadInterrupt>
 8002544:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002546:	2300      	movs	r3, #0
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	e025      	b.n	8002598 <HAL_HCD_IRQHandler+0x1bc>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	68ba      	ldr	r2, [r7, #8]
 8002554:	fa22 f303 	lsr.w	r3, r2, r3
 8002558:	f003 0301 	and.w	r3, r3, #1
 800255c:	2b00      	cmp	r3, #0
 800255e:	d018      	beq.n	8002592 <HAL_HCD_IRQHandler+0x1b6>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 8002560:	697b      	ldr	r3, [r7, #20]
 8002562:	015a      	lsls	r2, r3, #5
 8002564:	68fb      	ldr	r3, [r7, #12]
 8002566:	4413      	add	r3, r2
 8002568:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002572:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002576:	d106      	bne.n	8002586 <HAL_HCD_IRQHandler+0x1aa>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 8002578:	697b      	ldr	r3, [r7, #20]
 800257a:	b2db      	uxtb	r3, r3
 800257c:	4619      	mov	r1, r3
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f905 	bl	800278e <HCD_HC_IN_IRQHandler>
 8002584:	e005      	b.n	8002592 <HAL_HCD_IRQHandler+0x1b6>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	b2db      	uxtb	r3, r3
 800258a:	4619      	mov	r1, r3
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f000 ff67 	bl	8003460 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002592:	697b      	ldr	r3, [r7, #20]
 8002594:	3301      	adds	r3, #1
 8002596:	617b      	str	r3, [r7, #20]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	795b      	ldrb	r3, [r3, #5]
 800259c:	461a      	mov	r2, r3
 800259e:	697b      	ldr	r3, [r7, #20]
 80025a0:	4293      	cmp	r3, r2
 80025a2:	d3d3      	bcc.n	800254c <HAL_HCD_IRQHandler+0x170>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80025ac:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f004 fed6 	bl	8007364 <USB_ReadInterrupts>
 80025b8:	4603      	mov	r3, r0
 80025ba:	f003 0310 	and.w	r3, r3, #16
 80025be:	2b10      	cmp	r3, #16
 80025c0:	d101      	bne.n	80025c6 <HAL_HCD_IRQHandler+0x1ea>
 80025c2:	2301      	movs	r3, #1
 80025c4:	e000      	b.n	80025c8 <HAL_HCD_IRQHandler+0x1ec>
 80025c6:	2300      	movs	r3, #0
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d014      	beq.n	80025f6 <HAL_HCD_IRQHandler+0x21a>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	699a      	ldr	r2, [r3, #24]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f022 0210 	bic.w	r2, r2, #16
 80025da:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 80025dc:	6878      	ldr	r0, [r7, #4]
 80025de:	f001 fbe4 	bl	8003daa <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	699a      	ldr	r2, [r3, #24]
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	f042 0210 	orr.w	r2, r2, #16
 80025f0:	619a      	str	r2, [r3, #24]
 80025f2:	e000      	b.n	80025f6 <HAL_HCD_IRQHandler+0x21a>
      return;
 80025f4:	bf00      	nop
    }
  }
}
 80025f6:	3718      	adds	r7, #24
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}

080025fc <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80025fc:	b580      	push	{r7, lr}
 80025fe:	b082      	sub	sp, #8
 8002600:	af00      	add	r7, sp, #0
 8002602:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 800260a:	2b01      	cmp	r3, #1
 800260c:	d101      	bne.n	8002612 <HAL_HCD_Start+0x16>
 800260e:	2302      	movs	r3, #2
 8002610:	e013      	b.n	800263a <HAL_HCD_Start+0x3e>
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	2101      	movs	r1, #1
 8002620:	4618      	mov	r0, r3
 8002622:	f005 f83e 	bl	80076a2 <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	4618      	mov	r0, r3
 800262c:	f004 fd36 	bl	800709c <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2200      	movs	r2, #0
 8002634:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	3708      	adds	r7, #8
 800263e:	46bd      	mov	sp, r7
 8002640:	bd80      	pop	{r7, pc}

08002642 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002642:	b580      	push	{r7, lr}
 8002644:	b082      	sub	sp, #8
 8002646:	af00      	add	r7, sp, #0
 8002648:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f893 33d4 	ldrb.w	r3, [r3, #980]	@ 0x3d4
 8002650:	2b01      	cmp	r3, #1
 8002652:	d101      	bne.n	8002658 <HAL_HCD_Stop+0x16>
 8002654:	2302      	movs	r3, #2
 8002656:	e00d      	b.n	8002674 <HAL_HCD_Stop+0x32>
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4
  (void)USB_StopHost(hhcd->Instance);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4618      	mov	r0, r3
 8002666:	f005 fd91 	bl	800818c <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2200      	movs	r2, #0
 800266e:	f883 23d4 	strb.w	r2, [r3, #980]	@ 0x3d4

  return HAL_OK;
 8002672:	2300      	movs	r3, #0
}
 8002674:	4618      	mov	r0, r3
 8002676:	3708      	adds	r7, #8
 8002678:	46bd      	mov	sp, r7
 800267a:	bd80      	pop	{r7, pc}

0800267c <HAL_HCD_ResetPort>:
  * @brief  Reset the host port.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_ResetPort(HCD_HandleTypeDef *hhcd)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  return (USB_ResetPort(hhcd->Instance));
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f004 ffe0 	bl	800764e <USB_ResetPort>
 800268e:	4603      	mov	r3, r0
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}

08002698 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 8002698:	b480      	push	{r7}
 800269a:	b083      	sub	sp, #12
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	460b      	mov	r3, r1
 80026a2:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 80026a4:	78fa      	ldrb	r2, [r7, #3]
 80026a6:	6879      	ldr	r1, [r7, #4]
 80026a8:	4613      	mov	r3, r2
 80026aa:	011b      	lsls	r3, r3, #4
 80026ac:	1a9b      	subs	r3, r3, r2
 80026ae:	009b      	lsls	r3, r3, #2
 80026b0:	440b      	add	r3, r1
 80026b2:	334c      	adds	r3, #76	@ 0x4c
 80026b4:	781b      	ldrb	r3, [r3, #0]
}
 80026b6:	4618      	mov	r0, r3
 80026b8:	370c      	adds	r7, #12
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr

080026c2 <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef const *hhcd, uint8_t chnum)
{
 80026c2:	b480      	push	{r7}
 80026c4:	b083      	sub	sp, #12
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	6078      	str	r0, [r7, #4]
 80026ca:	460b      	mov	r3, r1
 80026cc:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80026ce:	78fa      	ldrb	r2, [r7, #3]
 80026d0:	6879      	ldr	r1, [r7, #4]
 80026d2:	4613      	mov	r3, r2
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	1a9b      	subs	r3, r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	440b      	add	r3, r1
 80026dc:	3338      	adds	r3, #56	@ 0x38
 80026de:	681b      	ldr	r3, [r3, #0]
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr

080026ec <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4618      	mov	r0, r3
 80026fa:	f005 f822 	bl	8007742 <USB_GetCurrentFrame>
 80026fe:	4603      	mov	r3, r0
}
 8002700:	4618      	mov	r0, r3
 8002702:	3708      	adds	r7, #8
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <HAL_HCD_GetCurrentSpeed>:
  * @brief  Return the Host enumeration speed.
  * @param  hhcd HCD handle
  * @retval Enumeration speed
  */
uint32_t HAL_HCD_GetCurrentSpeed(HCD_HandleTypeDef *hhcd)
{
 8002708:	b580      	push	{r7, lr}
 800270a:	b082      	sub	sp, #8
 800270c:	af00      	add	r7, sp, #0
 800270e:	6078      	str	r0, [r7, #4]
  return (USB_GetHostSpeed(hhcd->Instance));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	4618      	mov	r0, r3
 8002716:	f004 fffd 	bl	8007714 <USB_GetHostSpeed>
 800271a:	4603      	mov	r3, r0
}
 800271c:	4618      	mov	r0, r3
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <HAL_HCD_HC_ClearHubInfo>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_ClearHubInfo(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
 800272c:	460b      	mov	r3, r1
 800272e:	70fb      	strb	r3, [r7, #3]
  hhcd->hc[ch_num].do_ssplit = 0U;
 8002730:	78fa      	ldrb	r2, [r7, #3]
 8002732:	6879      	ldr	r1, [r7, #4]
 8002734:	4613      	mov	r3, r2
 8002736:	011b      	lsls	r3, r3, #4
 8002738:	1a9b      	subs	r3, r3, r2
 800273a:	009b      	lsls	r3, r3, #2
 800273c:	440b      	add	r3, r1
 800273e:	331a      	adds	r3, #26
 8002740:	2200      	movs	r2, #0
 8002742:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].do_csplit = 0U;
 8002744:	78fa      	ldrb	r2, [r7, #3]
 8002746:	6879      	ldr	r1, [r7, #4]
 8002748:	4613      	mov	r3, r2
 800274a:	011b      	lsls	r3, r3, #4
 800274c:	1a9b      	subs	r3, r3, r2
 800274e:	009b      	lsls	r3, r3, #2
 8002750:	440b      	add	r3, r1
 8002752:	331b      	adds	r3, #27
 8002754:	2200      	movs	r2, #0
 8002756:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_addr = 0U;
 8002758:	78fa      	ldrb	r2, [r7, #3]
 800275a:	6879      	ldr	r1, [r7, #4]
 800275c:	4613      	mov	r3, r2
 800275e:	011b      	lsls	r3, r3, #4
 8002760:	1a9b      	subs	r3, r3, r2
 8002762:	009b      	lsls	r3, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	3325      	adds	r3, #37	@ 0x25
 8002768:	2200      	movs	r2, #0
 800276a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].hub_port_nbr = 0U;
 800276c:	78fa      	ldrb	r2, [r7, #3]
 800276e:	6879      	ldr	r1, [r7, #4]
 8002770:	4613      	mov	r3, r2
 8002772:	011b      	lsls	r3, r3, #4
 8002774:	1a9b      	subs	r3, r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	440b      	add	r3, r1
 800277a:	3324      	adds	r3, #36	@ 0x24
 800277c:	2200      	movs	r2, #0
 800277e:	701a      	strb	r2, [r3, #0]

  return HAL_OK;
 8002780:	2300      	movs	r3, #0
}
 8002782:	4618      	mov	r0, r3
 8002784:	370c      	adds	r7, #12
 8002786:	46bd      	mov	sp, r7
 8002788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278c:	4770      	bx	lr

0800278e <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800278e:	b580      	push	{r7, lr}
 8002790:	b086      	sub	sp, #24
 8002792:	af00      	add	r7, sp, #0
 8002794:	6078      	str	r0, [r7, #4]
 8002796:	460b      	mov	r3, r1
 8002798:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	78fa      	ldrb	r2, [r7, #3]
 80027aa:	4611      	mov	r1, r2
 80027ac:	4618      	mov	r0, r3
 80027ae:	f004 fdec 	bl	800738a <USB_ReadChInterrupts>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f003 0304 	and.w	r3, r3, #4
 80027b8:	2b04      	cmp	r3, #4
 80027ba:	d11a      	bne.n	80027f2 <HCD_HC_IN_IRQHandler+0x64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	015a      	lsls	r2, r3, #5
 80027c0:	693b      	ldr	r3, [r7, #16]
 80027c2:	4413      	add	r3, r2
 80027c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80027c8:	461a      	mov	r2, r3
 80027ca:	2304      	movs	r3, #4
 80027cc:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80027ce:	78fa      	ldrb	r2, [r7, #3]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	011b      	lsls	r3, r3, #4
 80027d6:	1a9b      	subs	r3, r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	334d      	adds	r3, #77	@ 0x4d
 80027de:	2207      	movs	r2, #7
 80027e0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	78fa      	ldrb	r2, [r7, #3]
 80027e8:	4611      	mov	r1, r2
 80027ea:	4618      	mov	r0, r3
 80027ec:	f005 fb71 	bl	8007ed2 <USB_HC_Halt>
 80027f0:	e09e      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_BBERR))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	78fa      	ldrb	r2, [r7, #3]
 80027f8:	4611      	mov	r1, r2
 80027fa:	4618      	mov	r0, r3
 80027fc:	f004 fdc5 	bl	800738a <USB_ReadChInterrupts>
 8002800:	4603      	mov	r3, r0
 8002802:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002806:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800280a:	d11b      	bne.n	8002844 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_BBERR);
 800280c:	78fb      	ldrb	r3, [r7, #3]
 800280e:	015a      	lsls	r2, r3, #5
 8002810:	693b      	ldr	r3, [r7, #16]
 8002812:	4413      	add	r3, r2
 8002814:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002818:	461a      	mov	r2, r3
 800281a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800281e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_BBLERR;
 8002820:	78fa      	ldrb	r2, [r7, #3]
 8002822:	6879      	ldr	r1, [r7, #4]
 8002824:	4613      	mov	r3, r2
 8002826:	011b      	lsls	r3, r3, #4
 8002828:	1a9b      	subs	r3, r3, r2
 800282a:	009b      	lsls	r3, r3, #2
 800282c:	440b      	add	r3, r1
 800282e:	334d      	adds	r3, #77	@ 0x4d
 8002830:	2208      	movs	r2, #8
 8002832:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	78fa      	ldrb	r2, [r7, #3]
 800283a:	4611      	mov	r1, r2
 800283c:	4618      	mov	r0, r3
 800283e:	f005 fb48 	bl	8007ed2 <USB_HC_Halt>
 8002842:	e075      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	78fa      	ldrb	r2, [r7, #3]
 800284a:	4611      	mov	r1, r2
 800284c:	4618      	mov	r0, r3
 800284e:	f004 fd9c 	bl	800738a <USB_ReadChInterrupts>
 8002852:	4603      	mov	r3, r0
 8002854:	f003 0308 	and.w	r3, r3, #8
 8002858:	2b08      	cmp	r3, #8
 800285a:	d11a      	bne.n	8002892 <HCD_HC_IN_IRQHandler+0x104>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 800285c:	78fb      	ldrb	r3, [r7, #3]
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	4413      	add	r3, r2
 8002864:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002868:	461a      	mov	r2, r3
 800286a:	2308      	movs	r3, #8
 800286c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 800286e:	78fa      	ldrb	r2, [r7, #3]
 8002870:	6879      	ldr	r1, [r7, #4]
 8002872:	4613      	mov	r3, r2
 8002874:	011b      	lsls	r3, r3, #4
 8002876:	1a9b      	subs	r3, r3, r2
 8002878:	009b      	lsls	r3, r3, #2
 800287a:	440b      	add	r3, r1
 800287c:	334d      	adds	r3, #77	@ 0x4d
 800287e:	2206      	movs	r2, #6
 8002880:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	78fa      	ldrb	r2, [r7, #3]
 8002888:	4611      	mov	r1, r2
 800288a:	4618      	mov	r0, r3
 800288c:	f005 fb21 	bl	8007ed2 <USB_HC_Halt>
 8002890:	e04e      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	78fa      	ldrb	r2, [r7, #3]
 8002898:	4611      	mov	r1, r2
 800289a:	4618      	mov	r0, r3
 800289c:	f004 fd75 	bl	800738a <USB_ReadChInterrupts>
 80028a0:	4603      	mov	r3, r0
 80028a2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028a6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80028aa:	d11b      	bne.n	80028e4 <HCD_HC_IN_IRQHandler+0x156>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80028ac:	78fb      	ldrb	r3, [r7, #3]
 80028ae:	015a      	lsls	r2, r3, #5
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	4413      	add	r3, r2
 80028b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80028b8:	461a      	mov	r2, r3
 80028ba:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80028be:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_DATATGLERR;
 80028c0:	78fa      	ldrb	r2, [r7, #3]
 80028c2:	6879      	ldr	r1, [r7, #4]
 80028c4:	4613      	mov	r3, r2
 80028c6:	011b      	lsls	r3, r3, #4
 80028c8:	1a9b      	subs	r3, r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	334d      	adds	r3, #77	@ 0x4d
 80028d0:	2209      	movs	r2, #9
 80028d2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	78fa      	ldrb	r2, [r7, #3]
 80028da:	4611      	mov	r1, r2
 80028dc:	4618      	mov	r0, r3
 80028de:	f005 faf8 	bl	8007ed2 <USB_HC_Halt>
 80028e2:	e025      	b.n	8002930 <HCD_HC_IN_IRQHandler+0x1a2>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	78fa      	ldrb	r2, [r7, #3]
 80028ea:	4611      	mov	r1, r2
 80028ec:	4618      	mov	r0, r3
 80028ee:	f004 fd4c 	bl	800738a <USB_ReadChInterrupts>
 80028f2:	4603      	mov	r3, r0
 80028f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80028f8:	2b80      	cmp	r3, #128	@ 0x80
 80028fa:	d119      	bne.n	8002930 <HCD_HC_IN_IRQHandler+0x1a2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 80028fc:	78fb      	ldrb	r3, [r7, #3]
 80028fe:	015a      	lsls	r2, r3, #5
 8002900:	693b      	ldr	r3, [r7, #16]
 8002902:	4413      	add	r3, r2
 8002904:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002908:	461a      	mov	r2, r3
 800290a:	2380      	movs	r3, #128	@ 0x80
 800290c:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 800290e:	78fa      	ldrb	r2, [r7, #3]
 8002910:	6879      	ldr	r1, [r7, #4]
 8002912:	4613      	mov	r3, r2
 8002914:	011b      	lsls	r3, r3, #4
 8002916:	1a9b      	subs	r3, r3, r2
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	440b      	add	r3, r1
 800291c:	334d      	adds	r3, #77	@ 0x4d
 800291e:	2207      	movs	r2, #7
 8002920:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	78fa      	ldrb	r2, [r7, #3]
 8002928:	4611      	mov	r1, r2
 800292a:	4618      	mov	r0, r3
 800292c:	f005 fad1 	bl	8007ed2 <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	78fa      	ldrb	r2, [r7, #3]
 8002936:	4611      	mov	r1, r2
 8002938:	4618      	mov	r0, r3
 800293a:	f004 fd26 	bl	800738a <USB_ReadChInterrupts>
 800293e:	4603      	mov	r3, r0
 8002940:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002944:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002948:	d112      	bne.n	8002970 <HCD_HC_IN_IRQHandler+0x1e2>
  {
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	78fa      	ldrb	r2, [r7, #3]
 8002950:	4611      	mov	r1, r2
 8002952:	4618      	mov	r0, r3
 8002954:	f005 fabd 	bl	8007ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 8002958:	78fb      	ldrb	r3, [r7, #3]
 800295a:	015a      	lsls	r2, r3, #5
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	4413      	add	r3, r2
 8002960:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002964:	461a      	mov	r2, r3
 8002966:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800296a:	6093      	str	r3, [r2, #8]
 800296c:	f000 bd75 	b.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	78fa      	ldrb	r2, [r7, #3]
 8002976:	4611      	mov	r1, r2
 8002978:	4618      	mov	r0, r3
 800297a:	f004 fd06 	bl	800738a <USB_ReadChInterrupts>
 800297e:	4603      	mov	r3, r0
 8002980:	f003 0301 	and.w	r3, r3, #1
 8002984:	2b01      	cmp	r3, #1
 8002986:	f040 8128 	bne.w	8002bda <HCD_HC_IN_IRQHandler+0x44c>
  {
    /* Clear any pending ACK IT */
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 800298a:	78fb      	ldrb	r3, [r7, #3]
 800298c:	015a      	lsls	r2, r3, #5
 800298e:	693b      	ldr	r3, [r7, #16]
 8002990:	4413      	add	r3, r2
 8002992:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002996:	461a      	mov	r2, r3
 8002998:	2320      	movs	r3, #32
 800299a:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_csplit == 1U)
 800299c:	78fa      	ldrb	r2, [r7, #3]
 800299e:	6879      	ldr	r1, [r7, #4]
 80029a0:	4613      	mov	r3, r2
 80029a2:	011b      	lsls	r3, r3, #4
 80029a4:	1a9b      	subs	r3, r3, r2
 80029a6:	009b      	lsls	r3, r3, #2
 80029a8:	440b      	add	r3, r1
 80029aa:	331b      	adds	r3, #27
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	2b01      	cmp	r3, #1
 80029b0:	d119      	bne.n	80029e6 <HCD_HC_IN_IRQHandler+0x258>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80029b2:	78fa      	ldrb	r2, [r7, #3]
 80029b4:	6879      	ldr	r1, [r7, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	011b      	lsls	r3, r3, #4
 80029ba:	1a9b      	subs	r3, r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	440b      	add	r3, r1
 80029c0:	331b      	adds	r3, #27
 80029c2:	2200      	movs	r2, #0
 80029c4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80029c6:	78fb      	ldrb	r3, [r7, #3]
 80029c8:	015a      	lsls	r2, r3, #5
 80029ca:	693b      	ldr	r3, [r7, #16]
 80029cc:	4413      	add	r3, r2
 80029ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80029d2:	685b      	ldr	r3, [r3, #4]
 80029d4:	78fa      	ldrb	r2, [r7, #3]
 80029d6:	0151      	lsls	r1, r2, #5
 80029d8:	693a      	ldr	r2, [r7, #16]
 80029da:	440a      	add	r2, r1
 80029dc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80029e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80029e4:	6053      	str	r3, [r2, #4]
    }

    if (hhcd->Init.dma_enable != 0U)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	799b      	ldrb	r3, [r3, #6]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d01b      	beq.n	8002a26 <HCD_HC_IN_IRQHandler+0x298>
    {
      hhcd->hc[chnum].xfer_count = hhcd->hc[chnum].XferSize - (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_XFRSIZ);
 80029ee:	78fa      	ldrb	r2, [r7, #3]
 80029f0:	6879      	ldr	r1, [r7, #4]
 80029f2:	4613      	mov	r3, r2
 80029f4:	011b      	lsls	r3, r3, #4
 80029f6:	1a9b      	subs	r3, r3, r2
 80029f8:	009b      	lsls	r3, r3, #2
 80029fa:	440b      	add	r3, r1
 80029fc:	3330      	adds	r3, #48	@ 0x30
 80029fe:	6819      	ldr	r1, [r3, #0]
 8002a00:	78fb      	ldrb	r3, [r7, #3]
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a0c:	691b      	ldr	r3, [r3, #16]
 8002a0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a12:	78fa      	ldrb	r2, [r7, #3]
 8002a14:	1ac9      	subs	r1, r1, r3
 8002a16:	6878      	ldr	r0, [r7, #4]
 8002a18:	4613      	mov	r3, r2
 8002a1a:	011b      	lsls	r3, r3, #4
 8002a1c:	1a9b      	subs	r3, r3, r2
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	4403      	add	r3, r0
 8002a22:	3338      	adds	r3, #56	@ 0x38
 8002a24:	6019      	str	r1, [r3, #0]
    }

    hhcd->hc[chnum].state = HC_XFRC;
 8002a26:	78fa      	ldrb	r2, [r7, #3]
 8002a28:	6879      	ldr	r1, [r7, #4]
 8002a2a:	4613      	mov	r3, r2
 8002a2c:	011b      	lsls	r3, r3, #4
 8002a2e:	1a9b      	subs	r3, r3, r2
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	440b      	add	r3, r1
 8002a34:	334d      	adds	r3, #77	@ 0x4d
 8002a36:	2201      	movs	r2, #1
 8002a38:	701a      	strb	r2, [r3, #0]
    hhcd->hc[chnum].ErrCnt = 0U;
 8002a3a:	78fa      	ldrb	r2, [r7, #3]
 8002a3c:	6879      	ldr	r1, [r7, #4]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	011b      	lsls	r3, r3, #4
 8002a42:	1a9b      	subs	r3, r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	440b      	add	r3, r1
 8002a48:	3344      	adds	r3, #68	@ 0x44
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	015a      	lsls	r2, r3, #5
 8002a52:	693b      	ldr	r3, [r7, #16]
 8002a54:	4413      	add	r3, r2
 8002a56:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002a5a:	461a      	mov	r2, r3
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	6093      	str	r3, [r2, #8]

    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a60:	78fa      	ldrb	r2, [r7, #3]
 8002a62:	6879      	ldr	r1, [r7, #4]
 8002a64:	4613      	mov	r3, r2
 8002a66:	011b      	lsls	r3, r3, #4
 8002a68:	1a9b      	subs	r3, r3, r2
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	440b      	add	r3, r1
 8002a6e:	3326      	adds	r3, #38	@ 0x26
 8002a70:	781b      	ldrb	r3, [r3, #0]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d00a      	beq.n	8002a8c <HCD_HC_IN_IRQHandler+0x2fe>
        (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002a76:	78fa      	ldrb	r2, [r7, #3]
 8002a78:	6879      	ldr	r1, [r7, #4]
 8002a7a:	4613      	mov	r3, r2
 8002a7c:	011b      	lsls	r3, r3, #4
 8002a7e:	1a9b      	subs	r3, r3, r2
 8002a80:	009b      	lsls	r3, r3, #2
 8002a82:	440b      	add	r3, r1
 8002a84:	3326      	adds	r3, #38	@ 0x26
 8002a86:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002a88:	2b02      	cmp	r3, #2
 8002a8a:	d110      	bne.n	8002aae <HCD_HC_IN_IRQHandler+0x320>
    {
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	78fa      	ldrb	r2, [r7, #3]
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f005 fa1c 	bl	8007ed2 <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8002a9a:	78fb      	ldrb	r3, [r7, #3]
 8002a9c:	015a      	lsls	r2, r3, #5
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002aa6:	461a      	mov	r2, r3
 8002aa8:	2310      	movs	r3, #16
 8002aaa:	6093      	str	r3, [r2, #8]
 8002aac:	e03d      	b.n	8002b2a <HCD_HC_IN_IRQHandler+0x39c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002aae:	78fa      	ldrb	r2, [r7, #3]
 8002ab0:	6879      	ldr	r1, [r7, #4]
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	011b      	lsls	r3, r3, #4
 8002ab6:	1a9b      	subs	r3, r3, r2
 8002ab8:	009b      	lsls	r3, r3, #2
 8002aba:	440b      	add	r3, r1
 8002abc:	3326      	adds	r3, #38	@ 0x26
 8002abe:	781b      	ldrb	r3, [r3, #0]
 8002ac0:	2b03      	cmp	r3, #3
 8002ac2:	d00a      	beq.n	8002ada <HCD_HC_IN_IRQHandler+0x34c>
             (hhcd->hc[chnum].ep_type == EP_TYPE_ISOC))
 8002ac4:	78fa      	ldrb	r2, [r7, #3]
 8002ac6:	6879      	ldr	r1, [r7, #4]
 8002ac8:	4613      	mov	r3, r2
 8002aca:	011b      	lsls	r3, r3, #4
 8002acc:	1a9b      	subs	r3, r3, r2
 8002ace:	009b      	lsls	r3, r3, #2
 8002ad0:	440b      	add	r3, r1
 8002ad2:	3326      	adds	r3, #38	@ 0x26
 8002ad4:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_INTR) ||
 8002ad6:	2b01      	cmp	r3, #1
 8002ad8:	d127      	bne.n	8002b2a <HCD_HC_IN_IRQHandler+0x39c>
    {
      USBx_HC(chnum)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8002ada:	78fb      	ldrb	r3, [r7, #3]
 8002adc:	015a      	lsls	r2, r3, #5
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	4413      	add	r3, r2
 8002ae2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	78fa      	ldrb	r2, [r7, #3]
 8002aea:	0151      	lsls	r1, r2, #5
 8002aec:	693a      	ldr	r2, [r7, #16]
 8002aee:	440a      	add	r2, r1
 8002af0:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002af4:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 8002af8:	6013      	str	r3, [r2, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002afa:	78fa      	ldrb	r2, [r7, #3]
 8002afc:	6879      	ldr	r1, [r7, #4]
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	334c      	adds	r3, #76	@ 0x4c
 8002b0a:	2201      	movs	r2, #1
 8002b0c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8002b0e:	78fa      	ldrb	r2, [r7, #3]
 8002b10:	6879      	ldr	r1, [r7, #4]
 8002b12:	4613      	mov	r3, r2
 8002b14:	011b      	lsls	r3, r3, #4
 8002b16:	1a9b      	subs	r3, r3, r2
 8002b18:	009b      	lsls	r3, r3, #2
 8002b1a:	440b      	add	r3, r1
 8002b1c:	334c      	adds	r3, #76	@ 0x4c
 8002b1e:	781a      	ldrb	r2, [r3, #0]
 8002b20:	78fb      	ldrb	r3, [r7, #3]
 8002b22:	4619      	mov	r1, r3
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f007 fd2d 	bl	800a584 <HAL_HCD_HC_NotifyURBChange_Callback>
    else
    {
      /* ... */
    }

    if (hhcd->Init.dma_enable == 1U)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	799b      	ldrb	r3, [r3, #6]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d13b      	bne.n	8002baa <HCD_HC_IN_IRQHandler+0x41c>
    {
      if ((((hhcd->hc[chnum].xfer_count + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet) & 1U) != 0U)
 8002b32:	78fa      	ldrb	r2, [r7, #3]
 8002b34:	6879      	ldr	r1, [r7, #4]
 8002b36:	4613      	mov	r3, r2
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	1a9b      	subs	r3, r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	440b      	add	r3, r1
 8002b40:	3338      	adds	r3, #56	@ 0x38
 8002b42:	6819      	ldr	r1, [r3, #0]
 8002b44:	78fa      	ldrb	r2, [r7, #3]
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	4613      	mov	r3, r2
 8002b4a:	011b      	lsls	r3, r3, #4
 8002b4c:	1a9b      	subs	r3, r3, r2
 8002b4e:	009b      	lsls	r3, r3, #2
 8002b50:	4403      	add	r3, r0
 8002b52:	3328      	adds	r3, #40	@ 0x28
 8002b54:	881b      	ldrh	r3, [r3, #0]
 8002b56:	440b      	add	r3, r1
 8002b58:	1e59      	subs	r1, r3, #1
 8002b5a:	78fa      	ldrb	r2, [r7, #3]
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	4613      	mov	r3, r2
 8002b60:	011b      	lsls	r3, r3, #4
 8002b62:	1a9b      	subs	r3, r3, r2
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4403      	add	r3, r0
 8002b68:	3328      	adds	r3, #40	@ 0x28
 8002b6a:	881b      	ldrh	r3, [r3, #0]
 8002b6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002b70:	f003 0301 	and.w	r3, r3, #1
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	f000 8470 	beq.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
      {
        hhcd->hc[chnum].toggle_in ^= 1U;
 8002b7a:	78fa      	ldrb	r2, [r7, #3]
 8002b7c:	6879      	ldr	r1, [r7, #4]
 8002b7e:	4613      	mov	r3, r2
 8002b80:	011b      	lsls	r3, r3, #4
 8002b82:	1a9b      	subs	r3, r3, r2
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	333c      	adds	r3, #60	@ 0x3c
 8002b8a:	781b      	ldrb	r3, [r3, #0]
 8002b8c:	78fa      	ldrb	r2, [r7, #3]
 8002b8e:	f083 0301 	eor.w	r3, r3, #1
 8002b92:	b2d8      	uxtb	r0, r3
 8002b94:	6879      	ldr	r1, [r7, #4]
 8002b96:	4613      	mov	r3, r2
 8002b98:	011b      	lsls	r3, r3, #4
 8002b9a:	1a9b      	subs	r3, r3, r2
 8002b9c:	009b      	lsls	r3, r3, #2
 8002b9e:	440b      	add	r3, r1
 8002ba0:	333c      	adds	r3, #60	@ 0x3c
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	701a      	strb	r2, [r3, #0]
 8002ba6:	f000 bc58 	b.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
      }
    }
    else
    {
      hhcd->hc[chnum].toggle_in ^= 1U;
 8002baa:	78fa      	ldrb	r2, [r7, #3]
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	4613      	mov	r3, r2
 8002bb0:	011b      	lsls	r3, r3, #4
 8002bb2:	1a9b      	subs	r3, r3, r2
 8002bb4:	009b      	lsls	r3, r3, #2
 8002bb6:	440b      	add	r3, r1
 8002bb8:	333c      	adds	r3, #60	@ 0x3c
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	78fa      	ldrb	r2, [r7, #3]
 8002bbe:	f083 0301 	eor.w	r3, r3, #1
 8002bc2:	b2d8      	uxtb	r0, r3
 8002bc4:	6879      	ldr	r1, [r7, #4]
 8002bc6:	4613      	mov	r3, r2
 8002bc8:	011b      	lsls	r3, r3, #4
 8002bca:	1a9b      	subs	r3, r3, r2
 8002bcc:	009b      	lsls	r3, r3, #2
 8002bce:	440b      	add	r3, r1
 8002bd0:	333c      	adds	r3, #60	@ 0x3c
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	701a      	strb	r2, [r3, #0]
 8002bd6:	f000 bc40 	b.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	78fa      	ldrb	r2, [r7, #3]
 8002be0:	4611      	mov	r1, r2
 8002be2:	4618      	mov	r0, r3
 8002be4:	f004 fbd1 	bl	800738a <USB_ReadChInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f003 0320 	and.w	r3, r3, #32
 8002bee:	2b20      	cmp	r3, #32
 8002bf0:	d131      	bne.n	8002c56 <HCD_HC_IN_IRQHandler+0x4c8>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 8002bf2:	78fb      	ldrb	r3, [r7, #3]
 8002bf4:	015a      	lsls	r2, r3, #5
 8002bf6:	693b      	ldr	r3, [r7, #16]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002bfe:	461a      	mov	r2, r3
 8002c00:	2320      	movs	r3, #32
 8002c02:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ssplit == 1U)
 8002c04:	78fa      	ldrb	r2, [r7, #3]
 8002c06:	6879      	ldr	r1, [r7, #4]
 8002c08:	4613      	mov	r3, r2
 8002c0a:	011b      	lsls	r3, r3, #4
 8002c0c:	1a9b      	subs	r3, r3, r2
 8002c0e:	009b      	lsls	r3, r3, #2
 8002c10:	440b      	add	r3, r1
 8002c12:	331a      	adds	r3, #26
 8002c14:	781b      	ldrb	r3, [r3, #0]
 8002c16:	2b01      	cmp	r3, #1
 8002c18:	f040 841f 	bne.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
    {
      hhcd->hc[chnum].do_csplit = 1U;
 8002c1c:	78fa      	ldrb	r2, [r7, #3]
 8002c1e:	6879      	ldr	r1, [r7, #4]
 8002c20:	4613      	mov	r3, r2
 8002c22:	011b      	lsls	r3, r3, #4
 8002c24:	1a9b      	subs	r3, r3, r2
 8002c26:	009b      	lsls	r3, r3, #2
 8002c28:	440b      	add	r3, r1
 8002c2a:	331b      	adds	r3, #27
 8002c2c:	2201      	movs	r2, #1
 8002c2e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	6879      	ldr	r1, [r7, #4]
 8002c34:	4613      	mov	r3, r2
 8002c36:	011b      	lsls	r3, r3, #4
 8002c38:	1a9b      	subs	r3, r3, r2
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	334d      	adds	r3, #77	@ 0x4d
 8002c40:	2203      	movs	r2, #3
 8002c42:	701a      	strb	r2, [r3, #0]

      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	78fa      	ldrb	r2, [r7, #3]
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	f005 f940 	bl	8007ed2 <USB_HC_Halt>
 8002c52:	f000 bc02 	b.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	78fa      	ldrb	r2, [r7, #3]
 8002c5c:	4611      	mov	r1, r2
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f004 fb93 	bl	800738a <USB_ReadChInterrupts>
 8002c64:	4603      	mov	r3, r0
 8002c66:	f003 0302 	and.w	r3, r3, #2
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	f040 8305 	bne.w	800327a <HCD_HC_IN_IRQHandler+0xaec>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 8002c70:	78fb      	ldrb	r3, [r7, #3]
 8002c72:	015a      	lsls	r2, r3, #5
 8002c74:	693b      	ldr	r3, [r7, #16]
 8002c76:	4413      	add	r3, r2
 8002c78:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	2302      	movs	r3, #2
 8002c80:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 8002c82:	78fa      	ldrb	r2, [r7, #3]
 8002c84:	6879      	ldr	r1, [r7, #4]
 8002c86:	4613      	mov	r3, r2
 8002c88:	011b      	lsls	r3, r3, #4
 8002c8a:	1a9b      	subs	r3, r3, r2
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	440b      	add	r3, r1
 8002c90:	334d      	adds	r3, #77	@ 0x4d
 8002c92:	781b      	ldrb	r3, [r3, #0]
 8002c94:	2b01      	cmp	r3, #1
 8002c96:	d114      	bne.n	8002cc2 <HCD_HC_IN_IRQHandler+0x534>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002c98:	78fa      	ldrb	r2, [r7, #3]
 8002c9a:	6879      	ldr	r1, [r7, #4]
 8002c9c:	4613      	mov	r3, r2
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	1a9b      	subs	r3, r3, r2
 8002ca2:	009b      	lsls	r3, r3, #2
 8002ca4:	440b      	add	r3, r1
 8002ca6:	334d      	adds	r3, #77	@ 0x4d
 8002ca8:	2202      	movs	r2, #2
 8002caa:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8002cac:	78fa      	ldrb	r2, [r7, #3]
 8002cae:	6879      	ldr	r1, [r7, #4]
 8002cb0:	4613      	mov	r3, r2
 8002cb2:	011b      	lsls	r3, r3, #4
 8002cb4:	1a9b      	subs	r3, r3, r2
 8002cb6:	009b      	lsls	r3, r3, #2
 8002cb8:	440b      	add	r3, r1
 8002cba:	334c      	adds	r3, #76	@ 0x4c
 8002cbc:	2201      	movs	r2, #1
 8002cbe:	701a      	strb	r2, [r3, #0]
 8002cc0:	e2cc      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8002cc2:	78fa      	ldrb	r2, [r7, #3]
 8002cc4:	6879      	ldr	r1, [r7, #4]
 8002cc6:	4613      	mov	r3, r2
 8002cc8:	011b      	lsls	r3, r3, #4
 8002cca:	1a9b      	subs	r3, r3, r2
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	440b      	add	r3, r1
 8002cd0:	334d      	adds	r3, #77	@ 0x4d
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	2b06      	cmp	r3, #6
 8002cd6:	d114      	bne.n	8002d02 <HCD_HC_IN_IRQHandler+0x574>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	6879      	ldr	r1, [r7, #4]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	011b      	lsls	r3, r3, #4
 8002ce0:	1a9b      	subs	r3, r3, r2
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	440b      	add	r3, r1
 8002ce6:	334d      	adds	r3, #77	@ 0x4d
 8002ce8:	2202      	movs	r2, #2
 8002cea:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_STALL;
 8002cec:	78fa      	ldrb	r2, [r7, #3]
 8002cee:	6879      	ldr	r1, [r7, #4]
 8002cf0:	4613      	mov	r3, r2
 8002cf2:	011b      	lsls	r3, r3, #4
 8002cf4:	1a9b      	subs	r3, r3, r2
 8002cf6:	009b      	lsls	r3, r3, #2
 8002cf8:	440b      	add	r3, r1
 8002cfa:	334c      	adds	r3, #76	@ 0x4c
 8002cfc:	2205      	movs	r2, #5
 8002cfe:	701a      	strb	r2, [r3, #0]
 8002d00:	e2ac      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d02:	78fa      	ldrb	r2, [r7, #3]
 8002d04:	6879      	ldr	r1, [r7, #4]
 8002d06:	4613      	mov	r3, r2
 8002d08:	011b      	lsls	r3, r3, #4
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	009b      	lsls	r3, r3, #2
 8002d0e:	440b      	add	r3, r1
 8002d10:	334d      	adds	r3, #77	@ 0x4d
 8002d12:	781b      	ldrb	r3, [r3, #0]
 8002d14:	2b07      	cmp	r3, #7
 8002d16:	d00b      	beq.n	8002d30 <HCD_HC_IN_IRQHandler+0x5a2>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8002d18:	78fa      	ldrb	r2, [r7, #3]
 8002d1a:	6879      	ldr	r1, [r7, #4]
 8002d1c:	4613      	mov	r3, r2
 8002d1e:	011b      	lsls	r3, r3, #4
 8002d20:	1a9b      	subs	r3, r3, r2
 8002d22:	009b      	lsls	r3, r3, #2
 8002d24:	440b      	add	r3, r1
 8002d26:	334d      	adds	r3, #77	@ 0x4d
 8002d28:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8002d2a:	2b09      	cmp	r3, #9
 8002d2c:	f040 80a6 	bne.w	8002e7c <HCD_HC_IN_IRQHandler+0x6ee>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002d30:	78fa      	ldrb	r2, [r7, #3]
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	4613      	mov	r3, r2
 8002d36:	011b      	lsls	r3, r3, #4
 8002d38:	1a9b      	subs	r3, r3, r2
 8002d3a:	009b      	lsls	r3, r3, #2
 8002d3c:	440b      	add	r3, r1
 8002d3e:	334d      	adds	r3, #77	@ 0x4d
 8002d40:	2202      	movs	r2, #2
 8002d42:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8002d44:	78fa      	ldrb	r2, [r7, #3]
 8002d46:	6879      	ldr	r1, [r7, #4]
 8002d48:	4613      	mov	r3, r2
 8002d4a:	011b      	lsls	r3, r3, #4
 8002d4c:	1a9b      	subs	r3, r3, r2
 8002d4e:	009b      	lsls	r3, r3, #2
 8002d50:	440b      	add	r3, r1
 8002d52:	3344      	adds	r3, #68	@ 0x44
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	1c59      	adds	r1, r3, #1
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	4613      	mov	r3, r2
 8002d5c:	011b      	lsls	r3, r3, #4
 8002d5e:	1a9b      	subs	r3, r3, r2
 8002d60:	009b      	lsls	r3, r3, #2
 8002d62:	4403      	add	r3, r0
 8002d64:	3344      	adds	r3, #68	@ 0x44
 8002d66:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002d68:	78fa      	ldrb	r2, [r7, #3]
 8002d6a:	6879      	ldr	r1, [r7, #4]
 8002d6c:	4613      	mov	r3, r2
 8002d6e:	011b      	lsls	r3, r3, #4
 8002d70:	1a9b      	subs	r3, r3, r2
 8002d72:	009b      	lsls	r3, r3, #2
 8002d74:	440b      	add	r3, r1
 8002d76:	3344      	adds	r3, #68	@ 0x44
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d943      	bls.n	8002e06 <HCD_HC_IN_IRQHandler+0x678>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8002d7e:	78fa      	ldrb	r2, [r7, #3]
 8002d80:	6879      	ldr	r1, [r7, #4]
 8002d82:	4613      	mov	r3, r2
 8002d84:	011b      	lsls	r3, r3, #4
 8002d86:	1a9b      	subs	r3, r3, r2
 8002d88:	009b      	lsls	r3, r3, #2
 8002d8a:	440b      	add	r3, r1
 8002d8c:	3344      	adds	r3, #68	@ 0x44
 8002d8e:	2200      	movs	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

        if (hhcd->hc[chnum].do_ssplit == 1U)
 8002d92:	78fa      	ldrb	r2, [r7, #3]
 8002d94:	6879      	ldr	r1, [r7, #4]
 8002d96:	4613      	mov	r3, r2
 8002d98:	011b      	lsls	r3, r3, #4
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	009b      	lsls	r3, r3, #2
 8002d9e:	440b      	add	r3, r1
 8002da0:	331a      	adds	r3, #26
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d123      	bne.n	8002df0 <HCD_HC_IN_IRQHandler+0x662>
        {
          hhcd->hc[chnum].do_csplit = 0U;
 8002da8:	78fa      	ldrb	r2, [r7, #3]
 8002daa:	6879      	ldr	r1, [r7, #4]
 8002dac:	4613      	mov	r3, r2
 8002dae:	011b      	lsls	r3, r3, #4
 8002db0:	1a9b      	subs	r3, r3, r2
 8002db2:	009b      	lsls	r3, r3, #2
 8002db4:	440b      	add	r3, r1
 8002db6:	331b      	adds	r3, #27
 8002db8:	2200      	movs	r2, #0
 8002dba:	701a      	strb	r2, [r3, #0]
          hhcd->hc[chnum].ep_ss_schedule = 0U;
 8002dbc:	78fa      	ldrb	r2, [r7, #3]
 8002dbe:	6879      	ldr	r1, [r7, #4]
 8002dc0:	4613      	mov	r3, r2
 8002dc2:	011b      	lsls	r3, r3, #4
 8002dc4:	1a9b      	subs	r3, r3, r2
 8002dc6:	009b      	lsls	r3, r3, #2
 8002dc8:	440b      	add	r3, r1
 8002dca:	331c      	adds	r3, #28
 8002dcc:	2200      	movs	r2, #0
 8002dce:	701a      	strb	r2, [r3, #0]
          __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002dd0:	78fb      	ldrb	r3, [r7, #3]
 8002dd2:	015a      	lsls	r2, r3, #5
 8002dd4:	693b      	ldr	r3, [r7, #16]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	78fa      	ldrb	r2, [r7, #3]
 8002de0:	0151      	lsls	r1, r2, #5
 8002de2:	693a      	ldr	r2, [r7, #16]
 8002de4:	440a      	add	r2, r1
 8002de6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002dea:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002dee:	6053      	str	r3, [r2, #4]
        }

        hhcd->hc[chnum].urb_state = URB_ERROR;
 8002df0:	78fa      	ldrb	r2, [r7, #3]
 8002df2:	6879      	ldr	r1, [r7, #4]
 8002df4:	4613      	mov	r3, r2
 8002df6:	011b      	lsls	r3, r3, #4
 8002df8:	1a9b      	subs	r3, r3, r2
 8002dfa:	009b      	lsls	r3, r3, #2
 8002dfc:	440b      	add	r3, r1
 8002dfe:	334c      	adds	r3, #76	@ 0x4c
 8002e00:	2204      	movs	r2, #4
 8002e02:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e04:	e229      	b.n	800325a <HCD_HC_IN_IRQHandler+0xacc>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002e06:	78fa      	ldrb	r2, [r7, #3]
 8002e08:	6879      	ldr	r1, [r7, #4]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	011b      	lsls	r3, r3, #4
 8002e0e:	1a9b      	subs	r3, r3, r2
 8002e10:	009b      	lsls	r3, r3, #2
 8002e12:	440b      	add	r3, r1
 8002e14:	334c      	adds	r3, #76	@ 0x4c
 8002e16:	2202      	movs	r2, #2
 8002e18:	701a      	strb	r2, [r3, #0]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e1a:	78fa      	ldrb	r2, [r7, #3]
 8002e1c:	6879      	ldr	r1, [r7, #4]
 8002e1e:	4613      	mov	r3, r2
 8002e20:	011b      	lsls	r3, r3, #4
 8002e22:	1a9b      	subs	r3, r3, r2
 8002e24:	009b      	lsls	r3, r3, #2
 8002e26:	440b      	add	r3, r1
 8002e28:	3326      	adds	r3, #38	@ 0x26
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d00b      	beq.n	8002e48 <HCD_HC_IN_IRQHandler+0x6ba>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002e30:	78fa      	ldrb	r2, [r7, #3]
 8002e32:	6879      	ldr	r1, [r7, #4]
 8002e34:	4613      	mov	r3, r2
 8002e36:	011b      	lsls	r3, r3, #4
 8002e38:	1a9b      	subs	r3, r3, r2
 8002e3a:	009b      	lsls	r3, r3, #2
 8002e3c:	440b      	add	r3, r1
 8002e3e:	3326      	adds	r3, #38	@ 0x26
 8002e40:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002e42:	2b02      	cmp	r3, #2
 8002e44:	f040 8209 	bne.w	800325a <HCD_HC_IN_IRQHandler+0xacc>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002e48:	78fb      	ldrb	r3, [r7, #3]
 8002e4a:	015a      	lsls	r2, r3, #5
 8002e4c:	693b      	ldr	r3, [r7, #16]
 8002e4e:	4413      	add	r3, r2
 8002e50:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8002e5e:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8002e66:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8002e68:	78fb      	ldrb	r3, [r7, #3]
 8002e6a:	015a      	lsls	r2, r3, #5
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	4413      	add	r3, r2
 8002e70:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002e74:	461a      	mov	r2, r3
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8002e7a:	e1ee      	b.n	800325a <HCD_HC_IN_IRQHandler+0xacc>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8002e7c:	78fa      	ldrb	r2, [r7, #3]
 8002e7e:	6879      	ldr	r1, [r7, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	011b      	lsls	r3, r3, #4
 8002e84:	1a9b      	subs	r3, r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	440b      	add	r3, r1
 8002e8a:	334d      	adds	r3, #77	@ 0x4d
 8002e8c:	781b      	ldrb	r3, [r3, #0]
 8002e8e:	2b05      	cmp	r3, #5
 8002e90:	f040 80c8 	bne.w	8003024 <HCD_HC_IN_IRQHandler+0x896>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8002e94:	78fa      	ldrb	r2, [r7, #3]
 8002e96:	6879      	ldr	r1, [r7, #4]
 8002e98:	4613      	mov	r3, r2
 8002e9a:	011b      	lsls	r3, r3, #4
 8002e9c:	1a9b      	subs	r3, r3, r2
 8002e9e:	009b      	lsls	r3, r3, #2
 8002ea0:	440b      	add	r3, r1
 8002ea2:	334d      	adds	r3, #77	@ 0x4d
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8002ea8:	78fa      	ldrb	r2, [r7, #3]
 8002eaa:	6879      	ldr	r1, [r7, #4]
 8002eac:	4613      	mov	r3, r2
 8002eae:	011b      	lsls	r3, r3, #4
 8002eb0:	1a9b      	subs	r3, r3, r2
 8002eb2:	009b      	lsls	r3, r3, #2
 8002eb4:	440b      	add	r3, r1
 8002eb6:	331b      	adds	r3, #27
 8002eb8:	781b      	ldrb	r3, [r3, #0]
 8002eba:	2b01      	cmp	r3, #1
 8002ebc:	f040 81ce 	bne.w	800325c <HCD_HC_IN_IRQHandler+0xace>
      {
        if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 8002ec0:	78fa      	ldrb	r2, [r7, #3]
 8002ec2:	6879      	ldr	r1, [r7, #4]
 8002ec4:	4613      	mov	r3, r2
 8002ec6:	011b      	lsls	r3, r3, #4
 8002ec8:	1a9b      	subs	r3, r3, r2
 8002eca:	009b      	lsls	r3, r3, #2
 8002ecc:	440b      	add	r3, r1
 8002ece:	3326      	adds	r3, #38	@ 0x26
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	2b03      	cmp	r3, #3
 8002ed4:	d16b      	bne.n	8002fae <HCD_HC_IN_IRQHandler+0x820>
        {
          hhcd->hc[chnum].NyetErrCnt++;
 8002ed6:	78fa      	ldrb	r2, [r7, #3]
 8002ed8:	6879      	ldr	r1, [r7, #4]
 8002eda:	4613      	mov	r3, r2
 8002edc:	011b      	lsls	r3, r3, #4
 8002ede:	1a9b      	subs	r3, r3, r2
 8002ee0:	009b      	lsls	r3, r3, #2
 8002ee2:	440b      	add	r3, r1
 8002ee4:	3348      	adds	r3, #72	@ 0x48
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	1c59      	adds	r1, r3, #1
 8002eea:	6878      	ldr	r0, [r7, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	011b      	lsls	r3, r3, #4
 8002ef0:	1a9b      	subs	r3, r3, r2
 8002ef2:	009b      	lsls	r3, r3, #2
 8002ef4:	4403      	add	r3, r0
 8002ef6:	3348      	adds	r3, #72	@ 0x48
 8002ef8:	6019      	str	r1, [r3, #0]
          if (hhcd->hc[chnum].NyetErrCnt > 2U)
 8002efa:	78fa      	ldrb	r2, [r7, #3]
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	4613      	mov	r3, r2
 8002f00:	011b      	lsls	r3, r3, #4
 8002f02:	1a9b      	subs	r3, r3, r2
 8002f04:	009b      	lsls	r3, r3, #2
 8002f06:	440b      	add	r3, r1
 8002f08:	3348      	adds	r3, #72	@ 0x48
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d943      	bls.n	8002f98 <HCD_HC_IN_IRQHandler+0x80a>
          {
            hhcd->hc[chnum].NyetErrCnt = 0U;
 8002f10:	78fa      	ldrb	r2, [r7, #3]
 8002f12:	6879      	ldr	r1, [r7, #4]
 8002f14:	4613      	mov	r3, r2
 8002f16:	011b      	lsls	r3, r3, #4
 8002f18:	1a9b      	subs	r3, r3, r2
 8002f1a:	009b      	lsls	r3, r3, #2
 8002f1c:	440b      	add	r3, r1
 8002f1e:	3348      	adds	r3, #72	@ 0x48
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]
            hhcd->hc[chnum].do_csplit = 0U;
 8002f24:	78fa      	ldrb	r2, [r7, #3]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	4613      	mov	r3, r2
 8002f2a:	011b      	lsls	r3, r3, #4
 8002f2c:	1a9b      	subs	r3, r3, r2
 8002f2e:	009b      	lsls	r3, r3, #2
 8002f30:	440b      	add	r3, r1
 8002f32:	331b      	adds	r3, #27
 8002f34:	2200      	movs	r2, #0
 8002f36:	701a      	strb	r2, [r3, #0]

            if (hhcd->hc[chnum].ErrCnt < 3U)
 8002f38:	78fa      	ldrb	r2, [r7, #3]
 8002f3a:	6879      	ldr	r1, [r7, #4]
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	011b      	lsls	r3, r3, #4
 8002f40:	1a9b      	subs	r3, r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	440b      	add	r3, r1
 8002f46:	3344      	adds	r3, #68	@ 0x44
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	2b02      	cmp	r3, #2
 8002f4c:	d809      	bhi.n	8002f62 <HCD_HC_IN_IRQHandler+0x7d4>
            {
              hhcd->hc[chnum].ep_ss_schedule = 1U;
 8002f4e:	78fa      	ldrb	r2, [r7, #3]
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	4613      	mov	r3, r2
 8002f54:	011b      	lsls	r3, r3, #4
 8002f56:	1a9b      	subs	r3, r3, r2
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	440b      	add	r3, r1
 8002f5c:	331c      	adds	r3, #28
 8002f5e:	2201      	movs	r2, #1
 8002f60:	701a      	strb	r2, [r3, #0]
            }
            __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8002f62:	78fb      	ldrb	r3, [r7, #3]
 8002f64:	015a      	lsls	r2, r3, #5
 8002f66:	693b      	ldr	r3, [r7, #16]
 8002f68:	4413      	add	r3, r2
 8002f6a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	78fa      	ldrb	r2, [r7, #3]
 8002f72:	0151      	lsls	r1, r2, #5
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	440a      	add	r2, r1
 8002f78:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8002f7c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f80:	6053      	str	r3, [r2, #4]
            hhcd->hc[chnum].urb_state = URB_ERROR;
 8002f82:	78fa      	ldrb	r2, [r7, #3]
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	4613      	mov	r3, r2
 8002f88:	011b      	lsls	r3, r3, #4
 8002f8a:	1a9b      	subs	r3, r3, r2
 8002f8c:	009b      	lsls	r3, r3, #2
 8002f8e:	440b      	add	r3, r1
 8002f90:	334c      	adds	r3, #76	@ 0x4c
 8002f92:	2204      	movs	r2, #4
 8002f94:	701a      	strb	r2, [r3, #0]
 8002f96:	e014      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x834>
          }
          else
          {
            hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002f98:	78fa      	ldrb	r2, [r7, #3]
 8002f9a:	6879      	ldr	r1, [r7, #4]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	011b      	lsls	r3, r3, #4
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	009b      	lsls	r3, r3, #2
 8002fa4:	440b      	add	r3, r1
 8002fa6:	334c      	adds	r3, #76	@ 0x4c
 8002fa8:	2202      	movs	r2, #2
 8002faa:	701a      	strb	r2, [r3, #0]
 8002fac:	e009      	b.n	8002fc2 <HCD_HC_IN_IRQHandler+0x834>
          }
        }
        else
        {
          hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8002fae:	78fa      	ldrb	r2, [r7, #3]
 8002fb0:	6879      	ldr	r1, [r7, #4]
 8002fb2:	4613      	mov	r3, r2
 8002fb4:	011b      	lsls	r3, r3, #4
 8002fb6:	1a9b      	subs	r3, r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	440b      	add	r3, r1
 8002fbc:	334c      	adds	r3, #76	@ 0x4c
 8002fbe:	2202      	movs	r2, #2
 8002fc0:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fc2:	78fa      	ldrb	r2, [r7, #3]
 8002fc4:	6879      	ldr	r1, [r7, #4]
 8002fc6:	4613      	mov	r3, r2
 8002fc8:	011b      	lsls	r3, r3, #4
 8002fca:	1a9b      	subs	r3, r3, r2
 8002fcc:	009b      	lsls	r3, r3, #2
 8002fce:	440b      	add	r3, r1
 8002fd0:	3326      	adds	r3, #38	@ 0x26
 8002fd2:	781b      	ldrb	r3, [r3, #0]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d00b      	beq.n	8002ff0 <HCD_HC_IN_IRQHandler+0x862>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8002fd8:	78fa      	ldrb	r2, [r7, #3]
 8002fda:	6879      	ldr	r1, [r7, #4]
 8002fdc:	4613      	mov	r3, r2
 8002fde:	011b      	lsls	r3, r3, #4
 8002fe0:	1a9b      	subs	r3, r3, r2
 8002fe2:	009b      	lsls	r3, r3, #2
 8002fe4:	440b      	add	r3, r1
 8002fe6:	3326      	adds	r3, #38	@ 0x26
 8002fe8:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	f040 8136 	bne.w	800325c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 8002ff0:	78fb      	ldrb	r3, [r7, #3]
 8002ff2:	015a      	lsls	r2, r3, #5
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003006:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800300e:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 8003010:	78fb      	ldrb	r3, [r7, #3]
 8003012:	015a      	lsls	r2, r3, #5
 8003014:	693b      	ldr	r3, [r7, #16]
 8003016:	4413      	add	r3, r2
 8003018:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800301c:	461a      	mov	r2, r3
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6013      	str	r3, [r2, #0]
 8003022:	e11b      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003024:	78fa      	ldrb	r2, [r7, #3]
 8003026:	6879      	ldr	r1, [r7, #4]
 8003028:	4613      	mov	r3, r2
 800302a:	011b      	lsls	r3, r3, #4
 800302c:	1a9b      	subs	r3, r3, r2
 800302e:	009b      	lsls	r3, r3, #2
 8003030:	440b      	add	r3, r1
 8003032:	334d      	adds	r3, #77	@ 0x4d
 8003034:	781b      	ldrb	r3, [r3, #0]
 8003036:	2b03      	cmp	r3, #3
 8003038:	f040 8081 	bne.w	800313e <HCD_HC_IN_IRQHandler+0x9b0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 800303c:	78fa      	ldrb	r2, [r7, #3]
 800303e:	6879      	ldr	r1, [r7, #4]
 8003040:	4613      	mov	r3, r2
 8003042:	011b      	lsls	r3, r3, #4
 8003044:	1a9b      	subs	r3, r3, r2
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	440b      	add	r3, r1
 800304a:	334d      	adds	r3, #77	@ 0x4d
 800304c:	2202      	movs	r2, #2
 800304e:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003050:	78fa      	ldrb	r2, [r7, #3]
 8003052:	6879      	ldr	r1, [r7, #4]
 8003054:	4613      	mov	r3, r2
 8003056:	011b      	lsls	r3, r3, #4
 8003058:	1a9b      	subs	r3, r3, r2
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	440b      	add	r3, r1
 800305e:	331b      	adds	r3, #27
 8003060:	781b      	ldrb	r3, [r3, #0]
 8003062:	2b01      	cmp	r3, #1
 8003064:	f040 80fa 	bne.w	800325c <HCD_HC_IN_IRQHandler+0xace>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003068:	78fa      	ldrb	r2, [r7, #3]
 800306a:	6879      	ldr	r1, [r7, #4]
 800306c:	4613      	mov	r3, r2
 800306e:	011b      	lsls	r3, r3, #4
 8003070:	1a9b      	subs	r3, r3, r2
 8003072:	009b      	lsls	r3, r3, #2
 8003074:	440b      	add	r3, r1
 8003076:	334c      	adds	r3, #76	@ 0x4c
 8003078:	2202      	movs	r2, #2
 800307a:	701a      	strb	r2, [r3, #0]

        /* Set Complete split and re-activate the channel */
        USBx_HC(chnum)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	015a      	lsls	r2, r3, #5
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	4413      	add	r3, r2
 8003084:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	78fa      	ldrb	r2, [r7, #3]
 800308c:	0151      	lsls	r1, r2, #5
 800308e:	693a      	ldr	r2, [r7, #16]
 8003090:	440a      	add	r2, r1
 8003092:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003096:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800309a:	6053      	str	r3, [r2, #4]
        USBx_HC(chnum)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 800309c:	78fb      	ldrb	r3, [r7, #3]
 800309e:	015a      	lsls	r2, r3, #5
 80030a0:	693b      	ldr	r3, [r7, #16]
 80030a2:	4413      	add	r3, r2
 80030a4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	78fa      	ldrb	r2, [r7, #3]
 80030ac:	0151      	lsls	r1, r2, #5
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	440a      	add	r2, r1
 80030b2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80030ba:	60d3      	str	r3, [r2, #12]
        USBx_HC(chnum)->HCINTMSK &= ~USB_OTG_HCINT_ACK;
 80030bc:	78fb      	ldrb	r3, [r7, #3]
 80030be:	015a      	lsls	r2, r3, #5
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	4413      	add	r3, r2
 80030c4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	78fa      	ldrb	r2, [r7, #3]
 80030cc:	0151      	lsls	r1, r2, #5
 80030ce:	693a      	ldr	r2, [r7, #16]
 80030d0:	440a      	add	r2, r1
 80030d2:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80030d6:	f023 0320 	bic.w	r3, r3, #32
 80030da:	60d3      	str	r3, [r2, #12]

        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80030dc:	78fa      	ldrb	r2, [r7, #3]
 80030de:	6879      	ldr	r1, [r7, #4]
 80030e0:	4613      	mov	r3, r2
 80030e2:	011b      	lsls	r3, r3, #4
 80030e4:	1a9b      	subs	r3, r3, r2
 80030e6:	009b      	lsls	r3, r3, #2
 80030e8:	440b      	add	r3, r1
 80030ea:	3326      	adds	r3, #38	@ 0x26
 80030ec:	781b      	ldrb	r3, [r3, #0]
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d00b      	beq.n	800310a <HCD_HC_IN_IRQHandler+0x97c>
            (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 80030f2:	78fa      	ldrb	r2, [r7, #3]
 80030f4:	6879      	ldr	r1, [r7, #4]
 80030f6:	4613      	mov	r3, r2
 80030f8:	011b      	lsls	r3, r3, #4
 80030fa:	1a9b      	subs	r3, r3, r2
 80030fc:	009b      	lsls	r3, r3, #2
 80030fe:	440b      	add	r3, r1
 8003100:	3326      	adds	r3, #38	@ 0x26
 8003102:	781b      	ldrb	r3, [r3, #0]
        if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003104:	2b02      	cmp	r3, #2
 8003106:	f040 80a9 	bne.w	800325c <HCD_HC_IN_IRQHandler+0xace>
        {
          /* re-activate the channel */
          tmpreg = USBx_HC(chnum)->HCCHAR;
 800310a:	78fb      	ldrb	r3, [r7, #3]
 800310c:	015a      	lsls	r2, r3, #5
 800310e:	693b      	ldr	r3, [r7, #16]
 8003110:	4413      	add	r3, r2
 8003112:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	60fb      	str	r3, [r7, #12]
          tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003120:	60fb      	str	r3, [r7, #12]
          tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003128:	60fb      	str	r3, [r7, #12]
          USBx_HC(chnum)->HCCHAR = tmpreg;
 800312a:	78fb      	ldrb	r3, [r7, #3]
 800312c:	015a      	lsls	r2, r3, #5
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	4413      	add	r3, r2
 8003132:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003136:	461a      	mov	r2, r3
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	6013      	str	r3, [r2, #0]
 800313c:	e08e      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 800313e:	78fa      	ldrb	r2, [r7, #3]
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	011b      	lsls	r3, r3, #4
 8003146:	1a9b      	subs	r3, r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	334d      	adds	r3, #77	@ 0x4d
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b04      	cmp	r3, #4
 8003152:	d143      	bne.n	80031dc <HCD_HC_IN_IRQHandler+0xa4e>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003154:	78fa      	ldrb	r2, [r7, #3]
 8003156:	6879      	ldr	r1, [r7, #4]
 8003158:	4613      	mov	r3, r2
 800315a:	011b      	lsls	r3, r3, #4
 800315c:	1a9b      	subs	r3, r3, r2
 800315e:	009b      	lsls	r3, r3, #2
 8003160:	440b      	add	r3, r1
 8003162:	334d      	adds	r3, #77	@ 0x4d
 8003164:	2202      	movs	r2, #2
 8003166:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003168:	78fa      	ldrb	r2, [r7, #3]
 800316a:	6879      	ldr	r1, [r7, #4]
 800316c:	4613      	mov	r3, r2
 800316e:	011b      	lsls	r3, r3, #4
 8003170:	1a9b      	subs	r3, r3, r2
 8003172:	009b      	lsls	r3, r3, #2
 8003174:	440b      	add	r3, r1
 8003176:	334c      	adds	r3, #76	@ 0x4c
 8003178:	2202      	movs	r2, #2
 800317a:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800317c:	78fa      	ldrb	r2, [r7, #3]
 800317e:	6879      	ldr	r1, [r7, #4]
 8003180:	4613      	mov	r3, r2
 8003182:	011b      	lsls	r3, r3, #4
 8003184:	1a9b      	subs	r3, r3, r2
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	440b      	add	r3, r1
 800318a:	3326      	adds	r3, #38	@ 0x26
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d00a      	beq.n	80031a8 <HCD_HC_IN_IRQHandler+0xa1a>
          (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003192:	78fa      	ldrb	r2, [r7, #3]
 8003194:	6879      	ldr	r1, [r7, #4]
 8003196:	4613      	mov	r3, r2
 8003198:	011b      	lsls	r3, r3, #4
 800319a:	1a9b      	subs	r3, r3, r2
 800319c:	009b      	lsls	r3, r3, #2
 800319e:	440b      	add	r3, r1
 80031a0:	3326      	adds	r3, #38	@ 0x26
 80031a2:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 80031a4:	2b02      	cmp	r3, #2
 80031a6:	d159      	bne.n	800325c <HCD_HC_IN_IRQHandler+0xace>
      {
        /* re-activate the channel */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 80031a8:	78fb      	ldrb	r3, [r7, #3]
 80031aa:	015a      	lsls	r2, r3, #5
 80031ac:	693b      	ldr	r3, [r7, #16]
 80031ae:	4413      	add	r3, r2
 80031b0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 80031be:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80031c6:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 80031c8:	78fb      	ldrb	r3, [r7, #3]
 80031ca:	015a      	lsls	r2, r3, #5
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4413      	add	r3, r2
 80031d0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80031d4:	461a      	mov	r2, r3
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	6013      	str	r3, [r2, #0]
 80031da:	e03f      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
      }
    }
    else if (hhcd->hc[chnum].state == HC_BBLERR)
 80031dc:	78fa      	ldrb	r2, [r7, #3]
 80031de:	6879      	ldr	r1, [r7, #4]
 80031e0:	4613      	mov	r3, r2
 80031e2:	011b      	lsls	r3, r3, #4
 80031e4:	1a9b      	subs	r3, r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	440b      	add	r3, r1
 80031ea:	334d      	adds	r3, #77	@ 0x4d
 80031ec:	781b      	ldrb	r3, [r3, #0]
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d126      	bne.n	8003240 <HCD_HC_IN_IRQHandler+0xab2>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 80031f2:	78fa      	ldrb	r2, [r7, #3]
 80031f4:	6879      	ldr	r1, [r7, #4]
 80031f6:	4613      	mov	r3, r2
 80031f8:	011b      	lsls	r3, r3, #4
 80031fa:	1a9b      	subs	r3, r3, r2
 80031fc:	009b      	lsls	r3, r3, #2
 80031fe:	440b      	add	r3, r1
 8003200:	334d      	adds	r3, #77	@ 0x4d
 8003202:	2202      	movs	r2, #2
 8003204:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003206:	78fa      	ldrb	r2, [r7, #3]
 8003208:	6879      	ldr	r1, [r7, #4]
 800320a:	4613      	mov	r3, r2
 800320c:	011b      	lsls	r3, r3, #4
 800320e:	1a9b      	subs	r3, r3, r2
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	440b      	add	r3, r1
 8003214:	3344      	adds	r3, #68	@ 0x44
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	1c59      	adds	r1, r3, #1
 800321a:	6878      	ldr	r0, [r7, #4]
 800321c:	4613      	mov	r3, r2
 800321e:	011b      	lsls	r3, r3, #4
 8003220:	1a9b      	subs	r3, r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4403      	add	r3, r0
 8003226:	3344      	adds	r3, #68	@ 0x44
 8003228:	6019      	str	r1, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_ERROR;
 800322a:	78fa      	ldrb	r2, [r7, #3]
 800322c:	6879      	ldr	r1, [r7, #4]
 800322e:	4613      	mov	r3, r2
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	1a9b      	subs	r3, r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	334c      	adds	r3, #76	@ 0x4c
 800323a:	2204      	movs	r2, #4
 800323c:	701a      	strb	r2, [r3, #0]
 800323e:	e00d      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
    }
    else
    {
      if (hhcd->hc[chnum].state == HC_HALTED)
 8003240:	78fa      	ldrb	r2, [r7, #3]
 8003242:	6879      	ldr	r1, [r7, #4]
 8003244:	4613      	mov	r3, r2
 8003246:	011b      	lsls	r3, r3, #4
 8003248:	1a9b      	subs	r3, r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	334d      	adds	r3, #77	@ 0x4d
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b02      	cmp	r3, #2
 8003254:	f000 8100 	beq.w	8003458 <HCD_HC_IN_IRQHandler+0xcca>
 8003258:	e000      	b.n	800325c <HCD_HC_IN_IRQHandler+0xace>
      if (hhcd->hc[chnum].ErrCnt > 2U)
 800325a:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800325c:	78fa      	ldrb	r2, [r7, #3]
 800325e:	6879      	ldr	r1, [r7, #4]
 8003260:	4613      	mov	r3, r2
 8003262:	011b      	lsls	r3, r3, #4
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	334c      	adds	r3, #76	@ 0x4c
 800326c:	781a      	ldrb	r2, [r3, #0]
 800326e:	78fb      	ldrb	r3, [r7, #3]
 8003270:	4619      	mov	r1, r3
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	f007 f986 	bl	800a584 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003278:	e0ef      	b.n	800345a <HCD_HC_IN_IRQHandler+0xccc>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	78fa      	ldrb	r2, [r7, #3]
 8003280:	4611      	mov	r1, r2
 8003282:	4618      	mov	r0, r3
 8003284:	f004 f881 	bl	800738a <USB_ReadChInterrupts>
 8003288:	4603      	mov	r3, r0
 800328a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800328e:	2b40      	cmp	r3, #64	@ 0x40
 8003290:	d12f      	bne.n	80032f2 <HCD_HC_IN_IRQHandler+0xb64>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003292:	78fb      	ldrb	r3, [r7, #3]
 8003294:	015a      	lsls	r2, r3, #5
 8003296:	693b      	ldr	r3, [r7, #16]
 8003298:	4413      	add	r3, r2
 800329a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800329e:	461a      	mov	r2, r3
 80032a0:	2340      	movs	r3, #64	@ 0x40
 80032a2:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_NYET;
 80032a4:	78fa      	ldrb	r2, [r7, #3]
 80032a6:	6879      	ldr	r1, [r7, #4]
 80032a8:	4613      	mov	r3, r2
 80032aa:	011b      	lsls	r3, r3, #4
 80032ac:	1a9b      	subs	r3, r3, r2
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	440b      	add	r3, r1
 80032b2:	334d      	adds	r3, #77	@ 0x4d
 80032b4:	2205      	movs	r2, #5
 80032b6:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 80032b8:	78fa      	ldrb	r2, [r7, #3]
 80032ba:	6879      	ldr	r1, [r7, #4]
 80032bc:	4613      	mov	r3, r2
 80032be:	011b      	lsls	r3, r3, #4
 80032c0:	1a9b      	subs	r3, r3, r2
 80032c2:	009b      	lsls	r3, r3, #2
 80032c4:	440b      	add	r3, r1
 80032c6:	331a      	adds	r3, #26
 80032c8:	781b      	ldrb	r3, [r3, #0]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d109      	bne.n	80032e2 <HCD_HC_IN_IRQHandler+0xb54>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 80032ce:	78fa      	ldrb	r2, [r7, #3]
 80032d0:	6879      	ldr	r1, [r7, #4]
 80032d2:	4613      	mov	r3, r2
 80032d4:	011b      	lsls	r3, r3, #4
 80032d6:	1a9b      	subs	r3, r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	3344      	adds	r3, #68	@ 0x44
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	78fa      	ldrb	r2, [r7, #3]
 80032e8:	4611      	mov	r1, r2
 80032ea:	4618      	mov	r0, r3
 80032ec:	f004 fdf1 	bl	8007ed2 <USB_HC_Halt>
 80032f0:	e0b3      	b.n	800345a <HCD_HC_IN_IRQHandler+0xccc>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	78fa      	ldrb	r2, [r7, #3]
 80032f8:	4611      	mov	r1, r2
 80032fa:	4618      	mov	r0, r3
 80032fc:	f004 f845 	bl	800738a <USB_ReadChInterrupts>
 8003300:	4603      	mov	r3, r0
 8003302:	f003 0310 	and.w	r3, r3, #16
 8003306:	2b10      	cmp	r3, #16
 8003308:	f040 80a7 	bne.w	800345a <HCD_HC_IN_IRQHandler+0xccc>
  {
    if (hhcd->hc[chnum].ep_type == EP_TYPE_INTR)
 800330c:	78fa      	ldrb	r2, [r7, #3]
 800330e:	6879      	ldr	r1, [r7, #4]
 8003310:	4613      	mov	r3, r2
 8003312:	011b      	lsls	r3, r3, #4
 8003314:	1a9b      	subs	r3, r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	440b      	add	r3, r1
 800331a:	3326      	adds	r3, #38	@ 0x26
 800331c:	781b      	ldrb	r3, [r3, #0]
 800331e:	2b03      	cmp	r3, #3
 8003320:	d11b      	bne.n	800335a <HCD_HC_IN_IRQHandler+0xbcc>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003322:	78fa      	ldrb	r2, [r7, #3]
 8003324:	6879      	ldr	r1, [r7, #4]
 8003326:	4613      	mov	r3, r2
 8003328:	011b      	lsls	r3, r3, #4
 800332a:	1a9b      	subs	r3, r3, r2
 800332c:	009b      	lsls	r3, r3, #2
 800332e:	440b      	add	r3, r1
 8003330:	3344      	adds	r3, #68	@ 0x44
 8003332:	2200      	movs	r2, #0
 8003334:	601a      	str	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_NAK;
 8003336:	78fa      	ldrb	r2, [r7, #3]
 8003338:	6879      	ldr	r1, [r7, #4]
 800333a:	4613      	mov	r3, r2
 800333c:	011b      	lsls	r3, r3, #4
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	009b      	lsls	r3, r3, #2
 8003342:	440b      	add	r3, r1
 8003344:	334d      	adds	r3, #77	@ 0x4d
 8003346:	2204      	movs	r2, #4
 8003348:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	78fa      	ldrb	r2, [r7, #3]
 8003350:	4611      	mov	r1, r2
 8003352:	4618      	mov	r0, r3
 8003354:	f004 fdbd 	bl	8007ed2 <USB_HC_Halt>
 8003358:	e03f      	b.n	80033da <HCD_HC_IN_IRQHandler+0xc4c>
    }
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 800335a:	78fa      	ldrb	r2, [r7, #3]
 800335c:	6879      	ldr	r1, [r7, #4]
 800335e:	4613      	mov	r3, r2
 8003360:	011b      	lsls	r3, r3, #4
 8003362:	1a9b      	subs	r3, r3, r2
 8003364:	009b      	lsls	r3, r3, #2
 8003366:	440b      	add	r3, r1
 8003368:	3326      	adds	r3, #38	@ 0x26
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00a      	beq.n	8003386 <HCD_HC_IN_IRQHandler+0xbf8>
             (hhcd->hc[chnum].ep_type == EP_TYPE_BULK))
 8003370:	78fa      	ldrb	r2, [r7, #3]
 8003372:	6879      	ldr	r1, [r7, #4]
 8003374:	4613      	mov	r3, r2
 8003376:	011b      	lsls	r3, r3, #4
 8003378:	1a9b      	subs	r3, r3, r2
 800337a:	009b      	lsls	r3, r3, #2
 800337c:	440b      	add	r3, r1
 800337e:	3326      	adds	r3, #38	@ 0x26
 8003380:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].ep_type == EP_TYPE_CTRL) ||
 8003382:	2b02      	cmp	r3, #2
 8003384:	d129      	bne.n	80033da <HCD_HC_IN_IRQHandler+0xc4c>
    {
      hhcd->hc[chnum].ErrCnt = 0U;
 8003386:	78fa      	ldrb	r2, [r7, #3]
 8003388:	6879      	ldr	r1, [r7, #4]
 800338a:	4613      	mov	r3, r2
 800338c:	011b      	lsls	r3, r3, #4
 800338e:	1a9b      	subs	r3, r3, r2
 8003390:	009b      	lsls	r3, r3, #2
 8003392:	440b      	add	r3, r1
 8003394:	3344      	adds	r3, #68	@ 0x44
 8003396:	2200      	movs	r2, #0
 8003398:	601a      	str	r2, [r3, #0]

      if ((hhcd->Init.dma_enable == 0U) || (hhcd->hc[chnum].do_csplit == 1U))
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	799b      	ldrb	r3, [r3, #6]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d00a      	beq.n	80033b8 <HCD_HC_IN_IRQHandler+0xc2a>
 80033a2:	78fa      	ldrb	r2, [r7, #3]
 80033a4:	6879      	ldr	r1, [r7, #4]
 80033a6:	4613      	mov	r3, r2
 80033a8:	011b      	lsls	r3, r3, #4
 80033aa:	1a9b      	subs	r3, r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	440b      	add	r3, r1
 80033b0:	331b      	adds	r3, #27
 80033b2:	781b      	ldrb	r3, [r3, #0]
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d110      	bne.n	80033da <HCD_HC_IN_IRQHandler+0xc4c>
      {
        hhcd->hc[chnum].state = HC_NAK;
 80033b8:	78fa      	ldrb	r2, [r7, #3]
 80033ba:	6879      	ldr	r1, [r7, #4]
 80033bc:	4613      	mov	r3, r2
 80033be:	011b      	lsls	r3, r3, #4
 80033c0:	1a9b      	subs	r3, r3, r2
 80033c2:	009b      	lsls	r3, r3, #2
 80033c4:	440b      	add	r3, r1
 80033c6:	334d      	adds	r3, #77	@ 0x4d
 80033c8:	2204      	movs	r2, #4
 80033ca:	701a      	strb	r2, [r3, #0]
        (void)USB_HC_Halt(hhcd->Instance, chnum);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	78fa      	ldrb	r2, [r7, #3]
 80033d2:	4611      	mov	r1, r2
 80033d4:	4618      	mov	r0, r3
 80033d6:	f004 fd7c 	bl	8007ed2 <USB_HC_Halt>
    else
    {
      /* ... */
    }

    if (hhcd->hc[chnum].do_csplit == 1U)
 80033da:	78fa      	ldrb	r2, [r7, #3]
 80033dc:	6879      	ldr	r1, [r7, #4]
 80033de:	4613      	mov	r3, r2
 80033e0:	011b      	lsls	r3, r3, #4
 80033e2:	1a9b      	subs	r3, r3, r2
 80033e4:	009b      	lsls	r3, r3, #2
 80033e6:	440b      	add	r3, r1
 80033e8:	331b      	adds	r3, #27
 80033ea:	781b      	ldrb	r3, [r3, #0]
 80033ec:	2b01      	cmp	r3, #1
 80033ee:	d129      	bne.n	8003444 <HCD_HC_IN_IRQHandler+0xcb6>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80033f0:	78fa      	ldrb	r2, [r7, #3]
 80033f2:	6879      	ldr	r1, [r7, #4]
 80033f4:	4613      	mov	r3, r2
 80033f6:	011b      	lsls	r3, r3, #4
 80033f8:	1a9b      	subs	r3, r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	331b      	adds	r3, #27
 8003400:	2200      	movs	r2, #0
 8003402:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003404:	78fb      	ldrb	r3, [r7, #3]
 8003406:	015a      	lsls	r2, r3, #5
 8003408:	693b      	ldr	r3, [r7, #16]
 800340a:	4413      	add	r3, r2
 800340c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	78fa      	ldrb	r2, [r7, #3]
 8003414:	0151      	lsls	r1, r2, #5
 8003416:	693a      	ldr	r2, [r7, #16]
 8003418:	440a      	add	r2, r1
 800341a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800341e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003422:	6053      	str	r3, [r2, #4]
      __HAL_HCD_UNMASK_ACK_HC_INT(chnum);
 8003424:	78fb      	ldrb	r3, [r7, #3]
 8003426:	015a      	lsls	r2, r3, #5
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	4413      	add	r3, r2
 800342c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003430:	68db      	ldr	r3, [r3, #12]
 8003432:	78fa      	ldrb	r2, [r7, #3]
 8003434:	0151      	lsls	r1, r2, #5
 8003436:	693a      	ldr	r2, [r7, #16]
 8003438:	440a      	add	r2, r1
 800343a:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800343e:	f043 0320 	orr.w	r3, r3, #32
 8003442:	60d3      	str	r3, [r2, #12]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003444:	78fb      	ldrb	r3, [r7, #3]
 8003446:	015a      	lsls	r2, r3, #5
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	4413      	add	r3, r2
 800344c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003450:	461a      	mov	r2, r3
 8003452:	2310      	movs	r3, #16
 8003454:	6093      	str	r3, [r2, #8]
 8003456:	e000      	b.n	800345a <HCD_HC_IN_IRQHandler+0xccc>
        return;
 8003458:	bf00      	nop
  }
  else
  {
    /* ... */
  }
}
 800345a:	3718      	adds	r7, #24
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}

08003460 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8003460:	b580      	push	{r7, lr}
 8003462:	b086      	sub	sp, #24
 8003464:	af00      	add	r7, sp, #0
 8003466:	6078      	str	r0, [r7, #4]
 8003468:	460b      	mov	r3, r1
 800346a:	70fb      	strb	r3, [r7, #3]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg;
  uint32_t num_packets;

  if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_AHBERR))
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	78fa      	ldrb	r2, [r7, #3]
 800347c:	4611      	mov	r1, r2
 800347e:	4618      	mov	r0, r3
 8003480:	f003 ff83 	bl	800738a <USB_ReadChInterrupts>
 8003484:	4603      	mov	r3, r0
 8003486:	f003 0304 	and.w	r3, r3, #4
 800348a:	2b04      	cmp	r3, #4
 800348c:	d11b      	bne.n	80034c6 <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_AHBERR);
 800348e:	78fb      	ldrb	r3, [r7, #3]
 8003490:	015a      	lsls	r2, r3, #5
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	4413      	add	r3, r2
 8003496:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800349a:	461a      	mov	r2, r3
 800349c:	2304      	movs	r3, #4
 800349e:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XACTERR;
 80034a0:	78fa      	ldrb	r2, [r7, #3]
 80034a2:	6879      	ldr	r1, [r7, #4]
 80034a4:	4613      	mov	r3, r2
 80034a6:	011b      	lsls	r3, r3, #4
 80034a8:	1a9b      	subs	r3, r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	440b      	add	r3, r1
 80034ae:	334d      	adds	r3, #77	@ 0x4d
 80034b0:	2207      	movs	r2, #7
 80034b2:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	78fa      	ldrb	r2, [r7, #3]
 80034ba:	4611      	mov	r1, r2
 80034bc:	4618      	mov	r0, r3
 80034be:	f004 fd08 	bl	8007ed2 <USB_HC_Halt>
 80034c2:	f000 bc6f 	b.w	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_ACK))
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	78fa      	ldrb	r2, [r7, #3]
 80034cc:	4611      	mov	r1, r2
 80034ce:	4618      	mov	r0, r3
 80034d0:	f003 ff5b 	bl	800738a <USB_ReadChInterrupts>
 80034d4:	4603      	mov	r3, r0
 80034d6:	f003 0320 	and.w	r3, r3, #32
 80034da:	2b20      	cmp	r3, #32
 80034dc:	f040 8082 	bne.w	80035e4 <HCD_HC_OUT_IRQHandler+0x184>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_ACK);
 80034e0:	78fb      	ldrb	r3, [r7, #3]
 80034e2:	015a      	lsls	r2, r3, #5
 80034e4:	693b      	ldr	r3, [r7, #16]
 80034e6:	4413      	add	r3, r2
 80034e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80034ec:	461a      	mov	r2, r3
 80034ee:	2320      	movs	r3, #32
 80034f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].do_ping == 1U)
 80034f2:	78fa      	ldrb	r2, [r7, #3]
 80034f4:	6879      	ldr	r1, [r7, #4]
 80034f6:	4613      	mov	r3, r2
 80034f8:	011b      	lsls	r3, r3, #4
 80034fa:	1a9b      	subs	r3, r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	440b      	add	r3, r1
 8003500:	3319      	adds	r3, #25
 8003502:	781b      	ldrb	r3, [r3, #0]
 8003504:	2b01      	cmp	r3, #1
 8003506:	d124      	bne.n	8003552 <HCD_HC_OUT_IRQHandler+0xf2>
    {
      hhcd->hc[chnum].do_ping = 0U;
 8003508:	78fa      	ldrb	r2, [r7, #3]
 800350a:	6879      	ldr	r1, [r7, #4]
 800350c:	4613      	mov	r3, r2
 800350e:	011b      	lsls	r3, r3, #4
 8003510:	1a9b      	subs	r3, r3, r2
 8003512:	009b      	lsls	r3, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	3319      	adds	r3, #25
 8003518:	2200      	movs	r2, #0
 800351a:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800351c:	78fa      	ldrb	r2, [r7, #3]
 800351e:	6879      	ldr	r1, [r7, #4]
 8003520:	4613      	mov	r3, r2
 8003522:	011b      	lsls	r3, r3, #4
 8003524:	1a9b      	subs	r3, r3, r2
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	440b      	add	r3, r1
 800352a:	334c      	adds	r3, #76	@ 0x4c
 800352c:	2202      	movs	r2, #2
 800352e:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].state = HC_ACK;
 8003530:	78fa      	ldrb	r2, [r7, #3]
 8003532:	6879      	ldr	r1, [r7, #4]
 8003534:	4613      	mov	r3, r2
 8003536:	011b      	lsls	r3, r3, #4
 8003538:	1a9b      	subs	r3, r3, r2
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	334d      	adds	r3, #77	@ 0x4d
 8003540:	2203      	movs	r2, #3
 8003542:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	78fa      	ldrb	r2, [r7, #3]
 800354a:	4611      	mov	r1, r2
 800354c:	4618      	mov	r0, r3
 800354e:	f004 fcc0 	bl	8007ed2 <USB_HC_Halt>
    }

    if ((hhcd->hc[chnum].do_ssplit == 1U) && (hhcd->hc[chnum].do_csplit == 0U))
 8003552:	78fa      	ldrb	r2, [r7, #3]
 8003554:	6879      	ldr	r1, [r7, #4]
 8003556:	4613      	mov	r3, r2
 8003558:	011b      	lsls	r3, r3, #4
 800355a:	1a9b      	subs	r3, r3, r2
 800355c:	009b      	lsls	r3, r3, #2
 800355e:	440b      	add	r3, r1
 8003560:	331a      	adds	r3, #26
 8003562:	781b      	ldrb	r3, [r3, #0]
 8003564:	2b01      	cmp	r3, #1
 8003566:	f040 841d 	bne.w	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
 800356a:	78fa      	ldrb	r2, [r7, #3]
 800356c:	6879      	ldr	r1, [r7, #4]
 800356e:	4613      	mov	r3, r2
 8003570:	011b      	lsls	r3, r3, #4
 8003572:	1a9b      	subs	r3, r3, r2
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	440b      	add	r3, r1
 8003578:	331b      	adds	r3, #27
 800357a:	781b      	ldrb	r3, [r3, #0]
 800357c:	2b00      	cmp	r3, #0
 800357e:	f040 8411 	bne.w	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
    {
      if (hhcd->hc[chnum].ep_type != EP_TYPE_ISOC)
 8003582:	78fa      	ldrb	r2, [r7, #3]
 8003584:	6879      	ldr	r1, [r7, #4]
 8003586:	4613      	mov	r3, r2
 8003588:	011b      	lsls	r3, r3, #4
 800358a:	1a9b      	subs	r3, r3, r2
 800358c:	009b      	lsls	r3, r3, #2
 800358e:	440b      	add	r3, r1
 8003590:	3326      	adds	r3, #38	@ 0x26
 8003592:	781b      	ldrb	r3, [r3, #0]
 8003594:	2b01      	cmp	r3, #1
 8003596:	d009      	beq.n	80035ac <HCD_HC_OUT_IRQHandler+0x14c>
      {
        hhcd->hc[chnum].do_csplit = 1U;
 8003598:	78fa      	ldrb	r2, [r7, #3]
 800359a:	6879      	ldr	r1, [r7, #4]
 800359c:	4613      	mov	r3, r2
 800359e:	011b      	lsls	r3, r3, #4
 80035a0:	1a9b      	subs	r3, r3, r2
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	440b      	add	r3, r1
 80035a6:	331b      	adds	r3, #27
 80035a8:	2201      	movs	r2, #1
 80035aa:	701a      	strb	r2, [r3, #0]
      }

      hhcd->hc[chnum].state = HC_ACK;
 80035ac:	78fa      	ldrb	r2, [r7, #3]
 80035ae:	6879      	ldr	r1, [r7, #4]
 80035b0:	4613      	mov	r3, r2
 80035b2:	011b      	lsls	r3, r3, #4
 80035b4:	1a9b      	subs	r3, r3, r2
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	440b      	add	r3, r1
 80035ba:	334d      	adds	r3, #77	@ 0x4d
 80035bc:	2203      	movs	r2, #3
 80035be:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	78fa      	ldrb	r2, [r7, #3]
 80035c6:	4611      	mov	r1, r2
 80035c8:	4618      	mov	r0, r3
 80035ca:	f004 fc82 	bl	8007ed2 <USB_HC_Halt>

      /* reset error_count */
      hhcd->hc[chnum].ErrCnt = 0U;
 80035ce:	78fa      	ldrb	r2, [r7, #3]
 80035d0:	6879      	ldr	r1, [r7, #4]
 80035d2:	4613      	mov	r3, r2
 80035d4:	011b      	lsls	r3, r3, #4
 80035d6:	1a9b      	subs	r3, r3, r2
 80035d8:	009b      	lsls	r3, r3, #2
 80035da:	440b      	add	r3, r1
 80035dc:	3344      	adds	r3, #68	@ 0x44
 80035de:	2200      	movs	r2, #0
 80035e0:	601a      	str	r2, [r3, #0]
 80035e2:	e3df      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
    }
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_FRMOR))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	78fa      	ldrb	r2, [r7, #3]
 80035ea:	4611      	mov	r1, r2
 80035ec:	4618      	mov	r0, r3
 80035ee:	f003 fecc 	bl	800738a <USB_ReadChInterrupts>
 80035f2:	4603      	mov	r3, r0
 80035f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80035f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80035fc:	d111      	bne.n	8003622 <HCD_HC_OUT_IRQHandler+0x1c2>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_FRMOR);
 80035fe:	78fb      	ldrb	r3, [r7, #3]
 8003600:	015a      	lsls	r2, r3, #5
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4413      	add	r3, r2
 8003606:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800360a:	461a      	mov	r2, r3
 800360c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003610:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	78fa      	ldrb	r2, [r7, #3]
 8003618:	4611      	mov	r1, r2
 800361a:	4618      	mov	r0, r3
 800361c:	f004 fc59 	bl	8007ed2 <USB_HC_Halt>
 8003620:	e3c0      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_XFRC))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	78fa      	ldrb	r2, [r7, #3]
 8003628:	4611      	mov	r1, r2
 800362a:	4618      	mov	r0, r3
 800362c:	f003 fead 	bl	800738a <USB_ReadChInterrupts>
 8003630:	4603      	mov	r3, r0
 8003632:	f003 0301 	and.w	r3, r3, #1
 8003636:	2b01      	cmp	r3, #1
 8003638:	d168      	bne.n	800370c <HCD_HC_OUT_IRQHandler+0x2ac>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 800363a:	78fa      	ldrb	r2, [r7, #3]
 800363c:	6879      	ldr	r1, [r7, #4]
 800363e:	4613      	mov	r3, r2
 8003640:	011b      	lsls	r3, r3, #4
 8003642:	1a9b      	subs	r3, r3, r2
 8003644:	009b      	lsls	r3, r3, #2
 8003646:	440b      	add	r3, r1
 8003648:	3344      	adds	r3, #68	@ 0x44
 800364a:	2200      	movs	r2, #0
 800364c:	601a      	str	r2, [r3, #0]

    /* transaction completed with NYET state, update do ping state */
    if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	78fa      	ldrb	r2, [r7, #3]
 8003654:	4611      	mov	r1, r2
 8003656:	4618      	mov	r0, r3
 8003658:	f003 fe97 	bl	800738a <USB_ReadChInterrupts>
 800365c:	4603      	mov	r3, r0
 800365e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003662:	2b40      	cmp	r3, #64	@ 0x40
 8003664:	d112      	bne.n	800368c <HCD_HC_OUT_IRQHandler+0x22c>
    {
      hhcd->hc[chnum].do_ping = 1U;
 8003666:	78fa      	ldrb	r2, [r7, #3]
 8003668:	6879      	ldr	r1, [r7, #4]
 800366a:	4613      	mov	r3, r2
 800366c:	011b      	lsls	r3, r3, #4
 800366e:	1a9b      	subs	r3, r3, r2
 8003670:	009b      	lsls	r3, r3, #2
 8003672:	440b      	add	r3, r1
 8003674:	3319      	adds	r3, #25
 8003676:	2201      	movs	r2, #1
 8003678:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 800367a:	78fb      	ldrb	r3, [r7, #3]
 800367c:	015a      	lsls	r2, r3, #5
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	4413      	add	r3, r2
 8003682:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003686:	461a      	mov	r2, r3
 8003688:	2340      	movs	r3, #64	@ 0x40
 800368a:	6093      	str	r3, [r2, #8]
    }

    if (hhcd->hc[chnum].do_csplit != 0U)
 800368c:	78fa      	ldrb	r2, [r7, #3]
 800368e:	6879      	ldr	r1, [r7, #4]
 8003690:	4613      	mov	r3, r2
 8003692:	011b      	lsls	r3, r3, #4
 8003694:	1a9b      	subs	r3, r3, r2
 8003696:	009b      	lsls	r3, r3, #2
 8003698:	440b      	add	r3, r1
 800369a:	331b      	adds	r3, #27
 800369c:	781b      	ldrb	r3, [r3, #0]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d019      	beq.n	80036d6 <HCD_HC_OUT_IRQHandler+0x276>
    {
      hhcd->hc[chnum].do_csplit = 0U;
 80036a2:	78fa      	ldrb	r2, [r7, #3]
 80036a4:	6879      	ldr	r1, [r7, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	011b      	lsls	r3, r3, #4
 80036aa:	1a9b      	subs	r3, r3, r2
 80036ac:	009b      	lsls	r3, r3, #2
 80036ae:	440b      	add	r3, r1
 80036b0:	331b      	adds	r3, #27
 80036b2:	2200      	movs	r2, #0
 80036b4:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 80036b6:	78fb      	ldrb	r3, [r7, #3]
 80036b8:	015a      	lsls	r2, r3, #5
 80036ba:	693b      	ldr	r3, [r7, #16]
 80036bc:	4413      	add	r3, r2
 80036be:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	78fa      	ldrb	r2, [r7, #3]
 80036c6:	0151      	lsls	r1, r2, #5
 80036c8:	693a      	ldr	r2, [r7, #16]
 80036ca:	440a      	add	r2, r1
 80036cc:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80036d0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80036d4:	6053      	str	r3, [r2, #4]
    }

    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_XFRC);
 80036d6:	78fb      	ldrb	r3, [r7, #3]
 80036d8:	015a      	lsls	r2, r3, #5
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	4413      	add	r3, r2
 80036de:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80036e2:	461a      	mov	r2, r3
 80036e4:	2301      	movs	r3, #1
 80036e6:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_XFRC;
 80036e8:	78fa      	ldrb	r2, [r7, #3]
 80036ea:	6879      	ldr	r1, [r7, #4]
 80036ec:	4613      	mov	r3, r2
 80036ee:	011b      	lsls	r3, r3, #4
 80036f0:	1a9b      	subs	r3, r3, r2
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	440b      	add	r3, r1
 80036f6:	334d      	adds	r3, #77	@ 0x4d
 80036f8:	2201      	movs	r2, #1
 80036fa:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	78fa      	ldrb	r2, [r7, #3]
 8003702:	4611      	mov	r1, r2
 8003704:	4618      	mov	r0, r3
 8003706:	f004 fbe4 	bl	8007ed2 <USB_HC_Halt>
 800370a:	e34b      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NYET))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	78fa      	ldrb	r2, [r7, #3]
 8003712:	4611      	mov	r1, r2
 8003714:	4618      	mov	r0, r3
 8003716:	f003 fe38 	bl	800738a <USB_ReadChInterrupts>
 800371a:	4603      	mov	r3, r0
 800371c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003720:	2b40      	cmp	r3, #64	@ 0x40
 8003722:	d139      	bne.n	8003798 <HCD_HC_OUT_IRQHandler+0x338>
  {
    hhcd->hc[chnum].state = HC_NYET;
 8003724:	78fa      	ldrb	r2, [r7, #3]
 8003726:	6879      	ldr	r1, [r7, #4]
 8003728:	4613      	mov	r3, r2
 800372a:	011b      	lsls	r3, r3, #4
 800372c:	1a9b      	subs	r3, r3, r2
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	440b      	add	r3, r1
 8003732:	334d      	adds	r3, #77	@ 0x4d
 8003734:	2205      	movs	r2, #5
 8003736:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ssplit == 0U)
 8003738:	78fa      	ldrb	r2, [r7, #3]
 800373a:	6879      	ldr	r1, [r7, #4]
 800373c:	4613      	mov	r3, r2
 800373e:	011b      	lsls	r3, r3, #4
 8003740:	1a9b      	subs	r3, r3, r2
 8003742:	009b      	lsls	r3, r3, #2
 8003744:	440b      	add	r3, r1
 8003746:	331a      	adds	r3, #26
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d109      	bne.n	8003762 <HCD_HC_OUT_IRQHandler+0x302>
    {
      hhcd->hc[chnum].do_ping = 1U;
 800374e:	78fa      	ldrb	r2, [r7, #3]
 8003750:	6879      	ldr	r1, [r7, #4]
 8003752:	4613      	mov	r3, r2
 8003754:	011b      	lsls	r3, r3, #4
 8003756:	1a9b      	subs	r3, r3, r2
 8003758:	009b      	lsls	r3, r3, #2
 800375a:	440b      	add	r3, r1
 800375c:	3319      	adds	r3, #25
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
    }

    hhcd->hc[chnum].ErrCnt = 0U;
 8003762:	78fa      	ldrb	r2, [r7, #3]
 8003764:	6879      	ldr	r1, [r7, #4]
 8003766:	4613      	mov	r3, r2
 8003768:	011b      	lsls	r3, r3, #4
 800376a:	1a9b      	subs	r3, r3, r2
 800376c:	009b      	lsls	r3, r3, #2
 800376e:	440b      	add	r3, r1
 8003770:	3344      	adds	r3, #68	@ 0x44
 8003772:	2200      	movs	r2, #0
 8003774:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	78fa      	ldrb	r2, [r7, #3]
 800377c:	4611      	mov	r1, r2
 800377e:	4618      	mov	r0, r3
 8003780:	f004 fba7 	bl	8007ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NYET);
 8003784:	78fb      	ldrb	r3, [r7, #3]
 8003786:	015a      	lsls	r2, r3, #5
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	4413      	add	r3, r2
 800378c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003790:	461a      	mov	r2, r3
 8003792:	2340      	movs	r3, #64	@ 0x40
 8003794:	6093      	str	r3, [r2, #8]
 8003796:	e305      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_STALL))
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	78fa      	ldrb	r2, [r7, #3]
 800379e:	4611      	mov	r1, r2
 80037a0:	4618      	mov	r0, r3
 80037a2:	f003 fdf2 	bl	800738a <USB_ReadChInterrupts>
 80037a6:	4603      	mov	r3, r0
 80037a8:	f003 0308 	and.w	r3, r3, #8
 80037ac:	2b08      	cmp	r3, #8
 80037ae:	d11a      	bne.n	80037e6 <HCD_HC_OUT_IRQHandler+0x386>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_STALL);
 80037b0:	78fb      	ldrb	r3, [r7, #3]
 80037b2:	015a      	lsls	r2, r3, #5
 80037b4:	693b      	ldr	r3, [r7, #16]
 80037b6:	4413      	add	r3, r2
 80037b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80037bc:	461a      	mov	r2, r3
 80037be:	2308      	movs	r3, #8
 80037c0:	6093      	str	r3, [r2, #8]
    hhcd->hc[chnum].state = HC_STALL;
 80037c2:	78fa      	ldrb	r2, [r7, #3]
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	011b      	lsls	r3, r3, #4
 80037ca:	1a9b      	subs	r3, r3, r2
 80037cc:	009b      	lsls	r3, r3, #2
 80037ce:	440b      	add	r3, r1
 80037d0:	334d      	adds	r3, #77	@ 0x4d
 80037d2:	2206      	movs	r2, #6
 80037d4:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	78fa      	ldrb	r2, [r7, #3]
 80037dc:	4611      	mov	r1, r2
 80037de:	4618      	mov	r0, r3
 80037e0:	f004 fb77 	bl	8007ed2 <USB_HC_Halt>
 80037e4:	e2de      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_NAK))
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	78fa      	ldrb	r2, [r7, #3]
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f003 fdcb 	bl	800738a <USB_ReadChInterrupts>
 80037f4:	4603      	mov	r3, r0
 80037f6:	f003 0310 	and.w	r3, r3, #16
 80037fa:	2b10      	cmp	r3, #16
 80037fc:	d144      	bne.n	8003888 <HCD_HC_OUT_IRQHandler+0x428>
  {
    hhcd->hc[chnum].ErrCnt = 0U;
 80037fe:	78fa      	ldrb	r2, [r7, #3]
 8003800:	6879      	ldr	r1, [r7, #4]
 8003802:	4613      	mov	r3, r2
 8003804:	011b      	lsls	r3, r3, #4
 8003806:	1a9b      	subs	r3, r3, r2
 8003808:	009b      	lsls	r3, r3, #2
 800380a:	440b      	add	r3, r1
 800380c:	3344      	adds	r3, #68	@ 0x44
 800380e:	2200      	movs	r2, #0
 8003810:	601a      	str	r2, [r3, #0]
    hhcd->hc[chnum].state = HC_NAK;
 8003812:	78fa      	ldrb	r2, [r7, #3]
 8003814:	6879      	ldr	r1, [r7, #4]
 8003816:	4613      	mov	r3, r2
 8003818:	011b      	lsls	r3, r3, #4
 800381a:	1a9b      	subs	r3, r3, r2
 800381c:	009b      	lsls	r3, r3, #2
 800381e:	440b      	add	r3, r1
 8003820:	334d      	adds	r3, #77	@ 0x4d
 8003822:	2204      	movs	r2, #4
 8003824:	701a      	strb	r2, [r3, #0]

    if (hhcd->hc[chnum].do_ping == 0U)
 8003826:	78fa      	ldrb	r2, [r7, #3]
 8003828:	6879      	ldr	r1, [r7, #4]
 800382a:	4613      	mov	r3, r2
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	1a9b      	subs	r3, r3, r2
 8003830:	009b      	lsls	r3, r3, #2
 8003832:	440b      	add	r3, r1
 8003834:	3319      	adds	r3, #25
 8003836:	781b      	ldrb	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d114      	bne.n	8003866 <HCD_HC_OUT_IRQHandler+0x406>
    {
      if (hhcd->hc[chnum].speed == HCD_DEVICE_SPEED_HIGH)
 800383c:	78fa      	ldrb	r2, [r7, #3]
 800383e:	6879      	ldr	r1, [r7, #4]
 8003840:	4613      	mov	r3, r2
 8003842:	011b      	lsls	r3, r3, #4
 8003844:	1a9b      	subs	r3, r3, r2
 8003846:	009b      	lsls	r3, r3, #2
 8003848:	440b      	add	r3, r1
 800384a:	3318      	adds	r3, #24
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HCD_HC_OUT_IRQHandler+0x406>
      {
        hhcd->hc[chnum].do_ping = 1U;
 8003852:	78fa      	ldrb	r2, [r7, #3]
 8003854:	6879      	ldr	r1, [r7, #4]
 8003856:	4613      	mov	r3, r2
 8003858:	011b      	lsls	r3, r3, #4
 800385a:	1a9b      	subs	r3, r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	440b      	add	r3, r1
 8003860:	3319      	adds	r3, #25
 8003862:	2201      	movs	r2, #1
 8003864:	701a      	strb	r2, [r3, #0]
      }
    }

    (void)USB_HC_Halt(hhcd->Instance, chnum);
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	78fa      	ldrb	r2, [r7, #3]
 800386c:	4611      	mov	r1, r2
 800386e:	4618      	mov	r0, r3
 8003870:	f004 fb2f 	bl	8007ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_NAK);
 8003874:	78fb      	ldrb	r3, [r7, #3]
 8003876:	015a      	lsls	r2, r3, #5
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	4413      	add	r3, r2
 800387c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003880:	461a      	mov	r2, r3
 8003882:	2310      	movs	r3, #16
 8003884:	6093      	str	r3, [r2, #8]
 8003886:	e28d      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_TXERR))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	78fa      	ldrb	r2, [r7, #3]
 800388e:	4611      	mov	r1, r2
 8003890:	4618      	mov	r0, r3
 8003892:	f003 fd7a 	bl	800738a <USB_ReadChInterrupts>
 8003896:	4603      	mov	r3, r0
 8003898:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800389c:	2b80      	cmp	r3, #128	@ 0x80
 800389e:	d169      	bne.n	8003974 <HCD_HC_OUT_IRQHandler+0x514>
  {
    if (hhcd->Init.dma_enable == 0U)
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	799b      	ldrb	r3, [r3, #6]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d111      	bne.n	80038cc <HCD_HC_OUT_IRQHandler+0x46c>
    {
      hhcd->hc[chnum].state = HC_XACTERR;
 80038a8:	78fa      	ldrb	r2, [r7, #3]
 80038aa:	6879      	ldr	r1, [r7, #4]
 80038ac:	4613      	mov	r3, r2
 80038ae:	011b      	lsls	r3, r3, #4
 80038b0:	1a9b      	subs	r3, r3, r2
 80038b2:	009b      	lsls	r3, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	334d      	adds	r3, #77	@ 0x4d
 80038b8:	2207      	movs	r2, #7
 80038ba:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, chnum);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	78fa      	ldrb	r2, [r7, #3]
 80038c2:	4611      	mov	r1, r2
 80038c4:	4618      	mov	r0, r3
 80038c6:	f004 fb04 	bl	8007ed2 <USB_HC_Halt>
 80038ca:	e049      	b.n	8003960 <HCD_HC_OUT_IRQHandler+0x500>
    }
    else
    {
      hhcd->hc[chnum].ErrCnt++;
 80038cc:	78fa      	ldrb	r2, [r7, #3]
 80038ce:	6879      	ldr	r1, [r7, #4]
 80038d0:	4613      	mov	r3, r2
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	1a9b      	subs	r3, r3, r2
 80038d6:	009b      	lsls	r3, r3, #2
 80038d8:	440b      	add	r3, r1
 80038da:	3344      	adds	r3, #68	@ 0x44
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	1c59      	adds	r1, r3, #1
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	4613      	mov	r3, r2
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	1a9b      	subs	r3, r3, r2
 80038e8:	009b      	lsls	r3, r3, #2
 80038ea:	4403      	add	r3, r0
 80038ec:	3344      	adds	r3, #68	@ 0x44
 80038ee:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 80038f0:	78fa      	ldrb	r2, [r7, #3]
 80038f2:	6879      	ldr	r1, [r7, #4]
 80038f4:	4613      	mov	r3, r2
 80038f6:	011b      	lsls	r3, r3, #4
 80038f8:	1a9b      	subs	r3, r3, r2
 80038fa:	009b      	lsls	r3, r3, #2
 80038fc:	440b      	add	r3, r1
 80038fe:	3344      	adds	r3, #68	@ 0x44
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	2b02      	cmp	r3, #2
 8003904:	d922      	bls.n	800394c <HCD_HC_OUT_IRQHandler+0x4ec>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003906:	78fa      	ldrb	r2, [r7, #3]
 8003908:	6879      	ldr	r1, [r7, #4]
 800390a:	4613      	mov	r3, r2
 800390c:	011b      	lsls	r3, r3, #4
 800390e:	1a9b      	subs	r3, r3, r2
 8003910:	009b      	lsls	r3, r3, #2
 8003912:	440b      	add	r3, r1
 8003914:	3344      	adds	r3, #68	@ 0x44
 8003916:	2200      	movs	r2, #0
 8003918:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 800391a:	78fa      	ldrb	r2, [r7, #3]
 800391c:	6879      	ldr	r1, [r7, #4]
 800391e:	4613      	mov	r3, r2
 8003920:	011b      	lsls	r3, r3, #4
 8003922:	1a9b      	subs	r3, r3, r2
 8003924:	009b      	lsls	r3, r3, #2
 8003926:	440b      	add	r3, r1
 8003928:	334c      	adds	r3, #76	@ 0x4c
 800392a:	2204      	movs	r2, #4
 800392c:	701a      	strb	r2, [r3, #0]

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
        HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 800392e:	78fa      	ldrb	r2, [r7, #3]
 8003930:	6879      	ldr	r1, [r7, #4]
 8003932:	4613      	mov	r3, r2
 8003934:	011b      	lsls	r3, r3, #4
 8003936:	1a9b      	subs	r3, r3, r2
 8003938:	009b      	lsls	r3, r3, #2
 800393a:	440b      	add	r3, r1
 800393c:	334c      	adds	r3, #76	@ 0x4c
 800393e:	781a      	ldrb	r2, [r3, #0]
 8003940:	78fb      	ldrb	r3, [r7, #3]
 8003942:	4619      	mov	r1, r3
 8003944:	6878      	ldr	r0, [r7, #4]
 8003946:	f006 fe1d 	bl	800a584 <HAL_HCD_HC_NotifyURBChange_Callback>
 800394a:	e009      	b.n	8003960 <HCD_HC_OUT_IRQHandler+0x500>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 800394c:	78fa      	ldrb	r2, [r7, #3]
 800394e:	6879      	ldr	r1, [r7, #4]
 8003950:	4613      	mov	r3, r2
 8003952:	011b      	lsls	r3, r3, #4
 8003954:	1a9b      	subs	r3, r3, r2
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	440b      	add	r3, r1
 800395a:	334c      	adds	r3, #76	@ 0x4c
 800395c:	2202      	movs	r2, #2
 800395e:	701a      	strb	r2, [r3, #0]
      }
    }
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_TXERR);
 8003960:	78fb      	ldrb	r3, [r7, #3]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	4413      	add	r3, r2
 8003968:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800396c:	461a      	mov	r2, r3
 800396e:	2380      	movs	r3, #128	@ 0x80
 8003970:	6093      	str	r3, [r2, #8]
 8003972:	e217      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_DTERR))
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	78fa      	ldrb	r2, [r7, #3]
 800397a:	4611      	mov	r1, r2
 800397c:	4618      	mov	r0, r3
 800397e:	f003 fd04 	bl	800738a <USB_ReadChInterrupts>
 8003982:	4603      	mov	r3, r0
 8003984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003988:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800398c:	d11b      	bne.n	80039c6 <HCD_HC_OUT_IRQHandler+0x566>
  {
    hhcd->hc[chnum].state = HC_DATATGLERR;
 800398e:	78fa      	ldrb	r2, [r7, #3]
 8003990:	6879      	ldr	r1, [r7, #4]
 8003992:	4613      	mov	r3, r2
 8003994:	011b      	lsls	r3, r3, #4
 8003996:	1a9b      	subs	r3, r3, r2
 8003998:	009b      	lsls	r3, r3, #2
 800399a:	440b      	add	r3, r1
 800399c:	334d      	adds	r3, #77	@ 0x4d
 800399e:	2209      	movs	r2, #9
 80039a0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, chnum);
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	78fa      	ldrb	r2, [r7, #3]
 80039a8:	4611      	mov	r1, r2
 80039aa:	4618      	mov	r0, r3
 80039ac:	f004 fa91 	bl	8007ed2 <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_DTERR);
 80039b0:	78fb      	ldrb	r3, [r7, #3]
 80039b2:	015a      	lsls	r2, r3, #5
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	4413      	add	r3, r2
 80039b8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039bc:	461a      	mov	r2, r3
 80039be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80039c2:	6093      	str	r3, [r2, #8]
 80039c4:	e1ee      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
  }
  else if (__HAL_HCD_GET_CH_FLAG(hhcd, chnum, USB_OTG_HCINT_CHH))
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	78fa      	ldrb	r2, [r7, #3]
 80039cc:	4611      	mov	r1, r2
 80039ce:	4618      	mov	r0, r3
 80039d0:	f003 fcdb 	bl	800738a <USB_ReadChInterrupts>
 80039d4:	4603      	mov	r3, r0
 80039d6:	f003 0302 	and.w	r3, r3, #2
 80039da:	2b02      	cmp	r3, #2
 80039dc:	f040 81df 	bne.w	8003d9e <HCD_HC_OUT_IRQHandler+0x93e>
  {
    __HAL_HCD_CLEAR_HC_INT(chnum, USB_OTG_HCINT_CHH);
 80039e0:	78fb      	ldrb	r3, [r7, #3]
 80039e2:	015a      	lsls	r2, r3, #5
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	4413      	add	r3, r2
 80039e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80039ec:	461a      	mov	r2, r3
 80039ee:	2302      	movs	r3, #2
 80039f0:	6093      	str	r3, [r2, #8]

    if (hhcd->hc[chnum].state == HC_XFRC)
 80039f2:	78fa      	ldrb	r2, [r7, #3]
 80039f4:	6879      	ldr	r1, [r7, #4]
 80039f6:	4613      	mov	r3, r2
 80039f8:	011b      	lsls	r3, r3, #4
 80039fa:	1a9b      	subs	r3, r3, r2
 80039fc:	009b      	lsls	r3, r3, #2
 80039fe:	440b      	add	r3, r1
 8003a00:	334d      	adds	r3, #77	@ 0x4d
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b01      	cmp	r3, #1
 8003a06:	f040 8093 	bne.w	8003b30 <HCD_HC_OUT_IRQHandler+0x6d0>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003a0a:	78fa      	ldrb	r2, [r7, #3]
 8003a0c:	6879      	ldr	r1, [r7, #4]
 8003a0e:	4613      	mov	r3, r2
 8003a10:	011b      	lsls	r3, r3, #4
 8003a12:	1a9b      	subs	r3, r3, r2
 8003a14:	009b      	lsls	r3, r3, #2
 8003a16:	440b      	add	r3, r1
 8003a18:	334d      	adds	r3, #77	@ 0x4d
 8003a1a:	2202      	movs	r2, #2
 8003a1c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_DONE;
 8003a1e:	78fa      	ldrb	r2, [r7, #3]
 8003a20:	6879      	ldr	r1, [r7, #4]
 8003a22:	4613      	mov	r3, r2
 8003a24:	011b      	lsls	r3, r3, #4
 8003a26:	1a9b      	subs	r3, r3, r2
 8003a28:	009b      	lsls	r3, r3, #2
 8003a2a:	440b      	add	r3, r1
 8003a2c:	334c      	adds	r3, #76	@ 0x4c
 8003a2e:	2201      	movs	r2, #1
 8003a30:	701a      	strb	r2, [r3, #0]

      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a32:	78fa      	ldrb	r2, [r7, #3]
 8003a34:	6879      	ldr	r1, [r7, #4]
 8003a36:	4613      	mov	r3, r2
 8003a38:	011b      	lsls	r3, r3, #4
 8003a3a:	1a9b      	subs	r3, r3, r2
 8003a3c:	009b      	lsls	r3, r3, #2
 8003a3e:	440b      	add	r3, r1
 8003a40:	3326      	adds	r3, #38	@ 0x26
 8003a42:	781b      	ldrb	r3, [r3, #0]
 8003a44:	2b02      	cmp	r3, #2
 8003a46:	d00b      	beq.n	8003a60 <HCD_HC_OUT_IRQHandler+0x600>
          (hhcd->hc[chnum].ep_type == EP_TYPE_INTR))
 8003a48:	78fa      	ldrb	r2, [r7, #3]
 8003a4a:	6879      	ldr	r1, [r7, #4]
 8003a4c:	4613      	mov	r3, r2
 8003a4e:	011b      	lsls	r3, r3, #4
 8003a50:	1a9b      	subs	r3, r3, r2
 8003a52:	009b      	lsls	r3, r3, #2
 8003a54:	440b      	add	r3, r1
 8003a56:	3326      	adds	r3, #38	@ 0x26
 8003a58:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[chnum].ep_type == EP_TYPE_BULK) ||
 8003a5a:	2b03      	cmp	r3, #3
 8003a5c:	f040 8190 	bne.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
      {
        if (hhcd->Init.dma_enable == 0U)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	799b      	ldrb	r3, [r3, #6]
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d115      	bne.n	8003a94 <HCD_HC_OUT_IRQHandler+0x634>
        {
          hhcd->hc[chnum].toggle_out ^= 1U;
 8003a68:	78fa      	ldrb	r2, [r7, #3]
 8003a6a:	6879      	ldr	r1, [r7, #4]
 8003a6c:	4613      	mov	r3, r2
 8003a6e:	011b      	lsls	r3, r3, #4
 8003a70:	1a9b      	subs	r3, r3, r2
 8003a72:	009b      	lsls	r3, r3, #2
 8003a74:	440b      	add	r3, r1
 8003a76:	333d      	adds	r3, #61	@ 0x3d
 8003a78:	781b      	ldrb	r3, [r3, #0]
 8003a7a:	78fa      	ldrb	r2, [r7, #3]
 8003a7c:	f083 0301 	eor.w	r3, r3, #1
 8003a80:	b2d8      	uxtb	r0, r3
 8003a82:	6879      	ldr	r1, [r7, #4]
 8003a84:	4613      	mov	r3, r2
 8003a86:	011b      	lsls	r3, r3, #4
 8003a88:	1a9b      	subs	r3, r3, r2
 8003a8a:	009b      	lsls	r3, r3, #2
 8003a8c:	440b      	add	r3, r1
 8003a8e:	333d      	adds	r3, #61	@ 0x3d
 8003a90:	4602      	mov	r2, r0
 8003a92:	701a      	strb	r2, [r3, #0]
        }

        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[chnum].xfer_len > 0U))
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	799b      	ldrb	r3, [r3, #6]
 8003a98:	2b01      	cmp	r3, #1
 8003a9a:	f040 8171 	bne.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
 8003a9e:	78fa      	ldrb	r2, [r7, #3]
 8003aa0:	6879      	ldr	r1, [r7, #4]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	1a9b      	subs	r3, r3, r2
 8003aa8:	009b      	lsls	r3, r3, #2
 8003aaa:	440b      	add	r3, r1
 8003aac:	3334      	adds	r3, #52	@ 0x34
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f000 8165 	beq.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
        {
          num_packets = (hhcd->hc[chnum].xfer_len + hhcd->hc[chnum].max_packet - 1U) / hhcd->hc[chnum].max_packet;
 8003ab6:	78fa      	ldrb	r2, [r7, #3]
 8003ab8:	6879      	ldr	r1, [r7, #4]
 8003aba:	4613      	mov	r3, r2
 8003abc:	011b      	lsls	r3, r3, #4
 8003abe:	1a9b      	subs	r3, r3, r2
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	440b      	add	r3, r1
 8003ac4:	3334      	adds	r3, #52	@ 0x34
 8003ac6:	6819      	ldr	r1, [r3, #0]
 8003ac8:	78fa      	ldrb	r2, [r7, #3]
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	4613      	mov	r3, r2
 8003ace:	011b      	lsls	r3, r3, #4
 8003ad0:	1a9b      	subs	r3, r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4403      	add	r3, r0
 8003ad6:	3328      	adds	r3, #40	@ 0x28
 8003ad8:	881b      	ldrh	r3, [r3, #0]
 8003ada:	440b      	add	r3, r1
 8003adc:	1e59      	subs	r1, r3, #1
 8003ade:	78fa      	ldrb	r2, [r7, #3]
 8003ae0:	6878      	ldr	r0, [r7, #4]
 8003ae2:	4613      	mov	r3, r2
 8003ae4:	011b      	lsls	r3, r3, #4
 8003ae6:	1a9b      	subs	r3, r3, r2
 8003ae8:	009b      	lsls	r3, r3, #2
 8003aea:	4403      	add	r3, r0
 8003aec:	3328      	adds	r3, #40	@ 0x28
 8003aee:	881b      	ldrh	r3, [r3, #0]
 8003af0:	fbb1 f3f3 	udiv	r3, r1, r3
 8003af4:	60bb      	str	r3, [r7, #8]

          if ((num_packets & 1U) != 0U)
 8003af6:	68bb      	ldr	r3, [r7, #8]
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	f000 813f 	beq.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
          {
            hhcd->hc[chnum].toggle_out ^= 1U;
 8003b02:	78fa      	ldrb	r2, [r7, #3]
 8003b04:	6879      	ldr	r1, [r7, #4]
 8003b06:	4613      	mov	r3, r2
 8003b08:	011b      	lsls	r3, r3, #4
 8003b0a:	1a9b      	subs	r3, r3, r2
 8003b0c:	009b      	lsls	r3, r3, #2
 8003b0e:	440b      	add	r3, r1
 8003b10:	333d      	adds	r3, #61	@ 0x3d
 8003b12:	781b      	ldrb	r3, [r3, #0]
 8003b14:	78fa      	ldrb	r2, [r7, #3]
 8003b16:	f083 0301 	eor.w	r3, r3, #1
 8003b1a:	b2d8      	uxtb	r0, r3
 8003b1c:	6879      	ldr	r1, [r7, #4]
 8003b1e:	4613      	mov	r3, r2
 8003b20:	011b      	lsls	r3, r3, #4
 8003b22:	1a9b      	subs	r3, r3, r2
 8003b24:	009b      	lsls	r3, r3, #2
 8003b26:	440b      	add	r3, r1
 8003b28:	333d      	adds	r3, #61	@ 0x3d
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	701a      	strb	r2, [r3, #0]
 8003b2e:	e127      	b.n	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
          }
        }
      }
    }
    else if (hhcd->hc[chnum].state == HC_ACK)
 8003b30:	78fa      	ldrb	r2, [r7, #3]
 8003b32:	6879      	ldr	r1, [r7, #4]
 8003b34:	4613      	mov	r3, r2
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	440b      	add	r3, r1
 8003b3e:	334d      	adds	r3, #77	@ 0x4d
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	2b03      	cmp	r3, #3
 8003b44:	d120      	bne.n	8003b88 <HCD_HC_OUT_IRQHandler+0x728>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b46:	78fa      	ldrb	r2, [r7, #3]
 8003b48:	6879      	ldr	r1, [r7, #4]
 8003b4a:	4613      	mov	r3, r2
 8003b4c:	011b      	lsls	r3, r3, #4
 8003b4e:	1a9b      	subs	r3, r3, r2
 8003b50:	009b      	lsls	r3, r3, #2
 8003b52:	440b      	add	r3, r1
 8003b54:	334d      	adds	r3, #77	@ 0x4d
 8003b56:	2202      	movs	r2, #2
 8003b58:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003b5a:	78fa      	ldrb	r2, [r7, #3]
 8003b5c:	6879      	ldr	r1, [r7, #4]
 8003b5e:	4613      	mov	r3, r2
 8003b60:	011b      	lsls	r3, r3, #4
 8003b62:	1a9b      	subs	r3, r3, r2
 8003b64:	009b      	lsls	r3, r3, #2
 8003b66:	440b      	add	r3, r1
 8003b68:	331b      	adds	r3, #27
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	f040 8107 	bne.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003b72:	78fa      	ldrb	r2, [r7, #3]
 8003b74:	6879      	ldr	r1, [r7, #4]
 8003b76:	4613      	mov	r3, r2
 8003b78:	011b      	lsls	r3, r3, #4
 8003b7a:	1a9b      	subs	r3, r3, r2
 8003b7c:	009b      	lsls	r3, r3, #2
 8003b7e:	440b      	add	r3, r1
 8003b80:	334c      	adds	r3, #76	@ 0x4c
 8003b82:	2202      	movs	r2, #2
 8003b84:	701a      	strb	r2, [r3, #0]
 8003b86:	e0fb      	b.n	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NAK)
 8003b88:	78fa      	ldrb	r2, [r7, #3]
 8003b8a:	6879      	ldr	r1, [r7, #4]
 8003b8c:	4613      	mov	r3, r2
 8003b8e:	011b      	lsls	r3, r3, #4
 8003b90:	1a9b      	subs	r3, r3, r2
 8003b92:	009b      	lsls	r3, r3, #2
 8003b94:	440b      	add	r3, r1
 8003b96:	334d      	adds	r3, #77	@ 0x4d
 8003b98:	781b      	ldrb	r3, [r3, #0]
 8003b9a:	2b04      	cmp	r3, #4
 8003b9c:	d13a      	bne.n	8003c14 <HCD_HC_OUT_IRQHandler+0x7b4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003b9e:	78fa      	ldrb	r2, [r7, #3]
 8003ba0:	6879      	ldr	r1, [r7, #4]
 8003ba2:	4613      	mov	r3, r2
 8003ba4:	011b      	lsls	r3, r3, #4
 8003ba6:	1a9b      	subs	r3, r3, r2
 8003ba8:	009b      	lsls	r3, r3, #2
 8003baa:	440b      	add	r3, r1
 8003bac:	334d      	adds	r3, #77	@ 0x4d
 8003bae:	2202      	movs	r2, #2
 8003bb0:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003bb2:	78fa      	ldrb	r2, [r7, #3]
 8003bb4:	6879      	ldr	r1, [r7, #4]
 8003bb6:	4613      	mov	r3, r2
 8003bb8:	011b      	lsls	r3, r3, #4
 8003bba:	1a9b      	subs	r3, r3, r2
 8003bbc:	009b      	lsls	r3, r3, #2
 8003bbe:	440b      	add	r3, r1
 8003bc0:	334c      	adds	r3, #76	@ 0x4c
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	701a      	strb	r2, [r3, #0]

      if (hhcd->hc[chnum].do_csplit == 1U)
 8003bc6:	78fa      	ldrb	r2, [r7, #3]
 8003bc8:	6879      	ldr	r1, [r7, #4]
 8003bca:	4613      	mov	r3, r2
 8003bcc:	011b      	lsls	r3, r3, #4
 8003bce:	1a9b      	subs	r3, r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	331b      	adds	r3, #27
 8003bd6:	781b      	ldrb	r3, [r3, #0]
 8003bd8:	2b01      	cmp	r3, #1
 8003bda:	f040 80d1 	bne.w	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
      {
        hhcd->hc[chnum].do_csplit = 0U;
 8003bde:	78fa      	ldrb	r2, [r7, #3]
 8003be0:	6879      	ldr	r1, [r7, #4]
 8003be2:	4613      	mov	r3, r2
 8003be4:	011b      	lsls	r3, r3, #4
 8003be6:	1a9b      	subs	r3, r3, r2
 8003be8:	009b      	lsls	r3, r3, #2
 8003bea:	440b      	add	r3, r1
 8003bec:	331b      	adds	r3, #27
 8003bee:	2200      	movs	r2, #0
 8003bf0:	701a      	strb	r2, [r3, #0]
        __HAL_HCD_CLEAR_HC_CSPLT(chnum);
 8003bf2:	78fb      	ldrb	r3, [r7, #3]
 8003bf4:	015a      	lsls	r2, r3, #5
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	4413      	add	r3, r2
 8003bfa:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003bfe:	685b      	ldr	r3, [r3, #4]
 8003c00:	78fa      	ldrb	r2, [r7, #3]
 8003c02:	0151      	lsls	r1, r2, #5
 8003c04:	693a      	ldr	r2, [r7, #16]
 8003c06:	440a      	add	r2, r1
 8003c08:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8003c0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c10:	6053      	str	r3, [r2, #4]
 8003c12:	e0b5      	b.n	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
      }
    }
    else if (hhcd->hc[chnum].state == HC_NYET)
 8003c14:	78fa      	ldrb	r2, [r7, #3]
 8003c16:	6879      	ldr	r1, [r7, #4]
 8003c18:	4613      	mov	r3, r2
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	1a9b      	subs	r3, r3, r2
 8003c1e:	009b      	lsls	r3, r3, #2
 8003c20:	440b      	add	r3, r1
 8003c22:	334d      	adds	r3, #77	@ 0x4d
 8003c24:	781b      	ldrb	r3, [r3, #0]
 8003c26:	2b05      	cmp	r3, #5
 8003c28:	d114      	bne.n	8003c54 <HCD_HC_OUT_IRQHandler+0x7f4>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c2a:	78fa      	ldrb	r2, [r7, #3]
 8003c2c:	6879      	ldr	r1, [r7, #4]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	011b      	lsls	r3, r3, #4
 8003c32:	1a9b      	subs	r3, r3, r2
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	440b      	add	r3, r1
 8003c38:	334d      	adds	r3, #77	@ 0x4d
 8003c3a:	2202      	movs	r2, #2
 8003c3c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_NOTREADY;
 8003c3e:	78fa      	ldrb	r2, [r7, #3]
 8003c40:	6879      	ldr	r1, [r7, #4]
 8003c42:	4613      	mov	r3, r2
 8003c44:	011b      	lsls	r3, r3, #4
 8003c46:	1a9b      	subs	r3, r3, r2
 8003c48:	009b      	lsls	r3, r3, #2
 8003c4a:	440b      	add	r3, r1
 8003c4c:	334c      	adds	r3, #76	@ 0x4c
 8003c4e:	2202      	movs	r2, #2
 8003c50:	701a      	strb	r2, [r3, #0]
 8003c52:	e095      	b.n	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if (hhcd->hc[chnum].state == HC_STALL)
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	6879      	ldr	r1, [r7, #4]
 8003c58:	4613      	mov	r3, r2
 8003c5a:	011b      	lsls	r3, r3, #4
 8003c5c:	1a9b      	subs	r3, r3, r2
 8003c5e:	009b      	lsls	r3, r3, #2
 8003c60:	440b      	add	r3, r1
 8003c62:	334d      	adds	r3, #77	@ 0x4d
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	2b06      	cmp	r3, #6
 8003c68:	d114      	bne.n	8003c94 <HCD_HC_OUT_IRQHandler+0x834>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003c6a:	78fa      	ldrb	r2, [r7, #3]
 8003c6c:	6879      	ldr	r1, [r7, #4]
 8003c6e:	4613      	mov	r3, r2
 8003c70:	011b      	lsls	r3, r3, #4
 8003c72:	1a9b      	subs	r3, r3, r2
 8003c74:	009b      	lsls	r3, r3, #2
 8003c76:	440b      	add	r3, r1
 8003c78:	334d      	adds	r3, #77	@ 0x4d
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].urb_state  = URB_STALL;
 8003c7e:	78fa      	ldrb	r2, [r7, #3]
 8003c80:	6879      	ldr	r1, [r7, #4]
 8003c82:	4613      	mov	r3, r2
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	1a9b      	subs	r3, r3, r2
 8003c88:	009b      	lsls	r3, r3, #2
 8003c8a:	440b      	add	r3, r1
 8003c8c:	334c      	adds	r3, #76	@ 0x4c
 8003c8e:	2205      	movs	r2, #5
 8003c90:	701a      	strb	r2, [r3, #0]
 8003c92:	e075      	b.n	8003d80 <HCD_HC_OUT_IRQHandler+0x920>
    }
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003c94:	78fa      	ldrb	r2, [r7, #3]
 8003c96:	6879      	ldr	r1, [r7, #4]
 8003c98:	4613      	mov	r3, r2
 8003c9a:	011b      	lsls	r3, r3, #4
 8003c9c:	1a9b      	subs	r3, r3, r2
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	440b      	add	r3, r1
 8003ca2:	334d      	adds	r3, #77	@ 0x4d
 8003ca4:	781b      	ldrb	r3, [r3, #0]
 8003ca6:	2b07      	cmp	r3, #7
 8003ca8:	d00a      	beq.n	8003cc0 <HCD_HC_OUT_IRQHandler+0x860>
             (hhcd->hc[chnum].state == HC_DATATGLERR))
 8003caa:	78fa      	ldrb	r2, [r7, #3]
 8003cac:	6879      	ldr	r1, [r7, #4]
 8003cae:	4613      	mov	r3, r2
 8003cb0:	011b      	lsls	r3, r3, #4
 8003cb2:	1a9b      	subs	r3, r3, r2
 8003cb4:	009b      	lsls	r3, r3, #2
 8003cb6:	440b      	add	r3, r1
 8003cb8:	334d      	adds	r3, #77	@ 0x4d
 8003cba:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[chnum].state == HC_XACTERR) ||
 8003cbc:	2b09      	cmp	r3, #9
 8003cbe:	d170      	bne.n	8003da2 <HCD_HC_OUT_IRQHandler+0x942>
    {
      hhcd->hc[chnum].state = HC_HALTED;
 8003cc0:	78fa      	ldrb	r2, [r7, #3]
 8003cc2:	6879      	ldr	r1, [r7, #4]
 8003cc4:	4613      	mov	r3, r2
 8003cc6:	011b      	lsls	r3, r3, #4
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	009b      	lsls	r3, r3, #2
 8003ccc:	440b      	add	r3, r1
 8003cce:	334d      	adds	r3, #77	@ 0x4d
 8003cd0:	2202      	movs	r2, #2
 8003cd2:	701a      	strb	r2, [r3, #0]
      hhcd->hc[chnum].ErrCnt++;
 8003cd4:	78fa      	ldrb	r2, [r7, #3]
 8003cd6:	6879      	ldr	r1, [r7, #4]
 8003cd8:	4613      	mov	r3, r2
 8003cda:	011b      	lsls	r3, r3, #4
 8003cdc:	1a9b      	subs	r3, r3, r2
 8003cde:	009b      	lsls	r3, r3, #2
 8003ce0:	440b      	add	r3, r1
 8003ce2:	3344      	adds	r3, #68	@ 0x44
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c59      	adds	r1, r3, #1
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	4613      	mov	r3, r2
 8003cec:	011b      	lsls	r3, r3, #4
 8003cee:	1a9b      	subs	r3, r3, r2
 8003cf0:	009b      	lsls	r3, r3, #2
 8003cf2:	4403      	add	r3, r0
 8003cf4:	3344      	adds	r3, #68	@ 0x44
 8003cf6:	6019      	str	r1, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003cf8:	78fa      	ldrb	r2, [r7, #3]
 8003cfa:	6879      	ldr	r1, [r7, #4]
 8003cfc:	4613      	mov	r3, r2
 8003cfe:	011b      	lsls	r3, r3, #4
 8003d00:	1a9b      	subs	r3, r3, r2
 8003d02:	009b      	lsls	r3, r3, #2
 8003d04:	440b      	add	r3, r1
 8003d06:	3344      	adds	r3, #68	@ 0x44
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d914      	bls.n	8003d38 <HCD_HC_OUT_IRQHandler+0x8d8>
      {
        hhcd->hc[chnum].ErrCnt = 0U;
 8003d0e:	78fa      	ldrb	r2, [r7, #3]
 8003d10:	6879      	ldr	r1, [r7, #4]
 8003d12:	4613      	mov	r3, r2
 8003d14:	011b      	lsls	r3, r3, #4
 8003d16:	1a9b      	subs	r3, r3, r2
 8003d18:	009b      	lsls	r3, r3, #2
 8003d1a:	440b      	add	r3, r1
 8003d1c:	3344      	adds	r3, #68	@ 0x44
 8003d1e:	2200      	movs	r2, #0
 8003d20:	601a      	str	r2, [r3, #0]
        hhcd->hc[chnum].urb_state = URB_ERROR;
 8003d22:	78fa      	ldrb	r2, [r7, #3]
 8003d24:	6879      	ldr	r1, [r7, #4]
 8003d26:	4613      	mov	r3, r2
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	1a9b      	subs	r3, r3, r2
 8003d2c:	009b      	lsls	r3, r3, #2
 8003d2e:	440b      	add	r3, r1
 8003d30:	334c      	adds	r3, #76	@ 0x4c
 8003d32:	2204      	movs	r2, #4
 8003d34:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d36:	e022      	b.n	8003d7e <HCD_HC_OUT_IRQHandler+0x91e>
      }
      else
      {
        hhcd->hc[chnum].urb_state = URB_NOTREADY;
 8003d38:	78fa      	ldrb	r2, [r7, #3]
 8003d3a:	6879      	ldr	r1, [r7, #4]
 8003d3c:	4613      	mov	r3, r2
 8003d3e:	011b      	lsls	r3, r3, #4
 8003d40:	1a9b      	subs	r3, r3, r2
 8003d42:	009b      	lsls	r3, r3, #2
 8003d44:	440b      	add	r3, r1
 8003d46:	334c      	adds	r3, #76	@ 0x4c
 8003d48:	2202      	movs	r2, #2
 8003d4a:	701a      	strb	r2, [r3, #0]

        /* re-activate the channel  */
        tmpreg = USBx_HC(chnum)->HCCHAR;
 8003d4c:	78fb      	ldrb	r3, [r7, #3]
 8003d4e:	015a      	lsls	r2, r3, #5
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	4413      	add	r3, r2
 8003d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	60fb      	str	r3, [r7, #12]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003d62:	60fb      	str	r3, [r7, #12]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003d6a:	60fb      	str	r3, [r7, #12]
        USBx_HC(chnum)->HCCHAR = tmpreg;
 8003d6c:	78fb      	ldrb	r3, [r7, #3]
 8003d6e:	015a      	lsls	r2, r3, #5
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	4413      	add	r3, r2
 8003d74:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003d78:	461a      	mov	r2, r3
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[chnum].ErrCnt > 2U)
 8003d7e:	bf00      	nop
    }

#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
    hhcd->HC_NotifyURBChangeCallback(hhcd, chnum, hhcd->hc[chnum].urb_state);
#else
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, chnum, hhcd->hc[chnum].urb_state);
 8003d80:	78fa      	ldrb	r2, [r7, #3]
 8003d82:	6879      	ldr	r1, [r7, #4]
 8003d84:	4613      	mov	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	1a9b      	subs	r3, r3, r2
 8003d8a:	009b      	lsls	r3, r3, #2
 8003d8c:	440b      	add	r3, r1
 8003d8e:	334c      	adds	r3, #76	@ 0x4c
 8003d90:	781a      	ldrb	r2, [r3, #0]
 8003d92:	78fb      	ldrb	r3, [r7, #3]
 8003d94:	4619      	mov	r1, r3
 8003d96:	6878      	ldr	r0, [r7, #4]
 8003d98:	f006 fbf4 	bl	800a584 <HAL_HCD_HC_NotifyURBChange_Callback>
 8003d9c:	e002      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
  }
  else
  {
    return;
 8003d9e:	bf00      	nop
 8003da0:	e000      	b.n	8003da4 <HCD_HC_OUT_IRQHandler+0x944>
      return;
 8003da2:	bf00      	nop
  }
}
 8003da4:	3718      	adds	r7, #24
 8003da6:	46bd      	mov	sp, r7
 8003da8:	bd80      	pop	{r7, pc}

08003daa <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003daa:	b580      	push	{r7, lr}
 8003dac:	b08a      	sub	sp, #40	@ 0x28
 8003dae:	af00      	add	r7, sp, #0
 8003db0:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003db8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003dba:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t chnum;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	6a1b      	ldr	r3, [r3, #32]
 8003dc2:	61fb      	str	r3, [r7, #28]
  chnum = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003dc4:	69fb      	ldr	r3, [r7, #28]
 8003dc6:	f003 030f 	and.w	r3, r3, #15
 8003dca:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	0c5b      	lsrs	r3, r3, #17
 8003dd0:	f003 030f 	and.w	r3, r3, #15
 8003dd4:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003dd6:	69fb      	ldr	r3, [r7, #28]
 8003dd8:	091b      	lsrs	r3, r3, #4
 8003dda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003dde:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 8003de0:	697b      	ldr	r3, [r7, #20]
 8003de2:	2b02      	cmp	r3, #2
 8003de4:	d004      	beq.n	8003df0 <HCD_RXQLVL_IRQHandler+0x46>
 8003de6:	697b      	ldr	r3, [r7, #20]
 8003de8:	2b05      	cmp	r3, #5
 8003dea:	f000 80b6 	beq.w	8003f5a <HCD_RXQLVL_IRQHandler+0x1b0>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 8003dee:	e0b7      	b.n	8003f60 <HCD_RXQLVL_IRQHandler+0x1b6>
      if ((pktcnt > 0U) && (hhcd->hc[chnum].xfer_buff != (void *)0))
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	f000 80b3 	beq.w	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003df8:	6879      	ldr	r1, [r7, #4]
 8003dfa:	69ba      	ldr	r2, [r7, #24]
 8003dfc:	4613      	mov	r3, r2
 8003dfe:	011b      	lsls	r3, r3, #4
 8003e00:	1a9b      	subs	r3, r3, r2
 8003e02:	009b      	lsls	r3, r3, #2
 8003e04:	440b      	add	r3, r1
 8003e06:	332c      	adds	r3, #44	@ 0x2c
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	f000 80a7 	beq.w	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
        if ((hhcd->hc[chnum].xfer_count + pktcnt) <= hhcd->hc[chnum].xfer_len)
 8003e10:	6879      	ldr	r1, [r7, #4]
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4613      	mov	r3, r2
 8003e16:	011b      	lsls	r3, r3, #4
 8003e18:	1a9b      	subs	r3, r3, r2
 8003e1a:	009b      	lsls	r3, r3, #2
 8003e1c:	440b      	add	r3, r1
 8003e1e:	3338      	adds	r3, #56	@ 0x38
 8003e20:	681a      	ldr	r2, [r3, #0]
 8003e22:	693b      	ldr	r3, [r7, #16]
 8003e24:	18d1      	adds	r1, r2, r3
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	69ba      	ldr	r2, [r7, #24]
 8003e2a:	4613      	mov	r3, r2
 8003e2c:	011b      	lsls	r3, r3, #4
 8003e2e:	1a9b      	subs	r3, r3, r2
 8003e30:	009b      	lsls	r3, r3, #2
 8003e32:	4403      	add	r3, r0
 8003e34:	3334      	adds	r3, #52	@ 0x34
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	4299      	cmp	r1, r3
 8003e3a:	f200 8083 	bhi.w	8003f44 <HCD_RXQLVL_IRQHandler+0x19a>
          (void)USB_ReadPacket(hhcd->Instance,
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	6818      	ldr	r0, [r3, #0]
 8003e42:	6879      	ldr	r1, [r7, #4]
 8003e44:	69ba      	ldr	r2, [r7, #24]
 8003e46:	4613      	mov	r3, r2
 8003e48:	011b      	lsls	r3, r3, #4
 8003e4a:	1a9b      	subs	r3, r3, r2
 8003e4c:	009b      	lsls	r3, r3, #2
 8003e4e:	440b      	add	r3, r1
 8003e50:	332c      	adds	r3, #44	@ 0x2c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	693a      	ldr	r2, [r7, #16]
 8003e56:	b292      	uxth	r2, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f003 fa2b 	bl	80072b4 <USB_ReadPacket>
          hhcd->hc[chnum].xfer_buff += pktcnt;
 8003e5e:	6879      	ldr	r1, [r7, #4]
 8003e60:	69ba      	ldr	r2, [r7, #24]
 8003e62:	4613      	mov	r3, r2
 8003e64:	011b      	lsls	r3, r3, #4
 8003e66:	1a9b      	subs	r3, r3, r2
 8003e68:	009b      	lsls	r3, r3, #2
 8003e6a:	440b      	add	r3, r1
 8003e6c:	332c      	adds	r3, #44	@ 0x2c
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	693b      	ldr	r3, [r7, #16]
 8003e72:	18d1      	adds	r1, r2, r3
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	69ba      	ldr	r2, [r7, #24]
 8003e78:	4613      	mov	r3, r2
 8003e7a:	011b      	lsls	r3, r3, #4
 8003e7c:	1a9b      	subs	r3, r3, r2
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	4403      	add	r3, r0
 8003e82:	332c      	adds	r3, #44	@ 0x2c
 8003e84:	6019      	str	r1, [r3, #0]
          hhcd->hc[chnum].xfer_count += pktcnt;
 8003e86:	6879      	ldr	r1, [r7, #4]
 8003e88:	69ba      	ldr	r2, [r7, #24]
 8003e8a:	4613      	mov	r3, r2
 8003e8c:	011b      	lsls	r3, r3, #4
 8003e8e:	1a9b      	subs	r3, r3, r2
 8003e90:	009b      	lsls	r3, r3, #2
 8003e92:	440b      	add	r3, r1
 8003e94:	3338      	adds	r3, #56	@ 0x38
 8003e96:	681a      	ldr	r2, [r3, #0]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	18d1      	adds	r1, r2, r3
 8003e9c:	6878      	ldr	r0, [r7, #4]
 8003e9e:	69ba      	ldr	r2, [r7, #24]
 8003ea0:	4613      	mov	r3, r2
 8003ea2:	011b      	lsls	r3, r3, #4
 8003ea4:	1a9b      	subs	r3, r3, r2
 8003ea6:	009b      	lsls	r3, r3, #2
 8003ea8:	4403      	add	r3, r0
 8003eaa:	3338      	adds	r3, #56	@ 0x38
 8003eac:	6019      	str	r1, [r3, #0]
          xferSizePktCnt = (USBx_HC(chnum)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	015a      	lsls	r2, r3, #5
 8003eb2:	6a3b      	ldr	r3, [r7, #32]
 8003eb4:	4413      	add	r3, r2
 8003eb6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	0cdb      	lsrs	r3, r3, #19
 8003ebe:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003ec2:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[chnum].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003ec4:	6879      	ldr	r1, [r7, #4]
 8003ec6:	69ba      	ldr	r2, [r7, #24]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	011b      	lsls	r3, r3, #4
 8003ecc:	1a9b      	subs	r3, r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	3328      	adds	r3, #40	@ 0x28
 8003ed4:	881b      	ldrh	r3, [r3, #0]
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d13f      	bne.n	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d03c      	beq.n	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
            tmpreg = USBx_HC(chnum)->HCCHAR;
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	015a      	lsls	r2, r3, #5
 8003ee8:	6a3b      	ldr	r3, [r7, #32]
 8003eea:	4413      	add	r3, r2
 8003eec:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8003efa:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003f02:	60bb      	str	r3, [r7, #8]
            USBx_HC(chnum)->HCCHAR = tmpreg;
 8003f04:	69bb      	ldr	r3, [r7, #24]
 8003f06:	015a      	lsls	r2, r3, #5
 8003f08:	6a3b      	ldr	r3, [r7, #32]
 8003f0a:	4413      	add	r3, r2
 8003f0c:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8003f10:	461a      	mov	r2, r3
 8003f12:	68bb      	ldr	r3, [r7, #8]
 8003f14:	6013      	str	r3, [r2, #0]
            hhcd->hc[chnum].toggle_in ^= 1U;
 8003f16:	6879      	ldr	r1, [r7, #4]
 8003f18:	69ba      	ldr	r2, [r7, #24]
 8003f1a:	4613      	mov	r3, r2
 8003f1c:	011b      	lsls	r3, r3, #4
 8003f1e:	1a9b      	subs	r3, r3, r2
 8003f20:	009b      	lsls	r3, r3, #2
 8003f22:	440b      	add	r3, r1
 8003f24:	333c      	adds	r3, #60	@ 0x3c
 8003f26:	781b      	ldrb	r3, [r3, #0]
 8003f28:	f083 0301 	eor.w	r3, r3, #1
 8003f2c:	b2d8      	uxtb	r0, r3
 8003f2e:	6879      	ldr	r1, [r7, #4]
 8003f30:	69ba      	ldr	r2, [r7, #24]
 8003f32:	4613      	mov	r3, r2
 8003f34:	011b      	lsls	r3, r3, #4
 8003f36:	1a9b      	subs	r3, r3, r2
 8003f38:	009b      	lsls	r3, r3, #2
 8003f3a:	440b      	add	r3, r1
 8003f3c:	333c      	adds	r3, #60	@ 0x3c
 8003f3e:	4602      	mov	r2, r0
 8003f40:	701a      	strb	r2, [r3, #0]
      break;
 8003f42:	e00c      	b.n	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
          hhcd->hc[chnum].urb_state = URB_ERROR;
 8003f44:	6879      	ldr	r1, [r7, #4]
 8003f46:	69ba      	ldr	r2, [r7, #24]
 8003f48:	4613      	mov	r3, r2
 8003f4a:	011b      	lsls	r3, r3, #4
 8003f4c:	1a9b      	subs	r3, r3, r2
 8003f4e:	009b      	lsls	r3, r3, #2
 8003f50:	440b      	add	r3, r1
 8003f52:	334c      	adds	r3, #76	@ 0x4c
 8003f54:	2204      	movs	r2, #4
 8003f56:	701a      	strb	r2, [r3, #0]
      break;
 8003f58:	e001      	b.n	8003f5e <HCD_RXQLVL_IRQHandler+0x1b4>
      break;
 8003f5a:	bf00      	nop
 8003f5c:	e000      	b.n	8003f60 <HCD_RXQLVL_IRQHandler+0x1b6>
      break;
 8003f5e:	bf00      	nop
  }
}
 8003f60:	bf00      	nop
 8003f62:	3728      	adds	r7, #40	@ 0x28
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b086      	sub	sp, #24
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f76:	697b      	ldr	r3, [r7, #20]
 8003f78:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 8003f7a:	693b      	ldr	r3, [r7, #16]
 8003f7c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 8003f94:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d10b      	bne.n	8003fb8 <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003fa0:	68fb      	ldr	r3, [r7, #12]
 8003fa2:	f003 0301 	and.w	r3, r3, #1
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d102      	bne.n	8003fb0 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f006 face 	bl	800a54c <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	f043 0302 	orr.w	r3, r3, #2
 8003fb6:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 0308 	and.w	r3, r3, #8
 8003fbe:	2b08      	cmp	r3, #8
 8003fc0:	d132      	bne.n	8004028 <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003fc2:	68bb      	ldr	r3, [r7, #8]
 8003fc4:	f043 0308 	orr.w	r3, r3, #8
 8003fc8:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	f003 0304 	and.w	r3, r3, #4
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d126      	bne.n	8004022 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface == USB_OTG_EMBEDDED_PHY)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	7a5b      	ldrb	r3, [r3, #9]
 8003fd8:	2b02      	cmp	r3, #2
 8003fda:	d113      	bne.n	8004004 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	f403 23c0 	and.w	r3, r3, #393216	@ 0x60000
 8003fe2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003fe6:	d106      	bne.n	8003ff6 <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2102      	movs	r1, #2
 8003fee:	4618      	mov	r0, r3
 8003ff0:	f003 faf0 	bl	80075d4 <USB_InitFSLSPClkSel>
 8003ff4:	e011      	b.n	800401a <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2101      	movs	r1, #1
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	f003 fae9 	bl	80075d4 <USB_InitFSLSPClkSel>
 8004002:	e00a      	b.n	800401a <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	79db      	ldrb	r3, [r3, #7]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d106      	bne.n	800401a <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = HFIR_60_MHZ;
 800400c:	693b      	ldr	r3, [r7, #16]
 800400e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8004012:	461a      	mov	r2, r3
 8004014:	f64e 2360 	movw	r3, #60000	@ 0xea60
 8004018:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f006 fac0 	bl	800a5a0 <HAL_HCD_PortEnabled_Callback>
 8004020:	e002      	b.n	8004028 <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f006 faca 	bl	800a5bc <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f003 0320 	and.w	r3, r3, #32
 800402e:	2b20      	cmp	r3, #32
 8004030:	d103      	bne.n	800403a <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 8004032:	68bb      	ldr	r3, [r7, #8]
 8004034:	f043 0320 	orr.w	r3, r3, #32
 8004038:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8004040:	461a      	mov	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	6013      	str	r3, [r2, #0]
}
 8004046:	bf00      	nop
 8004048:	3718      	adds	r7, #24
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
	...

08004050 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b088      	sub	sp, #32
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d101      	bne.n	8004062 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e128      	b.n	80042b4 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004068:	b2db      	uxtb	r3, r3
 800406a:	2b00      	cmp	r3, #0
 800406c:	d109      	bne.n	8004082 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2200      	movs	r2, #0
 8004072:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a90      	ldr	r2, [pc, #576]	@ (80042bc <HAL_I2S_Init+0x26c>)
 800407a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800407c:	6878      	ldr	r0, [r7, #4]
 800407e:	f7fc fcbf 	bl	8000a00 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2202      	movs	r2, #2
 8004086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	69db      	ldr	r3, [r3, #28]
 8004090:	687a      	ldr	r2, [r7, #4]
 8004092:	6812      	ldr	r2, [r2, #0]
 8004094:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004098:	f023 030f 	bic.w	r3, r3, #15
 800409c:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	2202      	movs	r2, #2
 80040a4:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	695b      	ldr	r3, [r3, #20]
 80040aa:	2b02      	cmp	r3, #2
 80040ac:	d060      	beq.n	8004170 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	68db      	ldr	r3, [r3, #12]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d102      	bne.n	80040bc <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80040b6:	2310      	movs	r3, #16
 80040b8:	617b      	str	r3, [r7, #20]
 80040ba:	e001      	b.n	80040c0 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80040bc:	2320      	movs	r3, #32
 80040be:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	689b      	ldr	r3, [r3, #8]
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d802      	bhi.n	80040ce <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 80040c8:	697b      	ldr	r3, [r7, #20]
 80040ca:	005b      	lsls	r3, r3, #1
 80040cc:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80040ce:	2001      	movs	r0, #1
 80040d0:	f001 f9d8 	bl	8005484 <HAL_RCCEx_GetPeriphCLKFreq>
 80040d4:	60f8      	str	r0, [r7, #12]
#endif /* I2S_APB1_APB2_FEATURE */

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80040de:	d125      	bne.n	800412c <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d010      	beq.n	800410a <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	009b      	lsls	r3, r3, #2
 80040ec:	68fa      	ldr	r2, [r7, #12]
 80040ee:	fbb2 f2f3 	udiv	r2, r2, r3
 80040f2:	4613      	mov	r3, r2
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	4413      	add	r3, r2
 80040f8:	005b      	lsls	r3, r3, #1
 80040fa:	461a      	mov	r2, r3
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	695b      	ldr	r3, [r3, #20]
 8004100:	fbb2 f3f3 	udiv	r3, r2, r3
 8004104:	3305      	adds	r3, #5
 8004106:	613b      	str	r3, [r7, #16]
 8004108:	e01f      	b.n	800414a <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800410a:	697b      	ldr	r3, [r7, #20]
 800410c:	00db      	lsls	r3, r3, #3
 800410e:	68fa      	ldr	r2, [r7, #12]
 8004110:	fbb2 f2f3 	udiv	r2, r2, r3
 8004114:	4613      	mov	r3, r2
 8004116:	009b      	lsls	r3, r3, #2
 8004118:	4413      	add	r3, r2
 800411a:	005b      	lsls	r3, r3, #1
 800411c:	461a      	mov	r2, r3
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	fbb2 f3f3 	udiv	r3, r2, r3
 8004126:	3305      	adds	r3, #5
 8004128:	613b      	str	r3, [r7, #16]
 800412a:	e00e      	b.n	800414a <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	697b      	ldr	r3, [r7, #20]
 8004130:	fbb2 f2f3 	udiv	r2, r2, r3
 8004134:	4613      	mov	r3, r2
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	4413      	add	r3, r2
 800413a:	005b      	lsls	r3, r3, #1
 800413c:	461a      	mov	r2, r3
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	695b      	ldr	r3, [r3, #20]
 8004142:	fbb2 f3f3 	udiv	r3, r2, r3
 8004146:	3305      	adds	r3, #5
 8004148:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800414a:	693b      	ldr	r3, [r7, #16]
 800414c:	4a5c      	ldr	r2, [pc, #368]	@ (80042c0 <HAL_I2S_Init+0x270>)
 800414e:	fba2 2303 	umull	r2, r3, r2, r3
 8004152:	08db      	lsrs	r3, r3, #3
 8004154:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 8004156:	693b      	ldr	r3, [r7, #16]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800415e:	693a      	ldr	r2, [r7, #16]
 8004160:	69bb      	ldr	r3, [r7, #24]
 8004162:	1ad3      	subs	r3, r2, r3
 8004164:	085b      	lsrs	r3, r3, #1
 8004166:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8004168:	69bb      	ldr	r3, [r7, #24]
 800416a:	021b      	lsls	r3, r3, #8
 800416c:	61bb      	str	r3, [r7, #24]
 800416e:	e003      	b.n	8004178 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8004170:	2302      	movs	r3, #2
 8004172:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 8004178:	69fb      	ldr	r3, [r7, #28]
 800417a:	2b01      	cmp	r3, #1
 800417c:	d902      	bls.n	8004184 <HAL_I2S_Init+0x134>
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	2bff      	cmp	r3, #255	@ 0xff
 8004182:	d907      	bls.n	8004194 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004188:	f043 0210 	orr.w	r2, r3, #16
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	645a      	str	r2, [r3, #68]	@ 0x44
    return  HAL_ERROR;
 8004190:	2301      	movs	r3, #1
 8004192:	e08f      	b.n	80042b4 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	691a      	ldr	r2, [r3, #16]
 8004198:	69bb      	ldr	r3, [r7, #24]
 800419a:	ea42 0103 	orr.w	r1, r2, r3
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	69fa      	ldr	r2, [r7, #28]
 80041a4:	430a      	orrs	r2, r1
 80041a6:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	69db      	ldr	r3, [r3, #28]
 80041ae:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 80041b2:	f023 030f 	bic.w	r3, r3, #15
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6851      	ldr	r1, [r2, #4]
 80041ba:	687a      	ldr	r2, [r7, #4]
 80041bc:	6892      	ldr	r2, [r2, #8]
 80041be:	4311      	orrs	r1, r2
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	68d2      	ldr	r2, [r2, #12]
 80041c4:	4311      	orrs	r1, r2
 80041c6:	687a      	ldr	r2, [r7, #4]
 80041c8:	6992      	ldr	r2, [r2, #24]
 80041ca:	430a      	orrs	r2, r1
 80041cc:	431a      	orrs	r2, r3
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041d6:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a1b      	ldr	r3, [r3, #32]
 80041dc:	2b01      	cmp	r3, #1
 80041de:	d161      	bne.n	80042a4 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	4a38      	ldr	r2, [pc, #224]	@ (80042c4 <HAL_I2S_Init+0x274>)
 80041e4:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a37      	ldr	r2, [pc, #220]	@ (80042c8 <HAL_I2S_Init+0x278>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d101      	bne.n	80041f4 <HAL_I2S_Init+0x1a4>
 80041f0:	4b36      	ldr	r3, [pc, #216]	@ (80042cc <HAL_I2S_Init+0x27c>)
 80041f2:	e001      	b.n	80041f8 <HAL_I2S_Init+0x1a8>
 80041f4:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	6812      	ldr	r2, [r2, #0]
 80041fe:	4932      	ldr	r1, [pc, #200]	@ (80042c8 <HAL_I2S_Init+0x278>)
 8004200:	428a      	cmp	r2, r1
 8004202:	d101      	bne.n	8004208 <HAL_I2S_Init+0x1b8>
 8004204:	4a31      	ldr	r2, [pc, #196]	@ (80042cc <HAL_I2S_Init+0x27c>)
 8004206:	e001      	b.n	800420c <HAL_I2S_Init+0x1bc>
 8004208:	f04f 2240 	mov.w	r2, #1073758208	@ 0x40004000
 800420c:	f423 637b 	bic.w	r3, r3, #4016	@ 0xfb0
 8004210:	f023 030f 	bic.w	r3, r3, #15
 8004214:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a2b      	ldr	r2, [pc, #172]	@ (80042c8 <HAL_I2S_Init+0x278>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d101      	bne.n	8004224 <HAL_I2S_Init+0x1d4>
 8004220:	4b2a      	ldr	r3, [pc, #168]	@ (80042cc <HAL_I2S_Init+0x27c>)
 8004222:	e001      	b.n	8004228 <HAL_I2S_Init+0x1d8>
 8004224:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004228:	2202      	movs	r2, #2
 800422a:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	4a25      	ldr	r2, [pc, #148]	@ (80042c8 <HAL_I2S_Init+0x278>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d101      	bne.n	800423a <HAL_I2S_Init+0x1ea>
 8004236:	4b25      	ldr	r3, [pc, #148]	@ (80042cc <HAL_I2S_Init+0x27c>)
 8004238:	e001      	b.n	800423e <HAL_I2S_Init+0x1ee>
 800423a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800424a:	d003      	beq.n	8004254 <HAL_I2S_Init+0x204>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d103      	bne.n	800425c <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 8004254:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004258:	613b      	str	r3, [r7, #16]
 800425a:	e001      	b.n	8004260 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 800425c:	2300      	movs	r3, #0
 800425e:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
                         (uint16_t)tmp                   | \
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.Standard   | \
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800426a:	4313      	orrs	r3, r2
 800426c:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.DataFormat | \
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	68db      	ldr	r3, [r3, #12]
 8004272:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 8004274:	4313      	orrs	r3, r2
 8004276:	b29a      	uxth	r2, r3
                         (uint16_t)hi2s->Init.CPOL);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	699b      	ldr	r3, [r3, #24]
 800427c:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD    | \
 800427e:	4313      	orrs	r3, r2
 8004280:	b29a      	uxth	r2, r3
 8004282:	897b      	ldrh	r3, [r7, #10]
 8004284:	4313      	orrs	r3, r2
 8004286:	b29b      	uxth	r3, r3
 8004288:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800428c:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a0d      	ldr	r2, [pc, #52]	@ (80042c8 <HAL_I2S_Init+0x278>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d101      	bne.n	800429c <HAL_I2S_Init+0x24c>
 8004298:	4b0c      	ldr	r3, [pc, #48]	@ (80042cc <HAL_I2S_Init+0x27c>)
 800429a:	e001      	b.n	80042a0 <HAL_I2S_Init+0x250>
 800429c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80042a0:	897a      	ldrh	r2, [r7, #10]
 80042a2:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2201      	movs	r2, #1
 80042ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  return HAL_OK;
 80042b2:	2300      	movs	r3, #0
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	3720      	adds	r7, #32
 80042b8:	46bd      	mov	sp, r7
 80042ba:	bd80      	pop	{r7, pc}
 80042bc:	080043c7 	.word	0x080043c7
 80042c0:	cccccccd 	.word	0xcccccccd
 80042c4:	080044dd 	.word	0x080044dd
 80042c8:	40003800 	.word	0x40003800
 80042cc:	40003400 	.word	0x40003400

080042d0 <HAL_I2S_TxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042d0:	b480      	push	{r7}
 80042d2:	b083      	sub	sp, #12
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_TxCpltCallback could be implemented in the user file
   */
}
 80042d8:	bf00      	nop
 80042da:	370c      	adds	r7, #12
 80042dc:	46bd      	mov	sp, r7
 80042de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042e2:	4770      	bx	lr

080042e4 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 80042ec:	bf00      	nop
 80042ee:	370c      	adds	r7, #12
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b082      	sub	sp, #8
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004318:	881a      	ldrh	r2, [r3, #0]
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004324:	1c9a      	adds	r2, r3, #2
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	625a      	str	r2, [r3, #36]	@ 0x24
  hi2s->TxXferCount--;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800432e:	b29b      	uxth	r3, r3
 8004330:	3b01      	subs	r3, #1
 8004332:	b29a      	uxth	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800433c:	b29b      	uxth	r3, r3
 800433e:	2b00      	cmp	r3, #0
 8004340:	d10e      	bne.n	8004360 <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	685a      	ldr	r2, [r3, #4]
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004350:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2201      	movs	r2, #1
 8004356:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 800435a:	6878      	ldr	r0, [r7, #4]
 800435c:	f7ff ffb8 	bl	80042d0 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8004360:	bf00      	nop
 8004362:	3708      	adds	r7, #8
 8004364:	46bd      	mov	sp, r7
 8004366:	bd80      	pop	{r7, pc}

08004368 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8004368:	b580      	push	{r7, lr}
 800436a:	b082      	sub	sp, #8
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	68da      	ldr	r2, [r3, #12]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800437a:	b292      	uxth	r2, r2
 800437c:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004382:	1c9a      	adds	r2, r3, #2
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2s->RxXferCount--;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800438c:	b29b      	uxth	r3, r3
 800438e:	3b01      	subs	r3, #1
 8004390:	b29a      	uxth	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800439a:	b29b      	uxth	r3, r3
 800439c:	2b00      	cmp	r3, #0
 800439e:	d10e      	bne.n	80043be <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	685a      	ldr	r2, [r3, #4]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80043ae:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2201      	movs	r2, #1
 80043b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff93 	bl	80042e4 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	689b      	ldr	r3, [r3, #8]
 80043d4:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043dc:	b2db      	uxtb	r3, r3
 80043de:	2b04      	cmp	r3, #4
 80043e0:	d13a      	bne.n	8004458 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d109      	bne.n	8004400 <I2S_IRQHandler+0x3a>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	685b      	ldr	r3, [r3, #4]
 80043f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043f6:	2b40      	cmp	r3, #64	@ 0x40
 80043f8:	d102      	bne.n	8004400 <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 80043fa:	6878      	ldr	r0, [r7, #4]
 80043fc:	f7ff ffb4 	bl	8004368 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004406:	2b40      	cmp	r3, #64	@ 0x40
 8004408:	d126      	bne.n	8004458 <I2S_IRQHandler+0x92>
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	f003 0320 	and.w	r3, r3, #32
 8004414:	2b20      	cmp	r3, #32
 8004416:	d11f      	bne.n	8004458 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	685a      	ldr	r2, [r3, #4]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004426:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8004428:	2300      	movs	r3, #0
 800442a:	613b      	str	r3, [r7, #16]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	68db      	ldr	r3, [r3, #12]
 8004432:	613b      	str	r3, [r7, #16]
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	613b      	str	r3, [r7, #16]
 800443c:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2201      	movs	r2, #1
 8004442:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800444a:	f043 0202 	orr.w	r2, r3, #2
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004452:	6878      	ldr	r0, [r7, #4]
 8004454:	f7ff ff50 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800445e:	b2db      	uxtb	r3, r3
 8004460:	2b03      	cmp	r3, #3
 8004462:	d136      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8004464:	697b      	ldr	r3, [r7, #20]
 8004466:	f003 0302 	and.w	r3, r3, #2
 800446a:	2b02      	cmp	r3, #2
 800446c:	d109      	bne.n	8004482 <I2S_IRQHandler+0xbc>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	685b      	ldr	r3, [r3, #4]
 8004474:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004478:	2b80      	cmp	r3, #128	@ 0x80
 800447a:	d102      	bne.n	8004482 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f7ff ff45 	bl	800430c <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f003 0308 	and.w	r3, r3, #8
 8004488:	2b08      	cmp	r3, #8
 800448a:	d122      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	685b      	ldr	r3, [r3, #4]
 8004492:	f003 0320 	and.w	r3, r3, #32
 8004496:	2b20      	cmp	r3, #32
 8004498:	d11b      	bne.n	80044d2 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685a      	ldr	r2, [r3, #4]
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80044a8:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 80044aa:	2300      	movs	r3, #0
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	60fb      	str	r3, [r7, #12]
 80044b6:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2201      	movs	r2, #1
 80044bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044c4:	f043 0204 	orr.w	r2, r3, #4
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80044cc:	6878      	ldr	r0, [r7, #4]
 80044ce:	f7ff ff13 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80044d2:	bf00      	nop
 80044d4:	3718      	adds	r7, #24
 80044d6:	46bd      	mov	sp, r7
 80044d8:	bd80      	pop	{r7, pc}
	...

080044dc <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b088      	sub	sp, #32
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	4a92      	ldr	r2, [pc, #584]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80044f2:	4293      	cmp	r3, r2
 80044f4:	d101      	bne.n	80044fa <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 80044f6:	4b92      	ldr	r3, [pc, #584]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80044f8:	e001      	b.n	80044fe <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 80044fa:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a8b      	ldr	r2, [pc, #556]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004510:	4293      	cmp	r3, r2
 8004512:	d101      	bne.n	8004518 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8004514:	4b8a      	ldr	r3, [pc, #552]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004516:	e001      	b.n	800451c <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8004518:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004528:	d004      	beq.n	8004534 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	2b00      	cmp	r3, #0
 8004530:	f040 8099 	bne.w	8004666 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8004534:	69fb      	ldr	r3, [r7, #28]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b02      	cmp	r3, #2
 800453c:	d107      	bne.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004544:	2b00      	cmp	r3, #0
 8004546:	d002      	beq.n	800454e <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8004548:	6878      	ldr	r0, [r7, #4]
 800454a:	f000 f925 	bl	8004798 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 800454e:	69bb      	ldr	r3, [r7, #24]
 8004550:	f003 0301 	and.w	r3, r3, #1
 8004554:	2b01      	cmp	r3, #1
 8004556:	d107      	bne.n	8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800455e:	2b00      	cmp	r3, #0
 8004560:	d002      	beq.n	8004568 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 f9c8 	bl	80048f8 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004568:	69bb      	ldr	r3, [r7, #24]
 800456a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800456e:	2b40      	cmp	r3, #64	@ 0x40
 8004570:	d13a      	bne.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	f003 0320 	and.w	r3, r3, #32
 8004578:	2b00      	cmp	r3, #0
 800457a:	d035      	beq.n	80045e8 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	4a6e      	ldr	r2, [pc, #440]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004582:	4293      	cmp	r3, r2
 8004584:	d101      	bne.n	800458a <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8004586:	4b6e      	ldr	r3, [pc, #440]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004588:	e001      	b.n	800458e <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 800458a:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800458e:	685a      	ldr	r2, [r3, #4]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	4969      	ldr	r1, [pc, #420]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004596:	428b      	cmp	r3, r1
 8004598:	d101      	bne.n	800459e <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 800459a:	4b69      	ldr	r3, [pc, #420]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800459c:	e001      	b.n	80045a2 <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 800459e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80045a2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80045a6:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	685a      	ldr	r2, [r3, #4]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80045b6:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	68db      	ldr	r3, [r3, #12]
 80045c2:	60fb      	str	r3, [r7, #12]
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	689b      	ldr	r3, [r3, #8]
 80045ca:	60fb      	str	r3, [r7, #12]
 80045cc:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2201      	movs	r2, #1
 80045d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f043 0202 	orr.w	r2, r3, #2
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7ff fe88 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80045e8:	69fb      	ldr	r3, [r7, #28]
 80045ea:	f003 0308 	and.w	r3, r3, #8
 80045ee:	2b08      	cmp	r3, #8
 80045f0:	f040 80c3 	bne.w	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
 80045f4:	697b      	ldr	r3, [r7, #20]
 80045f6:	f003 0320 	and.w	r3, r3, #32
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	f000 80bd 	beq.w	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800460e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a49      	ldr	r2, [pc, #292]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d101      	bne.n	800461e <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 800461a:	4b49      	ldr	r3, [pc, #292]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 800461c:	e001      	b.n	8004622 <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 800461e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004622:	685a      	ldr	r2, [r3, #4]
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	4944      	ldr	r1, [pc, #272]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800462a:	428b      	cmp	r3, r1
 800462c:	d101      	bne.n	8004632 <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004630:	e001      	b.n	8004636 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8004632:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004636:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800463a:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800463c:	2300      	movs	r3, #0
 800463e:	60bb      	str	r3, [r7, #8]
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	689b      	ldr	r3, [r3, #8]
 8004646:	60bb      	str	r3, [r7, #8]
 8004648:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2201      	movs	r2, #1
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004656:	f043 0204 	orr.w	r2, r3, #4
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f7ff fe4a 	bl	80042f8 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8004664:	e089      	b.n	800477a <HAL_I2SEx_FullDuplex_IRQHandler+0x29e>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8004666:	69bb      	ldr	r3, [r7, #24]
 8004668:	f003 0302 	and.w	r3, r3, #2
 800466c:	2b02      	cmp	r3, #2
 800466e:	d107      	bne.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004676:	2b00      	cmp	r3, #0
 8004678:	d002      	beq.n	8004680 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f8be 	bl	80047fc <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	f003 0301 	and.w	r3, r3, #1
 8004686:	2b01      	cmp	r3, #1
 8004688:	d107      	bne.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004690:	2b00      	cmp	r3, #0
 8004692:	d002      	beq.n	800469a <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f000 f8fd 	bl	8004894 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800469a:	69fb      	ldr	r3, [r7, #28]
 800469c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a0:	2b40      	cmp	r3, #64	@ 0x40
 80046a2:	d12f      	bne.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 80046a4:	697b      	ldr	r3, [r7, #20]
 80046a6:	f003 0320 	and.w	r3, r3, #32
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d02a      	beq.n	8004704 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80046bc:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	4a1e      	ldr	r2, [pc, #120]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046c4:	4293      	cmp	r3, r2
 80046c6:	d101      	bne.n	80046cc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 80046c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046ca:	e001      	b.n	80046d0 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 80046cc:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046d0:	685a      	ldr	r2, [r3, #4]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	4919      	ldr	r1, [pc, #100]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 80046d8:	428b      	cmp	r3, r1
 80046da:	d101      	bne.n	80046e0 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 80046dc:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 80046de:	e001      	b.n	80046e4 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 80046e0:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 80046e4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80046e8:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2201      	movs	r2, #1
 80046ee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f6:	f043 0202 	orr.w	r2, r3, #2
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80046fe:	6878      	ldr	r0, [r7, #4]
 8004700:	f7ff fdfa 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8004704:	69bb      	ldr	r3, [r7, #24]
 8004706:	f003 0308 	and.w	r3, r3, #8
 800470a:	2b08      	cmp	r3, #8
 800470c:	d136      	bne.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
 800470e:	693b      	ldr	r3, [r7, #16]
 8004710:	f003 0320 	and.w	r3, r3, #32
 8004714:	2b00      	cmp	r3, #0
 8004716:	d031      	beq.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	4a07      	ldr	r2, [pc, #28]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 800471e:	4293      	cmp	r3, r2
 8004720:	d101      	bne.n	8004726 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 8004722:	4b07      	ldr	r3, [pc, #28]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004724:	e001      	b.n	800472a <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8004726:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800472a:	685a      	ldr	r2, [r3, #4]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	4902      	ldr	r1, [pc, #8]	@ (800473c <HAL_I2SEx_FullDuplex_IRQHandler+0x260>)
 8004732:	428b      	cmp	r3, r1
 8004734:	d106      	bne.n	8004744 <HAL_I2SEx_FullDuplex_IRQHandler+0x268>
 8004736:	4b02      	ldr	r3, [pc, #8]	@ (8004740 <HAL_I2SEx_FullDuplex_IRQHandler+0x264>)
 8004738:	e006      	b.n	8004748 <HAL_I2SEx_FullDuplex_IRQHandler+0x26c>
 800473a:	bf00      	nop
 800473c:	40003800 	.word	0x40003800
 8004740:	40003400 	.word	0x40003400
 8004744:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004748:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 800474c:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	685a      	ldr	r2, [r3, #4]
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800475c:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	2201      	movs	r2, #1
 8004762:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800476a:	f043 0204 	orr.w	r2, r3, #4
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	645a      	str	r2, [r3, #68]	@ 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fdc0 	bl	80042f8 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004778:	e000      	b.n	800477c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800477a:	bf00      	nop
}
 800477c:	bf00      	nop
 800477e:	3720      	adds	r7, #32
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 800478c:	bf00      	nop
 800478e:	370c      	adds	r7, #12
 8004790:	46bd      	mov	sp, r7
 8004792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004796:	4770      	bx	lr

08004798 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004798:	b580      	push	{r7, lr}
 800479a:	b082      	sub	sp, #8
 800479c:	af00      	add	r7, sp, #0
 800479e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047a4:	1c99      	adds	r1, r3, #2
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	6251      	str	r1, [r2, #36]	@ 0x24
 80047aa:	881a      	ldrh	r2, [r3, #0]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d113      	bne.n	80047f2 <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	685a      	ldr	r2, [r3, #4]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 80047d8:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80047de:	b29b      	uxth	r3, r3
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d106      	bne.n	80047f2 <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2201      	movs	r2, #1
 80047e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f7ff ffc9 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004808:	1c99      	adds	r1, r3, #2
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	6251      	str	r1, [r2, #36]	@ 0x24
 800480e:	8819      	ldrh	r1, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a1d      	ldr	r2, [pc, #116]	@ (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d101      	bne.n	800481e <I2SEx_TxISR_I2SExt+0x22>
 800481a:	4b1d      	ldr	r3, [pc, #116]	@ (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800481c:	e001      	b.n	8004822 <I2SEx_TxISR_I2SExt+0x26>
 800481e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004822:	460a      	mov	r2, r1
 8004824:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800482a:	b29b      	uxth	r3, r3
 800482c:	3b01      	subs	r3, #1
 800482e:	b29a      	uxth	r2, r3
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	855a      	strh	r2, [r3, #42]	@ 0x2a

  if (hi2s->TxXferCount == 0U)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004838:	b29b      	uxth	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d121      	bne.n	8004882 <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	4a12      	ldr	r2, [pc, #72]	@ (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004844:	4293      	cmp	r3, r2
 8004846:	d101      	bne.n	800484c <I2SEx_TxISR_I2SExt+0x50>
 8004848:	4b11      	ldr	r3, [pc, #68]	@ (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800484a:	e001      	b.n	8004850 <I2SEx_TxISR_I2SExt+0x54>
 800484c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004850:	685a      	ldr	r2, [r3, #4]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	490d      	ldr	r1, [pc, #52]	@ (800488c <I2SEx_TxISR_I2SExt+0x90>)
 8004858:	428b      	cmp	r3, r1
 800485a:	d101      	bne.n	8004860 <I2SEx_TxISR_I2SExt+0x64>
 800485c:	4b0c      	ldr	r3, [pc, #48]	@ (8004890 <I2SEx_TxISR_I2SExt+0x94>)
 800485e:	e001      	b.n	8004864 <I2SEx_TxISR_I2SExt+0x68>
 8004860:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004864:	f022 02a0 	bic.w	r2, r2, #160	@ 0xa0
 8004868:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 800486e:	b29b      	uxth	r3, r3
 8004870:	2b00      	cmp	r3, #0
 8004872:	d106      	bne.n	8004882 <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2201      	movs	r2, #1
 8004878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 800487c:	6878      	ldr	r0, [r7, #4]
 800487e:	f7ff ff81 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8004882:	bf00      	nop
 8004884:	3708      	adds	r7, #8
 8004886:	46bd      	mov	sp, r7
 8004888:	bd80      	pop	{r7, pc}
 800488a:	bf00      	nop
 800488c:	40003800 	.word	0x40003800
 8004890:	40003400 	.word	0x40003400

08004894 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b082      	sub	sp, #8
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68d8      	ldr	r0, [r3, #12]
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80048a6:	1c99      	adds	r1, r3, #2
 80048a8:	687a      	ldr	r2, [r7, #4]
 80048aa:	62d1      	str	r1, [r2, #44]	@ 0x2c
 80048ac:	b282      	uxth	r2, r0
 80048ae:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048b4:	b29b      	uxth	r3, r3
 80048b6:	3b01      	subs	r3, #1
 80048b8:	b29a      	uxth	r2, r3
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 80048c2:	b29b      	uxth	r3, r3
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d113      	bne.n	80048f0 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80048d6:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80048dc:	b29b      	uxth	r3, r3
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d106      	bne.n	80048f0 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f7ff ff4a 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80048f0:	bf00      	nop
 80048f2:	3708      	adds	r7, #8
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bd80      	pop	{r7, pc}

080048f8 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b082      	sub	sp, #8
 80048fc:	af00      	add	r7, sp, #0
 80048fe:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a20      	ldr	r2, [pc, #128]	@ (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d101      	bne.n	800490e <I2SEx_RxISR_I2SExt+0x16>
 800490a:	4b20      	ldr	r3, [pc, #128]	@ (800498c <I2SEx_RxISR_I2SExt+0x94>)
 800490c:	e001      	b.n	8004912 <I2SEx_RxISR_I2SExt+0x1a>
 800490e:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004912:	68d8      	ldr	r0, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004918:	1c99      	adds	r1, r3, #2
 800491a:	687a      	ldr	r2, [r7, #4]
 800491c:	62d1      	str	r1, [r2, #44]	@ 0x2c
 800491e:	b282      	uxth	r2, r0
 8004920:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004926:	b29b      	uxth	r3, r3
 8004928:	3b01      	subs	r3, #1
 800492a:	b29a      	uxth	r2, r3
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	865a      	strh	r2, [r3, #50]	@ 0x32

  if (hi2s->RxXferCount == 0U)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	8e5b      	ldrh	r3, [r3, #50]	@ 0x32
 8004934:	b29b      	uxth	r3, r3
 8004936:	2b00      	cmp	r3, #0
 8004938:	d121      	bne.n	800497e <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	4a12      	ldr	r2, [pc, #72]	@ (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d101      	bne.n	8004948 <I2SEx_RxISR_I2SExt+0x50>
 8004944:	4b11      	ldr	r3, [pc, #68]	@ (800498c <I2SEx_RxISR_I2SExt+0x94>)
 8004946:	e001      	b.n	800494c <I2SEx_RxISR_I2SExt+0x54>
 8004948:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 800494c:	685a      	ldr	r2, [r3, #4]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	490d      	ldr	r1, [pc, #52]	@ (8004988 <I2SEx_RxISR_I2SExt+0x90>)
 8004954:	428b      	cmp	r3, r1
 8004956:	d101      	bne.n	800495c <I2SEx_RxISR_I2SExt+0x64>
 8004958:	4b0c      	ldr	r3, [pc, #48]	@ (800498c <I2SEx_RxISR_I2SExt+0x94>)
 800495a:	e001      	b.n	8004960 <I2SEx_RxISR_I2SExt+0x68>
 800495c:	f04f 2340 	mov.w	r3, #1073758208	@ 0x40004000
 8004960:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8004964:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800496a:	b29b      	uxth	r3, r3
 800496c:	2b00      	cmp	r3, #0
 800496e:	d106      	bne.n	800497e <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2201      	movs	r2, #1
 8004974:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8004978:	6878      	ldr	r0, [r7, #4]
 800497a:	f7ff ff03 	bl	8004784 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800497e:	bf00      	nop
 8004980:	3708      	adds	r7, #8
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
 8004986:	bf00      	nop
 8004988:	40003800 	.word	0x40003800
 800498c:	40003400 	.word	0x40003400

08004990 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004990:	b580      	push	{r7, lr}
 8004992:	b086      	sub	sp, #24
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d101      	bne.n	80049a2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e267      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	f003 0301 	and.w	r3, r3, #1
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d075      	beq.n	8004a9a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049ae:	4b88      	ldr	r3, [pc, #544]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049b0:	689b      	ldr	r3, [r3, #8]
 80049b2:	f003 030c 	and.w	r3, r3, #12
 80049b6:	2b04      	cmp	r3, #4
 80049b8:	d00c      	beq.n	80049d4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049ba:	4b85      	ldr	r3, [pc, #532]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80049c2:	2b08      	cmp	r3, #8
 80049c4:	d112      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049c6:	4b82      	ldr	r3, [pc, #520]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049c8:	685b      	ldr	r3, [r3, #4]
 80049ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ce:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049d2:	d10b      	bne.n	80049ec <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049d4:	4b7e      	ldr	r3, [pc, #504]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d05b      	beq.n	8004a98 <HAL_RCC_OscConfig+0x108>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	685b      	ldr	r3, [r3, #4]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d157      	bne.n	8004a98 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80049e8:	2301      	movs	r3, #1
 80049ea:	e242      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80049f4:	d106      	bne.n	8004a04 <HAL_RCC_OscConfig+0x74>
 80049f6:	4b76      	ldr	r3, [pc, #472]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a75      	ldr	r2, [pc, #468]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 80049fc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a00:	6013      	str	r3, [r2, #0]
 8004a02:	e01d      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	685b      	ldr	r3, [r3, #4]
 8004a08:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a0c:	d10c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x98>
 8004a0e:	4b70      	ldr	r3, [pc, #448]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	4a6f      	ldr	r2, [pc, #444]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a14:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a18:	6013      	str	r3, [r2, #0]
 8004a1a:	4b6d      	ldr	r3, [pc, #436]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	4a6c      	ldr	r2, [pc, #432]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a20:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a24:	6013      	str	r3, [r2, #0]
 8004a26:	e00b      	b.n	8004a40 <HAL_RCC_OscConfig+0xb0>
 8004a28:	4b69      	ldr	r3, [pc, #420]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	4a68      	ldr	r2, [pc, #416]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a32:	6013      	str	r3, [r2, #0]
 8004a34:	4b66      	ldr	r3, [pc, #408]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a65      	ldr	r2, [pc, #404]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a3a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a3e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	685b      	ldr	r3, [r3, #4]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d013      	beq.n	8004a70 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a48:	f7fc faee 	bl	8001028 <HAL_GetTick>
 8004a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a4e:	e008      	b.n	8004a62 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a50:	f7fc faea 	bl	8001028 <HAL_GetTick>
 8004a54:	4602      	mov	r2, r0
 8004a56:	693b      	ldr	r3, [r7, #16]
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	2b64      	cmp	r3, #100	@ 0x64
 8004a5c:	d901      	bls.n	8004a62 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a5e:	2303      	movs	r3, #3
 8004a60:	e207      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a62:	4b5b      	ldr	r3, [pc, #364]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d0f0      	beq.n	8004a50 <HAL_RCC_OscConfig+0xc0>
 8004a6e:	e014      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a70:	f7fc fada 	bl	8001028 <HAL_GetTick>
 8004a74:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a76:	e008      	b.n	8004a8a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004a78:	f7fc fad6 	bl	8001028 <HAL_GetTick>
 8004a7c:	4602      	mov	r2, r0
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	1ad3      	subs	r3, r2, r3
 8004a82:	2b64      	cmp	r3, #100	@ 0x64
 8004a84:	d901      	bls.n	8004a8a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004a86:	2303      	movs	r3, #3
 8004a88:	e1f3      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a8a:	4b51      	ldr	r3, [pc, #324]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004a8c:	681b      	ldr	r3, [r3, #0]
 8004a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d1f0      	bne.n	8004a78 <HAL_RCC_OscConfig+0xe8>
 8004a96:	e000      	b.n	8004a9a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a98:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f003 0302 	and.w	r3, r3, #2
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d063      	beq.n	8004b6e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aa6:	4b4a      	ldr	r3, [pc, #296]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004aa8:	689b      	ldr	r3, [r3, #8]
 8004aaa:	f003 030c 	and.w	r3, r3, #12
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ab2:	4b47      	ldr	r3, [pc, #284]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ab4:	689b      	ldr	r3, [r3, #8]
 8004ab6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004aba:	2b08      	cmp	r3, #8
 8004abc:	d11c      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004abe:	4b44      	ldr	r3, [pc, #272]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d116      	bne.n	8004af8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004aca:	4b41      	ldr	r3, [pc, #260]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	f003 0302 	and.w	r3, r3, #2
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d005      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	2b01      	cmp	r3, #1
 8004adc:	d001      	beq.n	8004ae2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ade:	2301      	movs	r3, #1
 8004ae0:	e1c7      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ae2:	4b3b      	ldr	r3, [pc, #236]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	00db      	lsls	r3, r3, #3
 8004af0:	4937      	ldr	r1, [pc, #220]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004af2:	4313      	orrs	r3, r2
 8004af4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004af6:	e03a      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d020      	beq.n	8004b42 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b00:	4b34      	ldr	r3, [pc, #208]	@ (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b02:	2201      	movs	r2, #1
 8004b04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b06:	f7fc fa8f 	bl	8001028 <HAL_GetTick>
 8004b0a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b0c:	e008      	b.n	8004b20 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b0e:	f7fc fa8b 	bl	8001028 <HAL_GetTick>
 8004b12:	4602      	mov	r2, r0
 8004b14:	693b      	ldr	r3, [r7, #16]
 8004b16:	1ad3      	subs	r3, r2, r3
 8004b18:	2b02      	cmp	r3, #2
 8004b1a:	d901      	bls.n	8004b20 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b1c:	2303      	movs	r3, #3
 8004b1e:	e1a8      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b20:	4b2b      	ldr	r3, [pc, #172]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0302 	and.w	r3, r3, #2
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d0f0      	beq.n	8004b0e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b2c:	4b28      	ldr	r3, [pc, #160]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	00db      	lsls	r3, r3, #3
 8004b3a:	4925      	ldr	r1, [pc, #148]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b3c:	4313      	orrs	r3, r2
 8004b3e:	600b      	str	r3, [r1, #0]
 8004b40:	e015      	b.n	8004b6e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b42:	4b24      	ldr	r3, [pc, #144]	@ (8004bd4 <HAL_RCC_OscConfig+0x244>)
 8004b44:	2200      	movs	r2, #0
 8004b46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b48:	f7fc fa6e 	bl	8001028 <HAL_GetTick>
 8004b4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b4e:	e008      	b.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004b50:	f7fc fa6a 	bl	8001028 <HAL_GetTick>
 8004b54:	4602      	mov	r2, r0
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	1ad3      	subs	r3, r2, r3
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	d901      	bls.n	8004b62 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b5e:	2303      	movs	r3, #3
 8004b60:	e187      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b62:	4b1b      	ldr	r3, [pc, #108]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d1f0      	bne.n	8004b50 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f003 0308 	and.w	r3, r3, #8
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d036      	beq.n	8004be8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d016      	beq.n	8004bb0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b82:	4b15      	ldr	r3, [pc, #84]	@ (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004b84:	2201      	movs	r2, #1
 8004b86:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b88:	f7fc fa4e 	bl	8001028 <HAL_GetTick>
 8004b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b8e:	e008      	b.n	8004ba2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004b90:	f7fc fa4a 	bl	8001028 <HAL_GetTick>
 8004b94:	4602      	mov	r2, r0
 8004b96:	693b      	ldr	r3, [r7, #16]
 8004b98:	1ad3      	subs	r3, r2, r3
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d901      	bls.n	8004ba2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004b9e:	2303      	movs	r3, #3
 8004ba0:	e167      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8004bd0 <HAL_RCC_OscConfig+0x240>)
 8004ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ba6:	f003 0302 	and.w	r3, r3, #2
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d0f0      	beq.n	8004b90 <HAL_RCC_OscConfig+0x200>
 8004bae:	e01b      	b.n	8004be8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bb0:	4b09      	ldr	r3, [pc, #36]	@ (8004bd8 <HAL_RCC_OscConfig+0x248>)
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bb6:	f7fc fa37 	bl	8001028 <HAL_GetTick>
 8004bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bbc:	e00e      	b.n	8004bdc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004bbe:	f7fc fa33 	bl	8001028 <HAL_GetTick>
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	693b      	ldr	r3, [r7, #16]
 8004bc6:	1ad3      	subs	r3, r2, r3
 8004bc8:	2b02      	cmp	r3, #2
 8004bca:	d907      	bls.n	8004bdc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	e150      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004bd0:	40023800 	.word	0x40023800
 8004bd4:	42470000 	.word	0x42470000
 8004bd8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bdc:	4b88      	ldr	r3, [pc, #544]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bde:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004be0:	f003 0302 	and.w	r3, r3, #2
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1ea      	bne.n	8004bbe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f003 0304 	and.w	r3, r3, #4
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	f000 8097 	beq.w	8004d24 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004bfa:	4b81      	ldr	r3, [pc, #516]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004bfc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bfe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d10f      	bne.n	8004c26 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c06:	2300      	movs	r3, #0
 8004c08:	60bb      	str	r3, [r7, #8]
 8004c0a:	4b7d      	ldr	r3, [pc, #500]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c0e:	4a7c      	ldr	r2, [pc, #496]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c14:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c16:	4b7a      	ldr	r3, [pc, #488]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	60bb      	str	r3, [r7, #8]
 8004c20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c22:	2301      	movs	r3, #1
 8004c24:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c26:	4b77      	ldr	r3, [pc, #476]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d118      	bne.n	8004c64 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c32:	4b74      	ldr	r3, [pc, #464]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	4a73      	ldr	r2, [pc, #460]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c38:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c3c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c3e:	f7fc f9f3 	bl	8001028 <HAL_GetTick>
 8004c42:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c44:	e008      	b.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c46:	f7fc f9ef 	bl	8001028 <HAL_GetTick>
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	693b      	ldr	r3, [r7, #16]
 8004c4e:	1ad3      	subs	r3, r2, r3
 8004c50:	2b02      	cmp	r3, #2
 8004c52:	d901      	bls.n	8004c58 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c54:	2303      	movs	r3, #3
 8004c56:	e10c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c58:	4b6a      	ldr	r3, [pc, #424]	@ (8004e04 <HAL_RCC_OscConfig+0x474>)
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d0f0      	beq.n	8004c46 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689b      	ldr	r3, [r3, #8]
 8004c68:	2b01      	cmp	r3, #1
 8004c6a:	d106      	bne.n	8004c7a <HAL_RCC_OscConfig+0x2ea>
 8004c6c:	4b64      	ldr	r3, [pc, #400]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c6e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c70:	4a63      	ldr	r2, [pc, #396]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c72:	f043 0301 	orr.w	r3, r3, #1
 8004c76:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c78:	e01c      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b05      	cmp	r3, #5
 8004c80:	d10c      	bne.n	8004c9c <HAL_RCC_OscConfig+0x30c>
 8004c82:	4b5f      	ldr	r3, [pc, #380]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c86:	4a5e      	ldr	r2, [pc, #376]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c88:	f043 0304 	orr.w	r3, r3, #4
 8004c8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c8e:	4b5c      	ldr	r3, [pc, #368]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c92:	4a5b      	ldr	r2, [pc, #364]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c94:	f043 0301 	orr.w	r3, r3, #1
 8004c98:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c9a:	e00b      	b.n	8004cb4 <HAL_RCC_OscConfig+0x324>
 8004c9c:	4b58      	ldr	r3, [pc, #352]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004c9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca0:	4a57      	ldr	r2, [pc, #348]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004ca2:	f023 0301 	bic.w	r3, r3, #1
 8004ca6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ca8:	4b55      	ldr	r3, [pc, #340]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004caa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cac:	4a54      	ldr	r2, [pc, #336]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cae:	f023 0304 	bic.w	r3, r3, #4
 8004cb2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	689b      	ldr	r3, [r3, #8]
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d015      	beq.n	8004ce8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cbc:	f7fc f9b4 	bl	8001028 <HAL_GetTick>
 8004cc0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cc2:	e00a      	b.n	8004cda <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cc4:	f7fc f9b0 	bl	8001028 <HAL_GetTick>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	693b      	ldr	r3, [r7, #16]
 8004ccc:	1ad3      	subs	r3, r2, r3
 8004cce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d901      	bls.n	8004cda <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cd6:	2303      	movs	r3, #3
 8004cd8:	e0cb      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cda:	4b49      	ldr	r3, [pc, #292]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d0ee      	beq.n	8004cc4 <HAL_RCC_OscConfig+0x334>
 8004ce6:	e014      	b.n	8004d12 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ce8:	f7fc f99e 	bl	8001028 <HAL_GetTick>
 8004cec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cee:	e00a      	b.n	8004d06 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004cf0:	f7fc f99a 	bl	8001028 <HAL_GetTick>
 8004cf4:	4602      	mov	r2, r0
 8004cf6:	693b      	ldr	r3, [r7, #16]
 8004cf8:	1ad3      	subs	r3, r2, r3
 8004cfa:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cfe:	4293      	cmp	r3, r2
 8004d00:	d901      	bls.n	8004d06 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d02:	2303      	movs	r3, #3
 8004d04:	e0b5      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d06:	4b3e      	ldr	r3, [pc, #248]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d08:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d0a:	f003 0302 	and.w	r3, r3, #2
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d1ee      	bne.n	8004cf0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d12:	7dfb      	ldrb	r3, [r7, #23]
 8004d14:	2b01      	cmp	r3, #1
 8004d16:	d105      	bne.n	8004d24 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d18:	4b39      	ldr	r3, [pc, #228]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1c:	4a38      	ldr	r2, [pc, #224]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d1e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d22:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	f000 80a1 	beq.w	8004e70 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d2e:	4b34      	ldr	r3, [pc, #208]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d30:	689b      	ldr	r3, [r3, #8]
 8004d32:	f003 030c 	and.w	r3, r3, #12
 8004d36:	2b08      	cmp	r3, #8
 8004d38:	d05c      	beq.n	8004df4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	699b      	ldr	r3, [r3, #24]
 8004d3e:	2b02      	cmp	r3, #2
 8004d40:	d141      	bne.n	8004dc6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d42:	4b31      	ldr	r3, [pc, #196]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d44:	2200      	movs	r2, #0
 8004d46:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d48:	f7fc f96e 	bl	8001028 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004d50:	f7fc f96a 	bl	8001028 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e087      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d62:	4b27      	ldr	r3, [pc, #156]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d1f0      	bne.n	8004d50 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d7c:	019b      	lsls	r3, r3, #6
 8004d7e:	431a      	orrs	r2, r3
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d84:	085b      	lsrs	r3, r3, #1
 8004d86:	3b01      	subs	r3, #1
 8004d88:	041b      	lsls	r3, r3, #16
 8004d8a:	431a      	orrs	r2, r3
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d90:	061b      	lsls	r3, r3, #24
 8004d92:	491b      	ldr	r1, [pc, #108]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004d94:	4313      	orrs	r3, r2
 8004d96:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d98:	4b1b      	ldr	r3, [pc, #108]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d9e:	f7fc f943 	bl	8001028 <HAL_GetTick>
 8004da2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da4:	e008      	b.n	8004db8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004da6:	f7fc f93f 	bl	8001028 <HAL_GetTick>
 8004daa:	4602      	mov	r2, r0
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	1ad3      	subs	r3, r2, r3
 8004db0:	2b02      	cmp	r3, #2
 8004db2:	d901      	bls.n	8004db8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004db4:	2303      	movs	r3, #3
 8004db6:	e05c      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004db8:	4b11      	ldr	r3, [pc, #68]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d0f0      	beq.n	8004da6 <HAL_RCC_OscConfig+0x416>
 8004dc4:	e054      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004dc6:	4b10      	ldr	r3, [pc, #64]	@ (8004e08 <HAL_RCC_OscConfig+0x478>)
 8004dc8:	2200      	movs	r2, #0
 8004dca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dcc:	f7fc f92c 	bl	8001028 <HAL_GetTick>
 8004dd0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dd2:	e008      	b.n	8004de6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004dd4:	f7fc f928 	bl	8001028 <HAL_GetTick>
 8004dd8:	4602      	mov	r2, r0
 8004dda:	693b      	ldr	r3, [r7, #16]
 8004ddc:	1ad3      	subs	r3, r2, r3
 8004dde:	2b02      	cmp	r3, #2
 8004de0:	d901      	bls.n	8004de6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004de2:	2303      	movs	r3, #3
 8004de4:	e045      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004de6:	4b06      	ldr	r3, [pc, #24]	@ (8004e00 <HAL_RCC_OscConfig+0x470>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d1f0      	bne.n	8004dd4 <HAL_RCC_OscConfig+0x444>
 8004df2:	e03d      	b.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	699b      	ldr	r3, [r3, #24]
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d107      	bne.n	8004e0c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004dfc:	2301      	movs	r3, #1
 8004dfe:	e038      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
 8004e00:	40023800 	.word	0x40023800
 8004e04:	40007000 	.word	0x40007000
 8004e08:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	@ (8004e7c <HAL_RCC_OscConfig+0x4ec>)
 8004e0e:	685b      	ldr	r3, [r3, #4]
 8004e10:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	699b      	ldr	r3, [r3, #24]
 8004e16:	2b01      	cmp	r3, #1
 8004e18:	d028      	beq.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d121      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e32:	429a      	cmp	r2, r3
 8004e34:	d11a      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e36:	68fa      	ldr	r2, [r7, #12]
 8004e38:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	687a      	ldr	r2, [r7, #4]
 8004e40:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e42:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d111      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e52:	085b      	lsrs	r3, r3, #1
 8004e54:	3b01      	subs	r3, #1
 8004e56:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d107      	bne.n	8004e6c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e66:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e68:	429a      	cmp	r2, r3
 8004e6a:	d001      	beq.n	8004e70 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	e000      	b.n	8004e72 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	4618      	mov	r0, r3
 8004e74:	3718      	adds	r7, #24
 8004e76:	46bd      	mov	sp, r7
 8004e78:	bd80      	pop	{r7, pc}
 8004e7a:	bf00      	nop
 8004e7c:	40023800 	.word	0x40023800

08004e80 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b084      	sub	sp, #16
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	d101      	bne.n	8004e94 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0cc      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004e94:	4b68      	ldr	r3, [pc, #416]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0307 	and.w	r3, r3, #7
 8004e9c:	683a      	ldr	r2, [r7, #0]
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	d90c      	bls.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ea2:	4b65      	ldr	r3, [pc, #404]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004ea4:	683a      	ldr	r2, [r7, #0]
 8004ea6:	b2d2      	uxtb	r2, r2
 8004ea8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004eaa:	4b63      	ldr	r3, [pc, #396]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f003 0307 	and.w	r3, r3, #7
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	429a      	cmp	r2, r3
 8004eb6:	d001      	beq.n	8004ebc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004eb8:	2301      	movs	r3, #1
 8004eba:	e0b8      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f003 0302 	and.w	r3, r3, #2
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d020      	beq.n	8004f0a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	f003 0304 	and.w	r3, r3, #4
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d005      	beq.n	8004ee0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ed4:	4b59      	ldr	r3, [pc, #356]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ed6:	689b      	ldr	r3, [r3, #8]
 8004ed8:	4a58      	ldr	r2, [pc, #352]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eda:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004ede:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	f003 0308 	and.w	r3, r3, #8
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d005      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004eec:	4b53      	ldr	r3, [pc, #332]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	4a52      	ldr	r2, [pc, #328]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004ef6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ef8:	4b50      	ldr	r3, [pc, #320]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004efa:	689b      	ldr	r3, [r3, #8]
 8004efc:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	689b      	ldr	r3, [r3, #8]
 8004f04:	494d      	ldr	r1, [pc, #308]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	4313      	orrs	r3, r2
 8004f08:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	f003 0301 	and.w	r3, r3, #1
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d044      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	2b01      	cmp	r3, #1
 8004f1c:	d107      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f1e:	4b47      	ldr	r3, [pc, #284]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d119      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e07f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	2b02      	cmp	r3, #2
 8004f34:	d003      	beq.n	8004f3e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d107      	bne.n	8004f4e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f3e:	4b3f      	ldr	r3, [pc, #252]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d109      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f4a:	2301      	movs	r3, #1
 8004f4c:	e06f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f4e:	4b3b      	ldr	r3, [pc, #236]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d101      	bne.n	8004f5e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	e067      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f5e:	4b37      	ldr	r3, [pc, #220]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f023 0203 	bic.w	r2, r3, #3
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	4934      	ldr	r1, [pc, #208]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	4313      	orrs	r3, r2
 8004f6e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f70:	f7fc f85a 	bl	8001028 <HAL_GetTick>
 8004f74:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f76:	e00a      	b.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f78:	f7fc f856 	bl	8001028 <HAL_GetTick>
 8004f7c:	4602      	mov	r2, r0
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	1ad3      	subs	r3, r2, r3
 8004f82:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d901      	bls.n	8004f8e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	e04f      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f8e:	4b2b      	ldr	r3, [pc, #172]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	f003 020c 	and.w	r2, r3, #12
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	009b      	lsls	r3, r3, #2
 8004f9c:	429a      	cmp	r2, r3
 8004f9e:	d1eb      	bne.n	8004f78 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004fa0:	4b25      	ldr	r3, [pc, #148]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	683a      	ldr	r2, [r7, #0]
 8004faa:	429a      	cmp	r2, r3
 8004fac:	d20c      	bcs.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fae:	4b22      	ldr	r3, [pc, #136]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb0:	683a      	ldr	r2, [r7, #0]
 8004fb2:	b2d2      	uxtb	r2, r2
 8004fb4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fb6:	4b20      	ldr	r3, [pc, #128]	@ (8005038 <HAL_RCC_ClockConfig+0x1b8>)
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f003 0307 	and.w	r3, r3, #7
 8004fbe:	683a      	ldr	r2, [r7, #0]
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d001      	beq.n	8004fc8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e032      	b.n	800502e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f003 0304 	and.w	r3, r3, #4
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d008      	beq.n	8004fe6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fd4:	4b19      	ldr	r3, [pc, #100]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fd6:	689b      	ldr	r3, [r3, #8]
 8004fd8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	68db      	ldr	r3, [r3, #12]
 8004fe0:	4916      	ldr	r1, [pc, #88]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f003 0308 	and.w	r3, r3, #8
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004ff2:	4b12      	ldr	r3, [pc, #72]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8004ff4:	689b      	ldr	r3, [r3, #8]
 8004ff6:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	691b      	ldr	r3, [r3, #16]
 8004ffe:	00db      	lsls	r3, r3, #3
 8005000:	490e      	ldr	r1, [pc, #56]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 8005002:	4313      	orrs	r3, r2
 8005004:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005006:	f000 f821 	bl	800504c <HAL_RCC_GetSysClockFreq>
 800500a:	4602      	mov	r2, r0
 800500c:	4b0b      	ldr	r3, [pc, #44]	@ (800503c <HAL_RCC_ClockConfig+0x1bc>)
 800500e:	689b      	ldr	r3, [r3, #8]
 8005010:	091b      	lsrs	r3, r3, #4
 8005012:	f003 030f 	and.w	r3, r3, #15
 8005016:	490a      	ldr	r1, [pc, #40]	@ (8005040 <HAL_RCC_ClockConfig+0x1c0>)
 8005018:	5ccb      	ldrb	r3, [r1, r3]
 800501a:	fa22 f303 	lsr.w	r3, r2, r3
 800501e:	4a09      	ldr	r2, [pc, #36]	@ (8005044 <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005022:	4b09      	ldr	r3, [pc, #36]	@ (8005048 <HAL_RCC_ClockConfig+0x1c8>)
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	4618      	mov	r0, r3
 8005028:	f7fb ffba 	bl	8000fa0 <HAL_InitTick>

  return HAL_OK;
 800502c:	2300      	movs	r3, #0
}
 800502e:	4618      	mov	r0, r3
 8005030:	3710      	adds	r7, #16
 8005032:	46bd      	mov	sp, r7
 8005034:	bd80      	pop	{r7, pc}
 8005036:	bf00      	nop
 8005038:	40023c00 	.word	0x40023c00
 800503c:	40023800 	.word	0x40023800
 8005040:	0800ac78 	.word	0x0800ac78
 8005044:	20000008 	.word	0x20000008
 8005048:	2000000c 	.word	0x2000000c

0800504c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800504c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005050:	b094      	sub	sp, #80	@ 0x50
 8005052:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005054:	2300      	movs	r3, #0
 8005056:	647b      	str	r3, [r7, #68]	@ 0x44
 8005058:	2300      	movs	r3, #0
 800505a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800505c:	2300      	movs	r3, #0
 800505e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005060:	2300      	movs	r3, #0
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005064:	4b79      	ldr	r3, [pc, #484]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	689b      	ldr	r3, [r3, #8]
 8005068:	f003 030c 	and.w	r3, r3, #12
 800506c:	2b08      	cmp	r3, #8
 800506e:	d00d      	beq.n	800508c <HAL_RCC_GetSysClockFreq+0x40>
 8005070:	2b08      	cmp	r3, #8
 8005072:	f200 80e1 	bhi.w	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005076:	2b00      	cmp	r3, #0
 8005078:	d002      	beq.n	8005080 <HAL_RCC_GetSysClockFreq+0x34>
 800507a:	2b04      	cmp	r3, #4
 800507c:	d003      	beq.n	8005086 <HAL_RCC_GetSysClockFreq+0x3a>
 800507e:	e0db      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005080:	4b73      	ldr	r3, [pc, #460]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 8005082:	64bb      	str	r3, [r7, #72]	@ 0x48
       break;
 8005084:	e0db      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005086:	4b73      	ldr	r3, [pc, #460]	@ (8005254 <HAL_RCC_GetSysClockFreq+0x208>)
 8005088:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800508a:	e0d8      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800508c:	4b6f      	ldr	r3, [pc, #444]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005094:	647b      	str	r3, [r7, #68]	@ 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005096:	4b6d      	ldr	r3, [pc, #436]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 8005098:	685b      	ldr	r3, [r3, #4]
 800509a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d063      	beq.n	800516a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a2:	4b6a      	ldr	r3, [pc, #424]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	099b      	lsrs	r3, r3, #6
 80050a8:	2200      	movs	r2, #0
 80050aa:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050ac:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050b0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80050b6:	2300      	movs	r3, #0
 80050b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80050ba:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050be:	4622      	mov	r2, r4
 80050c0:	462b      	mov	r3, r5
 80050c2:	f04f 0000 	mov.w	r0, #0
 80050c6:	f04f 0100 	mov.w	r1, #0
 80050ca:	0159      	lsls	r1, r3, #5
 80050cc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d0:	0150      	lsls	r0, r2, #5
 80050d2:	4602      	mov	r2, r0
 80050d4:	460b      	mov	r3, r1
 80050d6:	4621      	mov	r1, r4
 80050d8:	1a51      	subs	r1, r2, r1
 80050da:	6139      	str	r1, [r7, #16]
 80050dc:	4629      	mov	r1, r5
 80050de:	eb63 0301 	sbc.w	r3, r3, r1
 80050e2:	617b      	str	r3, [r7, #20]
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050f0:	4659      	mov	r1, fp
 80050f2:	018b      	lsls	r3, r1, #6
 80050f4:	4651      	mov	r1, sl
 80050f6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050fa:	4651      	mov	r1, sl
 80050fc:	018a      	lsls	r2, r1, #6
 80050fe:	4651      	mov	r1, sl
 8005100:	ebb2 0801 	subs.w	r8, r2, r1
 8005104:	4659      	mov	r1, fp
 8005106:	eb63 0901 	sbc.w	r9, r3, r1
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005116:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800511a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800511e:	4690      	mov	r8, r2
 8005120:	4699      	mov	r9, r3
 8005122:	4623      	mov	r3, r4
 8005124:	eb18 0303 	adds.w	r3, r8, r3
 8005128:	60bb      	str	r3, [r7, #8]
 800512a:	462b      	mov	r3, r5
 800512c:	eb49 0303 	adc.w	r3, r9, r3
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	f04f 0200 	mov.w	r2, #0
 8005136:	f04f 0300 	mov.w	r3, #0
 800513a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800513e:	4629      	mov	r1, r5
 8005140:	024b      	lsls	r3, r1, #9
 8005142:	4621      	mov	r1, r4
 8005144:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005148:	4621      	mov	r1, r4
 800514a:	024a      	lsls	r2, r1, #9
 800514c:	4610      	mov	r0, r2
 800514e:	4619      	mov	r1, r3
 8005150:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005152:	2200      	movs	r2, #0
 8005154:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005156:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005158:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800515c:	f7fb f834 	bl	80001c8 <__aeabi_uldivmod>
 8005160:	4602      	mov	r2, r0
 8005162:	460b      	mov	r3, r1
 8005164:	4613      	mov	r3, r2
 8005166:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005168:	e058      	b.n	800521c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800516a:	4b38      	ldr	r3, [pc, #224]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800516c:	685b      	ldr	r3, [r3, #4]
 800516e:	099b      	lsrs	r3, r3, #6
 8005170:	2200      	movs	r2, #0
 8005172:	4618      	mov	r0, r3
 8005174:	4611      	mov	r1, r2
 8005176:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800517a:	623b      	str	r3, [r7, #32]
 800517c:	2300      	movs	r3, #0
 800517e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005180:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005184:	4642      	mov	r2, r8
 8005186:	464b      	mov	r3, r9
 8005188:	f04f 0000 	mov.w	r0, #0
 800518c:	f04f 0100 	mov.w	r1, #0
 8005190:	0159      	lsls	r1, r3, #5
 8005192:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005196:	0150      	lsls	r0, r2, #5
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	4641      	mov	r1, r8
 800519e:	ebb2 0a01 	subs.w	sl, r2, r1
 80051a2:	4649      	mov	r1, r9
 80051a4:	eb63 0b01 	sbc.w	fp, r3, r1
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051b4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051b8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051bc:	ebb2 040a 	subs.w	r4, r2, sl
 80051c0:	eb63 050b 	sbc.w	r5, r3, fp
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	00eb      	lsls	r3, r5, #3
 80051ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051d2:	00e2      	lsls	r2, r4, #3
 80051d4:	4614      	mov	r4, r2
 80051d6:	461d      	mov	r5, r3
 80051d8:	4643      	mov	r3, r8
 80051da:	18e3      	adds	r3, r4, r3
 80051dc:	603b      	str	r3, [r7, #0]
 80051de:	464b      	mov	r3, r9
 80051e0:	eb45 0303 	adc.w	r3, r5, r3
 80051e4:	607b      	str	r3, [r7, #4]
 80051e6:	f04f 0200 	mov.w	r2, #0
 80051ea:	f04f 0300 	mov.w	r3, #0
 80051ee:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051f2:	4629      	mov	r1, r5
 80051f4:	028b      	lsls	r3, r1, #10
 80051f6:	4621      	mov	r1, r4
 80051f8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051fc:	4621      	mov	r1, r4
 80051fe:	028a      	lsls	r2, r1, #10
 8005200:	4610      	mov	r0, r2
 8005202:	4619      	mov	r1, r3
 8005204:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005206:	2200      	movs	r2, #0
 8005208:	61bb      	str	r3, [r7, #24]
 800520a:	61fa      	str	r2, [r7, #28]
 800520c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005210:	f7fa ffda 	bl	80001c8 <__aeabi_uldivmod>
 8005214:	4602      	mov	r2, r0
 8005216:	460b      	mov	r3, r1
 8005218:	4613      	mov	r3, r2
 800521a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800521c:	4b0b      	ldr	r3, [pc, #44]	@ (800524c <HAL_RCC_GetSysClockFreq+0x200>)
 800521e:	685b      	ldr	r3, [r3, #4]
 8005220:	0c1b      	lsrs	r3, r3, #16
 8005222:	f003 0303 	and.w	r3, r3, #3
 8005226:	3301      	adds	r3, #1
 8005228:	005b      	lsls	r3, r3, #1
 800522a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco/pllp;
 800522c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800522e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005230:	fbb2 f3f3 	udiv	r3, r2, r3
 8005234:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005236:	e002      	b.n	800523e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005238:	4b05      	ldr	r3, [pc, #20]	@ (8005250 <HAL_RCC_GetSysClockFreq+0x204>)
 800523a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800523c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800523e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005240:	4618      	mov	r0, r3
 8005242:	3750      	adds	r7, #80	@ 0x50
 8005244:	46bd      	mov	sp, r7
 8005246:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800524a:	bf00      	nop
 800524c:	40023800 	.word	0x40023800
 8005250:	00f42400 	.word	0x00f42400
 8005254:	007a1200 	.word	0x007a1200

08005258 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005258:	b480      	push	{r7}
 800525a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800525c:	4b03      	ldr	r3, [pc, #12]	@ (800526c <HAL_RCC_GetHCLKFreq+0x14>)
 800525e:	681b      	ldr	r3, [r3, #0]
}
 8005260:	4618      	mov	r0, r3
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
 800526a:	bf00      	nop
 800526c:	20000008 	.word	0x20000008

08005270 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005274:	f7ff fff0 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	@ (8005290 <HAL_RCC_GetPCLK1Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0a9b      	lsrs	r3, r3, #10
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	@ (8005294 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800ac88 	.word	0x0800ac88

08005298 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800529c:	f7ff ffdc 	bl	8005258 <HAL_RCC_GetHCLKFreq>
 80052a0:	4602      	mov	r2, r0
 80052a2:	4b05      	ldr	r3, [pc, #20]	@ (80052b8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052a4:	689b      	ldr	r3, [r3, #8]
 80052a6:	0b5b      	lsrs	r3, r3, #13
 80052a8:	f003 0307 	and.w	r3, r3, #7
 80052ac:	4903      	ldr	r1, [pc, #12]	@ (80052bc <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ae:	5ccb      	ldrb	r3, [r1, r3]
 80052b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	bd80      	pop	{r7, pc}
 80052b8:	40023800 	.word	0x40023800
 80052bc:	0800ac88 	.word	0x0800ac88

080052c0 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80052c8:	2300      	movs	r3, #0
 80052ca:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80052cc:	2300      	movs	r3, #0
 80052ce:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d105      	bne.n	80052e8 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d035      	beq.n	8005354 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80052e8:	4b62      	ldr	r3, [pc, #392]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80052ea:	2200      	movs	r2, #0
 80052ec:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80052ee:	f7fb fe9b 	bl	8001028 <HAL_GetTick>
 80052f2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80052f4:	e008      	b.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80052f6:	f7fb fe97 	bl	8001028 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0b0      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005308:	4b5b      	ldr	r3, [pc, #364]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d1f0      	bne.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	019a      	lsls	r2, r3, #6
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	689b      	ldr	r3, [r3, #8]
 800531e:	071b      	lsls	r3, r3, #28
 8005320:	4955      	ldr	r1, [pc, #340]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005322:	4313      	orrs	r3, r2
 8005324:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005328:	4b52      	ldr	r3, [pc, #328]	@ (8005474 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800532a:	2201      	movs	r2, #1
 800532c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800532e:	f7fb fe7b 	bl	8001028 <HAL_GetTick>
 8005332:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005334:	e008      	b.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8005336:	f7fb fe77 	bl	8001028 <HAL_GetTick>
 800533a:	4602      	mov	r2, r0
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	1ad3      	subs	r3, r2, r3
 8005340:	2b02      	cmp	r3, #2
 8005342:	d901      	bls.n	8005348 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e090      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005348:	4b4b      	ldr	r3, [pc, #300]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800534a:	681b      	ldr	r3, [r3, #0]
 800534c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8005350:	2b00      	cmp	r3, #0
 8005352:	d0f0      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 0302 	and.w	r3, r3, #2
 800535c:	2b00      	cmp	r3, #0
 800535e:	f000 8083 	beq.w	8005468 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005362:	2300      	movs	r3, #0
 8005364:	60fb      	str	r3, [r7, #12]
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800536a:	4a43      	ldr	r2, [pc, #268]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800536c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005370:	6413      	str	r3, [r2, #64]	@ 0x40
 8005372:	4b41      	ldr	r3, [pc, #260]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800537a:	60fb      	str	r3, [r7, #12]
 800537c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800537e:	4b3f      	ldr	r3, [pc, #252]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	4a3e      	ldr	r2, [pc, #248]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8005384:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005388:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800538a:	f7fb fe4d 	bl	8001028 <HAL_GetTick>
 800538e:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8005390:	e008      	b.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8005392:	f7fb fe49 	bl	8001028 <HAL_GetTick>
 8005396:	4602      	mov	r2, r0
 8005398:	697b      	ldr	r3, [r7, #20]
 800539a:	1ad3      	subs	r3, r2, r3
 800539c:	2b02      	cmp	r3, #2
 800539e:	d901      	bls.n	80053a4 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80053a0:	2303      	movs	r3, #3
 80053a2:	e062      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 80053a4:	4b35      	ldr	r3, [pc, #212]	@ (800547c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d0f0      	beq.n	8005392 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053b0:	4b31      	ldr	r3, [pc, #196]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053b8:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d02f      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	429a      	cmp	r2, r3
 80053cc:	d028      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053ce:	4b2a      	ldr	r3, [pc, #168]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053d2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80053d6:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053d8:	4b29      	ldr	r3, [pc, #164]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053da:	2201      	movs	r2, #1
 80053dc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053de:	4b28      	ldr	r3, [pc, #160]	@ (8005480 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80053e0:	2200      	movs	r2, #0
 80053e2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80053e4:	4a24      	ldr	r2, [pc, #144]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80053ea:	4b23      	ldr	r3, [pc, #140]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80053ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80053ee:	f003 0301 	and.w	r3, r3, #1
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d114      	bne.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80053f6:	f7fb fe17 	bl	8001028 <HAL_GetTick>
 80053fa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053fc:	e00a      	b.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053fe:	f7fb fe13 	bl	8001028 <HAL_GetTick>
 8005402:	4602      	mov	r2, r0
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	1ad3      	subs	r3, r2, r3
 8005408:	f241 3288 	movw	r2, #5000	@ 0x1388
 800540c:	4293      	cmp	r3, r2
 800540e:	d901      	bls.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8005410:	2303      	movs	r3, #3
 8005412:	e02a      	b.n	800546a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005414:	4b18      	ldr	r3, [pc, #96]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005416:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005418:	f003 0302 	and.w	r3, r3, #2
 800541c:	2b00      	cmp	r3, #0
 800541e:	d0ee      	beq.n	80053fe <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	68db      	ldr	r3, [r3, #12]
 8005424:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005428:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800542c:	d10d      	bne.n	800544a <HAL_RCCEx_PeriphCLKConfig+0x18a>
 800542e:	4b12      	ldr	r3, [pc, #72]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005430:	689b      	ldr	r3, [r3, #8]
 8005432:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	68db      	ldr	r3, [r3, #12]
 800543a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800543e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005442:	490d      	ldr	r1, [pc, #52]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005444:	4313      	orrs	r3, r2
 8005446:	608b      	str	r3, [r1, #8]
 8005448:	e005      	b.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800544a:	4b0b      	ldr	r3, [pc, #44]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800544c:	689b      	ldr	r3, [r3, #8]
 800544e:	4a0a      	ldr	r2, [pc, #40]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005450:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8005454:	6093      	str	r3, [r2, #8]
 8005456:	4b08      	ldr	r3, [pc, #32]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005458:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68db      	ldr	r3, [r3, #12]
 800545e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005462:	4905      	ldr	r1, [pc, #20]	@ (8005478 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8005464:	4313      	orrs	r3, r2
 8005466:	670b      	str	r3, [r1, #112]	@ 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8005468:	2300      	movs	r3, #0
}
 800546a:	4618      	mov	r0, r3
 800546c:	3718      	adds	r7, #24
 800546e:	46bd      	mov	sp, r7
 8005470:	bd80      	pop	{r7, pc}
 8005472:	bf00      	nop
 8005474:	42470068 	.word	0x42470068
 8005478:	40023800 	.word	0x40023800
 800547c:	40007000 	.word	0x40007000
 8005480:	42470e40 	.word	0x42470e40

08005484 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8005484:	b480      	push	{r7}
 8005486:	b087      	sub	sp, #28
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 800548c:	2300      	movs	r3, #0
 800548e:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8005490:	2300      	movs	r3, #0
 8005492:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8005494:	2300      	movs	r3, #0
 8005496:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8005498:	2300      	movs	r3, #0
 800549a:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b01      	cmp	r3, #1
 80054a0:	d13f      	bne.n	8005522 <HAL_RCCEx_GetPeriphCLKFreq+0x9e>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 80054a2:	4b24      	ldr	r3, [pc, #144]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80054aa:	60fb      	str	r3, [r7, #12]
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d006      	beq.n	80054c0 <HAL_RCCEx_GetPeriphCLKFreq+0x3c>
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80054b8:	d12f      	bne.n	800551a <HAL_RCCEx_GetPeriphCLKFreq+0x96>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 80054ba:	4b1f      	ldr	r3, [pc, #124]	@ (8005538 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 80054bc:	617b      	str	r3, [r7, #20]
          break;
 80054be:	e02f      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80054c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80054c8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80054cc:	d108      	bne.n	80054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x5c>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054ce:	4b19      	ldr	r3, [pc, #100]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054d6:	4a19      	ldr	r2, [pc, #100]	@ (800553c <HAL_RCCEx_GetPeriphCLKFreq+0xb8>)
 80054d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80054dc:	613b      	str	r3, [r7, #16]
 80054de:	e007      	b.n	80054f0 <HAL_RCCEx_GetPeriphCLKFreq+0x6c>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 80054e0:	4b14      	ldr	r3, [pc, #80]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054e2:	685b      	ldr	r3, [r3, #4]
 80054e4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80054e8:	4a15      	ldr	r2, [pc, #84]	@ (8005540 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>)
 80054ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80054ee:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 80054f0:	4b10      	ldr	r3, [pc, #64]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 80054f2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80054f6:	099b      	lsrs	r3, r3, #6
 80054f8:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80054fc:	693b      	ldr	r3, [r7, #16]
 80054fe:	fb02 f303 	mul.w	r3, r2, r3
 8005502:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8005504:	4b0b      	ldr	r3, [pc, #44]	@ (8005534 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8005506:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800550a:	0f1b      	lsrs	r3, r3, #28
 800550c:	f003 0307 	and.w	r3, r3, #7
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	fbb2 f3f3 	udiv	r3, r2, r3
 8005516:	617b      	str	r3, [r7, #20]
          break;
 8005518:	e002      	b.n	8005520 <HAL_RCCEx_GetPeriphCLKFreq+0x9c>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 800551a:	2300      	movs	r3, #0
 800551c:	617b      	str	r3, [r7, #20]
          break;
 800551e:	bf00      	nop
        }
      }
      break;
 8005520:	e000      	b.n	8005524 <HAL_RCCEx_GetPeriphCLKFreq+0xa0>
    }
  default:
    {
       break;
 8005522:	bf00      	nop
    }
  }
  return frequency;
 8005524:	697b      	ldr	r3, [r7, #20]
}
 8005526:	4618      	mov	r0, r3
 8005528:	371c      	adds	r7, #28
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr
 8005532:	bf00      	nop
 8005534:	40023800 	.word	0x40023800
 8005538:	00bb8000 	.word	0x00bb8000
 800553c:	007a1200 	.word	0x007a1200
 8005540:	00f42400 	.word	0x00f42400

08005544 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005544:	b580      	push	{r7, lr}
 8005546:	b082      	sub	sp, #8
 8005548:	af00      	add	r7, sp, #0
 800554a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d101      	bne.n	8005556 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
 8005554:	e07b      	b.n	800564e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800555a:	2b00      	cmp	r3, #0
 800555c:	d108      	bne.n	8005570 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	685b      	ldr	r3, [r3, #4]
 8005562:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005566:	d009      	beq.n	800557c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	61da      	str	r2, [r3, #28]
 800556e:	e005      	b.n	800557c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	2200      	movs	r2, #0
 8005574:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	2200      	movs	r2, #0
 800557a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	2200      	movs	r2, #0
 8005580:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005588:	b2db      	uxtb	r3, r3
 800558a:	2b00      	cmp	r3, #0
 800558c:	d106      	bne.n	800559c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7fb fab2 	bl	8000b00 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2202      	movs	r2, #2
 80055a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	681a      	ldr	r2, [r3, #0]
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80055b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	689b      	ldr	r3, [r3, #8]
 80055c0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80055c4:	431a      	orrs	r2, r3
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80055ce:	431a      	orrs	r2, r3
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f003 0302 	and.w	r3, r3, #2
 80055d8:	431a      	orrs	r2, r3
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	f003 0301 	and.w	r3, r3, #1
 80055e2:	431a      	orrs	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	699b      	ldr	r3, [r3, #24]
 80055e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80055ec:	431a      	orrs	r2, r3
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	69db      	ldr	r3, [r3, #28]
 80055f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80055f6:	431a      	orrs	r2, r3
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	6a1b      	ldr	r3, [r3, #32]
 80055fc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005600:	ea42 0103 	orr.w	r1, r2, r3
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005608:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	430a      	orrs	r2, r1
 8005612:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	699b      	ldr	r3, [r3, #24]
 8005618:	0c1b      	lsrs	r3, r3, #16
 800561a:	f003 0104 	and.w	r1, r3, #4
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005622:	f003 0210 	and.w	r2, r3, #16
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	430a      	orrs	r2, r1
 800562c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800563c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800564c:	2300      	movs	r3, #0
}
 800564e:	4618      	mov	r0, r3
 8005650:	3708      	adds	r7, #8
 8005652:	46bd      	mov	sp, r7
 8005654:	bd80      	pop	{r7, pc}

08005656 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005656:	b580      	push	{r7, lr}
 8005658:	b082      	sub	sp, #8
 800565a:	af00      	add	r7, sp, #0
 800565c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d101      	bne.n	8005668 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005664:	2301      	movs	r3, #1
 8005666:	e042      	b.n	80056ee <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800566e:	b2db      	uxtb	r3, r3
 8005670:	2b00      	cmp	r3, #0
 8005672:	d106      	bne.n	8005682 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f7fb fa87 	bl	8000b90 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2224      	movs	r2, #36	@ 0x24
 8005686:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005698:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800569a:	6878      	ldr	r0, [r7, #4]
 800569c:	f000 ff4c 	bl	8006538 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	691a      	ldr	r2, [r3, #16]
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80056ae:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	695a      	ldr	r2, [r3, #20]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80056be:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	68da      	ldr	r2, [r3, #12]
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80056ce:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2200      	movs	r2, #0
 80056d4:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2220      	movs	r2, #32
 80056da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	2220      	movs	r2, #32
 80056e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	2200      	movs	r2, #0
 80056ea:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
	...

080056f8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b08c      	sub	sp, #48	@ 0x30
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	60f8      	str	r0, [r7, #12]
 8005700:	60b9      	str	r1, [r7, #8]
 8005702:	4613      	mov	r3, r2
 8005704:	80fb      	strh	r3, [r7, #6]
  const uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800570c:	b2db      	uxtb	r3, r3
 800570e:	2b20      	cmp	r3, #32
 8005710:	d156      	bne.n	80057c0 <HAL_UART_Transmit_DMA+0xc8>
  {
    if ((pData == NULL) || (Size == 0U))
 8005712:	68bb      	ldr	r3, [r7, #8]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d002      	beq.n	800571e <HAL_UART_Transmit_DMA+0x26>
 8005718:	88fb      	ldrh	r3, [r7, #6]
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e04f      	b.n	80057c2 <HAL_UART_Transmit_DMA+0xca>
    }

    huart->pTxBuffPtr = pData;
 8005722:	68ba      	ldr	r2, [r7, #8]
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	88fa      	ldrh	r2, [r7, #6]
 800572c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	88fa      	ldrh	r2, [r7, #6]
 8005732:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	2200      	movs	r2, #0
 8005738:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2221      	movs	r2, #33	@ 0x21
 800573e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005746:	4a21      	ldr	r2, [pc, #132]	@ (80057cc <HAL_UART_Transmit_DMA+0xd4>)
 8005748:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800574e:	4a20      	ldr	r2, [pc, #128]	@ (80057d0 <HAL_UART_Transmit_DMA+0xd8>)
 8005750:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005752:	68fb      	ldr	r3, [r7, #12]
 8005754:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005756:	4a1f      	ldr	r2, [pc, #124]	@ (80057d4 <HAL_UART_Transmit_DMA+0xdc>)
 8005758:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800575e:	2200      	movs	r2, #0
 8005760:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (const uint32_t *)&pData;
 8005762:	f107 0308 	add.w	r3, r7, #8
 8005766:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_DMA_Start_IT(huart->hdmatx, *(const uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800576c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800576e:	6819      	ldr	r1, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	3304      	adds	r3, #4
 8005776:	461a      	mov	r2, r3
 8005778:	88fb      	ldrh	r3, [r7, #6]
 800577a:	f7fb fe45 	bl	8001408 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005786:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3314      	adds	r3, #20
 800578e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005790:	69bb      	ldr	r3, [r7, #24]
 8005792:	e853 3f00 	ldrex	r3, [r3]
 8005796:	617b      	str	r3, [r7, #20]
   return(result);
 8005798:	697b      	ldr	r3, [r7, #20]
 800579a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800579e:	62bb      	str	r3, [r7, #40]	@ 0x28
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	3314      	adds	r3, #20
 80057a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80057a8:	627a      	str	r2, [r7, #36]	@ 0x24
 80057aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ac:	6a39      	ldr	r1, [r7, #32]
 80057ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057b0:	e841 2300 	strex	r3, r2, [r1]
 80057b4:	61fb      	str	r3, [r7, #28]
   return(result);
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d1e5      	bne.n	8005788 <HAL_UART_Transmit_DMA+0x90>

    return HAL_OK;
 80057bc:	2300      	movs	r3, #0
 80057be:	e000      	b.n	80057c2 <HAL_UART_Transmit_DMA+0xca>
  }
  else
  {
    return HAL_BUSY;
 80057c0:	2302      	movs	r3, #2
  }
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3730      	adds	r7, #48	@ 0x30
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	08005dc5 	.word	0x08005dc5
 80057d0:	08005e5f 	.word	0x08005e5f
 80057d4:	08005fe3 	.word	0x08005fe3

080057d8 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b084      	sub	sp, #16
 80057dc:	af00      	add	r7, sp, #0
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	4613      	mov	r3, r2
 80057e4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80057ec:	b2db      	uxtb	r3, r3
 80057ee:	2b20      	cmp	r3, #32
 80057f0:	d112      	bne.n	8005818 <HAL_UART_Receive_DMA+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80057f2:	68bb      	ldr	r3, [r7, #8]
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d002      	beq.n	80057fe <HAL_UART_Receive_DMA+0x26>
 80057f8:	88fb      	ldrh	r3, [r7, #6]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d101      	bne.n	8005802 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80057fe:	2301      	movs	r3, #1
 8005800:	e00b      	b.n	800581a <HAL_UART_Receive_DMA+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2200      	movs	r2, #0
 8005806:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8005808:	88fb      	ldrh	r3, [r7, #6]
 800580a:	461a      	mov	r2, r3
 800580c:	68b9      	ldr	r1, [r7, #8]
 800580e:	68f8      	ldr	r0, [r7, #12]
 8005810:	f000 fc32 	bl	8006078 <UART_Start_Receive_DMA>
 8005814:	4603      	mov	r3, r0
 8005816:	e000      	b.n	800581a <HAL_UART_Receive_DMA+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005818:	2302      	movs	r3, #2
  }
}
 800581a:	4618      	mov	r0, r3
 800581c:	3710      	adds	r7, #16
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
	...

08005824 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005824:	b580      	push	{r7, lr}
 8005826:	b0ba      	sub	sp, #232	@ 0xe8
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	68db      	ldr	r3, [r3, #12]
 800583c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800584a:	2300      	movs	r3, #0
 800584c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005850:	2300      	movs	r3, #0
 8005852:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005856:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005862:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005866:	2b00      	cmp	r3, #0
 8005868:	d10f      	bne.n	800588a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800586a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800586e:	f003 0320 	and.w	r3, r3, #32
 8005872:	2b00      	cmp	r3, #0
 8005874:	d009      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
 8005876:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800587a:	f003 0320 	and.w	r3, r3, #32
 800587e:	2b00      	cmp	r3, #0
 8005880:	d003      	beq.n	800588a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f000 fd99 	bl	80063ba <UART_Receive_IT>
      return;
 8005888:	e25b      	b.n	8005d42 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800588a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800588e:	2b00      	cmp	r3, #0
 8005890:	f000 80de 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
 8005894:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005898:	f003 0301 	and.w	r3, r3, #1
 800589c:	2b00      	cmp	r3, #0
 800589e:	d106      	bne.n	80058ae <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80058a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058a4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	f000 80d1 	beq.w	8005a50 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80058ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058b2:	f003 0301 	and.w	r3, r3, #1
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d00b      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
 80058ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d005      	beq.n	80058d2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ca:	f043 0201 	orr.w	r2, r3, #1
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058d6:	f003 0304 	and.w	r3, r3, #4
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d00b      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
 80058de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80058e2:	f003 0301 	and.w	r3, r3, #1
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d005      	beq.n	80058f6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80058ee:	f043 0202 	orr.w	r2, r3, #2
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80058f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058fa:	f003 0302 	and.w	r3, r3, #2
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d00b      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
 8005902:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005906:	f003 0301 	and.w	r3, r3, #1
 800590a:	2b00      	cmp	r3, #0
 800590c:	d005      	beq.n	800591a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005912:	f043 0204 	orr.w	r2, r3, #4
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800591a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800591e:	f003 0308 	and.w	r3, r3, #8
 8005922:	2b00      	cmp	r3, #0
 8005924:	d011      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
 8005926:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800592a:	f003 0320 	and.w	r3, r3, #32
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005936:	f003 0301 	and.w	r3, r3, #1
 800593a:	2b00      	cmp	r3, #0
 800593c:	d005      	beq.n	800594a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005942:	f043 0208 	orr.w	r2, r3, #8
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800594e:	2b00      	cmp	r3, #0
 8005950:	f000 81f2 	beq.w	8005d38 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005958:	f003 0320 	and.w	r3, r3, #32
 800595c:	2b00      	cmp	r3, #0
 800595e:	d008      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
 8005960:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005964:	f003 0320 	and.w	r3, r3, #32
 8005968:	2b00      	cmp	r3, #0
 800596a:	d002      	beq.n	8005972 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800596c:	6878      	ldr	r0, [r7, #4]
 800596e:	f000 fd24 	bl	80063ba <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800597c:	2b40      	cmp	r3, #64	@ 0x40
 800597e:	bf0c      	ite	eq
 8005980:	2301      	moveq	r3, #1
 8005982:	2300      	movne	r3, #0
 8005984:	b2db      	uxtb	r3, r3
 8005986:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800598e:	f003 0308 	and.w	r3, r3, #8
 8005992:	2b00      	cmp	r3, #0
 8005994:	d103      	bne.n	800599e <HAL_UART_IRQHandler+0x17a>
 8005996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800599a:	2b00      	cmp	r3, #0
 800599c:	d04f      	beq.n	8005a3e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 fc2c 	bl	80061fc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80059ae:	2b40      	cmp	r3, #64	@ 0x40
 80059b0:	d141      	bne.n	8005a36 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	3314      	adds	r3, #20
 80059b8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80059c0:	e853 3f00 	ldrex	r3, [r3]
 80059c4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80059c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059cc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80059d0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	3314      	adds	r3, #20
 80059da:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80059de:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80059e2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059e6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80059ea:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80059ee:	e841 2300 	strex	r3, r2, [r1]
 80059f2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80059f6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d1d9      	bne.n	80059b2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d013      	beq.n	8005a2e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a0a:	4a7e      	ldr	r2, [pc, #504]	@ (8005c04 <HAL_UART_IRQHandler+0x3e0>)
 8005a0c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a12:	4618      	mov	r0, r3
 8005a14:	f7fb fdc0 	bl	8001598 <HAL_DMA_Abort_IT>
 8005a18:	4603      	mov	r3, r0
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d016      	beq.n	8005a4c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a22:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005a24:	687a      	ldr	r2, [r7, #4]
 8005a26:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a2c:	e00e      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f000 f9b2 	bl	8005d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a34:	e00a      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a36:	6878      	ldr	r0, [r7, #4]
 8005a38:	f000 f9ae 	bl	8005d98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a3c:	e006      	b.n	8005a4c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a3e:	6878      	ldr	r0, [r7, #4]
 8005a40:	f000 f9aa 	bl	8005d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	2200      	movs	r2, #0
 8005a48:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8005a4a:	e175      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a4c:	bf00      	nop
    return;
 8005a4e:	e173      	b.n	8005d38 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	f040 814f 	bne.w	8005cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8005a5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005a5e:	f003 0310 	and.w	r3, r3, #16
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	f000 8148 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005a68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a6c:	f003 0310 	and.w	r3, r3, #16
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	f000 8141 	beq.w	8005cf8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005a76:	2300      	movs	r3, #0
 8005a78:	60bb      	str	r3, [r7, #8]
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	60bb      	str	r3, [r7, #8]
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	60bb      	str	r3, [r7, #8]
 8005a8a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	695b      	ldr	r3, [r3, #20]
 8005a92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a96:	2b40      	cmp	r3, #64	@ 0x40
 8005a98:	f040 80b6 	bne.w	8005c08 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005aa8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	f000 8145 	beq.w	8005d3c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ab6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005aba:	429a      	cmp	r2, r3
 8005abc:	f080 813e 	bcs.w	8005d3c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005acc:	69db      	ldr	r3, [r3, #28]
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad2:	f000 8088 	beq.w	8005be6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	330c      	adds	r3, #12
 8005adc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ae0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ae4:	e853 3f00 	ldrex	r3, [r3]
 8005ae8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005aec:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005af4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	330c      	adds	r3, #12
 8005afe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8005b02:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005b06:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b0a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005b0e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005b12:	e841 2300 	strex	r3, r2, [r1]
 8005b16:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005b1a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d1d9      	bne.n	8005ad6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	3314      	adds	r3, #20
 8005b28:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b2a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005b2c:	e853 3f00 	ldrex	r3, [r3]
 8005b30:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005b32:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005b34:	f023 0301 	bic.w	r3, r3, #1
 8005b38:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005b46:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8005b4a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b4c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8005b4e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005b52:	e841 2300 	strex	r3, r2, [r1]
 8005b56:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005b58:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d1e1      	bne.n	8005b22 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	3314      	adds	r3, #20
 8005b64:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b66:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005b68:	e853 3f00 	ldrex	r3, [r3]
 8005b6c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8005b6e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005b70:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005b74:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	3314      	adds	r3, #20
 8005b7e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005b82:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005b84:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b86:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005b88:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8005b8a:	e841 2300 	strex	r3, r2, [r1]
 8005b8e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005b90:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d1e3      	bne.n	8005b5e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	2220      	movs	r2, #32
 8005b9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	330c      	adds	r3, #12
 8005baa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005bae:	e853 3f00 	ldrex	r3, [r3]
 8005bb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005bb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005bb6:	f023 0310 	bic.w	r3, r3, #16
 8005bba:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	681b      	ldr	r3, [r3, #0]
 8005bc2:	330c      	adds	r3, #12
 8005bc4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005bc8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005bca:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005bce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005bd0:	e841 2300 	strex	r3, r2, [r1]
 8005bd4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005bd8:	2b00      	cmp	r3, #0
 8005bda:	d1e3      	bne.n	8005ba4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	4618      	mov	r0, r3
 8005be2:	f7fb fc69 	bl	80014b8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	2202      	movs	r2, #2
 8005bea:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005bf4:	b29b      	uxth	r3, r3
 8005bf6:	1ad3      	subs	r3, r2, r3
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	4619      	mov	r1, r3
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 f8d5 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005c02:	e09b      	b.n	8005d3c <HAL_UART_IRQHandler+0x518>
 8005c04:	080062c3 	.word	0x080062c3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c10:	b29b      	uxth	r3, r3
 8005c12:	1ad3      	subs	r3, r2, r3
 8005c14:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005c1c:	b29b      	uxth	r3, r3
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	f000 808e 	beq.w	8005d40 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005c24:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	f000 8089 	beq.w	8005d40 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	330c      	adds	r3, #12
 8005c34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c38:	e853 3f00 	ldrex	r3, [r3]
 8005c3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005c3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c40:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005c44:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	330c      	adds	r3, #12
 8005c4e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005c52:	647a      	str	r2, [r7, #68]	@ 0x44
 8005c54:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c56:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005c58:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c5a:	e841 2300 	strex	r3, r2, [r1]
 8005c5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005c60:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d1e3      	bne.n	8005c2e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3314      	adds	r3, #20
 8005c6c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c70:	e853 3f00 	ldrex	r3, [r3]
 8005c74:	623b      	str	r3, [r7, #32]
   return(result);
 8005c76:	6a3b      	ldr	r3, [r7, #32]
 8005c78:	f023 0301 	bic.w	r3, r3, #1
 8005c7c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3314      	adds	r3, #20
 8005c86:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005c8a:	633a      	str	r2, [r7, #48]	@ 0x30
 8005c8c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c8e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005c90:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c92:	e841 2300 	strex	r3, r2, [r1]
 8005c96:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005c98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d1e3      	bne.n	8005c66 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2200      	movs	r2, #0
 8005caa:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	330c      	adds	r3, #12
 8005cb2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb4:	693b      	ldr	r3, [r7, #16]
 8005cb6:	e853 3f00 	ldrex	r3, [r3]
 8005cba:	60fb      	str	r3, [r7, #12]
   return(result);
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	f023 0310 	bic.w	r3, r3, #16
 8005cc2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	330c      	adds	r3, #12
 8005ccc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005cd0:	61fa      	str	r2, [r7, #28]
 8005cd2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	69b9      	ldr	r1, [r7, #24]
 8005cd6:	69fa      	ldr	r2, [r7, #28]
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	617b      	str	r3, [r7, #20]
   return(result);
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e3      	bne.n	8005cac <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2202      	movs	r2, #2
 8005ce8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005cea:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005cee:	4619      	mov	r1, r3
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f000 f85b 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005cf6:	e023      	b.n	8005d40 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005cf8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005cfc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d009      	beq.n	8005d18 <HAL_UART_IRQHandler+0x4f4>
 8005d04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005d10:	6878      	ldr	r0, [r7, #4]
 8005d12:	f000 faea 	bl	80062ea <UART_Transmit_IT>
    return;
 8005d16:	e014      	b.n	8005d42 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005d18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d1c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d00e      	beq.n	8005d42 <HAL_UART_IRQHandler+0x51e>
 8005d24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d008      	beq.n	8005d42 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fb2a 	bl	800638a <UART_EndTransmit_IT>
    return;
 8005d36:	e004      	b.n	8005d42 <HAL_UART_IRQHandler+0x51e>
    return;
 8005d38:	bf00      	nop
 8005d3a:	e002      	b.n	8005d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d3c:	bf00      	nop
 8005d3e:	e000      	b.n	8005d42 <HAL_UART_IRQHandler+0x51e>
      return;
 8005d40:	bf00      	nop
  }
}
 8005d42:	37e8      	adds	r7, #232	@ 0xe8
 8005d44:	46bd      	mov	sp, r7
 8005d46:	bd80      	pop	{r7, pc}

08005d48 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d48:	b480      	push	{r7}
 8005d4a:	b083      	sub	sp, #12
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005d50:	bf00      	nop
 8005d52:	370c      	adds	r7, #12
 8005d54:	46bd      	mov	sp, r7
 8005d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5a:	4770      	bx	lr

08005d5c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8005d8c:	bf00      	nop
 8005d8e:	370c      	adds	r7, #12
 8005d90:	46bd      	mov	sp, r7
 8005d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d96:	4770      	bx	lr

08005d98 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b083      	sub	sp, #12
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005da0:	bf00      	nop
 8005da2:	370c      	adds	r7, #12
 8005da4:	46bd      	mov	sp, r7
 8005da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005daa:	4770      	bx	lr

08005dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005dac:	b480      	push	{r7}
 8005dae:	b083      	sub	sp, #12
 8005db0:	af00      	add	r7, sp, #0
 8005db2:	6078      	str	r0, [r7, #4]
 8005db4:	460b      	mov	r3, r1
 8005db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005db8:	bf00      	nop
 8005dba:	370c      	adds	r7, #12
 8005dbc:	46bd      	mov	sp, r7
 8005dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc2:	4770      	bx	lr

08005dc4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b090      	sub	sp, #64	@ 0x40
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d137      	bne.n	8005e50 <UART_DMATransmitCplt+0x8c>
  {
    huart->TxXferCount = 0x00U;
 8005de0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de2:	2200      	movs	r2, #0
 8005de4:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005de6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	3314      	adds	r3, #20
 8005dec:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005df0:	e853 3f00 	ldrex	r3, [r3]
 8005df4:	623b      	str	r3, [r7, #32]
   return(result);
 8005df6:	6a3b      	ldr	r3, [r7, #32]
 8005df8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005dfc:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005dfe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	3314      	adds	r3, #20
 8005e04:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8005e06:	633a      	str	r2, [r7, #48]	@ 0x30
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e0a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005e0c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e0e:	e841 2300 	strex	r3, r2, [r1]
 8005e12:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005e14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d1e5      	bne.n	8005de6 <UART_DMATransmitCplt+0x22>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8005e1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	330c      	adds	r3, #12
 8005e20:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e22:	693b      	ldr	r3, [r7, #16]
 8005e24:	e853 3f00 	ldrex	r3, [r3]
 8005e28:	60fb      	str	r3, [r7, #12]
   return(result);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005e30:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e32:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	330c      	adds	r3, #12
 8005e38:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005e3a:	61fa      	str	r2, [r7, #28]
 8005e3c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e3e:	69b9      	ldr	r1, [r7, #24]
 8005e40:	69fa      	ldr	r2, [r7, #28]
 8005e42:	e841 2300 	strex	r3, r2, [r1]
 8005e46:	617b      	str	r3, [r7, #20]
   return(result);
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d1e5      	bne.n	8005e1a <UART_DMATransmitCplt+0x56>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005e4e:	e002      	b.n	8005e56 <UART_DMATransmitCplt+0x92>
    HAL_UART_TxCpltCallback(huart);
 8005e50:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8005e52:	f7ff ff79 	bl	8005d48 <HAL_UART_TxCpltCallback>
}
 8005e56:	bf00      	nop
 8005e58:	3740      	adds	r7, #64	@ 0x40
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005e5e:	b580      	push	{r7, lr}
 8005e60:	b084      	sub	sp, #16
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e6a:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff ff75 	bl	8005d5c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e72:	bf00      	nop
 8005e74:	3710      	adds	r7, #16
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b09c      	sub	sp, #112	@ 0x70
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d172      	bne.n	8005f7c <UART_DMAReceiveCplt+0x102>
  {
    huart->RxXferCount = 0U;
 8005e96:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e98:	2200      	movs	r2, #0
 8005e9a:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005e9c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	330c      	adds	r3, #12
 8005ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ea4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005ea6:	e853 3f00 	ldrex	r3, [r3]
 8005eaa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005eac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005eae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005eb2:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005eb4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	330c      	adds	r3, #12
 8005eba:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8005ebc:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005ebe:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005ec4:	e841 2300 	strex	r3, r2, [r1]
 8005ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8005eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d1e5      	bne.n	8005e9c <UART_DMAReceiveCplt+0x22>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005ed0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3314      	adds	r3, #20
 8005ed6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ed8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005eda:	e853 3f00 	ldrex	r3, [r3]
 8005ede:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005ee0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ee2:	f023 0301 	bic.w	r3, r3, #1
 8005ee6:	667b      	str	r3, [r7, #100]	@ 0x64
 8005ee8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	3314      	adds	r3, #20
 8005eee:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8005ef0:	647a      	str	r2, [r7, #68]	@ 0x44
 8005ef2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ef4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005ef6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005ef8:	e841 2300 	strex	r3, r2, [r1]
 8005efc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005efe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005f00:	2b00      	cmp	r3, #0
 8005f02:	d1e5      	bne.n	8005ed0 <UART_DMAReceiveCplt+0x56>

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f04:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	3314      	adds	r3, #20
 8005f0a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0e:	e853 3f00 	ldrex	r3, [r3]
 8005f12:	623b      	str	r3, [r7, #32]
   return(result);
 8005f14:	6a3b      	ldr	r3, [r7, #32]
 8005f16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f1a:	663b      	str	r3, [r7, #96]	@ 0x60
 8005f1c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	3314      	adds	r3, #20
 8005f22:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005f24:	633a      	str	r2, [r7, #48]	@ 0x30
 8005f26:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f28:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005f2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f2c:	e841 2300 	strex	r3, r2, [r1]
 8005f30:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005f32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d1e5      	bne.n	8005f04 <UART_DMAReceiveCplt+0x8a>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005f38:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f3a:	2220      	movs	r2, #32
 8005f3c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f44:	2b01      	cmp	r3, #1
 8005f46:	d119      	bne.n	8005f7c <UART_DMAReceiveCplt+0x102>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	330c      	adds	r3, #12
 8005f4e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f50:	693b      	ldr	r3, [r7, #16]
 8005f52:	e853 3f00 	ldrex	r3, [r3]
 8005f56:	60fb      	str	r3, [r7, #12]
   return(result);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	f023 0310 	bic.w	r3, r3, #16
 8005f5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005f60:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	330c      	adds	r3, #12
 8005f66:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8005f68:	61fa      	str	r2, [r7, #28]
 8005f6a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f6c:	69b9      	ldr	r1, [r7, #24]
 8005f6e:	69fa      	ldr	r2, [r7, #28]
 8005f70:	e841 2300 	strex	r3, r2, [r1]
 8005f74:	617b      	str	r3, [r7, #20]
   return(result);
 8005f76:	697b      	ldr	r3, [r7, #20]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d1e5      	bne.n	8005f48 <UART_DMAReceiveCplt+0xce>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
   In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f7c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f7e:	2200      	movs	r2, #0
 8005f80:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f82:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005f86:	2b01      	cmp	r3, #1
 8005f88:	d106      	bne.n	8005f98 <UART_DMAReceiveCplt+0x11e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f8a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005f8c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005f8e:	4619      	mov	r1, r3
 8005f90:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f92:	f7ff ff0b 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005f96:	e002      	b.n	8005f9e <UART_DMAReceiveCplt+0x124>
    HAL_UART_RxCpltCallback(huart);
 8005f98:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8005f9a:	f7ff fee9 	bl	8005d70 <HAL_UART_RxCpltCallback>
}
 8005f9e:	bf00      	nop
 8005fa0:	3770      	adds	r7, #112	@ 0x70
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8005fa6:	b580      	push	{r7, lr}
 8005fa8:	b084      	sub	sp, #16
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb2:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	2201      	movs	r2, #1
 8005fb8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fbe:	2b01      	cmp	r3, #1
 8005fc0:	d108      	bne.n	8005fd4 <UART_DMARxHalfCplt+0x2e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005fc6:	085b      	lsrs	r3, r3, #1
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	4619      	mov	r1, r3
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f7ff feed 	bl	8005dac <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8005fd2:	e002      	b.n	8005fda <UART_DMARxHalfCplt+0x34>
    HAL_UART_RxHalfCpltCallback(huart);
 8005fd4:	68f8      	ldr	r0, [r7, #12]
 8005fd6:	f7ff fed5 	bl	8005d84 <HAL_UART_RxHalfCpltCallback>
}
 8005fda:	bf00      	nop
 8005fdc:	3710      	adds	r7, #16
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	bd80      	pop	{r7, pc}

08005fe2 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8005fe2:	b580      	push	{r7, lr}
 8005fe4:	b084      	sub	sp, #16
 8005fe6:	af00      	add	r7, sp, #0
 8005fe8:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8005fea:	2300      	movs	r3, #0
 8005fec:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ff2:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8005ff4:	68bb      	ldr	r3, [r7, #8]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005ffe:	2b80      	cmp	r3, #128	@ 0x80
 8006000:	bf0c      	ite	eq
 8006002:	2301      	moveq	r3, #1
 8006004:	2300      	movne	r3, #0
 8006006:	b2db      	uxtb	r3, r3
 8006008:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800600a:	68bb      	ldr	r3, [r7, #8]
 800600c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006010:	b2db      	uxtb	r3, r3
 8006012:	2b21      	cmp	r3, #33	@ 0x21
 8006014:	d108      	bne.n	8006028 <UART_DMAError+0x46>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d005      	beq.n	8006028 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800601c:	68bb      	ldr	r3, [r7, #8]
 800601e:	2200      	movs	r2, #0
 8006020:	84da      	strh	r2, [r3, #38]	@ 0x26
    UART_EndTxTransfer(huart);
 8006022:	68b8      	ldr	r0, [r7, #8]
 8006024:	f000 f8c2 	bl	80061ac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006028:	68bb      	ldr	r3, [r7, #8]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	695b      	ldr	r3, [r3, #20]
 800602e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006032:	2b40      	cmp	r3, #64	@ 0x40
 8006034:	bf0c      	ite	eq
 8006036:	2301      	moveq	r3, #1
 8006038:	2300      	movne	r3, #0
 800603a:	b2db      	uxtb	r3, r3
 800603c:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800603e:	68bb      	ldr	r3, [r7, #8]
 8006040:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8006044:	b2db      	uxtb	r3, r3
 8006046:	2b22      	cmp	r3, #34	@ 0x22
 8006048:	d108      	bne.n	800605c <UART_DMAError+0x7a>
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d005      	beq.n	800605c <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8006050:	68bb      	ldr	r3, [r7, #8]
 8006052:	2200      	movs	r2, #0
 8006054:	85da      	strh	r2, [r3, #46]	@ 0x2e
    UART_EndRxTransfer(huart);
 8006056:	68b8      	ldr	r0, [r7, #8]
 8006058:	f000 f8d0 	bl	80061fc <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006060:	f043 0210 	orr.w	r2, r3, #16
 8006064:	68bb      	ldr	r3, [r7, #8]
 8006066:	645a      	str	r2, [r3, #68]	@ 0x44
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006068:	68b8      	ldr	r0, [r7, #8]
 800606a:	f7ff fe95 	bl	8005d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800606e:	bf00      	nop
 8006070:	3710      	adds	r7, #16
 8006072:	46bd      	mov	sp, r7
 8006074:	bd80      	pop	{r7, pc}
	...

08006078 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b098      	sub	sp, #96	@ 0x60
 800607c:	af00      	add	r7, sp, #0
 800607e:	60f8      	str	r0, [r7, #12]
 8006080:	60b9      	str	r1, [r7, #8]
 8006082:	4613      	mov	r3, r2
 8006084:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8006086:	68ba      	ldr	r2, [r7, #8]
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	88fa      	ldrh	r2, [r7, #6]
 8006090:	859a      	strh	r2, [r3, #44]	@ 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	2200      	movs	r2, #0
 8006096:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	2222      	movs	r2, #34	@ 0x22
 800609c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a4:	4a3e      	ldr	r2, [pc, #248]	@ (80061a0 <UART_Start_Receive_DMA+0x128>)
 80060a6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060ac:	4a3d      	ldr	r2, [pc, #244]	@ (80061a4 <UART_Start_Receive_DMA+0x12c>)
 80060ae:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b4:	4a3c      	ldr	r2, [pc, #240]	@ (80061a8 <UART_Start_Receive_DMA+0x130>)
 80060b6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060bc:	2200      	movs	r2, #0
 80060be:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80060c0:	f107 0308 	add.w	r3, r7, #8
 80060c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	3304      	adds	r3, #4
 80060d0:	4619      	mov	r1, r3
 80060d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80060d4:	681a      	ldr	r2, [r3, #0]
 80060d6:	88fb      	ldrh	r3, [r7, #6]
 80060d8:	f7fb f996 	bl	8001408 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 80060dc:	2300      	movs	r3, #0
 80060de:	613b      	str	r3, [r7, #16]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	681b      	ldr	r3, [r3, #0]
 80060e6:	613b      	str	r3, [r7, #16]
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	613b      	str	r3, [r7, #16]
 80060f0:	693b      	ldr	r3, [r7, #16]

  if (huart->Init.Parity != UART_PARITY_NONE)
 80060f2:	68fb      	ldr	r3, [r7, #12]
 80060f4:	691b      	ldr	r3, [r3, #16]
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d019      	beq.n	800612e <UART_Start_Receive_DMA+0xb6>
  {
    /* Enable the UART Parity Error Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	330c      	adds	r3, #12
 8006100:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006102:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006104:	e853 3f00 	ldrex	r3, [r3]
 8006108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800610a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800610c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006110:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	330c      	adds	r3, #12
 8006118:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800611a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800611c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800611e:	6cb9      	ldr	r1, [r7, #72]	@ 0x48
 8006120:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006122:	e841 2300 	strex	r3, r2, [r1]
 8006126:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8006128:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1e5      	bne.n	80060fa <UART_Start_Receive_DMA+0x82>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3314      	adds	r3, #20
 8006134:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006138:	e853 3f00 	ldrex	r3, [r3]
 800613c:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006140:	f043 0301 	orr.w	r3, r3, #1
 8006144:	657b      	str	r3, [r7, #84]	@ 0x54
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	3314      	adds	r3, #20
 800614c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800614e:	63ba      	str	r2, [r7, #56]	@ 0x38
 8006150:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006152:	6b79      	ldr	r1, [r7, #52]	@ 0x34
 8006154:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006156:	e841 2300 	strex	r3, r2, [r1]
 800615a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800615c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800615e:	2b00      	cmp	r3, #0
 8006160:	d1e5      	bne.n	800612e <UART_Start_Receive_DMA+0xb6>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	3314      	adds	r3, #20
 8006168:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800616a:	69bb      	ldr	r3, [r7, #24]
 800616c:	e853 3f00 	ldrex	r3, [r3]
 8006170:	617b      	str	r3, [r7, #20]
   return(result);
 8006172:	697b      	ldr	r3, [r7, #20]
 8006174:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006178:	653b      	str	r3, [r7, #80]	@ 0x50
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	3314      	adds	r3, #20
 8006180:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006182:	627a      	str	r2, [r7, #36]	@ 0x24
 8006184:	623b      	str	r3, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006186:	6a39      	ldr	r1, [r7, #32]
 8006188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800618a:	e841 2300 	strex	r3, r2, [r1]
 800618e:	61fb      	str	r3, [r7, #28]
   return(result);
 8006190:	69fb      	ldr	r3, [r7, #28]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d1e5      	bne.n	8006162 <UART_Start_Receive_DMA+0xea>

  return HAL_OK;
 8006196:	2300      	movs	r3, #0
}
 8006198:	4618      	mov	r0, r3
 800619a:	3760      	adds	r7, #96	@ 0x60
 800619c:	46bd      	mov	sp, r7
 800619e:	bd80      	pop	{r7, pc}
 80061a0:	08005e7b 	.word	0x08005e7b
 80061a4:	08005fa7 	.word	0x08005fa7
 80061a8:	08005fe3 	.word	0x08005fe3

080061ac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80061ac:	b480      	push	{r7}
 80061ae:	b089      	sub	sp, #36	@ 0x24
 80061b0:	af00      	add	r7, sp, #0
 80061b2:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	330c      	adds	r3, #12
 80061ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	e853 3f00 	ldrex	r3, [r3]
 80061c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80061c4:	68bb      	ldr	r3, [r7, #8]
 80061c6:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80061ca:	61fb      	str	r3, [r7, #28]
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	330c      	adds	r3, #12
 80061d2:	69fa      	ldr	r2, [r7, #28]
 80061d4:	61ba      	str	r2, [r7, #24]
 80061d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061d8:	6979      	ldr	r1, [r7, #20]
 80061da:	69ba      	ldr	r2, [r7, #24]
 80061dc:	e841 2300 	strex	r3, r2, [r1]
 80061e0:	613b      	str	r3, [r7, #16]
   return(result);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d1e5      	bne.n	80061b4 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	2220      	movs	r2, #32
 80061ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
}
 80061f0:	bf00      	nop
 80061f2:	3724      	adds	r7, #36	@ 0x24
 80061f4:	46bd      	mov	sp, r7
 80061f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061fa:	4770      	bx	lr

080061fc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80061fc:	b480      	push	{r7}
 80061fe:	b095      	sub	sp, #84	@ 0x54
 8006200:	af00      	add	r7, sp, #0
 8006202:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	330c      	adds	r3, #12
 800620a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800620e:	e853 3f00 	ldrex	r3, [r3]
 8006212:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006214:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006216:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800621a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	330c      	adds	r3, #12
 8006222:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006224:	643a      	str	r2, [r7, #64]	@ 0x40
 8006226:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006228:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800622a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800622c:	e841 2300 	strex	r3, r2, [r1]
 8006230:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006232:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006234:	2b00      	cmp	r3, #0
 8006236:	d1e5      	bne.n	8006204 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	3314      	adds	r3, #20
 800623e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006240:	6a3b      	ldr	r3, [r7, #32]
 8006242:	e853 3f00 	ldrex	r3, [r3]
 8006246:	61fb      	str	r3, [r7, #28]
   return(result);
 8006248:	69fb      	ldr	r3, [r7, #28]
 800624a:	f023 0301 	bic.w	r3, r3, #1
 800624e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	3314      	adds	r3, #20
 8006256:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006258:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800625a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800625c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800625e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006260:	e841 2300 	strex	r3, r2, [r1]
 8006264:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006268:	2b00      	cmp	r3, #0
 800626a:	d1e5      	bne.n	8006238 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006270:	2b01      	cmp	r3, #1
 8006272:	d119      	bne.n	80062a8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	330c      	adds	r3, #12
 800627a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	e853 3f00 	ldrex	r3, [r3]
 8006282:	60bb      	str	r3, [r7, #8]
   return(result);
 8006284:	68bb      	ldr	r3, [r7, #8]
 8006286:	f023 0310 	bic.w	r3, r3, #16
 800628a:	647b      	str	r3, [r7, #68]	@ 0x44
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	330c      	adds	r3, #12
 8006292:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006294:	61ba      	str	r2, [r7, #24]
 8006296:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006298:	6979      	ldr	r1, [r7, #20]
 800629a:	69ba      	ldr	r2, [r7, #24]
 800629c:	e841 2300 	strex	r3, r2, [r1]
 80062a0:	613b      	str	r3, [r7, #16]
   return(result);
 80062a2:	693b      	ldr	r3, [r7, #16]
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d1e5      	bne.n	8006274 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	2220      	movs	r2, #32
 80062ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80062b6:	bf00      	nop
 80062b8:	3754      	adds	r7, #84	@ 0x54
 80062ba:	46bd      	mov	sp, r7
 80062bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c0:	4770      	bx	lr

080062c2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80062c2:	b580      	push	{r7, lr}
 80062c4:	b084      	sub	sp, #16
 80062c6:	af00      	add	r7, sp, #0
 80062c8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ce:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	2200      	movs	r2, #0
 80062d4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	2200      	movs	r2, #0
 80062da:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80062dc:	68f8      	ldr	r0, [r7, #12]
 80062de:	f7ff fd5b 	bl	8005d98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80062e2:	bf00      	nop
 80062e4:	3710      	adds	r7, #16
 80062e6:	46bd      	mov	sp, r7
 80062e8:	bd80      	pop	{r7, pc}

080062ea <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80062ea:	b480      	push	{r7}
 80062ec:	b085      	sub	sp, #20
 80062ee:	af00      	add	r7, sp, #0
 80062f0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80062f8:	b2db      	uxtb	r3, r3
 80062fa:	2b21      	cmp	r3, #33	@ 0x21
 80062fc:	d13e      	bne.n	800637c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	689b      	ldr	r3, [r3, #8]
 8006302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006306:	d114      	bne.n	8006332 <UART_Transmit_IT+0x48>
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	691b      	ldr	r3, [r3, #16]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d110      	bne.n	8006332 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	6a1b      	ldr	r3, [r3, #32]
 8006314:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006316:	68fb      	ldr	r3, [r7, #12]
 8006318:	881b      	ldrh	r3, [r3, #0]
 800631a:	461a      	mov	r2, r3
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006324:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	6a1b      	ldr	r3, [r3, #32]
 800632a:	1c9a      	adds	r2, r3, #2
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	621a      	str	r2, [r3, #32]
 8006330:	e008      	b.n	8006344 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a1b      	ldr	r3, [r3, #32]
 8006336:	1c59      	adds	r1, r3, #1
 8006338:	687a      	ldr	r2, [r7, #4]
 800633a:	6211      	str	r1, [r2, #32]
 800633c:	781a      	ldrb	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29b      	uxth	r3, r3
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	4619      	mov	r1, r3
 8006352:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8006354:	2b00      	cmp	r3, #0
 8006356:	d10f      	bne.n	8006378 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	68da      	ldr	r2, [r3, #12]
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006366:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	68da      	ldr	r2, [r3, #12]
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006376:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006378:	2300      	movs	r3, #0
 800637a:	e000      	b.n	800637e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800637c:	2302      	movs	r3, #2
  }
}
 800637e:	4618      	mov	r0, r3
 8006380:	3714      	adds	r7, #20
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr

0800638a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800638a:	b580      	push	{r7, lr}
 800638c:	b082      	sub	sp, #8
 800638e:	af00      	add	r7, sp, #0
 8006390:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68da      	ldr	r2, [r3, #12]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80063a0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	2220      	movs	r2, #32
 80063a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f7ff fccc 	bl	8005d48 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80063b0:	2300      	movs	r3, #0
}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3708      	adds	r7, #8
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}

080063ba <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80063ba:	b580      	push	{r7, lr}
 80063bc:	b08c      	sub	sp, #48	@ 0x30
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b22      	cmp	r3, #34	@ 0x22
 80063cc:	f040 80ae 	bne.w	800652c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	689b      	ldr	r3, [r3, #8]
 80063d4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063d8:	d117      	bne.n	800640a <UART_Receive_IT+0x50>
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	691b      	ldr	r3, [r3, #16]
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d113      	bne.n	800640a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80063e2:	2300      	movs	r3, #0
 80063e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80063ea:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	b29b      	uxth	r3, r3
 80063f4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80063f8:	b29a      	uxth	r2, r3
 80063fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063fc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006402:	1c9a      	adds	r2, r3, #2
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	629a      	str	r2, [r3, #40]	@ 0x28
 8006408:	e026      	b.n	8006458 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800640e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8006410:	2300      	movs	r3, #0
 8006412:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800641c:	d007      	beq.n	800642e <UART_Receive_IT+0x74>
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	689b      	ldr	r3, [r3, #8]
 8006422:	2b00      	cmp	r3, #0
 8006424:	d10a      	bne.n	800643c <UART_Receive_IT+0x82>
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	691b      	ldr	r3, [r3, #16]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d106      	bne.n	800643c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	685b      	ldr	r3, [r3, #4]
 8006434:	b2da      	uxtb	r2, r3
 8006436:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006438:	701a      	strb	r2, [r3, #0]
 800643a:	e008      	b.n	800644e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8006448:	b2da      	uxtb	r2, r3
 800644a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800644c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006452:	1c5a      	adds	r2, r3, #1
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800645c:	b29b      	uxth	r3, r3
 800645e:	3b01      	subs	r3, #1
 8006460:	b29b      	uxth	r3, r3
 8006462:	687a      	ldr	r2, [r7, #4]
 8006464:	4619      	mov	r1, r3
 8006466:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8006468:	2b00      	cmp	r3, #0
 800646a:	d15d      	bne.n	8006528 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	68da      	ldr	r2, [r3, #12]
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f022 0220 	bic.w	r2, r2, #32
 800647a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	68da      	ldr	r2, [r3, #12]
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	681b      	ldr	r3, [r3, #0]
 8006486:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800648a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	695a      	ldr	r2, [r3, #20]
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	681b      	ldr	r3, [r3, #0]
 8006496:	f022 0201 	bic.w	r2, r2, #1
 800649a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2220      	movs	r2, #32
 80064a0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064ae:	2b01      	cmp	r3, #1
 80064b0:	d135      	bne.n	800651e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	330c      	adds	r3, #12
 80064be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80064c0:	697b      	ldr	r3, [r7, #20]
 80064c2:	e853 3f00 	ldrex	r3, [r3]
 80064c6:	613b      	str	r3, [r7, #16]
   return(result);
 80064c8:	693b      	ldr	r3, [r7, #16]
 80064ca:	f023 0310 	bic.w	r3, r3, #16
 80064ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	330c      	adds	r3, #12
 80064d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80064d8:	623a      	str	r2, [r7, #32]
 80064da:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80064dc:	69f9      	ldr	r1, [r7, #28]
 80064de:	6a3a      	ldr	r2, [r7, #32]
 80064e0:	e841 2300 	strex	r3, r2, [r1]
 80064e4:	61bb      	str	r3, [r7, #24]
   return(result);
 80064e6:	69bb      	ldr	r3, [r7, #24]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e5      	bne.n	80064b8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	f003 0310 	and.w	r3, r3, #16
 80064f6:	2b10      	cmp	r3, #16
 80064f8:	d10a      	bne.n	8006510 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80064fa:	2300      	movs	r3, #0
 80064fc:	60fb      	str	r3, [r7, #12]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	60fb      	str	r3, [r7, #12]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	60fb      	str	r3, [r7, #12]
 800650e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f7ff fc48 	bl	8005dac <HAL_UARTEx_RxEventCallback>
 800651c:	e002      	b.n	8006524 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7ff fc26 	bl	8005d70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006524:	2300      	movs	r3, #0
 8006526:	e002      	b.n	800652e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8006528:	2300      	movs	r3, #0
 800652a:	e000      	b.n	800652e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800652c:	2302      	movs	r3, #2
  }
}
 800652e:	4618      	mov	r0, r3
 8006530:	3730      	adds	r7, #48	@ 0x30
 8006532:	46bd      	mov	sp, r7
 8006534:	bd80      	pop	{r7, pc}
	...

08006538 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006538:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800653c:	b0c0      	sub	sp, #256	@ 0x100
 800653e:	af00      	add	r7, sp, #0
 8006540:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	691b      	ldr	r3, [r3, #16]
 800654c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006554:	68d9      	ldr	r1, [r3, #12]
 8006556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800655a:	681a      	ldr	r2, [r3, #0]
 800655c:	ea40 0301 	orr.w	r3, r0, r1
 8006560:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006566:	689a      	ldr	r2, [r3, #8]
 8006568:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	431a      	orrs	r2, r3
 8006570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006574:	695b      	ldr	r3, [r3, #20]
 8006576:	431a      	orrs	r2, r3
 8006578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800657c:	69db      	ldr	r3, [r3, #28]
 800657e:	4313      	orrs	r3, r2
 8006580:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	68db      	ldr	r3, [r3, #12]
 800658c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006590:	f021 010c 	bic.w	r1, r1, #12
 8006594:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006598:	681a      	ldr	r2, [r3, #0]
 800659a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800659e:	430b      	orrs	r3, r1
 80065a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80065a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	695b      	ldr	r3, [r3, #20]
 80065aa:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80065ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b2:	6999      	ldr	r1, [r3, #24]
 80065b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065b8:	681a      	ldr	r2, [r3, #0]
 80065ba:	ea40 0301 	orr.w	r3, r0, r1
 80065be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80065c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065c4:	681a      	ldr	r2, [r3, #0]
 80065c6:	4b8f      	ldr	r3, [pc, #572]	@ (8006804 <UART_SetConfig+0x2cc>)
 80065c8:	429a      	cmp	r2, r3
 80065ca:	d005      	beq.n	80065d8 <UART_SetConfig+0xa0>
 80065cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	4b8d      	ldr	r3, [pc, #564]	@ (8006808 <UART_SetConfig+0x2d0>)
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d104      	bne.n	80065e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80065d8:	f7fe fe5e 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 80065dc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80065e0:	e003      	b.n	80065ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80065e2:	f7fe fe45 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 80065e6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80065ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80065ee:	69db      	ldr	r3, [r3, #28]
 80065f0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80065f4:	f040 810c 	bne.w	8006810 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80065f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80065fc:	2200      	movs	r2, #0
 80065fe:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006602:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006606:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800660a:	4622      	mov	r2, r4
 800660c:	462b      	mov	r3, r5
 800660e:	1891      	adds	r1, r2, r2
 8006610:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006612:	415b      	adcs	r3, r3
 8006614:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006616:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800661a:	4621      	mov	r1, r4
 800661c:	eb12 0801 	adds.w	r8, r2, r1
 8006620:	4629      	mov	r1, r5
 8006622:	eb43 0901 	adc.w	r9, r3, r1
 8006626:	f04f 0200 	mov.w	r2, #0
 800662a:	f04f 0300 	mov.w	r3, #0
 800662e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006632:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006636:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800663a:	4690      	mov	r8, r2
 800663c:	4699      	mov	r9, r3
 800663e:	4623      	mov	r3, r4
 8006640:	eb18 0303 	adds.w	r3, r8, r3
 8006644:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006648:	462b      	mov	r3, r5
 800664a:	eb49 0303 	adc.w	r3, r9, r3
 800664e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006652:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	2200      	movs	r2, #0
 800665a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800665e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006662:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006666:	460b      	mov	r3, r1
 8006668:	18db      	adds	r3, r3, r3
 800666a:	653b      	str	r3, [r7, #80]	@ 0x50
 800666c:	4613      	mov	r3, r2
 800666e:	eb42 0303 	adc.w	r3, r2, r3
 8006672:	657b      	str	r3, [r7, #84]	@ 0x54
 8006674:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006678:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800667c:	f7f9 fda4 	bl	80001c8 <__aeabi_uldivmod>
 8006680:	4602      	mov	r2, r0
 8006682:	460b      	mov	r3, r1
 8006684:	4b61      	ldr	r3, [pc, #388]	@ (800680c <UART_SetConfig+0x2d4>)
 8006686:	fba3 2302 	umull	r2, r3, r3, r2
 800668a:	095b      	lsrs	r3, r3, #5
 800668c:	011c      	lsls	r4, r3, #4
 800668e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006692:	2200      	movs	r2, #0
 8006694:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006698:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800669c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80066a0:	4642      	mov	r2, r8
 80066a2:	464b      	mov	r3, r9
 80066a4:	1891      	adds	r1, r2, r2
 80066a6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80066a8:	415b      	adcs	r3, r3
 80066aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80066ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80066b0:	4641      	mov	r1, r8
 80066b2:	eb12 0a01 	adds.w	sl, r2, r1
 80066b6:	4649      	mov	r1, r9
 80066b8:	eb43 0b01 	adc.w	fp, r3, r1
 80066bc:	f04f 0200 	mov.w	r2, #0
 80066c0:	f04f 0300 	mov.w	r3, #0
 80066c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80066c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80066cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80066d0:	4692      	mov	sl, r2
 80066d2:	469b      	mov	fp, r3
 80066d4:	4643      	mov	r3, r8
 80066d6:	eb1a 0303 	adds.w	r3, sl, r3
 80066da:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80066de:	464b      	mov	r3, r9
 80066e0:	eb4b 0303 	adc.w	r3, fp, r3
 80066e4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80066e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80066f4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80066f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80066fc:	460b      	mov	r3, r1
 80066fe:	18db      	adds	r3, r3, r3
 8006700:	643b      	str	r3, [r7, #64]	@ 0x40
 8006702:	4613      	mov	r3, r2
 8006704:	eb42 0303 	adc.w	r3, r2, r3
 8006708:	647b      	str	r3, [r7, #68]	@ 0x44
 800670a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800670e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006712:	f7f9 fd59 	bl	80001c8 <__aeabi_uldivmod>
 8006716:	4602      	mov	r2, r0
 8006718:	460b      	mov	r3, r1
 800671a:	4611      	mov	r1, r2
 800671c:	4b3b      	ldr	r3, [pc, #236]	@ (800680c <UART_SetConfig+0x2d4>)
 800671e:	fba3 2301 	umull	r2, r3, r3, r1
 8006722:	095b      	lsrs	r3, r3, #5
 8006724:	2264      	movs	r2, #100	@ 0x64
 8006726:	fb02 f303 	mul.w	r3, r2, r3
 800672a:	1acb      	subs	r3, r1, r3
 800672c:	00db      	lsls	r3, r3, #3
 800672e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006732:	4b36      	ldr	r3, [pc, #216]	@ (800680c <UART_SetConfig+0x2d4>)
 8006734:	fba3 2302 	umull	r2, r3, r3, r2
 8006738:	095b      	lsrs	r3, r3, #5
 800673a:	005b      	lsls	r3, r3, #1
 800673c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006740:	441c      	add	r4, r3
 8006742:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006746:	2200      	movs	r2, #0
 8006748:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800674c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006750:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006754:	4642      	mov	r2, r8
 8006756:	464b      	mov	r3, r9
 8006758:	1891      	adds	r1, r2, r2
 800675a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800675c:	415b      	adcs	r3, r3
 800675e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006760:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006764:	4641      	mov	r1, r8
 8006766:	1851      	adds	r1, r2, r1
 8006768:	6339      	str	r1, [r7, #48]	@ 0x30
 800676a:	4649      	mov	r1, r9
 800676c:	414b      	adcs	r3, r1
 800676e:	637b      	str	r3, [r7, #52]	@ 0x34
 8006770:	f04f 0200 	mov.w	r2, #0
 8006774:	f04f 0300 	mov.w	r3, #0
 8006778:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800677c:	4659      	mov	r1, fp
 800677e:	00cb      	lsls	r3, r1, #3
 8006780:	4651      	mov	r1, sl
 8006782:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006786:	4651      	mov	r1, sl
 8006788:	00ca      	lsls	r2, r1, #3
 800678a:	4610      	mov	r0, r2
 800678c:	4619      	mov	r1, r3
 800678e:	4603      	mov	r3, r0
 8006790:	4642      	mov	r2, r8
 8006792:	189b      	adds	r3, r3, r2
 8006794:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006798:	464b      	mov	r3, r9
 800679a:	460a      	mov	r2, r1
 800679c:	eb42 0303 	adc.w	r3, r2, r3
 80067a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80067a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067a8:	685b      	ldr	r3, [r3, #4]
 80067aa:	2200      	movs	r2, #0
 80067ac:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80067b0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80067b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80067b8:	460b      	mov	r3, r1
 80067ba:	18db      	adds	r3, r3, r3
 80067bc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80067be:	4613      	mov	r3, r2
 80067c0:	eb42 0303 	adc.w	r3, r2, r3
 80067c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80067c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80067ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80067ce:	f7f9 fcfb 	bl	80001c8 <__aeabi_uldivmod>
 80067d2:	4602      	mov	r2, r0
 80067d4:	460b      	mov	r3, r1
 80067d6:	4b0d      	ldr	r3, [pc, #52]	@ (800680c <UART_SetConfig+0x2d4>)
 80067d8:	fba3 1302 	umull	r1, r3, r3, r2
 80067dc:	095b      	lsrs	r3, r3, #5
 80067de:	2164      	movs	r1, #100	@ 0x64
 80067e0:	fb01 f303 	mul.w	r3, r1, r3
 80067e4:	1ad3      	subs	r3, r2, r3
 80067e6:	00db      	lsls	r3, r3, #3
 80067e8:	3332      	adds	r3, #50	@ 0x32
 80067ea:	4a08      	ldr	r2, [pc, #32]	@ (800680c <UART_SetConfig+0x2d4>)
 80067ec:	fba2 2303 	umull	r2, r3, r2, r3
 80067f0:	095b      	lsrs	r3, r3, #5
 80067f2:	f003 0207 	and.w	r2, r3, #7
 80067f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	4422      	add	r2, r4
 80067fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006800:	e106      	b.n	8006a10 <UART_SetConfig+0x4d8>
 8006802:	bf00      	nop
 8006804:	40011000 	.word	0x40011000
 8006808:	40011400 	.word	0x40011400
 800680c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006810:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006814:	2200      	movs	r2, #0
 8006816:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800681a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800681e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006822:	4642      	mov	r2, r8
 8006824:	464b      	mov	r3, r9
 8006826:	1891      	adds	r1, r2, r2
 8006828:	6239      	str	r1, [r7, #32]
 800682a:	415b      	adcs	r3, r3
 800682c:	627b      	str	r3, [r7, #36]	@ 0x24
 800682e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006832:	4641      	mov	r1, r8
 8006834:	1854      	adds	r4, r2, r1
 8006836:	4649      	mov	r1, r9
 8006838:	eb43 0501 	adc.w	r5, r3, r1
 800683c:	f04f 0200 	mov.w	r2, #0
 8006840:	f04f 0300 	mov.w	r3, #0
 8006844:	00eb      	lsls	r3, r5, #3
 8006846:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800684a:	00e2      	lsls	r2, r4, #3
 800684c:	4614      	mov	r4, r2
 800684e:	461d      	mov	r5, r3
 8006850:	4643      	mov	r3, r8
 8006852:	18e3      	adds	r3, r4, r3
 8006854:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006858:	464b      	mov	r3, r9
 800685a:	eb45 0303 	adc.w	r3, r5, r3
 800685e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006862:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006866:	685b      	ldr	r3, [r3, #4]
 8006868:	2200      	movs	r2, #0
 800686a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800686e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006872:	f04f 0200 	mov.w	r2, #0
 8006876:	f04f 0300 	mov.w	r3, #0
 800687a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800687e:	4629      	mov	r1, r5
 8006880:	008b      	lsls	r3, r1, #2
 8006882:	4621      	mov	r1, r4
 8006884:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006888:	4621      	mov	r1, r4
 800688a:	008a      	lsls	r2, r1, #2
 800688c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006890:	f7f9 fc9a 	bl	80001c8 <__aeabi_uldivmod>
 8006894:	4602      	mov	r2, r0
 8006896:	460b      	mov	r3, r1
 8006898:	4b60      	ldr	r3, [pc, #384]	@ (8006a1c <UART_SetConfig+0x4e4>)
 800689a:	fba3 2302 	umull	r2, r3, r3, r2
 800689e:	095b      	lsrs	r3, r3, #5
 80068a0:	011c      	lsls	r4, r3, #4
 80068a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80068a6:	2200      	movs	r2, #0
 80068a8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80068ac:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80068b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80068b4:	4642      	mov	r2, r8
 80068b6:	464b      	mov	r3, r9
 80068b8:	1891      	adds	r1, r2, r2
 80068ba:	61b9      	str	r1, [r7, #24]
 80068bc:	415b      	adcs	r3, r3
 80068be:	61fb      	str	r3, [r7, #28]
 80068c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80068c4:	4641      	mov	r1, r8
 80068c6:	1851      	adds	r1, r2, r1
 80068c8:	6139      	str	r1, [r7, #16]
 80068ca:	4649      	mov	r1, r9
 80068cc:	414b      	adcs	r3, r1
 80068ce:	617b      	str	r3, [r7, #20]
 80068d0:	f04f 0200 	mov.w	r2, #0
 80068d4:	f04f 0300 	mov.w	r3, #0
 80068d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80068dc:	4659      	mov	r1, fp
 80068de:	00cb      	lsls	r3, r1, #3
 80068e0:	4651      	mov	r1, sl
 80068e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80068e6:	4651      	mov	r1, sl
 80068e8:	00ca      	lsls	r2, r1, #3
 80068ea:	4610      	mov	r0, r2
 80068ec:	4619      	mov	r1, r3
 80068ee:	4603      	mov	r3, r0
 80068f0:	4642      	mov	r2, r8
 80068f2:	189b      	adds	r3, r3, r2
 80068f4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80068f8:	464b      	mov	r3, r9
 80068fa:	460a      	mov	r2, r1
 80068fc:	eb42 0303 	adc.w	r3, r2, r3
 8006900:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006904:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	2200      	movs	r2, #0
 800690c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800690e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006910:	f04f 0200 	mov.w	r2, #0
 8006914:	f04f 0300 	mov.w	r3, #0
 8006918:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800691c:	4649      	mov	r1, r9
 800691e:	008b      	lsls	r3, r1, #2
 8006920:	4641      	mov	r1, r8
 8006922:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006926:	4641      	mov	r1, r8
 8006928:	008a      	lsls	r2, r1, #2
 800692a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800692e:	f7f9 fc4b 	bl	80001c8 <__aeabi_uldivmod>
 8006932:	4602      	mov	r2, r0
 8006934:	460b      	mov	r3, r1
 8006936:	4611      	mov	r1, r2
 8006938:	4b38      	ldr	r3, [pc, #224]	@ (8006a1c <UART_SetConfig+0x4e4>)
 800693a:	fba3 2301 	umull	r2, r3, r3, r1
 800693e:	095b      	lsrs	r3, r3, #5
 8006940:	2264      	movs	r2, #100	@ 0x64
 8006942:	fb02 f303 	mul.w	r3, r2, r3
 8006946:	1acb      	subs	r3, r1, r3
 8006948:	011b      	lsls	r3, r3, #4
 800694a:	3332      	adds	r3, #50	@ 0x32
 800694c:	4a33      	ldr	r2, [pc, #204]	@ (8006a1c <UART_SetConfig+0x4e4>)
 800694e:	fba2 2303 	umull	r2, r3, r2, r3
 8006952:	095b      	lsrs	r3, r3, #5
 8006954:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006958:	441c      	add	r4, r3
 800695a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800695e:	2200      	movs	r2, #0
 8006960:	673b      	str	r3, [r7, #112]	@ 0x70
 8006962:	677a      	str	r2, [r7, #116]	@ 0x74
 8006964:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006968:	4642      	mov	r2, r8
 800696a:	464b      	mov	r3, r9
 800696c:	1891      	adds	r1, r2, r2
 800696e:	60b9      	str	r1, [r7, #8]
 8006970:	415b      	adcs	r3, r3
 8006972:	60fb      	str	r3, [r7, #12]
 8006974:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006978:	4641      	mov	r1, r8
 800697a:	1851      	adds	r1, r2, r1
 800697c:	6039      	str	r1, [r7, #0]
 800697e:	4649      	mov	r1, r9
 8006980:	414b      	adcs	r3, r1
 8006982:	607b      	str	r3, [r7, #4]
 8006984:	f04f 0200 	mov.w	r2, #0
 8006988:	f04f 0300 	mov.w	r3, #0
 800698c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006990:	4659      	mov	r1, fp
 8006992:	00cb      	lsls	r3, r1, #3
 8006994:	4651      	mov	r1, sl
 8006996:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800699a:	4651      	mov	r1, sl
 800699c:	00ca      	lsls	r2, r1, #3
 800699e:	4610      	mov	r0, r2
 80069a0:	4619      	mov	r1, r3
 80069a2:	4603      	mov	r3, r0
 80069a4:	4642      	mov	r2, r8
 80069a6:	189b      	adds	r3, r3, r2
 80069a8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80069aa:	464b      	mov	r3, r9
 80069ac:	460a      	mov	r2, r1
 80069ae:	eb42 0303 	adc.w	r3, r2, r3
 80069b2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80069b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069b8:	685b      	ldr	r3, [r3, #4]
 80069ba:	2200      	movs	r2, #0
 80069bc:	663b      	str	r3, [r7, #96]	@ 0x60
 80069be:	667a      	str	r2, [r7, #100]	@ 0x64
 80069c0:	f04f 0200 	mov.w	r2, #0
 80069c4:	f04f 0300 	mov.w	r3, #0
 80069c8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80069cc:	4649      	mov	r1, r9
 80069ce:	008b      	lsls	r3, r1, #2
 80069d0:	4641      	mov	r1, r8
 80069d2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80069d6:	4641      	mov	r1, r8
 80069d8:	008a      	lsls	r2, r1, #2
 80069da:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80069de:	f7f9 fbf3 	bl	80001c8 <__aeabi_uldivmod>
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	4b0d      	ldr	r3, [pc, #52]	@ (8006a1c <UART_SetConfig+0x4e4>)
 80069e8:	fba3 1302 	umull	r1, r3, r3, r2
 80069ec:	095b      	lsrs	r3, r3, #5
 80069ee:	2164      	movs	r1, #100	@ 0x64
 80069f0:	fb01 f303 	mul.w	r3, r1, r3
 80069f4:	1ad3      	subs	r3, r2, r3
 80069f6:	011b      	lsls	r3, r3, #4
 80069f8:	3332      	adds	r3, #50	@ 0x32
 80069fa:	4a08      	ldr	r2, [pc, #32]	@ (8006a1c <UART_SetConfig+0x4e4>)
 80069fc:	fba2 2303 	umull	r2, r3, r2, r3
 8006a00:	095b      	lsrs	r3, r3, #5
 8006a02:	f003 020f 	and.w	r2, r3, #15
 8006a06:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	4422      	add	r2, r4
 8006a0e:	609a      	str	r2, [r3, #8]
}
 8006a10:	bf00      	nop
 8006a12:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006a16:	46bd      	mov	sp, r7
 8006a18:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006a1c:	51eb851f 	.word	0x51eb851f

08006a20 <HAL_USART_Init>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_USART_Init(USART_HandleTypeDef *husart)
{
 8006a20:	b580      	push	{r7, lr}
 8006a22:	b082      	sub	sp, #8
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
  /* Check the USART handle allocation */
  if (husart == NULL)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d101      	bne.n	8006a32 <HAL_USART_Init+0x12>
  {
    return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e033      	b.n	8006a9a <HAL_USART_Init+0x7a>
  }

  /* Check the parameters */
  assert_param(IS_USART_INSTANCE(husart->Instance));

  if (husart->State == HAL_USART_STATE_RESET)
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	2b00      	cmp	r3, #0
 8006a3c:	d106      	bne.n	8006a4c <HAL_USART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    husart->Lock = HAL_UNLOCKED;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2200      	movs	r2, #0
 8006a42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware */
    husart->MspInitCallback(husart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_USART_MspInit(husart);
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f7fa f956 	bl	8000cf8 <HAL_USART_MspInit>
#endif /* USE_HAL_USART_REGISTER_CALLBACKS */
  }

  husart->State = HAL_USART_STATE_BUSY;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	2202      	movs	r2, #2
 8006a50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the USART Communication parameters */
  USART_SetConfig(husart);
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f000 f825 	bl	8006aa4 <USART_SetConfig>

  /* In USART mode, the following bits must be kept cleared:
     - LINEN bit in the USART_CR2 register
     - HDSEL, SCEN and IREN bits in the USART_CR3 register */
  CLEAR_BIT(husart->Instance->CR2, USART_CR2_LINEN);
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006a68:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	695a      	ldr	r2, [r3, #20]
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006a78:	615a      	str	r2, [r3, #20]

  /* Enable the Peripheral */
  __HAL_USART_ENABLE(husart);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	68da      	ldr	r2, [r3, #12]
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8006a88:	60da      	str	r2, [r3, #12]

  /* Initialize the USART state */
  husart->ErrorCode = HAL_USART_ERROR_NONE;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	641a      	str	r2, [r3, #64]	@ 0x40
  husart->State = HAL_USART_STATE_READY;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	2201      	movs	r2, #1
 8006a94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006a98:	2300      	movs	r3, #0
}
 8006a9a:	4618      	mov	r0, r3
 8006a9c:	3708      	adds	r7, #8
 8006a9e:	46bd      	mov	sp, r7
 8006aa0:	bd80      	pop	{r7, pc}
	...

08006aa4 <USART_SetConfig>:
  * @param  husart Pointer to a USART_HandleTypeDef structure that contains
  *                the configuration information for the specified USART module.
  * @retval None
  */
static void USART_SetConfig(USART_HandleTypeDef *husart)
{
 8006aa4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006aa8:	b0c6      	sub	sp, #280	@ 0x118
 8006aaa:	af00      	add	r7, sp, #0
 8006aac:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
  uint32_t tmpreg = 0x00U;
 8006ab0:	2300      	movs	r3, #0
 8006ab2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  assert_param(IS_USART_PARITY(husart->Init.Parity));
  assert_param(IS_USART_MODE(husart->Init.Mode));

  /* The LBCL, CPOL and CPHA bits have to be selected when both the transmitter and the
     receiver are disabled (TE=RE=0) to ensure that the clock pulses function correctly. */
  CLEAR_BIT(husart->Instance->CR1, (USART_CR1_TE | USART_CR1_RE));
 8006ab6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68d9      	ldr	r1, [r3, #12]
 8006abe:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ac2:	681a      	ldr	r2, [r3, #0]
 8006ac4:	f021 030c 	bic.w	r3, r1, #12
 8006ac8:	60d3      	str	r3, [r2, #12]

  /*---------------------------- USART CR2 Configuration ---------------------*/
  tmpreg = husart->Instance->CR2;
 8006aca:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	691b      	ldr	r3, [r3, #16]
 8006ad2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Clear CLKEN, CPOL, CPHA and LBCL bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR2_CPHA | USART_CR2_CPOL | USART_CR2_CLKEN | USART_CR2_LBCL | USART_CR2_STOP));
 8006ad6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006ada:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8006ade:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Clock, CPOL, CPHA and LastBit -----------------------*/
  /* Set CPOL bit according to husart->Init.CLKPolarity value */
  /* Set CPHA bit according to husart->Init.CLKPhase value */
  /* Set LBCL bit according to husart->Init.CLKLastBit value */
  /* Set Stop Bits: Set STOP[13:12] bits according to husart->Init.StopBits value */
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006ae2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006ae6:	699a      	ldr	r2, [r3, #24]
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006ae8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006aec:	69db      	ldr	r3, [r3, #28]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006aee:	431a      	orrs	r2, r3
                       husart->Init.CLKPhase | husart->Init.CLKLastBit | husart->Init.StopBits);
 8006af0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	431a      	orrs	r2, r3
 8006af8:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006afc:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(USART_CLOCK_ENABLE | husart->Init.CLKPolarity |
 8006afe:	431a      	orrs	r2, r3
 8006b00:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b04:	4313      	orrs	r3, r2
 8006b06:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8006b0a:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Write to USART CR2 */
  WRITE_REG(husart->Instance->CR2, (uint32_t)tmpreg);
 8006b0e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b18:	6113      	str	r3, [r2, #16]

  /*-------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = husart->Instance->CR1;
 8006b1a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Clear M, PCE, PS, TE, RE and OVER8 bits */
  tmpreg &= (uint32_t)~((uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | \
 8006b26:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b2a:	f423 4316 	bic.w	r3, r3, #38400	@ 0x9600
 8006b2e:	f023 030c 	bic.w	r3, r3, #12
 8006b32:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
  /* Configure the USART Word Length, Parity and mode:
     Set the M bits according to husart->Init.WordLength value
     Set PCE and PS bits according to husart->Init.Parity value
     Set TE and RE bits according to husart->Init.Mode value
     Force OVER8 bit to 1 in order to reach the max USART frequencies */
  tmpreg |= (uint32_t)husart->Init.WordLength | husart->Init.Parity | husart->Init.Mode | USART_CR1_OVER8;
 8006b36:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b3a:	689a      	ldr	r2, [r3, #8]
 8006b3c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b40:	691b      	ldr	r3, [r3, #16]
 8006b42:	431a      	orrs	r2, r3
 8006b44:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b48:	695b      	ldr	r3, [r3, #20]
 8006b4a:	431a      	orrs	r2, r3
 8006b4c:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b50:	4313      	orrs	r3, r2
 8006b52:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8006b56:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

  /* Write to USART CR1 */
  WRITE_REG(husart->Instance->CR1, (uint32_t)tmpreg);
 8006b5a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b5e:	681a      	ldr	r2, [r3, #0]
 8006b60:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8006b64:	60d3      	str	r3, [r2, #12]

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Clear CTSE and RTSE bits */
  CLEAR_BIT(husart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE));
 8006b66:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	6959      	ldr	r1, [r3, #20]
 8006b6e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b72:	681a      	ldr	r2, [r3, #0]
 8006b74:	f421 7340 	bic.w	r3, r1, #768	@ 0x300
 8006b78:	6153      	str	r3, [r2, #20]
   {
    pclk = HAL_RCC_GetPCLK2Freq();
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
   }
#elif defined(USART6)
  if((husart->Instance == USART1) || (husart->Instance == USART6))
 8006b7a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b7e:	681a      	ldr	r2, [r3, #0]
 8006b80:	4b8b      	ldr	r3, [pc, #556]	@ (8006db0 <USART_SetConfig+0x30c>)
 8006b82:	429a      	cmp	r2, r3
 8006b84:	d006      	beq.n	8006b94 <USART_SetConfig+0xf0>
 8006b86:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006b8a:	681a      	ldr	r2, [r3, #0]
 8006b8c:	4b89      	ldr	r3, [pc, #548]	@ (8006db4 <USART_SetConfig+0x310>)
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	f040 8114 	bne.w	8006dbc <USART_SetConfig+0x318>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006b94:	f7fe fb80 	bl	8005298 <HAL_RCC_GetPCLK2Freq>
 8006b98:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006b9c:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006ba0:	2200      	movs	r2, #0
 8006ba2:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8006ba6:	f8c7 2104 	str.w	r2, [r7, #260]	@ 0x104
 8006baa:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8006bae:	4622      	mov	r2, r4
 8006bb0:	462b      	mov	r3, r5
 8006bb2:	1891      	adds	r1, r2, r2
 8006bb4:	6739      	str	r1, [r7, #112]	@ 0x70
 8006bb6:	415b      	adcs	r3, r3
 8006bb8:	677b      	str	r3, [r7, #116]	@ 0x74
 8006bba:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8006bbe:	4621      	mov	r1, r4
 8006bc0:	eb12 0801 	adds.w	r8, r2, r1
 8006bc4:	4629      	mov	r1, r5
 8006bc6:	eb43 0901 	adc.w	r9, r3, r1
 8006bca:	f04f 0200 	mov.w	r2, #0
 8006bce:	f04f 0300 	mov.w	r3, #0
 8006bd2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006bd6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006bda:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006bde:	4690      	mov	r8, r2
 8006be0:	4699      	mov	r9, r3
 8006be2:	4623      	mov	r3, r4
 8006be4:	eb18 0303 	adds.w	r3, r8, r3
 8006be8:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8006bec:	462b      	mov	r3, r5
 8006bee:	eb49 0303 	adc.w	r3, r9, r3
 8006bf2:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8006bf6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006bfa:	685b      	ldr	r3, [r3, #4]
 8006bfc:	2200      	movs	r2, #0
 8006bfe:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8006c02:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 8006c06:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8006c0a:	460b      	mov	r3, r1
 8006c0c:	18db      	adds	r3, r3, r3
 8006c0e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006c10:	4613      	mov	r3, r2
 8006c12:	eb42 0303 	adc.w	r3, r2, r3
 8006c16:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006c18:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	@ 0x68
 8006c1c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	@ 0xf8
 8006c20:	f7f9 fad2 	bl	80001c8 <__aeabi_uldivmod>
 8006c24:	4602      	mov	r2, r0
 8006c26:	460b      	mov	r3, r1
 8006c28:	4b63      	ldr	r3, [pc, #396]	@ (8006db8 <USART_SetConfig+0x314>)
 8006c2a:	fba3 2302 	umull	r2, r3, r3, r2
 8006c2e:	095b      	lsrs	r3, r3, #5
 8006c30:	011c      	lsls	r4, r3, #4
 8006c32:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006c3c:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006c40:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 8006c44:	4642      	mov	r2, r8
 8006c46:	464b      	mov	r3, r9
 8006c48:	1891      	adds	r1, r2, r2
 8006c4a:	6639      	str	r1, [r7, #96]	@ 0x60
 8006c4c:	415b      	adcs	r3, r3
 8006c4e:	667b      	str	r3, [r7, #100]	@ 0x64
 8006c50:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	@ 0x60
 8006c54:	4641      	mov	r1, r8
 8006c56:	1851      	adds	r1, r2, r1
 8006c58:	65b9      	str	r1, [r7, #88]	@ 0x58
 8006c5a:	4649      	mov	r1, r9
 8006c5c:	414b      	adcs	r3, r1
 8006c5e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006c60:	f04f 0200 	mov.w	r2, #0
 8006c64:	f04f 0300 	mov.w	r3, #0
 8006c68:	e9d7 ab16 	ldrd	sl, fp, [r7, #88]	@ 0x58
 8006c6c:	4659      	mov	r1, fp
 8006c6e:	00cb      	lsls	r3, r1, #3
 8006c70:	4651      	mov	r1, sl
 8006c72:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c76:	4651      	mov	r1, sl
 8006c78:	00ca      	lsls	r2, r1, #3
 8006c7a:	4610      	mov	r0, r2
 8006c7c:	4619      	mov	r1, r3
 8006c7e:	4603      	mov	r3, r0
 8006c80:	4642      	mov	r2, r8
 8006c82:	189b      	adds	r3, r3, r2
 8006c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8006c88:	464b      	mov	r3, r9
 8006c8a:	460a      	mov	r2, r1
 8006c8c:	eb42 0303 	adc.w	r3, r2, r3
 8006c90:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006c94:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006c98:	685b      	ldr	r3, [r3, #4]
 8006c9a:	2200      	movs	r2, #0
 8006c9c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006ca0:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006ca4:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8006ca8:	460b      	mov	r3, r1
 8006caa:	18db      	adds	r3, r3, r3
 8006cac:	653b      	str	r3, [r7, #80]	@ 0x50
 8006cae:	4613      	mov	r3, r2
 8006cb0:	eb42 0303 	adc.w	r3, r2, r3
 8006cb4:	657b      	str	r3, [r7, #84]	@ 0x54
 8006cb6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006cba:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006cbe:	f7f9 fa83 	bl	80001c8 <__aeabi_uldivmod>
 8006cc2:	4602      	mov	r2, r0
 8006cc4:	460b      	mov	r3, r1
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4b3b      	ldr	r3, [pc, #236]	@ (8006db8 <USART_SetConfig+0x314>)
 8006cca:	fba3 2301 	umull	r2, r3, r3, r1
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	2264      	movs	r2, #100	@ 0x64
 8006cd2:	fb02 f303 	mul.w	r3, r2, r3
 8006cd6:	1acb      	subs	r3, r1, r3
 8006cd8:	00db      	lsls	r3, r3, #3
 8006cda:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006cde:	4b36      	ldr	r3, [pc, #216]	@ (8006db8 <USART_SetConfig+0x314>)
 8006ce0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ce4:	095b      	lsrs	r3, r3, #5
 8006ce6:	005b      	lsls	r3, r3, #1
 8006ce8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006cec:	441c      	add	r4, r3
 8006cee:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006cf8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006cfc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006d00:	4642      	mov	r2, r8
 8006d02:	464b      	mov	r3, r9
 8006d04:	1891      	adds	r1, r2, r2
 8006d06:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006d08:	415b      	adcs	r3, r3
 8006d0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006d0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006d10:	4641      	mov	r1, r8
 8006d12:	1851      	adds	r1, r2, r1
 8006d14:	6439      	str	r1, [r7, #64]	@ 0x40
 8006d16:	4649      	mov	r1, r9
 8006d18:	414b      	adcs	r3, r1
 8006d1a:	647b      	str	r3, [r7, #68]	@ 0x44
 8006d1c:	f04f 0200 	mov.w	r2, #0
 8006d20:	f04f 0300 	mov.w	r3, #0
 8006d24:	e9d7 ab10 	ldrd	sl, fp, [r7, #64]	@ 0x40
 8006d28:	4659      	mov	r1, fp
 8006d2a:	00cb      	lsls	r3, r1, #3
 8006d2c:	4651      	mov	r1, sl
 8006d2e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d32:	4651      	mov	r1, sl
 8006d34:	00ca      	lsls	r2, r1, #3
 8006d36:	4610      	mov	r0, r2
 8006d38:	4619      	mov	r1, r3
 8006d3a:	4603      	mov	r3, r0
 8006d3c:	4642      	mov	r2, r8
 8006d3e:	189b      	adds	r3, r3, r2
 8006d40:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006d44:	464b      	mov	r3, r9
 8006d46:	460a      	mov	r2, r1
 8006d48:	eb42 0303 	adc.w	r3, r2, r3
 8006d4c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006d50:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006d54:	685b      	ldr	r3, [r3, #4]
 8006d56:	2200      	movs	r2, #0
 8006d58:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006d5c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006d60:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006d64:	460b      	mov	r3, r1
 8006d66:	18db      	adds	r3, r3, r3
 8006d68:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006d6a:	4613      	mov	r3, r2
 8006d6c:	eb42 0303 	adc.w	r3, r2, r3
 8006d70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006d72:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006d76:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006d7a:	f7f9 fa25 	bl	80001c8 <__aeabi_uldivmod>
 8006d7e:	4602      	mov	r2, r0
 8006d80:	460b      	mov	r3, r1
 8006d82:	4b0d      	ldr	r3, [pc, #52]	@ (8006db8 <USART_SetConfig+0x314>)
 8006d84:	fba3 1302 	umull	r1, r3, r3, r2
 8006d88:	095b      	lsrs	r3, r3, #5
 8006d8a:	2164      	movs	r1, #100	@ 0x64
 8006d8c:	fb01 f303 	mul.w	r3, r1, r3
 8006d90:	1ad3      	subs	r3, r2, r3
 8006d92:	00db      	lsls	r3, r3, #3
 8006d94:	3332      	adds	r3, #50	@ 0x32
 8006d96:	4a08      	ldr	r2, [pc, #32]	@ (8006db8 <USART_SetConfig+0x314>)
 8006d98:	fba2 2303 	umull	r2, r3, r2, r3
 8006d9c:	095b      	lsrs	r3, r3, #5
 8006d9e:	f003 0207 	and.w	r2, r3, #7
 8006da2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	4422      	add	r2, r4
 8006daa:	609a      	str	r2, [r3, #8]
 8006dac:	e109      	b.n	8006fc2 <USART_SetConfig+0x51e>
 8006dae:	bf00      	nop
 8006db0:	40011000 	.word	0x40011000
 8006db4:	40011400 	.word	0x40011400
 8006db8:	51eb851f 	.word	0x51eb851f
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
  }
#endif /* USART6 || UART9 || UART10 */	
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8006dbc:	f7fe fa58 	bl	8005270 <HAL_RCC_GetPCLK1Freq>
 8006dc0:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
    husart->Instance->BRR = USART_BRR(pclk, husart->Init.BaudRate);
 8006dc4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006dc8:	2200      	movs	r2, #0
 8006dca:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006dce:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006dd2:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006dd6:	4642      	mov	r2, r8
 8006dd8:	464b      	mov	r3, r9
 8006dda:	1891      	adds	r1, r2, r2
 8006ddc:	6339      	str	r1, [r7, #48]	@ 0x30
 8006dde:	415b      	adcs	r3, r3
 8006de0:	637b      	str	r3, [r7, #52]	@ 0x34
 8006de2:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8006de6:	4641      	mov	r1, r8
 8006de8:	1854      	adds	r4, r2, r1
 8006dea:	4649      	mov	r1, r9
 8006dec:	eb43 0501 	adc.w	r5, r3, r1
 8006df0:	f04f 0200 	mov.w	r2, #0
 8006df4:	f04f 0300 	mov.w	r3, #0
 8006df8:	00eb      	lsls	r3, r5, #3
 8006dfa:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006dfe:	00e2      	lsls	r2, r4, #3
 8006e00:	4614      	mov	r4, r2
 8006e02:	461d      	mov	r5, r3
 8006e04:	4643      	mov	r3, r8
 8006e06:	18e3      	adds	r3, r4, r3
 8006e08:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006e0c:	464b      	mov	r3, r9
 8006e0e:	eb45 0303 	adc.w	r3, r5, r3
 8006e12:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006e1a:	685b      	ldr	r3, [r3, #4]
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006e22:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006e26:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006e2a:	460b      	mov	r3, r1
 8006e2c:	18db      	adds	r3, r3, r3
 8006e2e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006e30:	4613      	mov	r3, r2
 8006e32:	eb42 0303 	adc.w	r3, r2, r3
 8006e36:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006e38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006e3c:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006e40:	f7f9 f9c2 	bl	80001c8 <__aeabi_uldivmod>
 8006e44:	4602      	mov	r2, r0
 8006e46:	460b      	mov	r3, r1
 8006e48:	4b61      	ldr	r3, [pc, #388]	@ (8006fd0 <USART_SetConfig+0x52c>)
 8006e4a:	fba3 2302 	umull	r2, r3, r3, r2
 8006e4e:	095b      	lsrs	r3, r3, #5
 8006e50:	011c      	lsls	r4, r3, #4
 8006e52:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006e56:	2200      	movs	r2, #0
 8006e58:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006e5c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006e60:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006e64:	4642      	mov	r2, r8
 8006e66:	464b      	mov	r3, r9
 8006e68:	1891      	adds	r1, r2, r2
 8006e6a:	6239      	str	r1, [r7, #32]
 8006e6c:	415b      	adcs	r3, r3
 8006e6e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006e70:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006e74:	4641      	mov	r1, r8
 8006e76:	eb12 0a01 	adds.w	sl, r2, r1
 8006e7a:	4649      	mov	r1, r9
 8006e7c:	eb43 0b01 	adc.w	fp, r3, r1
 8006e80:	f04f 0200 	mov.w	r2, #0
 8006e84:	f04f 0300 	mov.w	r3, #0
 8006e88:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006e8c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006e90:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006e94:	4692      	mov	sl, r2
 8006e96:	469b      	mov	fp, r3
 8006e98:	4643      	mov	r3, r8
 8006e9a:	eb1a 0303 	adds.w	r3, sl, r3
 8006e9e:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	eb4b 0303 	adc.w	r3, fp, r3
 8006ea8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006eac:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006eb0:	685b      	ldr	r3, [r3, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006eb8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006ebc:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8006ec0:	460b      	mov	r3, r1
 8006ec2:	18db      	adds	r3, r3, r3
 8006ec4:	61bb      	str	r3, [r7, #24]
 8006ec6:	4613      	mov	r3, r2
 8006ec8:	eb42 0303 	adc.w	r3, r2, r3
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ed2:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006ed6:	f7f9 f977 	bl	80001c8 <__aeabi_uldivmod>
 8006eda:	4602      	mov	r2, r0
 8006edc:	460b      	mov	r3, r1
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4b3b      	ldr	r3, [pc, #236]	@ (8006fd0 <USART_SetConfig+0x52c>)
 8006ee2:	fba3 2301 	umull	r2, r3, r3, r1
 8006ee6:	095b      	lsrs	r3, r3, #5
 8006ee8:	2264      	movs	r2, #100	@ 0x64
 8006eea:	fb02 f303 	mul.w	r3, r2, r3
 8006eee:	1acb      	subs	r3, r1, r3
 8006ef0:	00db      	lsls	r3, r3, #3
 8006ef2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006ef6:	4b36      	ldr	r3, [pc, #216]	@ (8006fd0 <USART_SetConfig+0x52c>)
 8006ef8:	fba3 2302 	umull	r2, r3, r3, r2
 8006efc:	095b      	lsrs	r3, r3, #5
 8006efe:	005b      	lsls	r3, r3, #1
 8006f00:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006f04:	441c      	add	r4, r3
 8006f06:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006f10:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006f14:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006f18:	4642      	mov	r2, r8
 8006f1a:	464b      	mov	r3, r9
 8006f1c:	1891      	adds	r1, r2, r2
 8006f1e:	6139      	str	r1, [r7, #16]
 8006f20:	415b      	adcs	r3, r3
 8006f22:	617b      	str	r3, [r7, #20]
 8006f24:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006f28:	4641      	mov	r1, r8
 8006f2a:	1851      	adds	r1, r2, r1
 8006f2c:	60b9      	str	r1, [r7, #8]
 8006f2e:	4649      	mov	r1, r9
 8006f30:	414b      	adcs	r3, r1
 8006f32:	60fb      	str	r3, [r7, #12]
 8006f34:	f04f 0200 	mov.w	r2, #0
 8006f38:	f04f 0300 	mov.w	r3, #0
 8006f3c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8006f40:	4659      	mov	r1, fp
 8006f42:	00cb      	lsls	r3, r1, #3
 8006f44:	4651      	mov	r1, sl
 8006f46:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006f4a:	4651      	mov	r1, sl
 8006f4c:	00ca      	lsls	r2, r1, #3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	4619      	mov	r1, r3
 8006f52:	4603      	mov	r3, r0
 8006f54:	4642      	mov	r2, r8
 8006f56:	189b      	adds	r3, r3, r2
 8006f58:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006f5c:	464b      	mov	r3, r9
 8006f5e:	460a      	mov	r2, r1
 8006f60:	eb42 0303 	adc.w	r3, r2, r3
 8006f64:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006f68:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006f6c:	685b      	ldr	r3, [r3, #4]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006f72:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006f74:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 8006f78:	460b      	mov	r3, r1
 8006f7a:	18db      	adds	r3, r3, r3
 8006f7c:	603b      	str	r3, [r7, #0]
 8006f7e:	4613      	mov	r3, r2
 8006f80:	eb42 0303 	adc.w	r3, r2, r3
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006f8e:	f7f9 f91b 	bl	80001c8 <__aeabi_uldivmod>
 8006f92:	4602      	mov	r2, r0
 8006f94:	460b      	mov	r3, r1
 8006f96:	4b0e      	ldr	r3, [pc, #56]	@ (8006fd0 <USART_SetConfig+0x52c>)
 8006f98:	fba3 1302 	umull	r1, r3, r3, r2
 8006f9c:	095b      	lsrs	r3, r3, #5
 8006f9e:	2164      	movs	r1, #100	@ 0x64
 8006fa0:	fb01 f303 	mul.w	r3, r1, r3
 8006fa4:	1ad3      	subs	r3, r2, r3
 8006fa6:	00db      	lsls	r3, r3, #3
 8006fa8:	3332      	adds	r3, #50	@ 0x32
 8006faa:	4a09      	ldr	r2, [pc, #36]	@ (8006fd0 <USART_SetConfig+0x52c>)
 8006fac:	fba2 2303 	umull	r2, r3, r2, r3
 8006fb0:	095b      	lsrs	r3, r3, #5
 8006fb2:	f003 0207 	and.w	r2, r3, #7
 8006fb6:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4422      	add	r2, r4
 8006fbe:	609a      	str	r2, [r3, #8]
  }
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 8006fc8:	46bd      	mov	sp, r7
 8006fca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006fce:	bf00      	nop
 8006fd0:	51eb851f 	.word	0x51eb851f

08006fd4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006fd4:	b084      	sub	sp, #16
 8006fd6:	b580      	push	{r7, lr}
 8006fd8:	b084      	sub	sp, #16
 8006fda:	af00      	add	r7, sp, #0
 8006fdc:	6078      	str	r0, [r7, #4]
 8006fde:	f107 001c 	add.w	r0, r7, #28
 8006fe2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8006fe6:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d123      	bne.n	8007036 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ff2:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	68db      	ldr	r3, [r3, #12]
 8006ffe:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8007002:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007006:	687a      	ldr	r2, [r7, #4]
 8007008:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8007012:	687b      	ldr	r3, [r7, #4]
 8007014:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007016:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800701a:	2b01      	cmp	r3, #1
 800701c:	d105      	bne.n	800702a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	68db      	ldr	r3, [r3, #12]
 8007022:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 f9dc 	bl	80073e8 <USB_CoreReset>
 8007030:	4603      	mov	r3, r0
 8007032:	73fb      	strb	r3, [r7, #15]
 8007034:	e01b      	b.n	800706e <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	68db      	ldr	r3, [r3, #12]
 800703a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007042:	6878      	ldr	r0, [r7, #4]
 8007044:	f000 f9d0 	bl	80073e8 <USB_CoreReset>
 8007048:	4603      	mov	r3, r0
 800704a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800704c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007050:	2b00      	cmp	r3, #0
 8007052:	d106      	bne.n	8007062 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007058:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	639a      	str	r2, [r3, #56]	@ 0x38
 8007060:	e005      	b.n	800706e <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007066:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800706e:	7fbb      	ldrb	r3, [r7, #30]
 8007070:	2b01      	cmp	r3, #1
 8007072:	d10b      	bne.n	800708c <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	689b      	ldr	r3, [r3, #8]
 8007078:	f043 0206 	orr.w	r2, r3, #6
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	689b      	ldr	r3, [r3, #8]
 8007084:	f043 0220 	orr.w	r2, r3, #32
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800708c:	7bfb      	ldrb	r3, [r7, #15]
}
 800708e:	4618      	mov	r0, r3
 8007090:	3710      	adds	r7, #16
 8007092:	46bd      	mov	sp, r7
 8007094:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007098:	b004      	add	sp, #16
 800709a:	4770      	bx	lr

0800709c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	f043 0201 	orr.w	r2, r3, #1
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	370c      	adds	r7, #12
 80070b6:	46bd      	mov	sp, r7
 80070b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070bc:	4770      	bx	lr

080070be <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80070be:	b480      	push	{r7}
 80070c0:	b083      	sub	sp, #12
 80070c2:	af00      	add	r7, sp, #0
 80070c4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f023 0201 	bic.w	r2, r3, #1
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	370c      	adds	r7, #12
 80070d8:	46bd      	mov	sp, r7
 80070da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070de:	4770      	bx	lr

080070e0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b084      	sub	sp, #16
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	6078      	str	r0, [r7, #4]
 80070e8:	460b      	mov	r3, r1
 80070ea:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80070ec:	2300      	movs	r3, #0
 80070ee:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80070fc:	78fb      	ldrb	r3, [r7, #3]
 80070fe:	2b01      	cmp	r3, #1
 8007100:	d115      	bne.n	800712e <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	68db      	ldr	r3, [r3, #12]
 8007106:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800710e:	200a      	movs	r0, #10
 8007110:	f7f9 ff96 	bl	8001040 <HAL_Delay>
      ms += 10U;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	330a      	adds	r3, #10
 8007118:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f956 	bl	80073cc <USB_GetMode>
 8007120:	4603      	mov	r3, r0
 8007122:	2b01      	cmp	r3, #1
 8007124:	d01e      	beq.n	8007164 <USB_SetCurrentMode+0x84>
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2bc7      	cmp	r3, #199	@ 0xc7
 800712a:	d9f0      	bls.n	800710e <USB_SetCurrentMode+0x2e>
 800712c:	e01a      	b.n	8007164 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800712e:	78fb      	ldrb	r3, [r7, #3]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d115      	bne.n	8007160 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	68db      	ldr	r3, [r3, #12]
 8007138:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007140:	200a      	movs	r0, #10
 8007142:	f7f9 ff7d 	bl	8001040 <HAL_Delay>
      ms += 10U;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	330a      	adds	r3, #10
 800714a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800714c:	6878      	ldr	r0, [r7, #4]
 800714e:	f000 f93d 	bl	80073cc <USB_GetMode>
 8007152:	4603      	mov	r3, r0
 8007154:	2b00      	cmp	r3, #0
 8007156:	d005      	beq.n	8007164 <USB_SetCurrentMode+0x84>
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	2bc7      	cmp	r3, #199	@ 0xc7
 800715c:	d9f0      	bls.n	8007140 <USB_SetCurrentMode+0x60>
 800715e:	e001      	b.n	8007164 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007160:	2301      	movs	r3, #1
 8007162:	e005      	b.n	8007170 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	2bc8      	cmp	r3, #200	@ 0xc8
 8007168:	d101      	bne.n	800716e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800716a:	2301      	movs	r3, #1
 800716c:	e000      	b.n	8007170 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800716e:	2300      	movs	r3, #0
}
 8007170:	4618      	mov	r0, r3
 8007172:	3710      	adds	r7, #16
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007178:	b480      	push	{r7}
 800717a:	b085      	sub	sp, #20
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
 8007180:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007182:	2300      	movs	r3, #0
 8007184:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8007186:	68fb      	ldr	r3, [r7, #12]
 8007188:	3301      	adds	r3, #1
 800718a:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007192:	d901      	bls.n	8007198 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007194:	2303      	movs	r3, #3
 8007196:	e01b      	b.n	80071d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	2b00      	cmp	r3, #0
 800719e:	daf2      	bge.n	8007186 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80071a0:	2300      	movs	r3, #0
 80071a2:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	019b      	lsls	r3, r3, #6
 80071a8:	f043 0220 	orr.w	r2, r3, #32
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	3301      	adds	r3, #1
 80071b4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071bc:	d901      	bls.n	80071c2 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80071be:	2303      	movs	r3, #3
 80071c0:	e006      	b.n	80071d0 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	691b      	ldr	r3, [r3, #16]
 80071c6:	f003 0320 	and.w	r3, r3, #32
 80071ca:	2b20      	cmp	r3, #32
 80071cc:	d0f0      	beq.n	80071b0 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80071ce:	2300      	movs	r3, #0
}
 80071d0:	4618      	mov	r0, r3
 80071d2:	3714      	adds	r7, #20
 80071d4:	46bd      	mov	sp, r7
 80071d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071da:	4770      	bx	lr

080071dc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80071dc:	b480      	push	{r7}
 80071de:	b085      	sub	sp, #20
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80071e4:	2300      	movs	r3, #0
 80071e6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	3301      	adds	r3, #1
 80071ec:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80071f4:	d901      	bls.n	80071fa <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e018      	b.n	800722c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	691b      	ldr	r3, [r3, #16]
 80071fe:	2b00      	cmp	r3, #0
 8007200:	daf2      	bge.n	80071e8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8007202:	2300      	movs	r3, #0
 8007204:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	2210      	movs	r2, #16
 800720a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	3301      	adds	r3, #1
 8007210:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007218:	d901      	bls.n	800721e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800721a:	2303      	movs	r3, #3
 800721c:	e006      	b.n	800722c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	691b      	ldr	r3, [r3, #16]
 8007222:	f003 0310 	and.w	r3, r3, #16
 8007226:	2b10      	cmp	r3, #16
 8007228:	d0f0      	beq.n	800720c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800722a:	2300      	movs	r3, #0
}
 800722c:	4618      	mov	r0, r3
 800722e:	3714      	adds	r7, #20
 8007230:	46bd      	mov	sp, r7
 8007232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007236:	4770      	bx	lr

08007238 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8007238:	b480      	push	{r7}
 800723a:	b089      	sub	sp, #36	@ 0x24
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4611      	mov	r1, r2
 8007244:	461a      	mov	r2, r3
 8007246:	460b      	mov	r3, r1
 8007248:	71fb      	strb	r3, [r7, #7]
 800724a:	4613      	mov	r3, r2
 800724c:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8007252:	68bb      	ldr	r3, [r7, #8]
 8007254:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8007256:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800725a:	2b00      	cmp	r3, #0
 800725c:	d123      	bne.n	80072a6 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800725e:	88bb      	ldrh	r3, [r7, #4]
 8007260:	3303      	adds	r3, #3
 8007262:	089b      	lsrs	r3, r3, #2
 8007264:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8007266:	2300      	movs	r3, #0
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	e018      	b.n	800729e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 800726c:	79fb      	ldrb	r3, [r7, #7]
 800726e:	031a      	lsls	r2, r3, #12
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	4413      	add	r3, r2
 8007274:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007278:	461a      	mov	r2, r3
 800727a:	69fb      	ldr	r3, [r7, #28]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8007280:	69fb      	ldr	r3, [r7, #28]
 8007282:	3301      	adds	r3, #1
 8007284:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007286:	69fb      	ldr	r3, [r7, #28]
 8007288:	3301      	adds	r3, #1
 800728a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800728c:	69fb      	ldr	r3, [r7, #28]
 800728e:	3301      	adds	r3, #1
 8007290:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8007292:	69fb      	ldr	r3, [r7, #28]
 8007294:	3301      	adds	r3, #1
 8007296:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8007298:	69bb      	ldr	r3, [r7, #24]
 800729a:	3301      	adds	r3, #1
 800729c:	61bb      	str	r3, [r7, #24]
 800729e:	69ba      	ldr	r2, [r7, #24]
 80072a0:	693b      	ldr	r3, [r7, #16]
 80072a2:	429a      	cmp	r2, r3
 80072a4:	d3e2      	bcc.n	800726c <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80072a6:	2300      	movs	r3, #0
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3724      	adds	r7, #36	@ 0x24
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr

080072b4 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(const USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80072b4:	b480      	push	{r7}
 80072b6:	b08b      	sub	sp, #44	@ 0x2c
 80072b8:	af00      	add	r7, sp, #0
 80072ba:	60f8      	str	r0, [r7, #12]
 80072bc:	60b9      	str	r1, [r7, #8]
 80072be:	4613      	mov	r3, r2
 80072c0:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80072c6:	68bb      	ldr	r3, [r7, #8]
 80072c8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	089b      	lsrs	r3, r3, #2
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80072d2:	88fb      	ldrh	r3, [r7, #6]
 80072d4:	f003 0303 	and.w	r3, r3, #3
 80072d8:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80072da:	2300      	movs	r3, #0
 80072dc:	623b      	str	r3, [r7, #32]
 80072de:	e014      	b.n	800730a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80072e0:	69bb      	ldr	r3, [r7, #24]
 80072e2:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 80072e6:	681a      	ldr	r2, [r3, #0]
 80072e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ea:	601a      	str	r2, [r3, #0]
    pDest++;
 80072ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ee:	3301      	adds	r3, #1
 80072f0:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072f4:	3301      	adds	r3, #1
 80072f6:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072f8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072fa:	3301      	adds	r3, #1
 80072fc:	627b      	str	r3, [r7, #36]	@ 0x24
    pDest++;
 80072fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007300:	3301      	adds	r3, #1
 8007302:	627b      	str	r3, [r7, #36]	@ 0x24
  for (i = 0U; i < count32b; i++)
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	3301      	adds	r3, #1
 8007308:	623b      	str	r3, [r7, #32]
 800730a:	6a3a      	ldr	r2, [r7, #32]
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	429a      	cmp	r2, r3
 8007310:	d3e6      	bcc.n	80072e0 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8007312:	8bfb      	ldrh	r3, [r7, #30]
 8007314:	2b00      	cmp	r3, #0
 8007316:	d01e      	beq.n	8007356 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8007318:	2300      	movs	r3, #0
 800731a:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 800731c:	69bb      	ldr	r3, [r7, #24]
 800731e:	f503 5380 	add.w	r3, r3, #4096	@ 0x1000
 8007322:	461a      	mov	r2, r3
 8007324:	f107 0310 	add.w	r3, r7, #16
 8007328:	6812      	ldr	r2, [r2, #0]
 800732a:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	6a3b      	ldr	r3, [r7, #32]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	00db      	lsls	r3, r3, #3
 8007334:	fa22 f303 	lsr.w	r3, r2, r3
 8007338:	b2da      	uxtb	r2, r3
 800733a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800733c:	701a      	strb	r2, [r3, #0]
      i++;
 800733e:	6a3b      	ldr	r3, [r7, #32]
 8007340:	3301      	adds	r3, #1
 8007342:	623b      	str	r3, [r7, #32]
      pDest++;
 8007344:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007346:	3301      	adds	r3, #1
 8007348:	627b      	str	r3, [r7, #36]	@ 0x24
      remaining_bytes--;
 800734a:	8bfb      	ldrh	r3, [r7, #30]
 800734c:	3b01      	subs	r3, #1
 800734e:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8007350:	8bfb      	ldrh	r3, [r7, #30]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d1ea      	bne.n	800732c <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8007356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007358:	4618      	mov	r0, r3
 800735a:	372c      	adds	r7, #44	@ 0x2c
 800735c:	46bd      	mov	sp, r7
 800735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007362:	4770      	bx	lr

08007364 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_OTG_GlobalTypeDef const *USBx)
{
 8007364:	b480      	push	{r7}
 8007366:	b085      	sub	sp, #20
 8007368:	af00      	add	r7, sp, #0
 800736a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	695b      	ldr	r3, [r3, #20]
 8007370:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	699b      	ldr	r3, [r3, #24]
 8007376:	68fa      	ldr	r2, [r7, #12]
 8007378:	4013      	ands	r3, r2
 800737a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800737c:	68fb      	ldr	r3, [r7, #12]
}
 800737e:	4618      	mov	r0, r3
 8007380:	3714      	adds	r7, #20
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr

0800738a <USB_ReadChInterrupts>:
  * @param  USBx  Selected device
  * @param  chnum Channel number
  * @retval USB Channel Interrupt status
  */
uint32_t USB_ReadChInterrupts(const USB_OTG_GlobalTypeDef *USBx, uint8_t chnum)
{
 800738a:	b480      	push	{r7}
 800738c:	b085      	sub	sp, #20
 800738e:	af00      	add	r7, sp, #0
 8007390:	6078      	str	r0, [r7, #4]
 8007392:	460b      	mov	r3, r1
 8007394:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg = USBx_HC(chnum)->HCINT;
 800739a:	78fb      	ldrb	r3, [r7, #3]
 800739c:	015a      	lsls	r2, r3, #5
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	4413      	add	r3, r2
 80073a2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_HC(chnum)->HCINTMSK;
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	015a      	lsls	r2, r3, #5
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	4413      	add	r3, r2
 80073b2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80073b6:	68db      	ldr	r3, [r3, #12]
 80073b8:	68ba      	ldr	r2, [r7, #8]
 80073ba:	4013      	ands	r3, r2
 80073bc:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80073be:	68bb      	ldr	r3, [r7, #8]
}
 80073c0:	4618      	mov	r0, r3
 80073c2:	3714      	adds	r7, #20
 80073c4:	46bd      	mov	sp, r7
 80073c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073ca:	4770      	bx	lr

080073cc <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80073cc:	b480      	push	{r7}
 80073ce:	b083      	sub	sp, #12
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	695b      	ldr	r3, [r3, #20]
 80073d8:	f003 0301 	and.w	r3, r3, #1
}
 80073dc:	4618      	mov	r0, r3
 80073de:	370c      	adds	r7, #12
 80073e0:	46bd      	mov	sp, r7
 80073e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e6:	4770      	bx	lr

080073e8 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
 80073ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80073f0:	2300      	movs	r3, #0
 80073f2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	3301      	adds	r3, #1
 80073f8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007400:	d901      	bls.n	8007406 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007402:	2303      	movs	r3, #3
 8007404:	e01b      	b.n	800743e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	691b      	ldr	r3, [r3, #16]
 800740a:	2b00      	cmp	r3, #0
 800740c:	daf2      	bge.n	80073f4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800740e:	2300      	movs	r3, #0
 8007410:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	691b      	ldr	r3, [r3, #16]
 8007416:	f043 0201 	orr.w	r2, r3, #1
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800741e:	68fb      	ldr	r3, [r7, #12]
 8007420:	3301      	adds	r3, #1
 8007422:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800742a:	d901      	bls.n	8007430 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800742c:	2303      	movs	r3, #3
 800742e:	e006      	b.n	800743e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	691b      	ldr	r3, [r3, #16]
 8007434:	f003 0301 	and.w	r3, r3, #1
 8007438:	2b01      	cmp	r3, #1
 800743a:	d0f0      	beq.n	800741e <USB_CoreReset+0x36>

  return HAL_OK;
 800743c:	2300      	movs	r3, #0
}
 800743e:	4618      	mov	r0, r3
 8007440:	3714      	adds	r7, #20
 8007442:	46bd      	mov	sp, r7
 8007444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007448:	4770      	bx	lr
	...

0800744c <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800744c:	b084      	sub	sp, #16
 800744e:	b580      	push	{r7, lr}
 8007450:	b086      	sub	sp, #24
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
 8007456:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 800745a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800745e:	2300      	movs	r3, #0
 8007460:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007466:	68fb      	ldr	r3, [r7, #12]
 8007468:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800746c:	461a      	mov	r2, r3
 800746e:	2300      	movs	r3, #0
 8007470:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007476:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007482:	f423 2200 	bic.w	r2, r3, #524288	@ 0x80000
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	639a      	str	r2, [r3, #56]	@ 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800748e:	f423 2280 	bic.w	r2, r3, #262144	@ 0x40000
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) ||
          defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->GUSBCFG & USB_OTG_GUSBCFG_PHYSEL) == 0U)
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	68db      	ldr	r3, [r3, #12]
 800749a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d119      	bne.n	80074d6 <USB_HostInit+0x8a>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80074a2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d10a      	bne.n	80074c0 <USB_HostInit+0x74>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074b0:	681b      	ldr	r3, [r3, #0]
 80074b2:	68fa      	ldr	r2, [r7, #12]
 80074b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074b8:	f043 0304 	orr.w	r3, r3, #4
 80074bc:	6013      	str	r3, [r2, #0]
 80074be:	e014      	b.n	80074ea <USB_HostInit+0x9e>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68fa      	ldr	r2, [r7, #12]
 80074ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074ce:	f023 0304 	bic.w	r3, r3, #4
 80074d2:	6013      	str	r3, [r2, #0]
 80074d4:	e009      	b.n	80074ea <USB_HostInit+0x9e>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80074e4:	f023 0304 	bic.w	r3, r3, #4
 80074e8:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80074ea:	2110      	movs	r1, #16
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f7ff fe43 	bl	8007178 <USB_FlushTxFifo>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2b00      	cmp	r3, #0
 80074f6:	d001      	beq.n	80074fc <USB_HostInit+0xb0>
  {
    ret = HAL_ERROR;
 80074f8:	2301      	movs	r3, #1
 80074fa:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80074fc:	6878      	ldr	r0, [r7, #4]
 80074fe:	f7ff fe6d 	bl	80071dc <USB_FlushRxFifo>
 8007502:	4603      	mov	r3, r0
 8007504:	2b00      	cmp	r3, #0
 8007506:	d001      	beq.n	800750c <USB_HostInit+0xc0>
  {
    ret = HAL_ERROR;
 8007508:	2301      	movs	r3, #1
 800750a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800750c:	2300      	movs	r3, #0
 800750e:	613b      	str	r3, [r7, #16]
 8007510:	e015      	b.n	800753e <USB_HostInit+0xf2>
  {
    USBx_HC(i)->HCINT = CLEAR_INTERRUPT_MASK;
 8007512:	693b      	ldr	r3, [r7, #16]
 8007514:	015a      	lsls	r2, r3, #5
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	4413      	add	r3, r2
 800751a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800751e:	461a      	mov	r2, r3
 8007520:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007524:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8007526:	693b      	ldr	r3, [r7, #16]
 8007528:	015a      	lsls	r2, r3, #5
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4413      	add	r3, r2
 800752e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007532:	461a      	mov	r2, r3
 8007534:	2300      	movs	r3, #0
 8007536:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8007538:	693b      	ldr	r3, [r7, #16]
 800753a:	3301      	adds	r3, #1
 800753c:	613b      	str	r3, [r7, #16]
 800753e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8007542:	461a      	mov	r2, r3
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	4293      	cmp	r3, r2
 8007548:	d3e3      	bcc.n	8007512 <USB_HostInit+0xc6>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	2200      	movs	r2, #0
 800754e:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8007556:	615a      	str	r2, [r3, #20]
#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	4a18      	ldr	r2, [pc, #96]	@ (80075bc <USB_HostInit+0x170>)
 800755c:	4293      	cmp	r3, r2
 800755e:	d10b      	bne.n	8007578 <USB_HostInit+0x12c>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007566:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	4a15      	ldr	r2, [pc, #84]	@ (80075c0 <USB_HostInit+0x174>)
 800756c:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a14      	ldr	r2, [pc, #80]	@ (80075c4 <USB_HostInit+0x178>)
 8007572:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
 8007576:	e009      	b.n	800758c <USB_HostInit+0x140>
  }
  else
#endif /* defined (USB_OTG_HS) */
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2280      	movs	r2, #128	@ 0x80
 800757c:	625a      	str	r2, [r3, #36]	@ 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	4a11      	ldr	r2, [pc, #68]	@ (80075c8 <USB_HostInit+0x17c>)
 8007582:	629a      	str	r2, [r3, #40]	@ 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	4a11      	ldr	r2, [pc, #68]	@ (80075cc <USB_HostInit+0x180>)
 8007588:	f8c3 2100 	str.w	r2, [r3, #256]	@ 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800758c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007590:	2b00      	cmp	r3, #0
 8007592:	d105      	bne.n	80075a0 <USB_HostInit+0x154>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	f043 0210 	orr.w	r2, r3, #16
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	699a      	ldr	r2, [r3, #24]
 80075a4:	4b0a      	ldr	r3, [pc, #40]	@ (80075d0 <USB_HostInit+0x184>)
 80075a6:	4313      	orrs	r3, r2
 80075a8:	687a      	ldr	r2, [r7, #4]
 80075aa:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
}
 80075ae:	4618      	mov	r0, r3
 80075b0:	3718      	adds	r7, #24
 80075b2:	46bd      	mov	sp, r7
 80075b4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80075b8:	b004      	add	sp, #16
 80075ba:	4770      	bx	lr
 80075bc:	40040000 	.word	0x40040000
 80075c0:	01000200 	.word	0x01000200
 80075c4:	00e00300 	.word	0x00e00300
 80075c8:	00600080 	.word	0x00600080
 80075cc:	004000e0 	.word	0x004000e0
 80075d0:	a3200008 	.word	0xa3200008

080075d4 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(const USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	460b      	mov	r3, r1
 80075de:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	68fa      	ldr	r2, [r7, #12]
 80075ee:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 80075f2:	f023 0303 	bic.w	r3, r3, #3
 80075f6:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80075fe:	681a      	ldr	r2, [r3, #0]
 8007600:	78fb      	ldrb	r3, [r7, #3]
 8007602:	f003 0303 	and.w	r3, r3, #3
 8007606:	68f9      	ldr	r1, [r7, #12]
 8007608:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 800760c:	4313      	orrs	r3, r2
 800760e:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8007610:	78fb      	ldrb	r3, [r7, #3]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d107      	bne.n	8007626 <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = HFIR_48_MHZ;
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800761c:	461a      	mov	r2, r3
 800761e:	f64b 3380 	movw	r3, #48000	@ 0xbb80
 8007622:	6053      	str	r3, [r2, #4]
 8007624:	e00c      	b.n	8007640 <USB_InitFSLSPClkSel+0x6c>
  }
  else if (freq == HCFG_6_MHZ)
 8007626:	78fb      	ldrb	r3, [r7, #3]
 8007628:	2b02      	cmp	r3, #2
 800762a:	d107      	bne.n	800763c <USB_InitFSLSPClkSel+0x68>
  {
    USBx_HOST->HFIR = HFIR_6_MHZ;
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007632:	461a      	mov	r2, r3
 8007634:	f241 7370 	movw	r3, #6000	@ 0x1770
 8007638:	6053      	str	r3, [r2, #4]
 800763a:	e001      	b.n	8007640 <USB_InitFSLSPClkSel+0x6c>
  }
  else
  {
    return HAL_ERROR;
 800763c:	2301      	movs	r3, #1
 800763e:	e000      	b.n	8007642 <USB_InitFSLSPClkSel+0x6e>
  }

  return HAL_OK;
 8007640:	2300      	movs	r3, #0
}
 8007642:	4618      	mov	r0, r3
 8007644:	3714      	adds	r7, #20
 8007646:	46bd      	mov	sp, r7
 8007648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764c:	4770      	bx	lr

0800764e <USB_ResetPort>:
  * @retval HAL status
  * @note (1)The application must wait at least 10 ms
  *   before clearing the reset bit.
  */
HAL_StatusTypeDef USB_ResetPort(const USB_OTG_GlobalTypeDef *USBx)
{
 800764e:	b580      	push	{r7, lr}
 8007650:	b084      	sub	sp, #16
 8007652:	af00      	add	r7, sp, #0
 8007654:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	60fb      	str	r3, [r7, #12]

  __IO uint32_t hprt0 = 0U;
 800765a:	2300      	movs	r3, #0
 800765c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 800766e:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  USBx_HPRT0 = (USB_OTG_HPRT_PRST | hprt0);
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	68fa      	ldr	r2, [r7, #12]
 8007674:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007678:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800767c:	6013      	str	r3, [r2, #0]
  HAL_Delay(100U);                                 /* See Note #1 */
 800767e:	2064      	movs	r0, #100	@ 0x64
 8007680:	f7f9 fcde 	bl	8001040 <HAL_Delay>
  USBx_HPRT0 = ((~USB_OTG_HPRT_PRST) & hprt0);
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	68fa      	ldr	r2, [r7, #12]
 8007688:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 800768c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007690:	6013      	str	r3, [r2, #0]
  HAL_Delay(10U);
 8007692:	200a      	movs	r0, #10
 8007694:	f7f9 fcd4 	bl	8001040 <HAL_Delay>

  return HAL_OK;
 8007698:	2300      	movs	r3, #0
}
 800769a:	4618      	mov	r0, r3
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(const USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 80076a2:	b480      	push	{r7}
 80076a4:	b085      	sub	sp, #20
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
 80076aa:	460b      	mov	r3, r1
 80076ac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 80076b2:	2300      	movs	r3, #0
 80076b4:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	f023 032e 	bic.w	r3, r3, #46	@ 0x2e
 80076c6:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d109      	bne.n	80076e6 <USB_DriveVbus+0x44>
 80076d2:	78fb      	ldrb	r3, [r7, #3]
 80076d4:	2b01      	cmp	r3, #1
 80076d6:	d106      	bne.n	80076e6 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80076d8:	68bb      	ldr	r3, [r7, #8]
 80076da:	68fa      	ldr	r2, [r7, #12]
 80076dc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 80076e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80076e4:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80076e6:	68bb      	ldr	r3, [r7, #8]
 80076e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80076ec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076f0:	d109      	bne.n	8007706 <USB_DriveVbus+0x64>
 80076f2:	78fb      	ldrb	r3, [r7, #3]
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d106      	bne.n	8007706 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	68fa      	ldr	r2, [r7, #12]
 80076fc:	f502 6288 	add.w	r2, r2, #1088	@ 0x440
 8007700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007704:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8007706:	2300      	movs	r3, #0
}
 8007708:	4618      	mov	r0, r3
 800770a:	3714      	adds	r7, #20
 800770c:	46bd      	mov	sp, r7
 800770e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007712:	4770      	bx	lr

08007714 <USB_GetHostSpeed>:
  *            @arg HCD_SPEED_HIGH: High speed mode
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef const *USBx)
{
 8007714:	b480      	push	{r7}
 8007716:	b085      	sub	sp, #20
 8007718:	af00      	add	r7, sp, #0
 800771a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8007720:	2300      	movs	r3, #0
 8007722:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	f503 6388 	add.w	r3, r3, #1088	@ 0x440
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	0c5b      	lsrs	r3, r3, #17
 8007732:	f003 0303 	and.w	r3, r3, #3
}
 8007736:	4618      	mov	r0, r3
 8007738:	3714      	adds	r7, #20
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef const *USBx)
{
 8007742:	b480      	push	{r7}
 8007744:	b085      	sub	sp, #20
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007754:	689b      	ldr	r3, [r3, #8]
 8007756:	b29b      	uxth	r3, r3
}
 8007758:	4618      	mov	r0, r3
 800775a:	3714      	adds	r7, #20
 800775c:	46bd      	mov	sp, r7
 800775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007762:	4770      	bx	lr

08007764 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b088      	sub	sp, #32
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
 800776c:	4608      	mov	r0, r1
 800776e:	4611      	mov	r1, r2
 8007770:	461a      	mov	r2, r3
 8007772:	4603      	mov	r3, r0
 8007774:	70fb      	strb	r3, [r7, #3]
 8007776:	460b      	mov	r3, r1
 8007778:	70bb      	strb	r3, [r7, #2]
 800777a:	4613      	mov	r3, r2
 800777c:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 800777e:	2300      	movs	r3, #0
 8007780:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = CLEAR_INTERRUPT_MASK;
 8007786:	78fb      	ldrb	r3, [r7, #3]
 8007788:	015a      	lsls	r2, r3, #5
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	4413      	add	r3, r2
 800778e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007792:	461a      	mov	r2, r3
 8007794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007798:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 800779a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800779e:	2b03      	cmp	r3, #3
 80077a0:	d87c      	bhi.n	800789c <USB_HC_Init+0x138>
 80077a2:	a201      	add	r2, pc, #4	@ (adr r2, 80077a8 <USB_HC_Init+0x44>)
 80077a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077a8:	080077b9 	.word	0x080077b9
 80077ac:	0800785f 	.word	0x0800785f
 80077b0:	080077b9 	.word	0x080077b9
 80077b4:	08007821 	.word	0x08007821
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 80077b8:	78fb      	ldrb	r3, [r7, #3]
 80077ba:	015a      	lsls	r2, r3, #5
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	4413      	add	r3, r2
 80077c0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077c4:	461a      	mov	r2, r3
 80077c6:	f240 439d 	movw	r3, #1181	@ 0x49d
 80077ca:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 80077cc:	f997 3002 	ldrsb.w	r3, [r7, #2]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	da10      	bge.n	80077f6 <USB_HC_Init+0x92>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 80077d4:	78fb      	ldrb	r3, [r7, #3]
 80077d6:	015a      	lsls	r2, r3, #5
 80077d8:	693b      	ldr	r3, [r7, #16]
 80077da:	4413      	add	r3, r2
 80077dc:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80077e0:	68db      	ldr	r3, [r3, #12]
 80077e2:	78fa      	ldrb	r2, [r7, #3]
 80077e4:	0151      	lsls	r1, r2, #5
 80077e6:	693a      	ldr	r2, [r7, #16]
 80077e8:	440a      	add	r2, r1
 80077ea:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80077ee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077f2:	60d3      	str	r3, [r2, #12]
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
                                                 USB_OTG_HCINTMSK_ACKM;
        }
#endif /* defined (USB_OTG_HS) */
      }
      break;
 80077f4:	e055      	b.n	80078a2 <USB_HC_Init+0x13e>
        if (USBx == USB_OTG_HS)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a6f      	ldr	r2, [pc, #444]	@ (80079b8 <USB_HC_Init+0x254>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d151      	bne.n	80078a2 <USB_HC_Init+0x13e>
          USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET |
 80077fe:	78fb      	ldrb	r3, [r7, #3]
 8007800:	015a      	lsls	r2, r3, #5
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	4413      	add	r3, r2
 8007806:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800780a:	68db      	ldr	r3, [r3, #12]
 800780c:	78fa      	ldrb	r2, [r7, #3]
 800780e:	0151      	lsls	r1, r2, #5
 8007810:	693a      	ldr	r2, [r7, #16]
 8007812:	440a      	add	r2, r1
 8007814:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007818:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800781c:	60d3      	str	r3, [r2, #12]
      break;
 800781e:	e040      	b.n	80078a2 <USB_HC_Init+0x13e>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8007820:	78fb      	ldrb	r3, [r7, #3]
 8007822:	015a      	lsls	r2, r3, #5
 8007824:	693b      	ldr	r3, [r7, #16]
 8007826:	4413      	add	r3, r2
 8007828:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800782c:	461a      	mov	r2, r3
 800782e:	f240 639d 	movw	r3, #1693	@ 0x69d
 8007832:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007834:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007838:	2b00      	cmp	r3, #0
 800783a:	da34      	bge.n	80078a6 <USB_HC_Init+0x142>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 800783c:	78fb      	ldrb	r3, [r7, #3]
 800783e:	015a      	lsls	r2, r3, #5
 8007840:	693b      	ldr	r3, [r7, #16]
 8007842:	4413      	add	r3, r2
 8007844:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007848:	68db      	ldr	r3, [r3, #12]
 800784a:	78fa      	ldrb	r2, [r7, #3]
 800784c:	0151      	lsls	r1, r2, #5
 800784e:	693a      	ldr	r2, [r7, #16]
 8007850:	440a      	add	r2, r1
 8007852:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007856:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800785a:	60d3      	str	r3, [r2, #12]
      }

      break;
 800785c:	e023      	b.n	80078a6 <USB_HC_Init+0x142>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 800785e:	78fb      	ldrb	r3, [r7, #3]
 8007860:	015a      	lsls	r2, r3, #5
 8007862:	693b      	ldr	r3, [r7, #16]
 8007864:	4413      	add	r3, r2
 8007866:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800786a:	461a      	mov	r2, r3
 800786c:	f240 2325 	movw	r3, #549	@ 0x225
 8007870:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8007872:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8007876:	2b00      	cmp	r3, #0
 8007878:	da17      	bge.n	80078aa <USB_HC_Init+0x146>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 800787a:	78fb      	ldrb	r3, [r7, #3]
 800787c:	015a      	lsls	r2, r3, #5
 800787e:	693b      	ldr	r3, [r7, #16]
 8007880:	4413      	add	r3, r2
 8007882:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007886:	68db      	ldr	r3, [r3, #12]
 8007888:	78fa      	ldrb	r2, [r7, #3]
 800788a:	0151      	lsls	r1, r2, #5
 800788c:	693a      	ldr	r2, [r7, #16]
 800788e:	440a      	add	r2, r1
 8007890:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007894:	f443 73c0 	orr.w	r3, r3, #384	@ 0x180
 8007898:	60d3      	str	r3, [r2, #12]
      }
      break;
 800789a:	e006      	b.n	80078aa <USB_HC_Init+0x146>

    default:
      ret = HAL_ERROR;
 800789c:	2301      	movs	r3, #1
 800789e:	77fb      	strb	r3, [r7, #31]
      break;
 80078a0:	e004      	b.n	80078ac <USB_HC_Init+0x148>
      break;
 80078a2:	bf00      	nop
 80078a4:	e002      	b.n	80078ac <USB_HC_Init+0x148>
      break;
 80078a6:	bf00      	nop
 80078a8:	e000      	b.n	80078ac <USB_HC_Init+0x148>
      break;
 80078aa:	bf00      	nop
  }

  /* Clear Hub Start Split transaction */
  USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 80078ac:	78fb      	ldrb	r3, [r7, #3]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	693b      	ldr	r3, [r7, #16]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078b8:	461a      	mov	r2, r3
 80078ba:	2300      	movs	r3, #0
 80078bc:	6053      	str	r3, [r2, #4]

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 80078be:	78fb      	ldrb	r3, [r7, #3]
 80078c0:	015a      	lsls	r2, r3, #5
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	4413      	add	r3, r2
 80078c6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	78fa      	ldrb	r2, [r7, #3]
 80078ce:	0151      	lsls	r1, r2, #5
 80078d0:	693a      	ldr	r2, [r7, #16]
 80078d2:	440a      	add	r2, r1
 80078d4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80078d8:	f043 0302 	orr.w	r3, r3, #2
 80078dc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 80078de:	693b      	ldr	r3, [r7, #16]
 80078e0:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 80078e4:	699a      	ldr	r2, [r3, #24]
 80078e6:	78fb      	ldrb	r3, [r7, #3]
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	2101      	movs	r1, #1
 80078ee:	fa01 f303 	lsl.w	r3, r1, r3
 80078f2:	6939      	ldr	r1, [r7, #16]
 80078f4:	f501 6180 	add.w	r1, r1, #1024	@ 0x400
 80078f8:	4313      	orrs	r3, r2
 80078fa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	699b      	ldr	r3, [r3, #24]
 8007900:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8007908:	f997 3002 	ldrsb.w	r3, [r7, #2]
 800790c:	2b00      	cmp	r3, #0
 800790e:	da03      	bge.n	8007918 <USB_HC_Init+0x1b4>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8007910:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007914:	61bb      	str	r3, [r7, #24]
 8007916:	e001      	b.n	800791c <USB_HC_Init+0x1b8>
  }
  else
  {
    HCcharEpDir = 0U;
 8007918:	2300      	movs	r3, #0
 800791a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f7ff fef9 	bl	8007714 <USB_GetHostSpeed>
 8007922:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8007924:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007928:	2b02      	cmp	r3, #2
 800792a:	d106      	bne.n	800793a <USB_HC_Init+0x1d6>
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2b02      	cmp	r3, #2
 8007930:	d003      	beq.n	800793a <USB_HC_Init+0x1d6>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8007932:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8007936:	617b      	str	r3, [r7, #20]
 8007938:	e001      	b.n	800793e <USB_HC_Init+0x1da>
  }
  else
  {
    HCcharLowSpeed = 0U;
 800793a:	2300      	movs	r3, #0
 800793c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800793e:	787b      	ldrb	r3, [r7, #1]
 8007940:	059b      	lsls	r3, r3, #22
 8007942:	f003 52fe 	and.w	r2, r3, #532676608	@ 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8007946:	78bb      	ldrb	r3, [r7, #2]
 8007948:	02db      	lsls	r3, r3, #11
 800794a:	f403 43f0 	and.w	r3, r3, #30720	@ 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800794e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007950:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007954:	049b      	lsls	r3, r3, #18
 8007956:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 800795a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) |
 800795c:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 800795e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8007962:	431a      	orrs	r2, r3
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007964:	69bb      	ldr	r3, [r7, #24]
 8007966:	431a      	orrs	r2, r3
 8007968:	697b      	ldr	r3, [r7, #20]
 800796a:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800796c:	78fa      	ldrb	r2, [r7, #3]
 800796e:	0151      	lsls	r1, r2, #5
 8007970:	693a      	ldr	r2, [r7, #16]
 8007972:	440a      	add	r2, r1
 8007974:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                      USB_OTG_HCCHAR_MC_0 | HCcharEpDir | HCcharLowSpeed;
 8007978:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 800797c:	6013      	str	r3, [r2, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 800797e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8007982:	2b03      	cmp	r3, #3
 8007984:	d003      	beq.n	800798e <USB_HC_Init+0x22a>
 8007986:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800798a:	2b01      	cmp	r3, #1
 800798c:	d10f      	bne.n	80079ae <USB_HC_Init+0x24a>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 800798e:	78fb      	ldrb	r3, [r7, #3]
 8007990:	015a      	lsls	r2, r3, #5
 8007992:	693b      	ldr	r3, [r7, #16]
 8007994:	4413      	add	r3, r2
 8007996:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	78fa      	ldrb	r2, [r7, #3]
 800799e:	0151      	lsls	r1, r2, #5
 80079a0:	693a      	ldr	r2, [r7, #16]
 80079a2:	440a      	add	r2, r1
 80079a4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80079a8:	f043 5300 	orr.w	r3, r3, #536870912	@ 0x20000000
 80079ac:	6013      	str	r3, [r2, #0]
  }

  return ret;
 80079ae:	7ffb      	ldrb	r3, [r7, #31]
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3720      	adds	r7, #32
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40040000 	.word	0x40040000

080079bc <USB_HC_StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc, uint8_t dma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08c      	sub	sp, #48	@ 0x30
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	4613      	mov	r3, r2
 80079c8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	623b      	str	r3, [r7, #32]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 80079ce:	68bb      	ldr	r3, [r7, #8]
 80079d0:	785b      	ldrb	r3, [r3, #1]
 80079d2:	61fb      	str	r3, [r7, #28]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = HC_MAX_PKT_CNT;
 80079d4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80079d8:	837b      	strh	r3, [r7, #26]

#if defined (USB_OTG_HS)
  if (USBx == USB_OTG_HS)
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	4a5d      	ldr	r2, [pc, #372]	@ (8007b54 <USB_HC_StartXfer+0x198>)
 80079de:	4293      	cmp	r3, r2
 80079e0:	d12f      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
  {
    /* in DMA mode host Core automatically issues ping in case of NYET/NAK */
    if (dma == 1U)
 80079e2:	79fb      	ldrb	r3, [r7, #7]
 80079e4:	2b01      	cmp	r3, #1
 80079e6:	d11c      	bne.n	8007a22 <USB_HC_StartXfer+0x66>
    {
      if (((hc->ep_type == EP_TYPE_CTRL) || (hc->ep_type == EP_TYPE_BULK)) && (hc->do_ssplit == 0U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	7c9b      	ldrb	r3, [r3, #18]
 80079ec:	2b00      	cmp	r3, #0
 80079ee:	d003      	beq.n	80079f8 <USB_HC_StartXfer+0x3c>
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	7c9b      	ldrb	r3, [r3, #18]
 80079f4:	2b02      	cmp	r3, #2
 80079f6:	d124      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
 80079f8:	68bb      	ldr	r3, [r7, #8]
 80079fa:	799b      	ldrb	r3, [r3, #6]
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d120      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
      {

        USBx_HC((uint32_t)ch_num)->HCINTMSK &= ~(USB_OTG_HCINTMSK_NYET |
 8007a00:	69fb      	ldr	r3, [r7, #28]
 8007a02:	015a      	lsls	r2, r3, #5
 8007a04:	6a3b      	ldr	r3, [r7, #32]
 8007a06:	4413      	add	r3, r2
 8007a08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007a0c:	68db      	ldr	r3, [r3, #12]
 8007a0e:	69fa      	ldr	r2, [r7, #28]
 8007a10:	0151      	lsls	r1, r2, #5
 8007a12:	6a3a      	ldr	r2, [r7, #32]
 8007a14:	440a      	add	r2, r1
 8007a16:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007a1a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8007a1e:	60d3      	str	r3, [r2, #12]
 8007a20:	e00f      	b.n	8007a42 <USB_HC_StartXfer+0x86>
                                                 USB_OTG_HCINTMSK_NAKM);
      }
    }
    else
    {
      if ((hc->speed == USBH_HS_SPEED) && (hc->do_ping == 1U))
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	791b      	ldrb	r3, [r3, #4]
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d10b      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	795b      	ldrb	r3, [r3, #5]
 8007a2e:	2b01      	cmp	r3, #1
 8007a30:	d107      	bne.n	8007a42 <USB_HC_StartXfer+0x86>
      {
        (void)USB_DoPing(USBx, hc->ch_num);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	785b      	ldrb	r3, [r3, #1]
 8007a36:	4619      	mov	r1, r3
 8007a38:	68f8      	ldr	r0, [r7, #12]
 8007a3a:	f000 fb6b 	bl	8008114 <USB_DoPing>
        return HAL_OK;
 8007a3e:	2300      	movs	r3, #0
 8007a40:	e232      	b.n	8007ea8 <USB_HC_StartXfer+0x4ec>
      }
    }
  }
#endif /* defined (USB_OTG_HS) */

  if (hc->do_ssplit == 1U)
 8007a42:	68bb      	ldr	r3, [r7, #8]
 8007a44:	799b      	ldrb	r3, [r3, #6]
 8007a46:	2b01      	cmp	r3, #1
 8007a48:	d158      	bne.n	8007afc <USB_HC_StartXfer+0x140>
  {
    /* Set number of packet to 1 for Split transaction */
    num_packets = 1U;
 8007a4a:	2301      	movs	r3, #1
 8007a4c:	84fb      	strh	r3, [r7, #38]	@ 0x26

    if (hc->ep_is_in != 0U)
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	78db      	ldrb	r3, [r3, #3]
 8007a52:	2b00      	cmp	r3, #0
 8007a54:	d007      	beq.n	8007a66 <USB_HC_StartXfer+0xaa>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007a56:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007a58:	68ba      	ldr	r2, [r7, #8]
 8007a5a:	8a92      	ldrh	r2, [r2, #20]
 8007a5c:	fb03 f202 	mul.w	r2, r3, r2
 8007a60:	68bb      	ldr	r3, [r7, #8]
 8007a62:	61da      	str	r2, [r3, #28]
 8007a64:	e07c      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
    }
    else
    {
      if (hc->ep_type == EP_TYPE_ISOC)
 8007a66:	68bb      	ldr	r3, [r7, #8]
 8007a68:	7c9b      	ldrb	r3, [r3, #18]
 8007a6a:	2b01      	cmp	r3, #1
 8007a6c:	d130      	bne.n	8007ad0 <USB_HC_StartXfer+0x114>
      {
        if (hc->xfer_len > ISO_SPLT_MPS)
 8007a6e:	68bb      	ldr	r3, [r7, #8]
 8007a70:	6a1b      	ldr	r3, [r3, #32]
 8007a72:	2bbc      	cmp	r3, #188	@ 0xbc
 8007a74:	d918      	bls.n	8007aa8 <USB_HC_StartXfer+0xec>
        {
          /* Isochrone Max Packet Size for Split mode */
          hc->XferSize = hc->max_packet;
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	8a9b      	ldrh	r3, [r3, #20]
 8007a7a:	461a      	mov	r2, r3
 8007a7c:	68bb      	ldr	r3, [r7, #8]
 8007a7e:	61da      	str	r2, [r3, #28]
          hc->xfer_len = hc->XferSize;
 8007a80:	68bb      	ldr	r3, [r7, #8]
 8007a82:	69da      	ldr	r2, [r3, #28]
 8007a84:	68bb      	ldr	r3, [r7, #8]
 8007a86:	621a      	str	r2, [r3, #32]

          if ((hc->iso_splt_xactPos == HCSPLT_BEGIN) || (hc->iso_splt_xactPos == HCSPLT_MIDDLE))
 8007a88:	68bb      	ldr	r3, [r7, #8]
 8007a8a:	68db      	ldr	r3, [r3, #12]
 8007a8c:	2b01      	cmp	r3, #1
 8007a8e:	d003      	beq.n	8007a98 <USB_HC_StartXfer+0xdc>
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	68db      	ldr	r3, [r3, #12]
 8007a94:	2b02      	cmp	r3, #2
 8007a96:	d103      	bne.n	8007aa0 <USB_HC_StartXfer+0xe4>
          {
            hc->iso_splt_xactPos = HCSPLT_MIDDLE;
 8007a98:	68bb      	ldr	r3, [r7, #8]
 8007a9a:	2202      	movs	r2, #2
 8007a9c:	60da      	str	r2, [r3, #12]
 8007a9e:	e05f      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_BEGIN;
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	2201      	movs	r2, #1
 8007aa4:	60da      	str	r2, [r3, #12]
 8007aa6:	e05b      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
          }
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	6a1a      	ldr	r2, [r3, #32]
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	61da      	str	r2, [r3, #28]

          if ((hc->iso_splt_xactPos != HCSPLT_BEGIN) && (hc->iso_splt_xactPos != HCSPLT_MIDDLE))
 8007ab0:	68bb      	ldr	r3, [r7, #8]
 8007ab2:	68db      	ldr	r3, [r3, #12]
 8007ab4:	2b01      	cmp	r3, #1
 8007ab6:	d007      	beq.n	8007ac8 <USB_HC_StartXfer+0x10c>
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	68db      	ldr	r3, [r3, #12]
 8007abc:	2b02      	cmp	r3, #2
 8007abe:	d003      	beq.n	8007ac8 <USB_HC_StartXfer+0x10c>
          {
            hc->iso_splt_xactPos = HCSPLT_FULL;
 8007ac0:	68bb      	ldr	r3, [r7, #8]
 8007ac2:	2204      	movs	r2, #4
 8007ac4:	60da      	str	r2, [r3, #12]
 8007ac6:	e04b      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
          }
          else
          {
            hc->iso_splt_xactPos = HCSPLT_END;
 8007ac8:	68bb      	ldr	r3, [r7, #8]
 8007aca:	2203      	movs	r2, #3
 8007acc:	60da      	str	r2, [r3, #12]
 8007ace:	e047      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
          }
        }
      }
      else
      {
        if ((dma == 1U) && (hc->xfer_len > hc->max_packet))
 8007ad0:	79fb      	ldrb	r3, [r7, #7]
 8007ad2:	2b01      	cmp	r3, #1
 8007ad4:	d10d      	bne.n	8007af2 <USB_HC_StartXfer+0x136>
 8007ad6:	68bb      	ldr	r3, [r7, #8]
 8007ad8:	6a1b      	ldr	r3, [r3, #32]
 8007ada:	68ba      	ldr	r2, [r7, #8]
 8007adc:	8a92      	ldrh	r2, [r2, #20]
 8007ade:	4293      	cmp	r3, r2
 8007ae0:	d907      	bls.n	8007af2 <USB_HC_StartXfer+0x136>
        {
          hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007ae2:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007ae4:	68ba      	ldr	r2, [r7, #8]
 8007ae6:	8a92      	ldrh	r2, [r2, #20]
 8007ae8:	fb03 f202 	mul.w	r2, r3, r2
 8007aec:	68bb      	ldr	r3, [r7, #8]
 8007aee:	61da      	str	r2, [r3, #28]
 8007af0:	e036      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
        }
        else
        {
          hc->XferSize = hc->xfer_len;
 8007af2:	68bb      	ldr	r3, [r7, #8]
 8007af4:	6a1a      	ldr	r2, [r3, #32]
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	61da      	str	r2, [r3, #28]
 8007afa:	e031      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
    }
  }
  else
  {
    /* Compute the expected number of packets associated to the transfer */
    if (hc->xfer_len > 0U)
 8007afc:	68bb      	ldr	r3, [r7, #8]
 8007afe:	6a1b      	ldr	r3, [r3, #32]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d018      	beq.n	8007b36 <USB_HC_StartXfer+0x17a>
    {
      num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8007b04:	68bb      	ldr	r3, [r7, #8]
 8007b06:	6a1b      	ldr	r3, [r3, #32]
 8007b08:	68ba      	ldr	r2, [r7, #8]
 8007b0a:	8a92      	ldrh	r2, [r2, #20]
 8007b0c:	4413      	add	r3, r2
 8007b0e:	3b01      	subs	r3, #1
 8007b10:	68ba      	ldr	r2, [r7, #8]
 8007b12:	8a92      	ldrh	r2, [r2, #20]
 8007b14:	fbb3 f3f2 	udiv	r3, r3, r2
 8007b18:	84fb      	strh	r3, [r7, #38]	@ 0x26

      if (num_packets > max_hc_pkt_count)
 8007b1a:	8cfa      	ldrh	r2, [r7, #38]	@ 0x26
 8007b1c:	8b7b      	ldrh	r3, [r7, #26]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d90b      	bls.n	8007b3a <USB_HC_StartXfer+0x17e>
      {
        num_packets = max_hc_pkt_count;
 8007b22:	8b7b      	ldrh	r3, [r7, #26]
 8007b24:	84fb      	strh	r3, [r7, #38]	@ 0x26
        hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b26:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b28:	68ba      	ldr	r2, [r7, #8]
 8007b2a:	8a92      	ldrh	r2, [r2, #20]
 8007b2c:	fb03 f202 	mul.w	r2, r3, r2
 8007b30:	68bb      	ldr	r3, [r7, #8]
 8007b32:	61da      	str	r2, [r3, #28]
 8007b34:	e001      	b.n	8007b3a <USB_HC_StartXfer+0x17e>
      }
    }
    else
    {
      num_packets = 1U;
 8007b36:	2301      	movs	r3, #1
 8007b38:	84fb      	strh	r3, [r7, #38]	@ 0x26

    /*
    * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
    * max_packet size.
    */
    if (hc->ep_is_in != 0U)
 8007b3a:	68bb      	ldr	r3, [r7, #8]
 8007b3c:	78db      	ldrb	r3, [r3, #3]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d00a      	beq.n	8007b58 <USB_HC_StartXfer+0x19c>
    {
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007b42:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b44:	68ba      	ldr	r2, [r7, #8]
 8007b46:	8a92      	ldrh	r2, [r2, #20]
 8007b48:	fb03 f202 	mul.w	r2, r3, r2
 8007b4c:	68bb      	ldr	r3, [r7, #8]
 8007b4e:	61da      	str	r2, [r3, #28]
 8007b50:	e006      	b.n	8007b60 <USB_HC_StartXfer+0x1a4>
 8007b52:	bf00      	nop
 8007b54:	40040000 	.word	0x40040000
    }
    else
    {
      hc->XferSize = hc->xfer_len;
 8007b58:	68bb      	ldr	r3, [r7, #8]
 8007b5a:	6a1a      	ldr	r2, [r3, #32]
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	61da      	str	r2, [r3, #28]
    }
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	69db      	ldr	r3, [r3, #28]
 8007b64:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b68:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8007b6a:	04d9      	lsls	r1, r3, #19
 8007b6c:	4ba3      	ldr	r3, [pc, #652]	@ (8007dfc <USB_HC_StartXfer+0x440>)
 8007b6e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b70:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007b72:	68bb      	ldr	r3, [r7, #8]
 8007b74:	7d9b      	ldrb	r3, [r3, #22]
 8007b76:	075b      	lsls	r3, r3, #29
 8007b78:	f003 43c0 	and.w	r3, r3, #1610612736	@ 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b7c:	69f9      	ldr	r1, [r7, #28]
 8007b7e:	0148      	lsls	r0, r1, #5
 8007b80:	6a39      	ldr	r1, [r7, #32]
 8007b82:	4401      	add	r1, r0
 8007b84:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007b88:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007b8a:	610b      	str	r3, [r1, #16]

  if (dma != 0U)
 8007b8c:	79fb      	ldrb	r3, [r7, #7]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d009      	beq.n	8007ba6 <USB_HC_StartXfer+0x1ea>
  {
    /* xfer_buff MUST be 32-bits aligned */
    USBx_HC(ch_num)->HCDMA = (uint32_t)hc->xfer_buff;
 8007b92:	68bb      	ldr	r3, [r7, #8]
 8007b94:	6999      	ldr	r1, [r3, #24]
 8007b96:	69fb      	ldr	r3, [r7, #28]
 8007b98:	015a      	lsls	r2, r3, #5
 8007b9a:	6a3b      	ldr	r3, [r7, #32]
 8007b9c:	4413      	add	r3, r2
 8007b9e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ba2:	460a      	mov	r2, r1
 8007ba4:	615a      	str	r2, [r3, #20]
  }

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 8007ba6:	6a3b      	ldr	r3, [r7, #32]
 8007ba8:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007bac:	689b      	ldr	r3, [r3, #8]
 8007bae:	f003 0301 	and.w	r3, r3, #1
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2301      	moveq	r3, #1
 8007bb8:	2300      	movne	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	767b      	strb	r3, [r7, #25]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007bbe:	69fb      	ldr	r3, [r7, #28]
 8007bc0:	015a      	lsls	r2, r3, #5
 8007bc2:	6a3b      	ldr	r3, [r7, #32]
 8007bc4:	4413      	add	r3, r2
 8007bc6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	69fa      	ldr	r2, [r7, #28]
 8007bce:	0151      	lsls	r1, r2, #5
 8007bd0:	6a3a      	ldr	r2, [r7, #32]
 8007bd2:	440a      	add	r2, r1
 8007bd4:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007bd8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007bdc:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007bde:	69fb      	ldr	r3, [r7, #28]
 8007be0:	015a      	lsls	r2, r3, #5
 8007be2:	6a3b      	ldr	r3, [r7, #32]
 8007be4:	4413      	add	r3, r2
 8007be6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007bea:	681a      	ldr	r2, [r3, #0]
 8007bec:	7e7b      	ldrb	r3, [r7, #25]
 8007bee:	075b      	lsls	r3, r3, #29
 8007bf0:	69f9      	ldr	r1, [r7, #28]
 8007bf2:	0148      	lsls	r0, r1, #5
 8007bf4:	6a39      	ldr	r1, [r7, #32]
 8007bf6:	4401      	add	r1, r0
 8007bf8:	f501 61a0 	add.w	r1, r1, #1280	@ 0x500
 8007bfc:	4313      	orrs	r3, r2
 8007bfe:	600b      	str	r3, [r1, #0]

  if (hc->do_ssplit == 1U)
 8007c00:	68bb      	ldr	r3, [r7, #8]
 8007c02:	799b      	ldrb	r3, [r3, #6]
 8007c04:	2b01      	cmp	r3, #1
 8007c06:	f040 80c3 	bne.w	8007d90 <USB_HC_StartXfer+0x3d4>
  {
    /* Set Hub start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c0a:	68bb      	ldr	r3, [r7, #8]
 8007c0c:	7c5b      	ldrb	r3, [r3, #17]
 8007c0e:	01db      	lsls	r3, r3, #7
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c10:	68ba      	ldr	r2, [r7, #8]
 8007c12:	7c12      	ldrb	r2, [r2, #16]
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c14:	4313      	orrs	r3, r2
 8007c16:	69fa      	ldr	r2, [r7, #28]
 8007c18:	0151      	lsls	r1, r2, #5
 8007c1a:	6a3a      	ldr	r2, [r7, #32]
 8007c1c:	440a      	add	r2, r1
 8007c1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
                                        (uint32_t)hc->hub_port_nbr | USB_OTG_HCSPLT_SPLITEN;
 8007c22:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
    USBx_HC((uint32_t)ch_num)->HCSPLT = ((uint32_t)hc->hub_addr << USB_OTG_HCSPLT_HUBADDR_Pos) |
 8007c26:	6053      	str	r3, [r2, #4]

    /* unmask ack & nyet for IN/OUT transactions */
    USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_ACKM |
 8007c28:	69fb      	ldr	r3, [r7, #28]
 8007c2a:	015a      	lsls	r2, r3, #5
 8007c2c:	6a3b      	ldr	r3, [r7, #32]
 8007c2e:	4413      	add	r3, r2
 8007c30:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c34:	68db      	ldr	r3, [r3, #12]
 8007c36:	69fa      	ldr	r2, [r7, #28]
 8007c38:	0151      	lsls	r1, r2, #5
 8007c3a:	6a3a      	ldr	r2, [r7, #32]
 8007c3c:	440a      	add	r2, r1
 8007c3e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c42:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8007c46:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_NYET);

    if ((hc->do_csplit == 1U) && (hc->ep_is_in == 0U))
 8007c48:	68bb      	ldr	r3, [r7, #8]
 8007c4a:	79db      	ldrb	r3, [r3, #7]
 8007c4c:	2b01      	cmp	r3, #1
 8007c4e:	d123      	bne.n	8007c98 <USB_HC_StartXfer+0x2dc>
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	78db      	ldrb	r3, [r3, #3]
 8007c54:	2b00      	cmp	r3, #0
 8007c56:	d11f      	bne.n	8007c98 <USB_HC_StartXfer+0x2dc>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007c58:	69fb      	ldr	r3, [r7, #28]
 8007c5a:	015a      	lsls	r2, r3, #5
 8007c5c:	6a3b      	ldr	r3, [r7, #32]
 8007c5e:	4413      	add	r3, r2
 8007c60:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c64:	685b      	ldr	r3, [r3, #4]
 8007c66:	69fa      	ldr	r2, [r7, #28]
 8007c68:	0151      	lsls	r1, r2, #5
 8007c6a:	6a3a      	ldr	r2, [r7, #32]
 8007c6c:	440a      	add	r2, r1
 8007c6e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c72:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007c76:	6053      	str	r3, [r2, #4]
      USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_NYET;
 8007c78:	69fb      	ldr	r3, [r7, #28]
 8007c7a:	015a      	lsls	r2, r3, #5
 8007c7c:	6a3b      	ldr	r3, [r7, #32]
 8007c7e:	4413      	add	r3, r2
 8007c80:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007c84:	68db      	ldr	r3, [r3, #12]
 8007c86:	69fa      	ldr	r2, [r7, #28]
 8007c88:	0151      	lsls	r1, r2, #5
 8007c8a:	6a3a      	ldr	r2, [r7, #32]
 8007c8c:	440a      	add	r2, r1
 8007c8e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007c92:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c96:	60d3      	str	r3, [r2, #12]
    }

    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007c98:	68bb      	ldr	r3, [r7, #8]
 8007c9a:	7c9b      	ldrb	r3, [r3, #18]
 8007c9c:	2b01      	cmp	r3, #1
 8007c9e:	d003      	beq.n	8007ca8 <USB_HC_StartXfer+0x2ec>
 8007ca0:	68bb      	ldr	r3, [r7, #8]
 8007ca2:	7c9b      	ldrb	r3, [r3, #18]
 8007ca4:	2b03      	cmp	r3, #3
 8007ca6:	d117      	bne.n	8007cd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007ca8:	68bb      	ldr	r3, [r7, #8]
 8007caa:	79db      	ldrb	r3, [r3, #7]
    if (((hc->ep_type == EP_TYPE_ISOC) || (hc->ep_type == EP_TYPE_INTR)) &&
 8007cac:	2b01      	cmp	r3, #1
 8007cae:	d113      	bne.n	8007cd8 <USB_HC_StartXfer+0x31c>
        (hc->do_csplit == 1U) && (hc->ep_is_in == 1U))
 8007cb0:	68bb      	ldr	r3, [r7, #8]
 8007cb2:	78db      	ldrb	r3, [r3, #3]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d10f      	bne.n	8007cd8 <USB_HC_StartXfer+0x31c>
    {
      USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_COMPLSPLT;
 8007cb8:	69fb      	ldr	r3, [r7, #28]
 8007cba:	015a      	lsls	r2, r3, #5
 8007cbc:	6a3b      	ldr	r3, [r7, #32]
 8007cbe:	4413      	add	r3, r2
 8007cc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007cc4:	685b      	ldr	r3, [r3, #4]
 8007cc6:	69fa      	ldr	r2, [r7, #28]
 8007cc8:	0151      	lsls	r1, r2, #5
 8007cca:	6a3a      	ldr	r2, [r7, #32]
 8007ccc:	440a      	add	r2, r1
 8007cce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007cd2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007cd6:	6053      	str	r3, [r2, #4]
    }

    /* Position management for iso out transaction on split mode */
    if ((hc->ep_type == EP_TYPE_ISOC) && (hc->ep_is_in == 0U))
 8007cd8:	68bb      	ldr	r3, [r7, #8]
 8007cda:	7c9b      	ldrb	r3, [r3, #18]
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d162      	bne.n	8007da6 <USB_HC_StartXfer+0x3ea>
 8007ce0:	68bb      	ldr	r3, [r7, #8]
 8007ce2:	78db      	ldrb	r3, [r3, #3]
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d15e      	bne.n	8007da6 <USB_HC_StartXfer+0x3ea>
    {
      /* Set data payload position */
      switch (hc->iso_splt_xactPos)
 8007ce8:	68bb      	ldr	r3, [r7, #8]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	3b01      	subs	r3, #1
 8007cee:	2b03      	cmp	r3, #3
 8007cf0:	d858      	bhi.n	8007da4 <USB_HC_StartXfer+0x3e8>
 8007cf2:	a201      	add	r2, pc, #4	@ (adr r2, 8007cf8 <USB_HC_StartXfer+0x33c>)
 8007cf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cf8:	08007d09 	.word	0x08007d09
 8007cfc:	08007d2b 	.word	0x08007d2b
 8007d00:	08007d4d 	.word	0x08007d4d
 8007d04:	08007d6f 	.word	0x08007d6f
      {
        case HCSPLT_BEGIN:
          /* First data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_1;
 8007d08:	69fb      	ldr	r3, [r7, #28]
 8007d0a:	015a      	lsls	r2, r3, #5
 8007d0c:	6a3b      	ldr	r3, [r7, #32]
 8007d0e:	4413      	add	r3, r2
 8007d10:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d14:	685b      	ldr	r3, [r3, #4]
 8007d16:	69fa      	ldr	r2, [r7, #28]
 8007d18:	0151      	lsls	r1, r2, #5
 8007d1a:	6a3a      	ldr	r2, [r7, #32]
 8007d1c:	440a      	add	r2, r1
 8007d1e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d22:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007d26:	6053      	str	r3, [r2, #4]
          break;
 8007d28:	e03d      	b.n	8007da6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_MIDDLE:
          /* Middle data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_Pos;
 8007d2a:	69fb      	ldr	r3, [r7, #28]
 8007d2c:	015a      	lsls	r2, r3, #5
 8007d2e:	6a3b      	ldr	r3, [r7, #32]
 8007d30:	4413      	add	r3, r2
 8007d32:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d36:	685b      	ldr	r3, [r3, #4]
 8007d38:	69fa      	ldr	r2, [r7, #28]
 8007d3a:	0151      	lsls	r1, r2, #5
 8007d3c:	6a3a      	ldr	r2, [r7, #32]
 8007d3e:	440a      	add	r2, r1
 8007d40:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d44:	f043 030e 	orr.w	r3, r3, #14
 8007d48:	6053      	str	r3, [r2, #4]
          break;
 8007d4a:	e02c      	b.n	8007da6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_END:
          /* End data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS_0;
 8007d4c:	69fb      	ldr	r3, [r7, #28]
 8007d4e:	015a      	lsls	r2, r3, #5
 8007d50:	6a3b      	ldr	r3, [r7, #32]
 8007d52:	4413      	add	r3, r2
 8007d54:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	69fa      	ldr	r2, [r7, #28]
 8007d5c:	0151      	lsls	r1, r2, #5
 8007d5e:	6a3a      	ldr	r2, [r7, #32]
 8007d60:	440a      	add	r2, r1
 8007d62:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d66:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8007d6a:	6053      	str	r3, [r2, #4]
          break;
 8007d6c:	e01b      	b.n	8007da6 <USB_HC_StartXfer+0x3ea>

        case HCSPLT_FULL:
          /* Entire data payload for OUT Transaction */
          USBx_HC((uint32_t)ch_num)->HCSPLT |= USB_OTG_HCSPLT_XACTPOS;
 8007d6e:	69fb      	ldr	r3, [r7, #28]
 8007d70:	015a      	lsls	r2, r3, #5
 8007d72:	6a3b      	ldr	r3, [r7, #32]
 8007d74:	4413      	add	r3, r2
 8007d76:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d7a:	685b      	ldr	r3, [r3, #4]
 8007d7c:	69fa      	ldr	r2, [r7, #28]
 8007d7e:	0151      	lsls	r1, r2, #5
 8007d80:	6a3a      	ldr	r2, [r7, #32]
 8007d82:	440a      	add	r2, r1
 8007d84:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007d88:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8007d8c:	6053      	str	r3, [r2, #4]
          break;
 8007d8e:	e00a      	b.n	8007da6 <USB_HC_StartXfer+0x3ea>
    }
  }
  else
  {
    /* Clear Hub Start Split transaction */
    USBx_HC((uint32_t)ch_num)->HCSPLT = 0U;
 8007d90:	69fb      	ldr	r3, [r7, #28]
 8007d92:	015a      	lsls	r2, r3, #5
 8007d94:	6a3b      	ldr	r3, [r7, #32]
 8007d96:	4413      	add	r3, r2
 8007d98:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007d9c:	461a      	mov	r2, r3
 8007d9e:	2300      	movs	r3, #0
 8007da0:	6053      	str	r3, [r2, #4]
 8007da2:	e000      	b.n	8007da6 <USB_HC_StartXfer+0x3ea>
          break;
 8007da4:	bf00      	nop
  }

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 8007da6:	69fb      	ldr	r3, [r7, #28]
 8007da8:	015a      	lsls	r2, r3, #5
 8007daa:	6a3b      	ldr	r3, [r7, #32]
 8007dac:	4413      	add	r3, r2
 8007dae:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	613b      	str	r3, [r7, #16]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8007db6:	693b      	ldr	r3, [r7, #16]
 8007db8:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 8007dbc:	613b      	str	r3, [r7, #16]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 8007dbe:	68bb      	ldr	r3, [r7, #8]
 8007dc0:	78db      	ldrb	r3, [r3, #3]
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d004      	beq.n	8007dd0 <USB_HC_StartXfer+0x414>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 8007dc6:	693b      	ldr	r3, [r7, #16]
 8007dc8:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8007dcc:	613b      	str	r3, [r7, #16]
 8007dce:	e003      	b.n	8007dd8 <USB_HC_StartXfer+0x41c>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 8007dd0:	693b      	ldr	r3, [r7, #16]
 8007dd2:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8007dd6:	613b      	str	r3, [r7, #16]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 8007dd8:	693b      	ldr	r3, [r7, #16]
 8007dda:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007dde:	613b      	str	r3, [r7, #16]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 8007de0:	69fb      	ldr	r3, [r7, #28]
 8007de2:	015a      	lsls	r2, r3, #5
 8007de4:	6a3b      	ldr	r3, [r7, #32]
 8007de6:	4413      	add	r3, r2
 8007de8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007dec:	461a      	mov	r2, r3
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	6013      	str	r3, [r2, #0]

  if (dma != 0U) /* dma mode */
 8007df2:	79fb      	ldrb	r3, [r7, #7]
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d003      	beq.n	8007e00 <USB_HC_StartXfer+0x444>
  {
    return HAL_OK;
 8007df8:	2300      	movs	r3, #0
 8007dfa:	e055      	b.n	8007ea8 <USB_HC_StartXfer+0x4ec>
 8007dfc:	1ff80000 	.word	0x1ff80000
  }

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U) && (hc->do_csplit == 0U))
 8007e00:	68bb      	ldr	r3, [r7, #8]
 8007e02:	78db      	ldrb	r3, [r3, #3]
 8007e04:	2b00      	cmp	r3, #0
 8007e06:	d14e      	bne.n	8007ea6 <USB_HC_StartXfer+0x4ea>
 8007e08:	68bb      	ldr	r3, [r7, #8]
 8007e0a:	6a1b      	ldr	r3, [r3, #32]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d04a      	beq.n	8007ea6 <USB_HC_StartXfer+0x4ea>
 8007e10:	68bb      	ldr	r3, [r7, #8]
 8007e12:	79db      	ldrb	r3, [r3, #7]
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d146      	bne.n	8007ea6 <USB_HC_StartXfer+0x4ea>
  {
    switch (hc->ep_type)
 8007e18:	68bb      	ldr	r3, [r7, #8]
 8007e1a:	7c9b      	ldrb	r3, [r3, #18]
 8007e1c:	2b03      	cmp	r3, #3
 8007e1e:	d831      	bhi.n	8007e84 <USB_HC_StartXfer+0x4c8>
 8007e20:	a201      	add	r2, pc, #4	@ (adr r2, 8007e28 <USB_HC_StartXfer+0x46c>)
 8007e22:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e26:	bf00      	nop
 8007e28:	08007e39 	.word	0x08007e39
 8007e2c:	08007e5d 	.word	0x08007e5d
 8007e30:	08007e39 	.word	0x08007e39
 8007e34:	08007e5d 	.word	0x08007e5d
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e38:	68bb      	ldr	r3, [r7, #8]
 8007e3a:	6a1b      	ldr	r3, [r3, #32]
 8007e3c:	3303      	adds	r3, #3
 8007e3e:	089b      	lsrs	r3, r3, #2
 8007e40:	82fb      	strh	r3, [r7, #22]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 8007e42:	8afa      	ldrh	r2, [r7, #22]
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007e48:	b29b      	uxth	r3, r3
 8007e4a:	429a      	cmp	r2, r3
 8007e4c:	d91c      	bls.n	8007e88 <USB_HC_StartXfer+0x4cc>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	699b      	ldr	r3, [r3, #24]
 8007e52:	f043 0220 	orr.w	r2, r3, #32
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e5a:	e015      	b.n	8007e88 <USB_HC_StartXfer+0x4cc>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007e5c:	68bb      	ldr	r3, [r7, #8]
 8007e5e:	6a1b      	ldr	r3, [r3, #32]
 8007e60:	3303      	adds	r3, #3
 8007e62:	089b      	lsrs	r3, r3, #2
 8007e64:	82fb      	strh	r3, [r7, #22]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 8007e66:	8afa      	ldrh	r2, [r7, #22]
 8007e68:	6a3b      	ldr	r3, [r7, #32]
 8007e6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007e6e:	691b      	ldr	r3, [r3, #16]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	429a      	cmp	r2, r3
 8007e74:	d90a      	bls.n	8007e8c <USB_HC_StartXfer+0x4d0>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	699b      	ldr	r3, [r3, #24]
 8007e7a:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 8007e7e:	68fb      	ldr	r3, [r7, #12]
 8007e80:	619a      	str	r2, [r3, #24]
        }
        break;
 8007e82:	e003      	b.n	8007e8c <USB_HC_StartXfer+0x4d0>

      default:
        break;
 8007e84:	bf00      	nop
 8007e86:	e002      	b.n	8007e8e <USB_HC_StartXfer+0x4d2>
        break;
 8007e88:	bf00      	nop
 8007e8a:	e000      	b.n	8007e8e <USB_HC_StartXfer+0x4d2>
        break;
 8007e8c:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len, 0);
 8007e8e:	68bb      	ldr	r3, [r7, #8]
 8007e90:	6999      	ldr	r1, [r3, #24]
 8007e92:	68bb      	ldr	r3, [r7, #8]
 8007e94:	785a      	ldrb	r2, [r3, #1]
 8007e96:	68bb      	ldr	r3, [r7, #8]
 8007e98:	6a1b      	ldr	r3, [r3, #32]
 8007e9a:	b29b      	uxth	r3, r3
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	9000      	str	r0, [sp, #0]
 8007ea0:	68f8      	ldr	r0, [r7, #12]
 8007ea2:	f7ff f9c9 	bl	8007238 <USB_WritePacket>
  }

  return HAL_OK;
 8007ea6:	2300      	movs	r3, #0
}
 8007ea8:	4618      	mov	r0, r3
 8007eaa:	3728      	adds	r7, #40	@ 0x28
 8007eac:	46bd      	mov	sp, r7
 8007eae:	bd80      	pop	{r7, pc}

08007eb0 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(const USB_OTG_GlobalTypeDef *USBx)
{
 8007eb0:	b480      	push	{r7}
 8007eb2:	b085      	sub	sp, #20
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007ec2:	695b      	ldr	r3, [r3, #20]
 8007ec4:	b29b      	uxth	r3, r3
}
 8007ec6:	4618      	mov	r0, r3
 8007ec8:	3714      	adds	r7, #20
 8007eca:	46bd      	mov	sp, r7
 8007ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ed0:	4770      	bx	lr

08007ed2 <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(const USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 8007ed2:	b480      	push	{r7}
 8007ed4:	b089      	sub	sp, #36	@ 0x24
 8007ed6:	af00      	add	r7, sp, #0
 8007ed8:	6078      	str	r0, [r7, #4]
 8007eda:	460b      	mov	r3, r1
 8007edc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 8007ee2:	78fb      	ldrb	r3, [r7, #3]
 8007ee4:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 8007ee6:	2300      	movs	r3, #0
 8007ee8:	60bb      	str	r3, [r7, #8]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 8007eea:	69bb      	ldr	r3, [r7, #24]
 8007eec:	015a      	lsls	r2, r3, #5
 8007eee:	69fb      	ldr	r3, [r7, #28]
 8007ef0:	4413      	add	r3, r2
 8007ef2:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	0c9b      	lsrs	r3, r3, #18
 8007efa:	f003 0303 	and.w	r3, r3, #3
 8007efe:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 8007f00:	69bb      	ldr	r3, [r7, #24]
 8007f02:	015a      	lsls	r2, r3, #5
 8007f04:	69fb      	ldr	r3, [r7, #28]
 8007f06:	4413      	add	r3, r2
 8007f08:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	0fdb      	lsrs	r3, r3, #31
 8007f10:	f003 0301 	and.w	r3, r3, #1
 8007f14:	613b      	str	r3, [r7, #16]
  uint32_t SplitEna = (USBx_HC(hcnum)->HCSPLT & USB_OTG_HCSPLT_SPLITEN) >> 31;
 8007f16:	69bb      	ldr	r3, [r7, #24]
 8007f18:	015a      	lsls	r2, r3, #5
 8007f1a:	69fb      	ldr	r3, [r7, #28]
 8007f1c:	4413      	add	r3, r2
 8007f1e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	0fdb      	lsrs	r3, r3, #31
 8007f26:	f003 0301 	and.w	r3, r3, #1
 8007f2a:	60fb      	str	r3, [r7, #12]

  /* In buffer DMA, Channel disable must not be programmed for non-split periodic channels.
     At the end of the next uframe/frame (in the worst case), the core generates a channel halted
     and disables the channel automatically. */

  if ((((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) && (SplitEna == 0U)) &&
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	f003 0320 	and.w	r3, r3, #32
 8007f34:	2b20      	cmp	r3, #32
 8007f36:	d10d      	bne.n	8007f54 <USB_HC_Halt+0x82>
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d10a      	bne.n	8007f54 <USB_HC_Halt+0x82>
 8007f3e:	693b      	ldr	r3, [r7, #16]
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d005      	beq.n	8007f50 <USB_HC_Halt+0x7e>
      ((ChannelEna == 0U) || (((HcEpType == HCCHAR_ISOC) || (HcEpType == HCCHAR_INTR)))))
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d002      	beq.n	8007f50 <USB_HC_Halt+0x7e>
 8007f4a:	697b      	ldr	r3, [r7, #20]
 8007f4c:	2b03      	cmp	r3, #3
 8007f4e:	d101      	bne.n	8007f54 <USB_HC_Halt+0x82>
  {
    return HAL_OK;
 8007f50:	2300      	movs	r3, #0
 8007f52:	e0d8      	b.n	8008106 <USB_HC_Halt+0x234>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007f54:	697b      	ldr	r3, [r7, #20]
 8007f56:	2b00      	cmp	r3, #0
 8007f58:	d002      	beq.n	8007f60 <USB_HC_Halt+0x8e>
 8007f5a:	697b      	ldr	r3, [r7, #20]
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d173      	bne.n	8008048 <USB_HC_Halt+0x176>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007f60:	69bb      	ldr	r3, [r7, #24]
 8007f62:	015a      	lsls	r2, r3, #5
 8007f64:	69fb      	ldr	r3, [r7, #28]
 8007f66:	4413      	add	r3, r2
 8007f68:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	69ba      	ldr	r2, [r7, #24]
 8007f70:	0151      	lsls	r1, r2, #5
 8007f72:	69fa      	ldr	r2, [r7, #28]
 8007f74:	440a      	add	r2, r1
 8007f76:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007f7a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8007f7e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	689b      	ldr	r3, [r3, #8]
 8007f84:	f003 0320 	and.w	r3, r3, #32
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d14a      	bne.n	8008022 <USB_HC_Halt+0x150>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f90:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d133      	bne.n	8008000 <USB_HC_Halt+0x12e>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007f98:	69bb      	ldr	r3, [r7, #24]
 8007f9a:	015a      	lsls	r2, r3, #5
 8007f9c:	69fb      	ldr	r3, [r7, #28]
 8007f9e:	4413      	add	r3, r2
 8007fa0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	69ba      	ldr	r2, [r7, #24]
 8007fa8:	0151      	lsls	r1, r2, #5
 8007faa:	69fa      	ldr	r2, [r7, #28]
 8007fac:	440a      	add	r2, r1
 8007fae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fb2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007fb6:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007fb8:	69bb      	ldr	r3, [r7, #24]
 8007fba:	015a      	lsls	r2, r3, #5
 8007fbc:	69fb      	ldr	r3, [r7, #28]
 8007fbe:	4413      	add	r3, r2
 8007fc0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	69ba      	ldr	r2, [r7, #24]
 8007fc8:	0151      	lsls	r1, r2, #5
 8007fca:	69fa      	ldr	r2, [r7, #28]
 8007fcc:	440a      	add	r2, r1
 8007fce:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8007fd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8007fd6:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 8007fd8:	68bb      	ldr	r3, [r7, #8]
 8007fda:	3301      	adds	r3, #1
 8007fdc:	60bb      	str	r3, [r7, #8]

          if (count > 1000U)
 8007fde:	68bb      	ldr	r3, [r7, #8]
 8007fe0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007fe4:	d82e      	bhi.n	8008044 <USB_HC_Halt+0x172>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007fe6:	69bb      	ldr	r3, [r7, #24]
 8007fe8:	015a      	lsls	r2, r3, #5
 8007fea:	69fb      	ldr	r3, [r7, #28]
 8007fec:	4413      	add	r3, r2
 8007fee:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007ffc:	d0ec      	beq.n	8007fd8 <USB_HC_Halt+0x106>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007ffe:	e081      	b.n	8008104 <USB_HC_Halt+0x232>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008000:	69bb      	ldr	r3, [r7, #24]
 8008002:	015a      	lsls	r2, r3, #5
 8008004:	69fb      	ldr	r3, [r7, #28]
 8008006:	4413      	add	r3, r2
 8008008:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	69ba      	ldr	r2, [r7, #24]
 8008010:	0151      	lsls	r1, r2, #5
 8008012:	69fa      	ldr	r2, [r7, #28]
 8008014:	440a      	add	r2, r1
 8008016:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800801a:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800801e:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008020:	e070      	b.n	8008104 <USB_HC_Halt+0x232>
      }
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008022:	69bb      	ldr	r3, [r7, #24]
 8008024:	015a      	lsls	r2, r3, #5
 8008026:	69fb      	ldr	r3, [r7, #28]
 8008028:	4413      	add	r3, r2
 800802a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	69ba      	ldr	r2, [r7, #24]
 8008032:	0151      	lsls	r1, r2, #5
 8008034:	69fa      	ldr	r2, [r7, #28]
 8008036:	440a      	add	r2, r1
 8008038:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 800803c:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008040:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008042:	e05f      	b.n	8008104 <USB_HC_Halt+0x232>
            break;
 8008044:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8008046:	e05d      	b.n	8008104 <USB_HC_Halt+0x232>
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	015a      	lsls	r2, r3, #5
 800804c:	69fb      	ldr	r3, [r7, #28]
 800804e:	4413      	add	r3, r2
 8008050:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008054:	681b      	ldr	r3, [r3, #0]
 8008056:	69ba      	ldr	r2, [r7, #24]
 8008058:	0151      	lsls	r1, r2, #5
 800805a:	69fa      	ldr	r2, [r7, #28]
 800805c:	440a      	add	r2, r1
 800805e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008062:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008066:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8008068:	69fb      	ldr	r3, [r7, #28]
 800806a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800806e:	691b      	ldr	r3, [r3, #16]
 8008070:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8008074:	2b00      	cmp	r3, #0
 8008076:	d133      	bne.n	80080e0 <USB_HC_Halt+0x20e>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	015a      	lsls	r2, r3, #5
 800807c:	69fb      	ldr	r3, [r7, #28]
 800807e:	4413      	add	r3, r2
 8008080:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	69ba      	ldr	r2, [r7, #24]
 8008088:	0151      	lsls	r1, r2, #5
 800808a:	69fa      	ldr	r2, [r7, #28]
 800808c:	440a      	add	r2, r1
 800808e:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008092:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008096:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8008098:	69bb      	ldr	r3, [r7, #24]
 800809a:	015a      	lsls	r2, r3, #5
 800809c:	69fb      	ldr	r3, [r7, #28]
 800809e:	4413      	add	r3, r2
 80080a0:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	69ba      	ldr	r2, [r7, #24]
 80080a8:	0151      	lsls	r1, r2, #5
 80080aa:	69fa      	ldr	r2, [r7, #28]
 80080ac:	440a      	add	r2, r1
 80080ae:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080b2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080b6:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	3301      	adds	r3, #1
 80080bc:	60bb      	str	r3, [r7, #8]

        if (count > 1000U)
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80080c4:	d81d      	bhi.n	8008102 <USB_HC_Halt+0x230>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80080c6:	69bb      	ldr	r3, [r7, #24]
 80080c8:	015a      	lsls	r2, r3, #5
 80080ca:	69fb      	ldr	r3, [r7, #28]
 80080cc:	4413      	add	r3, r2
 80080ce:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80080d8:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80080dc:	d0ec      	beq.n	80080b8 <USB_HC_Halt+0x1e6>
 80080de:	e011      	b.n	8008104 <USB_HC_Halt+0x232>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	015a      	lsls	r2, r3, #5
 80080e4:	69fb      	ldr	r3, [r7, #28]
 80080e6:	4413      	add	r3, r2
 80080e8:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	69ba      	ldr	r2, [r7, #24]
 80080f0:	0151      	lsls	r1, r2, #5
 80080f2:	69fa      	ldr	r2, [r7, #28]
 80080f4:	440a      	add	r2, r1
 80080f6:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 80080fa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80080fe:	6013      	str	r3, [r2, #0]
 8008100:	e000      	b.n	8008104 <USB_HC_Halt+0x232>
          break;
 8008102:	bf00      	nop
    }
  }

  return HAL_OK;
 8008104:	2300      	movs	r3, #0
}
 8008106:	4618      	mov	r0, r3
 8008108:	3724      	adds	r7, #36	@ 0x24
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
	...

08008114 <USB_DoPing>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_DoPing(const USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num)
{
 8008114:	b480      	push	{r7}
 8008116:	b087      	sub	sp, #28
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
 800811c:	460b      	mov	r3, r1
 800811e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	617b      	str	r3, [r7, #20]
  uint32_t chnum = (uint32_t)ch_num;
 8008124:	78fb      	ldrb	r3, [r7, #3]
 8008126:	613b      	str	r3, [r7, #16]
  uint32_t num_packets = 1U;
 8008128:	2301      	movs	r3, #1
 800812a:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  USBx_HC(chnum)->HCTSIZ = ((num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	04da      	lsls	r2, r3, #19
 8008130:	4b15      	ldr	r3, [pc, #84]	@ (8008188 <USB_DoPing+0x74>)
 8008132:	4013      	ands	r3, r2
 8008134:	693a      	ldr	r2, [r7, #16]
 8008136:	0151      	lsls	r1, r2, #5
 8008138:	697a      	ldr	r2, [r7, #20]
 800813a:	440a      	add	r2, r1
 800813c:	f502 62a0 	add.w	r2, r2, #1280	@ 0x500
 8008140:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008144:	6113      	str	r3, [r2, #16]
                           USB_OTG_HCTSIZ_DOPING;

  /* Set host channel enable */
  tmpreg = USBx_HC(chnum)->HCCHAR;
 8008146:	693b      	ldr	r3, [r7, #16]
 8008148:	015a      	lsls	r2, r3, #5
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	4413      	add	r3, r2
 800814e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8008156:	68bb      	ldr	r3, [r7, #8]
 8008158:	f023 4380 	bic.w	r3, r3, #1073741824	@ 0x40000000
 800815c:	60bb      	str	r3, [r7, #8]
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008164:	60bb      	str	r3, [r7, #8]
  USBx_HC(chnum)->HCCHAR = tmpreg;
 8008166:	693b      	ldr	r3, [r7, #16]
 8008168:	015a      	lsls	r2, r3, #5
 800816a:	697b      	ldr	r3, [r7, #20]
 800816c:	4413      	add	r3, r2
 800816e:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008172:	461a      	mov	r2, r3
 8008174:	68bb      	ldr	r3, [r7, #8]
 8008176:	6013      	str	r3, [r2, #0]

  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	371c      	adds	r7, #28
 800817e:	46bd      	mov	sp, r7
 8008180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008184:	4770      	bx	lr
 8008186:	bf00      	nop
 8008188:	1ff80000 	.word	0x1ff80000

0800818c <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 800818c:	b580      	push	{r7, lr}
 800818e:	b088      	sub	sp, #32
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8008194:	2300      	movs	r3, #0
 8008196:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 800819c:	2300      	movs	r3, #0
 800819e:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80081a0:	6878      	ldr	r0, [r7, #4]
 80081a2:	f7fe ff8c 	bl	80070be <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80081a6:	2110      	movs	r1, #16
 80081a8:	6878      	ldr	r0, [r7, #4]
 80081aa:	f7fe ffe5 	bl	8007178 <USB_FlushTxFifo>
 80081ae:	4603      	mov	r3, r0
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	d001      	beq.n	80081b8 <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80081b4:	2301      	movs	r3, #1
 80081b6:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80081b8:	6878      	ldr	r0, [r7, #4]
 80081ba:	f7ff f80f 	bl	80071dc <USB_FlushRxFifo>
 80081be:	4603      	mov	r3, r0
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d001      	beq.n	80081c8 <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80081c4:	2301      	movs	r3, #1
 80081c6:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80081c8:	2300      	movs	r3, #0
 80081ca:	61bb      	str	r3, [r7, #24]
 80081cc:	e01f      	b.n	800820e <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 80081ce:	69bb      	ldr	r3, [r7, #24]
 80081d0:	015a      	lsls	r2, r3, #5
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	4413      	add	r3, r2
 80081d6:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80081e4:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 80081e6:	693b      	ldr	r3, [r7, #16]
 80081e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80081ec:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 80081f4:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 80081f6:	69bb      	ldr	r3, [r7, #24]
 80081f8:	015a      	lsls	r2, r3, #5
 80081fa:	697b      	ldr	r3, [r7, #20]
 80081fc:	4413      	add	r3, r2
 80081fe:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008202:	461a      	mov	r2, r3
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 8008208:	69bb      	ldr	r3, [r7, #24]
 800820a:	3301      	adds	r3, #1
 800820c:	61bb      	str	r3, [r7, #24]
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b0f      	cmp	r3, #15
 8008212:	d9dc      	bls.n	80081ce <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 8008214:	2300      	movs	r3, #0
 8008216:	61bb      	str	r3, [r7, #24]
 8008218:	e034      	b.n	8008284 <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	015a      	lsls	r2, r3, #5
 800821e:	697b      	ldr	r3, [r7, #20]
 8008220:	4413      	add	r3, r2
 8008222:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 8008226:	681b      	ldr	r3, [r3, #0]
 8008228:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 800822a:	693b      	ldr	r3, [r7, #16]
 800822c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8008230:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8008238:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 800823a:	693b      	ldr	r3, [r7, #16]
 800823c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8008240:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8008242:	69bb      	ldr	r3, [r7, #24]
 8008244:	015a      	lsls	r2, r3, #5
 8008246:	697b      	ldr	r3, [r7, #20]
 8008248:	4413      	add	r3, r2
 800824a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800824e:	461a      	mov	r2, r3
 8008250:	693b      	ldr	r3, [r7, #16]
 8008252:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	3301      	adds	r3, #1
 8008258:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008260:	d80c      	bhi.n	800827c <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8008262:	69bb      	ldr	r3, [r7, #24]
 8008264:	015a      	lsls	r2, r3, #5
 8008266:	697b      	ldr	r3, [r7, #20]
 8008268:	4413      	add	r3, r2
 800826a:	f503 63a0 	add.w	r3, r3, #1280	@ 0x500
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8008274:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8008278:	d0ec      	beq.n	8008254 <USB_StopHost+0xc8>
 800827a:	e000      	b.n	800827e <USB_StopHost+0xf2>
        break;
 800827c:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 800827e:	69bb      	ldr	r3, [r7, #24]
 8008280:	3301      	adds	r3, #1
 8008282:	61bb      	str	r3, [r7, #24]
 8008284:	69bb      	ldr	r3, [r7, #24]
 8008286:	2b0f      	cmp	r3, #15
 8008288:	d9c7      	bls.n	800821a <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = CLEAR_INTERRUPT_MASK;
 800828a:	697b      	ldr	r3, [r7, #20]
 800828c:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008290:	461a      	mov	r2, r3
 8008292:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008296:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = CLEAR_INTERRUPT_MASK;
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800829e:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80082a0:	6878      	ldr	r0, [r7, #4]
 80082a2:	f7fe fefb 	bl	800709c <USB_EnableGlobalInt>

  return ret;
 80082a6:	7ffb      	ldrb	r3, [r7, #31]
}
 80082a8:	4618      	mov	r0, r3
 80082aa:	3720      	adds	r7, #32
 80082ac:	46bd      	mov	sp, r7
 80082ae:	bd80      	pop	{r7, pc}

080082b0 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80082b0:	b590      	push	{r4, r7, lr}
 80082b2:	b089      	sub	sp, #36	@ 0x24
 80082b4:	af04      	add	r7, sp, #16
 80082b6:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80082b8:	2301      	movs	r3, #1
 80082ba:	2202      	movs	r2, #2
 80082bc:	2102      	movs	r1, #2
 80082be:	6878      	ldr	r0, [r7, #4]
 80082c0:	f000 fc85 	bl	8008bce <USBH_FindInterface>
 80082c4:	4603      	mov	r3, r0
 80082c6:	73fb      	strb	r3, [r7, #15]
                                   ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80082c8:	7bfb      	ldrb	r3, [r7, #15]
 80082ca:	2bff      	cmp	r3, #255	@ 0xff
 80082cc:	d002      	beq.n	80082d4 <USBH_CDC_InterfaceInit+0x24>
 80082ce:	7bfb      	ldrb	r3, [r7, #15]
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d901      	bls.n	80082d8 <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80082d4:	2302      	movs	r3, #2
 80082d6:	e13d      	b.n	8008554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 80082d8:	7bfb      	ldrb	r3, [r7, #15]
 80082da:	4619      	mov	r1, r3
 80082dc:	6878      	ldr	r0, [r7, #4]
 80082de:	f000 fc5a 	bl	8008b96 <USBH_SelectInterface>
 80082e2:	4603      	mov	r3, r0
 80082e4:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 80082e6:	7bbb      	ldrb	r3, [r7, #14]
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 80082ec:	2302      	movs	r3, #2
 80082ee:	e131      	b.n	8008554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	f8d3 437c 	ldr.w	r4, [r3, #892]	@ 0x37c
 80082f6:	2050      	movs	r0, #80	@ 0x50
 80082f8:	f002 fb64 	bl	800a9c4 <malloc>
 80082fc:	4603      	mov	r3, r0
 80082fe:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008306:	69db      	ldr	r3, [r3, #28]
 8008308:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 800830a:	68bb      	ldr	r3, [r7, #8]
 800830c:	2b00      	cmp	r3, #0
 800830e:	d101      	bne.n	8008314 <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8008310:	2302      	movs	r3, #2
 8008312:	e11f      	b.n	8008554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  (void)USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 8008314:	2250      	movs	r2, #80	@ 0x50
 8008316:	2100      	movs	r1, #0
 8008318:	68b8      	ldr	r0, [r7, #8]
 800831a:	f002 fc11 	bl	800ab40 <memset>

  /*Collect the notification endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 800831e:	7bfb      	ldrb	r3, [r7, #15]
 8008320:	687a      	ldr	r2, [r7, #4]
 8008322:	211a      	movs	r1, #26
 8008324:	fb01 f303 	mul.w	r3, r1, r3
 8008328:	4413      	add	r3, r2
 800832a:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 800832e:	781b      	ldrb	r3, [r3, #0]
 8008330:	b25b      	sxtb	r3, r3
 8008332:	2b00      	cmp	r3, #0
 8008334:	da15      	bge.n	8008362 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
 8008338:	687a      	ldr	r2, [r7, #4]
 800833a:	211a      	movs	r1, #26
 800833c:	fb01 f303 	mul.w	r3, r1, r3
 8008340:	4413      	add	r3, r2
 8008342:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008346:	781a      	ldrb	r2, [r3, #0]
 8008348:	68bb      	ldr	r3, [r7, #8]
 800834a:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800834c:	7bfb      	ldrb	r3, [r7, #15]
 800834e:	687a      	ldr	r2, [r7, #4]
 8008350:	211a      	movs	r1, #26
 8008352:	fb01 f303 	mul.w	r3, r1, r3
 8008356:	4413      	add	r3, r2
 8008358:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800835c:	881a      	ldrh	r2, [r3, #0]
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8008362:	68bb      	ldr	r3, [r7, #8]
 8008364:	785b      	ldrb	r3, [r3, #1]
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f001 ffbe 	bl	800a2ea <USBH_AllocPipe>
 800836e:	4603      	mov	r3, r0
 8008370:	461a      	mov	r2, r3
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 8008376:	68bb      	ldr	r3, [r7, #8]
 8008378:	7819      	ldrb	r1, [r3, #0]
 800837a:	68bb      	ldr	r3, [r7, #8]
 800837c:	7858      	ldrb	r0, [r3, #1]
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800838a:	68ba      	ldr	r2, [r7, #8]
 800838c:	8952      	ldrh	r2, [r2, #10]
 800838e:	9202      	str	r2, [sp, #8]
 8008390:	2203      	movs	r2, #3
 8008392:	9201      	str	r2, [sp, #4]
 8008394:	9300      	str	r3, [sp, #0]
 8008396:	4623      	mov	r3, r4
 8008398:	4602      	mov	r2, r0
 800839a:	6878      	ldr	r0, [r7, #4]
 800839c:	f001 ff76 	bl	800a28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                      CDC_Handle->CommItf.NotifEpSize);

  (void)USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80083a0:	68bb      	ldr	r3, [r7, #8]
 80083a2:	781b      	ldrb	r3, [r3, #0]
 80083a4:	2200      	movs	r2, #0
 80083a6:	4619      	mov	r1, r3
 80083a8:	6878      	ldr	r0, [r7, #4]
 80083aa:	f002 fa85 	bl	800a8b8 <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80083ae:	2300      	movs	r3, #0
 80083b0:	2200      	movs	r2, #0
 80083b2:	210a      	movs	r1, #10
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fc0a 	bl	8008bce <USBH_FindInterface>
 80083ba:	4603      	mov	r3, r0
 80083bc:	73fb      	strb	r3, [r7, #15]
                                   RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80083be:	7bfb      	ldrb	r3, [r7, #15]
 80083c0:	2bff      	cmp	r3, #255	@ 0xff
 80083c2:	d002      	beq.n	80083ca <USBH_CDC_InterfaceInit+0x11a>
 80083c4:	7bfb      	ldrb	r3, [r7, #15]
 80083c6:	2b01      	cmp	r3, #1
 80083c8:	d901      	bls.n	80083ce <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 80083ca:	2302      	movs	r3, #2
 80083cc:	e0c2      	b.n	8008554 <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U) != 0U)
 80083ce:	7bfb      	ldrb	r3, [r7, #15]
 80083d0:	687a      	ldr	r2, [r7, #4]
 80083d2:	211a      	movs	r1, #26
 80083d4:	fb01 f303 	mul.w	r3, r1, r3
 80083d8:	4413      	add	r3, r2
 80083da:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083de:	781b      	ldrb	r3, [r3, #0]
 80083e0:	b25b      	sxtb	r3, r3
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	da16      	bge.n	8008414 <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 80083e6:	7bfb      	ldrb	r3, [r7, #15]
 80083e8:	687a      	ldr	r2, [r7, #4]
 80083ea:	211a      	movs	r1, #26
 80083ec:	fb01 f303 	mul.w	r3, r1, r3
 80083f0:	4413      	add	r3, r2
 80083f2:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 80083f6:	781a      	ldrb	r2, [r3, #0]
 80083f8:	68bb      	ldr	r3, [r7, #8]
 80083fa:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 80083fc:	7bfb      	ldrb	r3, [r7, #15]
 80083fe:	687a      	ldr	r2, [r7, #4]
 8008400:	211a      	movs	r1, #26
 8008402:	fb01 f303 	mul.w	r3, r1, r3
 8008406:	4413      	add	r3, r2
 8008408:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800840c:	881a      	ldrh	r2, [r3, #0]
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	835a      	strh	r2, [r3, #26]
 8008412:	e015      	b.n	8008440 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 8008414:	7bfb      	ldrb	r3, [r7, #15]
 8008416:	687a      	ldr	r2, [r7, #4]
 8008418:	211a      	movs	r1, #26
 800841a:	fb01 f303 	mul.w	r3, r1, r3
 800841e:	4413      	add	r3, r2
 8008420:	f203 334e 	addw	r3, r3, #846	@ 0x34e
 8008424:	781a      	ldrb	r2, [r3, #0]
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 800842a:	7bfb      	ldrb	r3, [r7, #15]
 800842c:	687a      	ldr	r2, [r7, #4]
 800842e:	211a      	movs	r1, #26
 8008430:	fb01 f303 	mul.w	r3, r1, r3
 8008434:	4413      	add	r3, r2
 8008436:	f503 7354 	add.w	r3, r3, #848	@ 0x350
 800843a:	881a      	ldrh	r2, [r3, #0]
 800843c:	68bb      	ldr	r3, [r7, #8]
 800843e:	831a      	strh	r2, [r3, #24]
  }

  if ((phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U) != 0U)
 8008440:	7bfb      	ldrb	r3, [r7, #15]
 8008442:	687a      	ldr	r2, [r7, #4]
 8008444:	211a      	movs	r1, #26
 8008446:	fb01 f303 	mul.w	r3, r1, r3
 800844a:	4413      	add	r3, r2
 800844c:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008450:	781b      	ldrb	r3, [r3, #0]
 8008452:	b25b      	sxtb	r3, r3
 8008454:	2b00      	cmp	r3, #0
 8008456:	da16      	bge.n	8008486 <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008458:	7bfb      	ldrb	r3, [r7, #15]
 800845a:	687a      	ldr	r2, [r7, #4]
 800845c:	211a      	movs	r1, #26
 800845e:	fb01 f303 	mul.w	r3, r1, r3
 8008462:	4413      	add	r3, r2
 8008464:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008468:	781a      	ldrb	r2, [r3, #0]
 800846a:	68bb      	ldr	r3, [r7, #8]
 800846c:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800846e:	7bfb      	ldrb	r3, [r7, #15]
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	211a      	movs	r1, #26
 8008474:	fb01 f303 	mul.w	r3, r1, r3
 8008478:	4413      	add	r3, r2
 800847a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800847e:	881a      	ldrh	r2, [r3, #0]
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	835a      	strh	r2, [r3, #26]
 8008484:	e015      	b.n	80084b2 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 8008486:	7bfb      	ldrb	r3, [r7, #15]
 8008488:	687a      	ldr	r2, [r7, #4]
 800848a:	211a      	movs	r1, #26
 800848c:	fb01 f303 	mul.w	r3, r1, r3
 8008490:	4413      	add	r3, r2
 8008492:	f203 3356 	addw	r3, r3, #854	@ 0x356
 8008496:	781a      	ldrb	r2, [r3, #0]
 8008498:	68bb      	ldr	r3, [r7, #8]
 800849a:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 800849c:	7bfb      	ldrb	r3, [r7, #15]
 800849e:	687a      	ldr	r2, [r7, #4]
 80084a0:	211a      	movs	r1, #26
 80084a2:	fb01 f303 	mul.w	r3, r1, r3
 80084a6:	4413      	add	r3, r2
 80084a8:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 80084ac:	881a      	ldrh	r2, [r3, #0]
 80084ae:	68bb      	ldr	r3, [r7, #8]
 80084b0:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80084b2:	68bb      	ldr	r3, [r7, #8]
 80084b4:	7b9b      	ldrb	r3, [r3, #14]
 80084b6:	4619      	mov	r1, r3
 80084b8:	6878      	ldr	r0, [r7, #4]
 80084ba:	f001 ff16 	bl	800a2ea <USBH_AllocPipe>
 80084be:	4603      	mov	r3, r0
 80084c0:	461a      	mov	r2, r3
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80084c6:	68bb      	ldr	r3, [r7, #8]
 80084c8:	7bdb      	ldrb	r3, [r3, #15]
 80084ca:	4619      	mov	r1, r3
 80084cc:	6878      	ldr	r0, [r7, #4]
 80084ce:	f001 ff0c 	bl	800a2ea <USBH_AllocPipe>
 80084d2:	4603      	mov	r3, r0
 80084d4:	461a      	mov	r2, r3
 80084d6:	68bb      	ldr	r3, [r7, #8]
 80084d8:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 80084da:	68bb      	ldr	r3, [r7, #8]
 80084dc:	7b59      	ldrb	r1, [r3, #13]
 80084de:	68bb      	ldr	r3, [r7, #8]
 80084e0:	7b98      	ldrb	r0, [r3, #14]
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 80084ee:	68ba      	ldr	r2, [r7, #8]
 80084f0:	8b12      	ldrh	r2, [r2, #24]
 80084f2:	9202      	str	r2, [sp, #8]
 80084f4:	2202      	movs	r2, #2
 80084f6:	9201      	str	r2, [sp, #4]
 80084f8:	9300      	str	r3, [sp, #0]
 80084fa:	4623      	mov	r3, r4
 80084fc:	4602      	mov	r2, r0
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 fec4 	bl	800a28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  (void)USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 8008504:	68bb      	ldr	r3, [r7, #8]
 8008506:	7b19      	ldrb	r1, [r3, #12]
 8008508:	68bb      	ldr	r3, [r7, #8]
 800850a:	7bd8      	ldrb	r0, [r3, #15]
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	f893 431c 	ldrb.w	r4, [r3, #796]	@ 0x31c
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	8b52      	ldrh	r2, [r2, #26]
 800851c:	9202      	str	r2, [sp, #8]
 800851e:	2202      	movs	r2, #2
 8008520:	9201      	str	r2, [sp, #4]
 8008522:	9300      	str	r3, [sp, #0]
 8008524:	4623      	mov	r3, r4
 8008526:	4602      	mov	r2, r0
 8008528:	6878      	ldr	r0, [r7, #4]
 800852a:	f001 feaf 	bl	800a28c <USBH_OpenPipe>
                      phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                      CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 800852e:	68bb      	ldr	r3, [r7, #8]
 8008530:	2200      	movs	r2, #0
 8008532:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 8008536:	68bb      	ldr	r3, [r7, #8]
 8008538:	7b5b      	ldrb	r3, [r3, #13]
 800853a:	2200      	movs	r2, #0
 800853c:	4619      	mov	r1, r3
 800853e:	6878      	ldr	r0, [r7, #4]
 8008540:	f002 f9ba 	bl	800a8b8 <USBH_LL_SetToggle>
  (void)USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	7b1b      	ldrb	r3, [r3, #12]
 8008548:	2200      	movs	r2, #0
 800854a:	4619      	mov	r1, r3
 800854c:	6878      	ldr	r0, [r7, #4]
 800854e:	f002 f9b3 	bl	800a8b8 <USBH_LL_SetToggle>

  return USBH_OK;
 8008552:	2300      	movs	r3, #0
}
 8008554:	4618      	mov	r0, r3
 8008556:	3714      	adds	r7, #20
 8008558:	46bd      	mov	sp, r7
 800855a:	bd90      	pop	{r4, r7, pc}

0800855c <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800856a:	69db      	ldr	r3, [r3, #28]
 800856c:	60fb      	str	r3, [r7, #12]

  if ((CDC_Handle->CommItf.NotifPipe) != 0U)
 800856e:	68fb      	ldr	r3, [r7, #12]
 8008570:	781b      	ldrb	r3, [r3, #0]
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00e      	beq.n	8008594 <USBH_CDC_InterfaceDeInit+0x38>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008576:	68fb      	ldr	r3, [r7, #12]
 8008578:	781b      	ldrb	r3, [r3, #0]
 800857a:	4619      	mov	r1, r3
 800857c:	6878      	ldr	r0, [r7, #4]
 800857e:	f001 fea4 	bl	800a2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 8008582:	68fb      	ldr	r3, [r7, #12]
 8008584:	781b      	ldrb	r3, [r3, #0]
 8008586:	4619      	mov	r1, r3
 8008588:	6878      	ldr	r0, [r7, #4]
 800858a:	f001 fecf 	bl	800a32c <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	2200      	movs	r2, #0
 8008592:	701a      	strb	r2, [r3, #0]
  }

  if ((CDC_Handle->DataItf.InPipe) != 0U)
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	7b1b      	ldrb	r3, [r3, #12]
 8008598:	2b00      	cmp	r3, #0
 800859a:	d00e      	beq.n	80085ba <USBH_CDC_InterfaceDeInit+0x5e>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	7b1b      	ldrb	r3, [r3, #12]
 80085a0:	4619      	mov	r1, r3
 80085a2:	6878      	ldr	r0, [r7, #4]
 80085a4:	f001 fe91 	bl	800a2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	7b1b      	ldrb	r3, [r3, #12]
 80085ac:	4619      	mov	r1, r3
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f001 febc 	bl	800a32c <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	2200      	movs	r2, #0
 80085b8:	731a      	strb	r2, [r3, #12]
  }

  if ((CDC_Handle->DataItf.OutPipe) != 0U)
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	7b5b      	ldrb	r3, [r3, #13]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d00e      	beq.n	80085e0 <USBH_CDC_InterfaceDeInit+0x84>
  {
    (void)USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085c2:	68fb      	ldr	r3, [r7, #12]
 80085c4:	7b5b      	ldrb	r3, [r3, #13]
 80085c6:	4619      	mov	r1, r3
 80085c8:	6878      	ldr	r0, [r7, #4]
 80085ca:	f001 fe7e 	bl	800a2ca <USBH_ClosePipe>
    (void)USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 80085ce:	68fb      	ldr	r3, [r7, #12]
 80085d0:	7b5b      	ldrb	r3, [r3, #13]
 80085d2:	4619      	mov	r1, r3
 80085d4:	6878      	ldr	r0, [r7, #4]
 80085d6:	f001 fea9 	bl	800a32c <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	2200      	movs	r2, #0
 80085de:	735a      	strb	r2, [r3, #13]
  }

  if ((phost->pActiveClass->pData) != NULL)
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085e6:	69db      	ldr	r3, [r3, #28]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d00b      	beq.n	8008604 <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 80085f2:	69db      	ldr	r3, [r3, #28]
 80085f4:	4618      	mov	r0, r3
 80085f6:	f002 f9ed 	bl	800a9d4 <free>
    phost->pActiveClass->pData = 0U;
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008600:	2200      	movs	r2, #0
 8008602:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 8008604:	2300      	movs	r3, #0
}
 8008606:	4618      	mov	r0, r3
 8008608:	3710      	adds	r7, #16
 800860a:	46bd      	mov	sp, r7
 800860c:	bd80      	pop	{r7, pc}

0800860e <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 800860e:	b580      	push	{r7, lr}
 8008610:	b084      	sub	sp, #16
 8008612:	af00      	add	r7, sp, #0
 8008614:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 800861c:	69db      	ldr	r3, [r3, #28]
 800861e:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	3340      	adds	r3, #64	@ 0x40
 8008624:	4619      	mov	r1, r3
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f000 f8b1 	bl	800878e <GetLineCoding>
 800862c:	4603      	mov	r3, r0
 800862e:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8008630:	7afb      	ldrb	r3, [r7, #11]
 8008632:	2b00      	cmp	r3, #0
 8008634:	d105      	bne.n	8008642 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800863c:	2102      	movs	r1, #2
 800863e:	6878      	ldr	r0, [r7, #4]
 8008640:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8008642:	7afb      	ldrb	r3, [r7, #11]
}
 8008644:	4618      	mov	r0, r3
 8008646:	3710      	adds	r7, #16
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b084      	sub	sp, #16
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 8008654:	2301      	movs	r3, #1
 8008656:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8008658:	2300      	movs	r3, #0
 800865a:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008662:	69db      	ldr	r3, [r3, #28]
 8008664:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 8008666:	68bb      	ldr	r3, [r7, #8]
 8008668:	f893 304c 	ldrb.w	r3, [r3, #76]	@ 0x4c
 800866c:	2b04      	cmp	r3, #4
 800866e:	d877      	bhi.n	8008760 <USBH_CDC_Process+0x114>
 8008670:	a201      	add	r2, pc, #4	@ (adr r2, 8008678 <USBH_CDC_Process+0x2c>)
 8008672:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008676:	bf00      	nop
 8008678:	0800868d 	.word	0x0800868d
 800867c:	08008693 	.word	0x08008693
 8008680:	080086c3 	.word	0x080086c3
 8008684:	08008737 	.word	0x08008737
 8008688:	08008745 	.word	0x08008745
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 800868c:	2300      	movs	r3, #0
 800868e:	73fb      	strb	r3, [r7, #15]
      break;
 8008690:	e06d      	b.n	800876e <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008696:	4619      	mov	r1, r3
 8008698:	6878      	ldr	r0, [r7, #4]
 800869a:	f000 f897 	bl	80087cc <SetLineCoding>
 800869e:	4603      	mov	r3, r0
 80086a0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086a2:	7bbb      	ldrb	r3, [r7, #14]
 80086a4:	2b00      	cmp	r3, #0
 80086a6:	d104      	bne.n	80086b2 <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80086a8:	68bb      	ldr	r3, [r7, #8]
 80086aa:	2202      	movs	r2, #2
 80086ac:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80086b0:	e058      	b.n	8008764 <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80086b2:	7bbb      	ldrb	r3, [r7, #14]
 80086b4:	2b01      	cmp	r3, #1
 80086b6:	d055      	beq.n	8008764 <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	2204      	movs	r2, #4
 80086bc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 80086c0:	e050      	b.n	8008764 <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80086c2:	68bb      	ldr	r3, [r7, #8]
 80086c4:	3340      	adds	r3, #64	@ 0x40
 80086c6:	4619      	mov	r1, r3
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 f860 	bl	800878e <GetLineCoding>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80086d2:	7bbb      	ldrb	r3, [r7, #14]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d126      	bne.n	8008726 <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 80086d8:	68bb      	ldr	r3, [r7, #8]
 80086da:	2200      	movs	r2, #0
 80086dc:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	f893 2044 	ldrb.w	r2, [r3, #68]	@ 0x44
 80086e6:	68bb      	ldr	r3, [r7, #8]
 80086e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086ea:	791b      	ldrb	r3, [r3, #4]
 80086ec:	429a      	cmp	r2, r3
 80086ee:	d13b      	bne.n	8008768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 80086f0:	68bb      	ldr	r3, [r7, #8]
 80086f2:	f893 2046 	ldrb.w	r2, [r3, #70]	@ 0x46
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80086fa:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 80086fc:	429a      	cmp	r2, r3
 80086fe:	d133      	bne.n	8008768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8008700:	68bb      	ldr	r3, [r7, #8]
 8008702:	f893 2045 	ldrb.w	r2, [r3, #69]	@ 0x45
 8008706:	68bb      	ldr	r3, [r7, #8]
 8008708:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800870a:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 800870c:	429a      	cmp	r2, r3
 800870e:	d12b      	bne.n	8008768 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8008710:	68bb      	ldr	r3, [r7, #8]
 8008712:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8008714:	68bb      	ldr	r3, [r7, #8]
 8008716:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008718:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 800871a:	429a      	cmp	r2, r3
 800871c:	d124      	bne.n	8008768 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f000 f958 	bl	80089d4 <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 8008724:	e020      	b.n	8008768 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 8008726:	7bbb      	ldrb	r3, [r7, #14]
 8008728:	2b01      	cmp	r3, #1
 800872a:	d01d      	beq.n	8008768 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 800872c:	68bb      	ldr	r3, [r7, #8]
 800872e:	2204      	movs	r2, #4
 8008730:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      break;
 8008734:	e018      	b.n	8008768 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 8008736:	6878      	ldr	r0, [r7, #4]
 8008738:	f000 f867 	bl	800880a <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 f8da 	bl	80088f6 <CDC_ProcessReception>
      break;
 8008742:	e014      	b.n	800876e <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 8008744:	2100      	movs	r1, #0
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f001 f81a 	bl	8009780 <USBH_ClrFeature>
 800874c:	4603      	mov	r3, r0
 800874e:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8008750:	7bbb      	ldrb	r3, [r7, #14]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d10a      	bne.n	800876c <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 8008756:	68bb      	ldr	r3, [r7, #8]
 8008758:	2200      	movs	r2, #0
 800875a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
      }
      break;
 800875e:	e005      	b.n	800876c <USBH_CDC_Process+0x120>

    default:
      break;
 8008760:	bf00      	nop
 8008762:	e004      	b.n	800876e <USBH_CDC_Process+0x122>
      break;
 8008764:	bf00      	nop
 8008766:	e002      	b.n	800876e <USBH_CDC_Process+0x122>
      break;
 8008768:	bf00      	nop
 800876a:	e000      	b.n	800876e <USBH_CDC_Process+0x122>
      break;
 800876c:	bf00      	nop

  }

  return status;
 800876e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008770:	4618      	mov	r0, r3
 8008772:	3710      	adds	r7, #16
 8008774:	46bd      	mov	sp, r7
 8008776:	bd80      	pop	{r7, pc}

08008778 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 8008780:	2300      	movs	r3, #0
}
 8008782:	4618      	mov	r0, r3
 8008784:	370c      	adds	r7, #12
 8008786:	46bd      	mov	sp, r7
 8008788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878c:	4770      	bx	lr

0800878e <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 800878e:	b580      	push	{r7, lr}
 8008790:	b082      	sub	sp, #8
 8008792:	af00      	add	r7, sp, #0
 8008794:	6078      	str	r0, [r7, #4]
 8008796:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	22a1      	movs	r2, #161	@ 0xa1
 800879c:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 800879e:	687b      	ldr	r3, [r7, #4]
 80087a0:	2221      	movs	r2, #33	@ 0x21
 80087a2:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	2200      	movs	r2, #0
 80087a8:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	2200      	movs	r2, #0
 80087ae:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	2207      	movs	r2, #7
 80087b4:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	2207      	movs	r2, #7
 80087ba:	4619      	mov	r1, r3
 80087bc:	6878      	ldr	r0, [r7, #4]
 80087be:	f001 fb14 	bl	8009dea <USBH_CtlReq>
 80087c2:	4603      	mov	r3, r0
}
 80087c4:	4618      	mov	r0, r3
 80087c6:	3708      	adds	r7, #8
 80087c8:	46bd      	mov	sp, r7
 80087ca:	bd80      	pop	{r7, pc}

080087cc <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b082      	sub	sp, #8
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2221      	movs	r2, #33	@ 0x21
 80087da:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	2220      	movs	r2, #32
 80087e0:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2200      	movs	r2, #0
 80087e6:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	2200      	movs	r2, #0
 80087ec:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	2207      	movs	r2, #7
 80087f2:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80087f4:	683b      	ldr	r3, [r7, #0]
 80087f6:	2207      	movs	r2, #7
 80087f8:	4619      	mov	r1, r3
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f001 faf5 	bl	8009dea <USBH_CtlReq>
 8008800:	4603      	mov	r3, r0
}
 8008802:	4618      	mov	r0, r3
 8008804:	3708      	adds	r7, #8
 8008806:	46bd      	mov	sp, r7
 8008808:	bd80      	pop	{r7, pc}

0800880a <CDC_ProcessTransmission>:
  * @brief  The function is responsible for sending data to the device
  *  @param  pdev: Selected device
  * @retval None
  */
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 800880a:	b580      	push	{r7, lr}
 800880c:	b086      	sub	sp, #24
 800880e:	af02      	add	r7, sp, #8
 8008810:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008818:	69db      	ldr	r3, [r3, #28]
 800881a:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 800881c:	2300      	movs	r3, #0
 800881e:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 304d 	ldrb.w	r3, [r3, #77]	@ 0x4d
 8008826:	2b01      	cmp	r3, #1
 8008828:	d002      	beq.n	8008830 <CDC_ProcessTransmission+0x26>
 800882a:	2b02      	cmp	r3, #2
 800882c:	d023      	beq.n	8008876 <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 800882e:	e05e      	b.n	80088ee <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008834:	68fa      	ldr	r2, [r7, #12]
 8008836:	8b12      	ldrh	r2, [r2, #24]
 8008838:	4293      	cmp	r3, r2
 800883a:	d90b      	bls.n	8008854 <CDC_ProcessTransmission+0x4a>
        (void)USBH_BulkSendData(phost,
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	69d9      	ldr	r1, [r3, #28]
 8008840:	68fb      	ldr	r3, [r7, #12]
 8008842:	8b1a      	ldrh	r2, [r3, #24]
 8008844:	68fb      	ldr	r3, [r7, #12]
 8008846:	7b5b      	ldrb	r3, [r3, #13]
 8008848:	2001      	movs	r0, #1
 800884a:	9000      	str	r0, [sp, #0]
 800884c:	6878      	ldr	r0, [r7, #4]
 800884e:	f001 fcda 	bl	800a206 <USBH_BulkSendData>
 8008852:	e00b      	b.n	800886c <CDC_ProcessTransmission+0x62>
        (void)USBH_BulkSendData(phost,
 8008854:	68fb      	ldr	r3, [r7, #12]
 8008856:	69d9      	ldr	r1, [r3, #28]
                                (uint16_t)CDC_Handle->TxDataLength,
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        (void)USBH_BulkSendData(phost,
 800885c:	b29a      	uxth	r2, r3
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	7b5b      	ldrb	r3, [r3, #13]
 8008862:	2001      	movs	r0, #1
 8008864:	9000      	str	r0, [sp, #0]
 8008866:	6878      	ldr	r0, [r7, #4]
 8008868:	f001 fccd 	bl	800a206 <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	2202      	movs	r2, #2
 8008870:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 8008874:	e03b      	b.n	80088ee <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	7b5b      	ldrb	r3, [r3, #13]
 800887a:	4619      	mov	r1, r3
 800887c:	6878      	ldr	r0, [r7, #4]
 800887e:	f001 fff1 	bl	800a864 <USBH_LL_GetURBState>
 8008882:	4603      	mov	r3, r0
 8008884:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8008886:	7afb      	ldrb	r3, [r7, #11]
 8008888:	2b01      	cmp	r3, #1
 800888a:	d128      	bne.n	80088de <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008890:	68fa      	ldr	r2, [r7, #12]
 8008892:	8b12      	ldrh	r2, [r2, #24]
 8008894:	4293      	cmp	r3, r2
 8008896:	d90e      	bls.n	80088b6 <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8008898:	68fb      	ldr	r3, [r7, #12]
 800889a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800889c:	68fa      	ldr	r2, [r7, #12]
 800889e:	8b12      	ldrh	r2, [r2, #24]
 80088a0:	1a9a      	subs	r2, r3, r2
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	625a      	str	r2, [r3, #36]	@ 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	69db      	ldr	r3, [r3, #28]
 80088aa:	68fa      	ldr	r2, [r7, #12]
 80088ac:	8b12      	ldrh	r2, [r2, #24]
 80088ae:	441a      	add	r2, r3
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	61da      	str	r2, [r3, #28]
 80088b4:	e002      	b.n	80088bc <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	2200      	movs	r2, #0
 80088ba:	625a      	str	r2, [r3, #36]	@ 0x24
        if (CDC_Handle->TxDataLength > 0U)
 80088bc:	68fb      	ldr	r3, [r7, #12]
 80088be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80088c0:	2b00      	cmp	r3, #0
 80088c2:	d004      	beq.n	80088ce <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	2201      	movs	r2, #1
 80088c8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088cc:	e00e      	b.n	80088ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 80088ce:	68fb      	ldr	r3, [r7, #12]
 80088d0:	2200      	movs	r2, #0
 80088d2:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
          USBH_CDC_TransmitCallback(phost);
 80088d6:	6878      	ldr	r0, [r7, #4]
 80088d8:	f000 f868 	bl	80089ac <USBH_CDC_TransmitCallback>
      break;
 80088dc:	e006      	b.n	80088ec <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 80088de:	7afb      	ldrb	r3, [r7, #11]
 80088e0:	2b02      	cmp	r3, #2
 80088e2:	d103      	bne.n	80088ec <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 80088e4:	68fb      	ldr	r3, [r7, #12]
 80088e6:	2201      	movs	r2, #1
 80088e8:	f883 204d 	strb.w	r2, [r3, #77]	@ 0x4d
      break;
 80088ec:	bf00      	nop
  }
}
 80088ee:	bf00      	nop
 80088f0:	3710      	adds	r7, #16
 80088f2:	46bd      	mov	sp, r7
 80088f4:	bd80      	pop	{r7, pc}

080088f6 <CDC_ProcessReception>:
  *  @param  pdev: Selected device
  * @retval None
  */

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 80088f6:	b580      	push	{r7, lr}
 80088f8:	b086      	sub	sp, #24
 80088fa:	af00      	add	r7, sp, #0
 80088fc:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008904:	69db      	ldr	r3, [r3, #28]
 8008906:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008908:	2300      	movs	r3, #0
 800890a:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 800890c:	697b      	ldr	r3, [r7, #20]
 800890e:	f893 304e 	ldrb.w	r3, [r3, #78]	@ 0x4e
 8008912:	2b03      	cmp	r3, #3
 8008914:	d002      	beq.n	800891c <CDC_ProcessReception+0x26>
 8008916:	2b04      	cmp	r3, #4
 8008918:	d00e      	beq.n	8008938 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 800891a:	e043      	b.n	80089a4 <CDC_ProcessReception+0xae>
      (void)USBH_BulkReceiveData(phost,
 800891c:	697b      	ldr	r3, [r7, #20]
 800891e:	6a19      	ldr	r1, [r3, #32]
 8008920:	697b      	ldr	r3, [r7, #20]
 8008922:	8b5a      	ldrh	r2, [r3, #26]
 8008924:	697b      	ldr	r3, [r7, #20]
 8008926:	7b1b      	ldrb	r3, [r3, #12]
 8008928:	6878      	ldr	r0, [r7, #4]
 800892a:	f001 fc91 	bl	800a250 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 800892e:	697b      	ldr	r3, [r7, #20]
 8008930:	2204      	movs	r2, #4
 8008932:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008936:	e035      	b.n	80089a4 <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8008938:	697b      	ldr	r3, [r7, #20]
 800893a:	7b1b      	ldrb	r3, [r3, #12]
 800893c:	4619      	mov	r1, r3
 800893e:	6878      	ldr	r0, [r7, #4]
 8008940:	f001 ff90 	bl	800a864 <USBH_LL_GetURBState>
 8008944:	4603      	mov	r3, r0
 8008946:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8008948:	7cfb      	ldrb	r3, [r7, #19]
 800894a:	2b01      	cmp	r3, #1
 800894c:	d129      	bne.n	80089a2 <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	7b1b      	ldrb	r3, [r3, #12]
 8008952:	4619      	mov	r1, r3
 8008954:	6878      	ldr	r0, [r7, #4]
 8008956:	f001 fef3 	bl	800a740 <USBH_LL_GetLastXferSize>
 800895a:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008960:	68fa      	ldr	r2, [r7, #12]
 8008962:	429a      	cmp	r2, r3
 8008964:	d016      	beq.n	8008994 <CDC_ProcessReception+0x9e>
 8008966:	697b      	ldr	r3, [r7, #20]
 8008968:	8b5b      	ldrh	r3, [r3, #26]
 800896a:	461a      	mov	r2, r3
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	4293      	cmp	r3, r2
 8008970:	d910      	bls.n	8008994 <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	1ad2      	subs	r2, r2, r3
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	629a      	str	r2, [r3, #40]	@ 0x28
          CDC_Handle->pRxData += length;
 800897e:	697b      	ldr	r3, [r7, #20]
 8008980:	6a1a      	ldr	r2, [r3, #32]
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	441a      	add	r2, r3
 8008986:	697b      	ldr	r3, [r7, #20]
 8008988:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 800898a:	697b      	ldr	r3, [r7, #20]
 800898c:	2203      	movs	r2, #3
 800898e:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
      break;
 8008992:	e006      	b.n	80089a2 <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8008994:	697b      	ldr	r3, [r7, #20]
 8008996:	2200      	movs	r2, #0
 8008998:	f883 204e 	strb.w	r2, [r3, #78]	@ 0x4e
          USBH_CDC_ReceiveCallback(phost);
 800899c:	6878      	ldr	r0, [r7, #4]
 800899e:	f000 f80f 	bl	80089c0 <USBH_CDC_ReceiveCallback>
      break;
 80089a2:	bf00      	nop
  }
}
 80089a4:	bf00      	nop
 80089a6:	3718      	adds	r7, #24
 80089a8:	46bd      	mov	sp, r7
 80089aa:	bd80      	pop	{r7, pc}

080089ac <USBH_CDC_TransmitCallback>:
  * @brief  The function informs user that data have been received
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 80089ac:	b480      	push	{r7}
 80089ae:	b083      	sub	sp, #12
 80089b0:	af00      	add	r7, sp, #0
 80089b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089b4:	bf00      	nop
 80089b6:	370c      	adds	r7, #12
 80089b8:	46bd      	mov	sp, r7
 80089ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089be:	4770      	bx	lr

080089c0 <USBH_CDC_ReceiveCallback>:
  * @brief  The function informs user that data have been sent
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b083      	sub	sp, #12
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089c8:	bf00      	nop
 80089ca:	370c      	adds	r7, #12
 80089cc:	46bd      	mov	sp, r7
 80089ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d2:	4770      	bx	lr

080089d4 <USBH_CDC_LineCodingChanged>:
  * @brief  The function informs user that Settings have been changed
  *  @param  pdev: Selected device
  * @retval None
  */
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 80089d4:	b480      	push	{r7}
 80089d6:	b083      	sub	sp, #12
 80089d8:	af00      	add	r7, sp, #0
 80089da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 80089dc:	bf00      	nop
 80089de:	370c      	adds	r7, #12
 80089e0:	46bd      	mov	sp, r7
 80089e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e6:	4770      	bx	lr

080089e8 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Init(USBH_HandleTypeDef *phost,
                             void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                                              uint8_t id), uint8_t id)
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	b084      	sub	sp, #16
 80089ec:	af00      	add	r7, sp, #0
 80089ee:	60f8      	str	r0, [r7, #12]
 80089f0:	60b9      	str	r1, [r7, #8]
 80089f2:	4613      	mov	r3, r2
 80089f4:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d101      	bne.n	8008a00 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 80089fc:	2302      	movs	r3, #2
 80089fe:	e029      	b.n	8008a54 <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	79fa      	ldrb	r2, [r7, #7]
 8008a04:	f883 23cc 	strb.w	r2, [r3, #972]	@ 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8008a08:	68fb      	ldr	r3, [r7, #12]
 8008a0a:	2200      	movs	r2, #0
 8008a0c:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
  phost->ClassNumber = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	2200      	movs	r2, #0
 8008a14:	f8c3 2380 	str.w	r2, [r3, #896]	@ 0x380

  /* Restore default states and prepare EP0 */
  (void)DeInitStateMachine(phost);
 8008a18:	68f8      	ldr	r0, [r7, #12]
 8008a1a:	f000 f81f 	bl	8008a5c <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2200      	movs	r2, #0
 8008a22:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
  phost->device.is_connected = 0U;
 8008a26:	68fb      	ldr	r3, [r7, #12]
 8008a28:	2200      	movs	r2, #0
 8008a2a:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	2200      	movs	r2, #0
 8008a32:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	2200      	movs	r2, #0
 8008a3a:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8008a3e:	68bb      	ldr	r3, [r7, #8]
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d003      	beq.n	8008a4c <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	68ba      	ldr	r2, [r7, #8]
 8008a48:	f8c3 23d4 	str.w	r2, [r3, #980]	@ 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  (void)USBH_LL_Init(phost);
 8008a4c:	68f8      	ldr	r0, [r7, #12]
 8008a4e:	f001 fdc3 	bl	800a5d8 <USBH_LL_Init>

  return USBH_OK;
 8008a52:	2300      	movs	r3, #0
}
 8008a54:	4618      	mov	r0, r3
 8008a56:	3710      	adds	r7, #16
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	bd80      	pop	{r7, pc}

08008a5c <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8008a64:	2300      	movs	r3, #0
 8008a66:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a68:	2300      	movs	r3, #0
 8008a6a:	60fb      	str	r3, [r7, #12]
 8008a6c:	e009      	b.n	8008a82 <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8008a6e:	687a      	ldr	r2, [r7, #4]
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	33e0      	adds	r3, #224	@ 0xe0
 8008a74:	009b      	lsls	r3, r3, #2
 8008a76:	4413      	add	r3, r2
 8008a78:	2200      	movs	r2, #0
 8008a7a:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	3301      	adds	r3, #1
 8008a80:	60fb      	str	r3, [r7, #12]
 8008a82:	68fb      	ldr	r3, [r7, #12]
 8008a84:	2b0f      	cmp	r3, #15
 8008a86:	d9f2      	bls.n	8008a6e <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]
 8008a8c:	e009      	b.n	8008aa2 <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8008a8e:	687a      	ldr	r2, [r7, #4]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	4413      	add	r3, r2
 8008a94:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008a98:	2200      	movs	r2, #0
 8008a9a:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	60fb      	str	r3, [r7, #12]
 8008aa2:	68fb      	ldr	r3, [r7, #12]
 8008aa4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008aa8:	d3f1      	bcc.n	8008a8e <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8008aaa:	687b      	ldr	r3, [r7, #4]
 8008aac:	2200      	movs	r2, #0
 8008aae:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	2200      	movs	r2, #0
 8008ab4:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	2201      	movs	r2, #1
 8008aba:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	2200      	movs	r2, #0
 8008ac0:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4

  phost->Control.state = CTRL_SETUP;
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	2201      	movs	r2, #1
 8008ac8:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2240      	movs	r2, #64	@ 0x40
 8008ace:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	2200      	movs	r2, #0
 8008ada:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
  phost->device.speed = (uint8_t)USBH_SPEED_FULL;
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	2201      	movs	r2, #1
 8008ae2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d
  phost->device.RstCnt = 0U;
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	2200      	movs	r2, #0
 8008aea:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
  phost->device.EnumCnt = 0U;
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	2200      	movs	r2, #0
 8008af2:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e

  /* Reset the device struct */
  USBH_memset(&phost->device.CfgDesc_Raw, 0, sizeof(phost->device.CfgDesc_Raw));
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	331c      	adds	r3, #28
 8008afa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8008afe:	2100      	movs	r1, #0
 8008b00:	4618      	mov	r0, r3
 8008b02:	f002 f81d 	bl	800ab40 <memset>
  USBH_memset(&phost->device.Data, 0, sizeof(phost->device.Data));
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 8008b0c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008b10:	2100      	movs	r1, #0
 8008b12:	4618      	mov	r0, r3
 8008b14:	f002 f814 	bl	800ab40 <memset>
  USBH_memset(&phost->device.DevDesc, 0, sizeof(phost->device.DevDesc));
 8008b18:	687b      	ldr	r3, [r7, #4]
 8008b1a:	f203 3326 	addw	r3, r3, #806	@ 0x326
 8008b1e:	2212      	movs	r2, #18
 8008b20:	2100      	movs	r1, #0
 8008b22:	4618      	mov	r0, r3
 8008b24:	f002 f80c 	bl	800ab40 <memset>
  USBH_memset(&phost->device.CfgDesc, 0, sizeof(phost->device.CfgDesc));
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008b2e:	223e      	movs	r2, #62	@ 0x3e
 8008b30:	2100      	movs	r1, #0
 8008b32:	4618      	mov	r0, r3
 8008b34:	f002 f804 	bl	800ab40 <memset>

  return USBH_OK;
 8008b38:	2300      	movs	r3, #0
}
 8008b3a:	4618      	mov	r0, r3
 8008b3c:	3710      	adds	r7, #16
 8008b3e:	46bd      	mov	sp, r7
 8008b40:	bd80      	pop	{r7, pc}

08008b42 <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8008b42:	b480      	push	{r7}
 8008b44:	b085      	sub	sp, #20
 8008b46:	af00      	add	r7, sp, #0
 8008b48:	6078      	str	r0, [r7, #4]
 8008b4a:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8008b4c:	2300      	movs	r3, #0
 8008b4e:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8008b50:	683b      	ldr	r3, [r7, #0]
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d016      	beq.n	8008b84 <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d10e      	bne.n	8008b7e <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008b66:	1c59      	adds	r1, r3, #1
 8008b68:	687a      	ldr	r2, [r7, #4]
 8008b6a:	f8c2 1380 	str.w	r1, [r2, #896]	@ 0x380
 8008b6e:	687a      	ldr	r2, [r7, #4]
 8008b70:	33de      	adds	r3, #222	@ 0xde
 8008b72:	6839      	ldr	r1, [r7, #0]
 8008b74:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	73fb      	strb	r3, [r7, #15]
 8008b7c:	e004      	b.n	8008b88 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8008b7e:	2302      	movs	r3, #2
 8008b80:	73fb      	strb	r3, [r7, #15]
 8008b82:	e001      	b.n	8008b88 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8008b84:	2302      	movs	r3, #2
 8008b86:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b8a:	4618      	mov	r0, r3
 8008b8c:	3714      	adds	r7, #20
 8008b8e:	46bd      	mov	sp, r7
 8008b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b94:	4770      	bx	lr

08008b96 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8008b96:	b480      	push	{r7}
 8008b98:	b085      	sub	sp, #20
 8008b9a:	af00      	add	r7, sp, #0
 8008b9c:	6078      	str	r0, [r7, #4]
 8008b9e:	460b      	mov	r3, r1
 8008ba0:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	f893 333c 	ldrb.w	r3, [r3, #828]	@ 0x33c
 8008bac:	78fa      	ldrb	r2, [r7, #3]
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	d204      	bcs.n	8008bbc <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	78fa      	ldrb	r2, [r7, #3]
 8008bb6:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324
 8008bba:	e001      	b.n	8008bc0 <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8008bbc:	2302      	movs	r3, #2
 8008bbe:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8008bc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	3714      	adds	r7, #20
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b087      	sub	sp, #28
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	4608      	mov	r0, r1
 8008bd8:	4611      	mov	r1, r2
 8008bda:	461a      	mov	r2, r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	70fb      	strb	r3, [r7, #3]
 8008be0:	460b      	mov	r3, r1
 8008be2:	70bb      	strb	r3, [r7, #2]
 8008be4:	4613      	mov	r3, r2
 8008be6:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)NULL;
 8008bec:	2300      	movs	r3, #0
 8008bee:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 8008bf6:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008bf8:	e025      	b.n	8008c46 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8008bfa:	7dfb      	ldrb	r3, [r7, #23]
 8008bfc:	221a      	movs	r2, #26
 8008bfe:	fb02 f303 	mul.w	r3, r2, r3
 8008c02:	3308      	adds	r3, #8
 8008c04:	68fa      	ldr	r2, [r7, #12]
 8008c06:	4413      	add	r3, r2
 8008c08:	3302      	adds	r3, #2
 8008c0a:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c0c:	693b      	ldr	r3, [r7, #16]
 8008c0e:	795b      	ldrb	r3, [r3, #5]
 8008c10:	78fa      	ldrb	r2, [r7, #3]
 8008c12:	429a      	cmp	r2, r3
 8008c14:	d002      	beq.n	8008c1c <USBH_FindInterface+0x4e>
 8008c16:	78fb      	ldrb	r3, [r7, #3]
 8008c18:	2bff      	cmp	r3, #255	@ 0xff
 8008c1a:	d111      	bne.n	8008c40 <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c1c:	693b      	ldr	r3, [r7, #16]
 8008c1e:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8008c20:	78ba      	ldrb	r2, [r7, #2]
 8008c22:	429a      	cmp	r2, r3
 8008c24:	d002      	beq.n	8008c2c <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c26:	78bb      	ldrb	r3, [r7, #2]
 8008c28:	2bff      	cmp	r3, #255	@ 0xff
 8008c2a:	d109      	bne.n	8008c40 <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c2c:	693b      	ldr	r3, [r7, #16]
 8008c2e:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8008c30:	787a      	ldrb	r2, [r7, #1]
 8008c32:	429a      	cmp	r2, r3
 8008c34:	d002      	beq.n	8008c3c <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8008c36:	787b      	ldrb	r3, [r7, #1]
 8008c38:	2bff      	cmp	r3, #255	@ 0xff
 8008c3a:	d101      	bne.n	8008c40 <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8008c3c:	7dfb      	ldrb	r3, [r7, #23]
 8008c3e:	e006      	b.n	8008c4e <USBH_FindInterface+0x80>
    }
    if_ix++;
 8008c40:	7dfb      	ldrb	r3, [r7, #23]
 8008c42:	3301      	adds	r3, #1
 8008c44:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	2b01      	cmp	r3, #1
 8008c4a:	d9d6      	bls.n	8008bfa <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8008c4c:	23ff      	movs	r3, #255	@ 0xff
}
 8008c4e:	4618      	mov	r0, r3
 8008c50:	371c      	adds	r7, #28
 8008c52:	46bd      	mov	sp, r7
 8008c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c58:	4770      	bx	lr

08008c5a <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Start(USBH_HandleTypeDef *phost)
{
 8008c5a:	b580      	push	{r7, lr}
 8008c5c:	b082      	sub	sp, #8
 8008c5e:	af00      	add	r7, sp, #0
 8008c60:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  (void)USBH_LL_Start(phost);
 8008c62:	6878      	ldr	r0, [r7, #4]
 8008c64:	f001 fcf4 	bl	800a650 <USBH_LL_Start>

  /* Activate VBUS on the port */
  (void)USBH_LL_DriverVBUS(phost, TRUE);
 8008c68:	2101      	movs	r1, #1
 8008c6a:	6878      	ldr	r0, [r7, #4]
 8008c6c:	f001 fe0d 	bl	800a88a <USBH_LL_DriverVBUS>

  return USBH_OK;
 8008c70:	2300      	movs	r3, #0
}
 8008c72:	4618      	mov	r0, r3
 8008c74:	3708      	adds	r7, #8
 8008c76:	46bd      	mov	sp, r7
 8008c78:	bd80      	pop	{r7, pc}
	...

08008c7c <USBH_Process>:
  *         Background process of the USB Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Process(USBH_HandleTypeDef *phost)
{
 8008c7c:	b580      	push	{r7, lr}
 8008c7e:	b088      	sub	sp, #32
 8008c80:	af04      	add	r7, sp, #16
 8008c82:	6078      	str	r0, [r7, #4]
  __IO USBH_StatusTypeDef status = USBH_FAIL;
 8008c84:	2302      	movs	r3, #2
 8008c86:	73bb      	strb	r3, [r7, #14]
  uint8_t idx = 0U;
 8008c88:	2300      	movs	r3, #0
 8008c8a:	73fb      	strb	r3, [r7, #15]

  /* check for Host pending port disconnect event */
  if (phost->device.is_disconnected == 1U)
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	f893 3321 	ldrb.w	r3, [r3, #801]	@ 0x321
 8008c92:	b2db      	uxtb	r3, r3
 8008c94:	2b01      	cmp	r3, #1
 8008c96:	d102      	bne.n	8008c9e <USBH_Process+0x22>
  {
    phost->gState = HOST_DEV_DISCONNECTED;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2203      	movs	r2, #3
 8008c9c:	701a      	strb	r2, [r3, #0]
  }

  switch (phost->gState)
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	781b      	ldrb	r3, [r3, #0]
 8008ca2:	b2db      	uxtb	r3, r3
 8008ca4:	2b0b      	cmp	r3, #11
 8008ca6:	f200 81bb 	bhi.w	8009020 <USBH_Process+0x3a4>
 8008caa:	a201      	add	r2, pc, #4	@ (adr r2, 8008cb0 <USBH_Process+0x34>)
 8008cac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008cb0:	08008ce1 	.word	0x08008ce1
 8008cb4:	08008d13 	.word	0x08008d13
 8008cb8:	08008d7b 	.word	0x08008d7b
 8008cbc:	08008fbb 	.word	0x08008fbb
 8008cc0:	08009021 	.word	0x08009021
 8008cc4:	08008e1b 	.word	0x08008e1b
 8008cc8:	08008f61 	.word	0x08008f61
 8008ccc:	08008e51 	.word	0x08008e51
 8008cd0:	08008e71 	.word	0x08008e71
 8008cd4:	08008e8f 	.word	0x08008e8f
 8008cd8:	08008ed3 	.word	0x08008ed3
 8008cdc:	08008fa3 	.word	0x08008fa3
  {
    case HOST_IDLE :

      if ((phost->device.is_connected) != 0U)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	f893 3320 	ldrb.w	r3, [r3, #800]	@ 0x320
 8008ce6:	b2db      	uxtb	r3, r3
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	f000 819b 	beq.w	8009024 <USBH_Process+0x3a8>
      {
        USBH_UsrLog("USB Device Connected");

        /* Wait for 200 ms after connection */
        phost->gState = HOST_DEV_WAIT_FOR_ATTACHMENT;
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2201      	movs	r2, #1
 8008cf2:	701a      	strb	r2, [r3, #0]
        USBH_Delay(200U);
 8008cf4:	20c8      	movs	r0, #200	@ 0xc8
 8008cf6:	f001 fe12 	bl	800a91e <USBH_Delay>
        (void)USBH_LL_ResetPort(phost);
 8008cfa:	6878      	ldr	r0, [r7, #4]
 8008cfc:	f001 fd05 	bl	800a70a <USBH_LL_ResetPort>

        /* Make sure to start with Default address */
        phost->device.address = USBH_ADDRESS_DEFAULT;
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2200      	movs	r2, #0
 8008d04:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c
        phost->Timeout = 0U;
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008d10:	e188      	b.n	8009024 <USBH_Process+0x3a8>

    case HOST_DEV_WAIT_FOR_ATTACHMENT: /* Wait for Port Enabled */

      if (phost->device.PortEnabled == 1U)
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	f893 3323 	ldrb.w	r3, [r3, #803]	@ 0x323
 8008d18:	2b01      	cmp	r3, #1
 8008d1a:	d107      	bne.n	8008d2c <USBH_Process+0xb0>
      {
        USBH_UsrLog("USB Device Reset Completed");
        phost->device.RstCnt = 0U;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2200      	movs	r2, #0
 8008d20:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
        phost->gState = HOST_DEV_ATTACHED;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2202      	movs	r2, #2
 8008d28:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008d2a:	e18a      	b.n	8009042 <USBH_Process+0x3c6>
        if (phost->Timeout > USBH_DEV_RESET_TIMEOUT)
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d32:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008d36:	d914      	bls.n	8008d62 <USBH_Process+0xe6>
          phost->device.RstCnt++;
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d3e:	3301      	adds	r3, #1
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	f883 231f 	strb.w	r2, [r3, #799]	@ 0x31f
          if (phost->device.RstCnt > 3U)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f893 331f 	ldrb.w	r3, [r3, #799]	@ 0x31f
 8008d4e:	2b03      	cmp	r3, #3
 8008d50:	d903      	bls.n	8008d5a <USBH_Process+0xde>
            phost->gState = HOST_ABORT_STATE;
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	220d      	movs	r2, #13
 8008d56:	701a      	strb	r2, [r3, #0]
      break;
 8008d58:	e173      	b.n	8009042 <USBH_Process+0x3c6>
            phost->gState = HOST_IDLE;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	2200      	movs	r2, #0
 8008d5e:	701a      	strb	r2, [r3, #0]
      break;
 8008d60:	e16f      	b.n	8009042 <USBH_Process+0x3c6>
          phost->Timeout += 10U;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	f8d3 33c8 	ldr.w	r3, [r3, #968]	@ 0x3c8
 8008d68:	f103 020a 	add.w	r2, r3, #10
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	f8c3 23c8 	str.w	r2, [r3, #968]	@ 0x3c8
          USBH_Delay(10U);
 8008d72:	200a      	movs	r0, #10
 8008d74:	f001 fdd3 	bl	800a91e <USBH_Delay>
      break;
 8008d78:	e163      	b.n	8009042 <USBH_Process+0x3c6>

    case HOST_DEV_ATTACHED :

      if (phost->pUser != NULL)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d005      	beq.n	8008d90 <USBH_Process+0x114>
      {
        phost->pUser(phost, HOST_USER_CONNECTION);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008d8a:	2104      	movs	r1, #4
 8008d8c:	6878      	ldr	r0, [r7, #4]
 8008d8e:	4798      	blx	r3
      }

      /* Wait for 100 ms after Reset */
      USBH_Delay(100U);
 8008d90:	2064      	movs	r0, #100	@ 0x64
 8008d92:	f001 fdc4 	bl	800a91e <USBH_Delay>

      phost->device.speed = (uint8_t)USBH_LL_GetSpeed(phost);
 8008d96:	6878      	ldr	r0, [r7, #4]
 8008d98:	f001 fc90 	bl	800a6bc <USBH_LL_GetSpeed>
 8008d9c:	4603      	mov	r3, r0
 8008d9e:	461a      	mov	r2, r3
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f883 231d 	strb.w	r2, [r3, #797]	@ 0x31d

      phost->gState = HOST_ENUMERATION;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	2205      	movs	r2, #5
 8008daa:	701a      	strb	r2, [r3, #0]

      phost->Control.pipe_out = USBH_AllocPipe(phost, 0x00U);
 8008dac:	2100      	movs	r1, #0
 8008dae:	6878      	ldr	r0, [r7, #4]
 8008db0:	f001 fa9b 	bl	800a2ea <USBH_AllocPipe>
 8008db4:	4603      	mov	r3, r0
 8008db6:	461a      	mov	r2, r3
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	715a      	strb	r2, [r3, #5]
      phost->Control.pipe_in  = USBH_AllocPipe(phost, 0x80U);
 8008dbc:	2180      	movs	r1, #128	@ 0x80
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f001 fa93 	bl	800a2ea <USBH_AllocPipe>
 8008dc4:	4603      	mov	r3, r0
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	711a      	strb	r2, [r3, #4]

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	7919      	ldrb	r1, [r3, #4]
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,
 8008de0:	9202      	str	r2, [sp, #8]
 8008de2:	2200      	movs	r2, #0
 8008de4:	9201      	str	r2, [sp, #4]
 8008de6:	9300      	str	r3, [sp, #0]
 8008de8:	4603      	mov	r3, r0
 8008dea:	2280      	movs	r2, #128	@ 0x80
 8008dec:	6878      	ldr	r0, [r7, #4]
 8008dee:	f001 fa4d 	bl	800a28c <USBH_OpenPipe>

      /* Open Control pipes */
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	7959      	ldrb	r1, [r3, #5]
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                          phost->device.address, phost->device.speed,
                          USBH_EP_CONTROL, (uint16_t)phost->Control.pipe_size);
 8008e02:	687a      	ldr	r2, [r7, #4]
 8008e04:	7992      	ldrb	r2, [r2, #6]
      (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U,
 8008e06:	9202      	str	r2, [sp, #8]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	9201      	str	r2, [sp, #4]
 8008e0c:	9300      	str	r3, [sp, #0]
 8008e0e:	4603      	mov	r3, r0
 8008e10:	2200      	movs	r2, #0
 8008e12:	6878      	ldr	r0, [r7, #4]
 8008e14:	f001 fa3a 	bl	800a28c <USBH_OpenPipe>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e18:	e113      	b.n	8009042 <USBH_Process+0x3c6>

    case HOST_ENUMERATION:
      /* Check for enumeration status */
      status = USBH_HandleEnum(phost);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f916 	bl	800904c <USBH_HandleEnum>
 8008e20:	4603      	mov	r3, r0
 8008e22:	73bb      	strb	r3, [r7, #14]
      if (status == USBH_OK)
 8008e24:	7bbb      	ldrb	r3, [r7, #14]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	f040 80fd 	bne.w	8009028 <USBH_Process+0x3ac>
      {
        /* The function shall return USBH_OK when full enumeration is complete */
        USBH_UsrLog("Enumeration done.");

        phost->device.current_interface = 0U;
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	2200      	movs	r2, #0
 8008e32:	f883 2324 	strb.w	r2, [r3, #804]	@ 0x324

        if (phost->device.DevDesc.bNumConfigurations == 1U)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	f893 3337 	ldrb.w	r3, [r3, #823]	@ 0x337
 8008e3c:	2b01      	cmp	r3, #1
 8008e3e:	d103      	bne.n	8008e48 <USBH_Process+0x1cc>
        {
          USBH_UsrLog("This device has only 1 configuration.");
          phost->gState = HOST_SET_CONFIGURATION;
 8008e40:	687b      	ldr	r3, [r7, #4]
 8008e42:	2208      	movs	r2, #8
 8008e44:	701a      	strb	r2, [r3, #0]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8008e46:	e0ef      	b.n	8009028 <USBH_Process+0x3ac>
          phost->gState = HOST_INPUT;
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2207      	movs	r2, #7
 8008e4c:	701a      	strb	r2, [r3, #0]
      break;
 8008e4e:	e0eb      	b.n	8009028 <USBH_Process+0x3ac>

    case HOST_INPUT:
    {
      /* user callback for end of device basic enumeration */
      if (phost->pUser != NULL)
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	f000 80e8 	beq.w	800902c <USBH_Process+0x3b0>
      {
        phost->pUser(phost, HOST_USER_SELECT_CONFIGURATION);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008e62:	2101      	movs	r1, #1
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	4798      	blx	r3
        phost->gState = HOST_SET_CONFIGURATION;
 8008e68:	687b      	ldr	r3, [r7, #4]
 8008e6a:	2208      	movs	r2, #8
 8008e6c:	701a      	strb	r2, [r3, #0]
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
    }
    break;
 8008e6e:	e0dd      	b.n	800902c <USBH_Process+0x3b0>

    case HOST_SET_CONFIGURATION:
      /* set configuration */
      if (USBH_SetCfg(phost, (uint16_t)phost->device.CfgDesc.bConfigurationValue) == USBH_OK)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 333d 	ldrb.w	r3, [r3, #829]	@ 0x33d
 8008e76:	4619      	mov	r1, r3
 8008e78:	6878      	ldr	r0, [r7, #4]
 8008e7a:	f000 fc3a 	bl	80096f2 <USBH_SetCfg>
 8008e7e:	4603      	mov	r3, r0
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	f040 80d5 	bne.w	8009030 <USBH_Process+0x3b4>
      {
        phost->gState = HOST_SET_WAKEUP_FEATURE;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	2209      	movs	r2, #9
 8008e8a:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008e8c:	e0d0      	b.n	8009030 <USBH_Process+0x3b4>

    case  HOST_SET_WAKEUP_FEATURE:

      if (((phost->device.CfgDesc.bmAttributes) & (1U << 5)) != 0U)
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	f893 333f 	ldrb.w	r3, [r3, #831]	@ 0x33f
 8008e94:	f003 0320 	and.w	r3, r3, #32
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d016      	beq.n	8008eca <USBH_Process+0x24e>
      {
        status = USBH_SetFeature(phost, FEATURE_SELECTOR_REMOTEWAKEUP);
 8008e9c:	2101      	movs	r1, #1
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 fc4a 	bl	8009738 <USBH_SetFeature>
 8008ea4:	4603      	mov	r3, r0
 8008ea6:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008ea8:	7bbb      	ldrb	r3, [r7, #14]
 8008eaa:	b2db      	uxtb	r3, r3
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d103      	bne.n	8008eb8 <USBH_Process+0x23c>
        {
          USBH_UsrLog("Device remote wakeup enabled");
          phost->gState = HOST_CHECK_CLASS;
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	220a      	movs	r2, #10
 8008eb4:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008eb6:	e0bd      	b.n	8009034 <USBH_Process+0x3b8>
        else if (status == USBH_NOT_SUPPORTED)
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	b2db      	uxtb	r3, r3
 8008ebc:	2b03      	cmp	r3, #3
 8008ebe:	f040 80b9 	bne.w	8009034 <USBH_Process+0x3b8>
          phost->gState = HOST_CHECK_CLASS;
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	220a      	movs	r2, #10
 8008ec6:	701a      	strb	r2, [r3, #0]
      break;
 8008ec8:	e0b4      	b.n	8009034 <USBH_Process+0x3b8>
        phost->gState = HOST_CHECK_CLASS;
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	220a      	movs	r2, #10
 8008ece:	701a      	strb	r2, [r3, #0]
      break;
 8008ed0:	e0b0      	b.n	8009034 <USBH_Process+0x3b8>

    case HOST_CHECK_CLASS:

      if (phost->ClassNumber == 0U)
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	f8d3 3380 	ldr.w	r3, [r3, #896]	@ 0x380
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	f000 80ad 	beq.w	8009038 <USBH_Process+0x3bc>
      {
        USBH_UsrLog("No Class has been registered.");
      }
      else
      {
        phost->pActiveClass = NULL;
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	2200      	movs	r2, #0
 8008ee2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c

        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008ee6:	2300      	movs	r3, #0
 8008ee8:	73fb      	strb	r3, [r7, #15]
 8008eea:	e016      	b.n	8008f1a <USBH_Process+0x29e>
        {
          if (phost->pClass[idx]->ClassCode == phost->device.CfgDesc.Itf_Desc[0].bInterfaceClass)
 8008eec:	7bfa      	ldrb	r2, [r7, #15]
 8008eee:	687b      	ldr	r3, [r7, #4]
 8008ef0:	32de      	adds	r2, #222	@ 0xde
 8008ef2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef6:	791a      	ldrb	r2, [r3, #4]
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	f893 3347 	ldrb.w	r3, [r3, #839]	@ 0x347
 8008efe:	429a      	cmp	r2, r3
 8008f00:	d108      	bne.n	8008f14 <USBH_Process+0x298>
          {
            phost->pActiveClass = phost->pClass[idx];
 8008f02:	7bfa      	ldrb	r2, [r7, #15]
 8008f04:	687b      	ldr	r3, [r7, #4]
 8008f06:	32de      	adds	r2, #222	@ 0xde
 8008f08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
            break;
 8008f12:	e005      	b.n	8008f20 <USBH_Process+0x2a4>
        for (idx = 0U; idx < USBH_MAX_NUM_SUPPORTED_CLASS; idx++)
 8008f14:	7bfb      	ldrb	r3, [r7, #15]
 8008f16:	3301      	adds	r3, #1
 8008f18:	73fb      	strb	r3, [r7, #15]
 8008f1a:	7bfb      	ldrb	r3, [r7, #15]
 8008f1c:	2b00      	cmp	r3, #0
 8008f1e:	d0e5      	beq.n	8008eec <USBH_Process+0x270>
          }
        }

        if (phost->pActiveClass != NULL)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d016      	beq.n	8008f58 <USBH_Process+0x2dc>
        {
          if (phost->pActiveClass->Init(phost) == USBH_OK)
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f30:	689b      	ldr	r3, [r3, #8]
 8008f32:	6878      	ldr	r0, [r7, #4]
 8008f34:	4798      	blx	r3
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d109      	bne.n	8008f50 <USBH_Process+0x2d4>
          {
            phost->gState = HOST_CLASS_REQUEST;
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	2206      	movs	r2, #6
 8008f40:	701a      	strb	r2, [r3, #0]
            USBH_UsrLog("%s class started.", phost->pActiveClass->Name);

            /* Inform user that a class has been activated */
            phost->pUser(phost, HOST_USER_CLASS_SELECTED);
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008f48:	2103      	movs	r1, #3
 8008f4a:	6878      	ldr	r0, [r7, #4]
 8008f4c:	4798      	blx	r3
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f4e:	e073      	b.n	8009038 <USBH_Process+0x3bc>
            phost->gState = HOST_ABORT_STATE;
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	220d      	movs	r2, #13
 8008f54:	701a      	strb	r2, [r3, #0]
      break;
 8008f56:	e06f      	b.n	8009038 <USBH_Process+0x3bc>
          phost->gState = HOST_ABORT_STATE;
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	220d      	movs	r2, #13
 8008f5c:	701a      	strb	r2, [r3, #0]
      break;
 8008f5e:	e06b      	b.n	8009038 <USBH_Process+0x3bc>

    case HOST_CLASS_REQUEST:
      /* process class standard control requests state machine */
      if (phost->pActiveClass != NULL)
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f66:	2b00      	cmp	r3, #0
 8008f68:	d017      	beq.n	8008f9a <USBH_Process+0x31e>
      {
        status = phost->pActiveClass->Requests(phost);
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008f70:	691b      	ldr	r3, [r3, #16]
 8008f72:	6878      	ldr	r0, [r7, #4]
 8008f74:	4798      	blx	r3
 8008f76:	4603      	mov	r3, r0
 8008f78:	73bb      	strb	r3, [r7, #14]

        if (status == USBH_OK)
 8008f7a:	7bbb      	ldrb	r3, [r7, #14]
 8008f7c:	b2db      	uxtb	r3, r3
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d103      	bne.n	8008f8a <USBH_Process+0x30e>
        {
          phost->gState = HOST_CLASS;
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	220b      	movs	r2, #11
 8008f86:	701a      	strb	r2, [r3, #0]
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8008f88:	e058      	b.n	800903c <USBH_Process+0x3c0>
        else if (status == USBH_FAIL)
 8008f8a:	7bbb      	ldrb	r3, [r7, #14]
 8008f8c:	b2db      	uxtb	r3, r3
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d154      	bne.n	800903c <USBH_Process+0x3c0>
          phost->gState = HOST_ABORT_STATE;
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	220d      	movs	r2, #13
 8008f96:	701a      	strb	r2, [r3, #0]
      break;
 8008f98:	e050      	b.n	800903c <USBH_Process+0x3c0>
        phost->gState = HOST_ABORT_STATE;
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	220d      	movs	r2, #13
 8008f9e:	701a      	strb	r2, [r3, #0]
      break;
 8008fa0:	e04c      	b.n	800903c <USBH_Process+0x3c0>

    case HOST_CLASS:
      /* process class state machine */
      if (phost->pActiveClass != NULL)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d049      	beq.n	8009040 <USBH_Process+0x3c4>
      {
        phost->pActiveClass->BgndProcess(phost);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fb2:	695b      	ldr	r3, [r3, #20]
 8008fb4:	6878      	ldr	r0, [r7, #4]
 8008fb6:	4798      	blx	r3
      }
      break;
 8008fb8:	e042      	b.n	8009040 <USBH_Process+0x3c4>

    case HOST_DEV_DISCONNECTED :
      phost->device.is_disconnected = 0U;
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2200      	movs	r2, #0
 8008fbe:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321

      (void)DeInitStateMachine(phost);
 8008fc2:	6878      	ldr	r0, [r7, #4]
 8008fc4:	f7ff fd4a 	bl	8008a5c <DeInitStateMachine>

      /* Re-Initilaize Host for new Enumeration */
      if (phost->pActiveClass != NULL)
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d009      	beq.n	8008fe6 <USBH_Process+0x36a>
      {
        phost->pActiveClass->DeInit(phost);
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8008fd8:	68db      	ldr	r3, [r3, #12]
 8008fda:	6878      	ldr	r0, [r7, #4]
 8008fdc:	4798      	blx	r3
        phost->pActiveClass = NULL;
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	f8c3 237c 	str.w	r2, [r3, #892]	@ 0x37c
      }

      if (phost->pUser != NULL)
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d005      	beq.n	8008ffc <USBH_Process+0x380>
      {
        phost->pUser(phost, HOST_USER_DISCONNECTION);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 8008ff6:	2105      	movs	r1, #5
 8008ff8:	6878      	ldr	r0, [r7, #4]
 8008ffa:	4798      	blx	r3
      }
      USBH_UsrLog("USB Device disconnected");

      if (phost->device.is_ReEnumerated == 1U)
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f893 3322 	ldrb.w	r3, [r3, #802]	@ 0x322
 8009002:	b2db      	uxtb	r3, r3
 8009004:	2b01      	cmp	r3, #1
 8009006:	d107      	bne.n	8009018 <USBH_Process+0x39c>
      {
        phost->device.is_ReEnumerated = 0U;
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	2200      	movs	r2, #0
 800900c:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322

        /* Start the host and re-enable Vbus */
        (void)USBH_Start(phost);
 8009010:	6878      	ldr	r0, [r7, #4]
 8009012:	f7ff fe22 	bl	8008c5a <USBH_Start>
      (void)osMessagePut(phost->os_event, phost->os_msg, 0U);
#else
      (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      break;
 8009016:	e014      	b.n	8009042 <USBH_Process+0x3c6>
        (void)USBH_LL_Start(phost);
 8009018:	6878      	ldr	r0, [r7, #4]
 800901a:	f001 fb19 	bl	800a650 <USBH_LL_Start>
      break;
 800901e:	e010      	b.n	8009042 <USBH_Process+0x3c6>

    case HOST_ABORT_STATE:
    default :
      break;
 8009020:	bf00      	nop
 8009022:	e00e      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009024:	bf00      	nop
 8009026:	e00c      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009028:	bf00      	nop
 800902a:	e00a      	b.n	8009042 <USBH_Process+0x3c6>
    break;
 800902c:	bf00      	nop
 800902e:	e008      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009030:	bf00      	nop
 8009032:	e006      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009034:	bf00      	nop
 8009036:	e004      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009038:	bf00      	nop
 800903a:	e002      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 800903c:	bf00      	nop
 800903e:	e000      	b.n	8009042 <USBH_Process+0x3c6>
      break;
 8009040:	bf00      	nop
  }
  return USBH_OK;
 8009042:	2300      	movs	r3, #0
}
 8009044:	4618      	mov	r0, r3
 8009046:	3710      	adds	r7, #16
 8009048:	46bd      	mov	sp, r7
 800904a:	bd80      	pop	{r7, pc}

0800904c <USBH_HandleEnum>:
  *         This function includes the complete enumeration process
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
static USBH_StatusTypeDef USBH_HandleEnum(USBH_HandleTypeDef *phost)
{
 800904c:	b580      	push	{r7, lr}
 800904e:	b088      	sub	sp, #32
 8009050:	af04      	add	r7, sp, #16
 8009052:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef Status = USBH_BUSY;
 8009054:	2301      	movs	r3, #1
 8009056:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef ReqStatus = USBH_BUSY;
 8009058:	2301      	movs	r3, #1
 800905a:	73bb      	strb	r3, [r7, #14]

  switch (phost->EnumState)
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	785b      	ldrb	r3, [r3, #1]
 8009060:	2b07      	cmp	r3, #7
 8009062:	f200 81bd 	bhi.w	80093e0 <USBH_HandleEnum+0x394>
 8009066:	a201      	add	r2, pc, #4	@ (adr r2, 800906c <USBH_HandleEnum+0x20>)
 8009068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800906c:	0800908d 	.word	0x0800908d
 8009070:	08009147 	.word	0x08009147
 8009074:	080091b1 	.word	0x080091b1
 8009078:	0800923b 	.word	0x0800923b
 800907c:	080092a5 	.word	0x080092a5
 8009080:	08009315 	.word	0x08009315
 8009084:	0800935b 	.word	0x0800935b
 8009088:	080093a1 	.word	0x080093a1
  {
    case ENUM_IDLE:
      /* Get Device Desc for only 1st 8 bytes : To get EP0 MaxPacketSize */
      ReqStatus = USBH_Get_DevDesc(phost, 8U);
 800908c:	2108      	movs	r1, #8
 800908e:	6878      	ldr	r0, [r7, #4]
 8009090:	f000 fa4c 	bl	800952c <USBH_Get_DevDesc>
 8009094:	4603      	mov	r3, r0
 8009096:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009098:	7bbb      	ldrb	r3, [r7, #14]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d12e      	bne.n	80090fc <USBH_HandleEnum+0xb0>
      {
        phost->Control.pipe_size = phost->device.DevDesc.bMaxPacketSize;
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	f893 232d 	ldrb.w	r2, [r3, #813]	@ 0x32d
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	719a      	strb	r2, [r3, #6]

        phost->EnumState = ENUM_GET_FULL_DEV_DESC;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	2201      	movs	r2, #1
 80090ac:	705a      	strb	r2, [r3, #1]

        /* modify control channels configuration for MaxPacket size */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	7919      	ldrb	r1, [r3, #4]
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090be:	687a      	ldr	r2, [r7, #4]
 80090c0:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U, phost->device.address,
 80090c2:	9202      	str	r2, [sp, #8]
 80090c4:	2200      	movs	r2, #0
 80090c6:	9201      	str	r2, [sp, #4]
 80090c8:	9300      	str	r3, [sp, #0]
 80090ca:	4603      	mov	r3, r0
 80090cc:	2280      	movs	r2, #128	@ 0x80
 80090ce:	6878      	ldr	r0, [r7, #4]
 80090d0:	f001 f8dc 	bl	800a28c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090d4:	687b      	ldr	r3, [r7, #4]
 80090d6:	7959      	ldrb	r1, [r3, #5]
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80090e4:	687a      	ldr	r2, [r7, #4]
 80090e6:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80090e8:	9202      	str	r2, [sp, #8]
 80090ea:	2200      	movs	r2, #0
 80090ec:	9201      	str	r2, [sp, #4]
 80090ee:	9300      	str	r3, [sp, #0]
 80090f0:	4603      	mov	r3, r0
 80090f2:	2200      	movs	r2, #0
 80090f4:	6878      	ldr	r0, [r7, #4]
 80090f6:	f001 f8c9 	bl	800a28c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 80090fa:	e173      	b.n	80093e4 <USBH_HandleEnum+0x398>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80090fc:	7bbb      	ldrb	r3, [r7, #14]
 80090fe:	2b03      	cmp	r3, #3
 8009100:	f040 8170 	bne.w	80093e4 <USBH_HandleEnum+0x398>
        phost->device.EnumCnt++;
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800910a:	3301      	adds	r3, #1
 800910c:	b2da      	uxtb	r2, r3
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009114:	687b      	ldr	r3, [r7, #4]
 8009116:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800911a:	2b03      	cmp	r3, #3
 800911c:	d903      	bls.n	8009126 <USBH_HandleEnum+0xda>
          phost->gState = HOST_ABORT_STATE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	220d      	movs	r2, #13
 8009122:	701a      	strb	r2, [r3, #0]
      break;
 8009124:	e15e      	b.n	80093e4 <USBH_HandleEnum+0x398>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	795b      	ldrb	r3, [r3, #5]
 800912a:	4619      	mov	r1, r3
 800912c:	6878      	ldr	r0, [r7, #4]
 800912e:	f001 f8fd 	bl	800a32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	791b      	ldrb	r3, [r3, #4]
 8009136:	4619      	mov	r1, r3
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f001 f8f7 	bl	800a32c <USBH_FreePipe>
          phost->gState = HOST_IDLE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	701a      	strb	r2, [r3, #0]
      break;
 8009144:	e14e      	b.n	80093e4 <USBH_HandleEnum+0x398>

    case ENUM_GET_FULL_DEV_DESC:
      /* Get FULL Device Desc  */
      ReqStatus = USBH_Get_DevDesc(phost, USB_DEVICE_DESC_SIZE);
 8009146:	2112      	movs	r1, #18
 8009148:	6878      	ldr	r0, [r7, #4]
 800914a:	f000 f9ef 	bl	800952c <USBH_Get_DevDesc>
 800914e:	4603      	mov	r3, r0
 8009150:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009152:	7bbb      	ldrb	r3, [r7, #14]
 8009154:	2b00      	cmp	r3, #0
 8009156:	d103      	bne.n	8009160 <USBH_HandleEnum+0x114>
      {
        USBH_UsrLog("PID: %xh", phost->device.DevDesc.idProduct);
        USBH_UsrLog("VID: %xh", phost->device.DevDesc.idVendor);

        phost->EnumState = ENUM_SET_ADDR;
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	2202      	movs	r2, #2
 800915c:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 800915e:	e143      	b.n	80093e8 <USBH_HandleEnum+0x39c>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009160:	7bbb      	ldrb	r3, [r7, #14]
 8009162:	2b03      	cmp	r3, #3
 8009164:	f040 8140 	bne.w	80093e8 <USBH_HandleEnum+0x39c>
        phost->device.EnumCnt++;
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800916e:	3301      	adds	r3, #1
 8009170:	b2da      	uxtb	r2, r3
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 800917e:	2b03      	cmp	r3, #3
 8009180:	d903      	bls.n	800918a <USBH_HandleEnum+0x13e>
          phost->gState = HOST_ABORT_STATE;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	220d      	movs	r2, #13
 8009186:	701a      	strb	r2, [r3, #0]
      break;
 8009188:	e12e      	b.n	80093e8 <USBH_HandleEnum+0x39c>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	795b      	ldrb	r3, [r3, #5]
 800918e:	4619      	mov	r1, r3
 8009190:	6878      	ldr	r0, [r7, #4]
 8009192:	f001 f8cb 	bl	800a32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 8009196:	687b      	ldr	r3, [r7, #4]
 8009198:	791b      	ldrb	r3, [r3, #4]
 800919a:	4619      	mov	r1, r3
 800919c:	6878      	ldr	r0, [r7, #4]
 800919e:	f001 f8c5 	bl	800a32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	2200      	movs	r2, #0
 80091a6:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2200      	movs	r2, #0
 80091ac:	701a      	strb	r2, [r3, #0]
      break;
 80091ae:	e11b      	b.n	80093e8 <USBH_HandleEnum+0x39c>

    case ENUM_SET_ADDR:
      /* set address */
      ReqStatus = USBH_SetAddress(phost, USBH_DEVICE_ADDRESS);
 80091b0:	2101      	movs	r1, #1
 80091b2:	6878      	ldr	r0, [r7, #4]
 80091b4:	f000 fa79 	bl	80096aa <USBH_SetAddress>
 80091b8:	4603      	mov	r3, r0
 80091ba:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80091bc:	7bbb      	ldrb	r3, [r7, #14]
 80091be:	2b00      	cmp	r3, #0
 80091c0:	d130      	bne.n	8009224 <USBH_HandleEnum+0x1d8>
      {
        USBH_Delay(2U);
 80091c2:	2002      	movs	r0, #2
 80091c4:	f001 fbab 	bl	800a91e <USBH_Delay>
        phost->device.address = USBH_DEVICE_ADDRESS;
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	2201      	movs	r2, #1
 80091cc:	f883 231c 	strb.w	r2, [r3, #796]	@ 0x31c

        /* user callback for device address assigned */
        USBH_UsrLog("Address (#%d) assigned.", phost->device.address);
        phost->EnumState = ENUM_GET_CFG_DESC;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	2203      	movs	r2, #3
 80091d4:	705a      	strb	r2, [r3, #1]

        /* modify control channels to update device address */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	7919      	ldrb	r1, [r3, #4]
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 80091e6:	687a      	ldr	r2, [r7, #4]
 80091e8:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_in, 0x80U,  phost->device.address,
 80091ea:	9202      	str	r2, [sp, #8]
 80091ec:	2200      	movs	r2, #0
 80091ee:	9201      	str	r2, [sp, #4]
 80091f0:	9300      	str	r3, [sp, #0]
 80091f2:	4603      	mov	r3, r0
 80091f4:	2280      	movs	r2, #128	@ 0x80
 80091f6:	6878      	ldr	r0, [r7, #4]
 80091f8:	f001 f848 	bl	800a28c <USBH_OpenPipe>

        /* Open Control pipes */
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	7959      	ldrb	r1, [r3, #5]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	f893 031c 	ldrb.w	r0, [r3, #796]	@ 0x31c
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
                            phost->device.speed, USBH_EP_CONTROL,
                            (uint16_t)phost->Control.pipe_size);
 800920c:	687a      	ldr	r2, [r7, #4]
 800920e:	7992      	ldrb	r2, [r2, #6]
        (void)USBH_OpenPipe(phost, phost->Control.pipe_out, 0x00U, phost->device.address,
 8009210:	9202      	str	r2, [sp, #8]
 8009212:	2200      	movs	r2, #0
 8009214:	9201      	str	r2, [sp, #4]
 8009216:	9300      	str	r3, [sp, #0]
 8009218:	4603      	mov	r3, r0
 800921a:	2200      	movs	r2, #0
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f001 f835 	bl	800a28c <USBH_OpenPipe>
      }
      else
      {
        /* .. */
      }
      break;
 8009222:	e0e3      	b.n	80093ec <USBH_HandleEnum+0x3a0>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009224:	7bbb      	ldrb	r3, [r7, #14]
 8009226:	2b03      	cmp	r3, #3
 8009228:	f040 80e0 	bne.w	80093ec <USBH_HandleEnum+0x3a0>
        phost->gState = HOST_ABORT_STATE;
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	220d      	movs	r2, #13
 8009230:	701a      	strb	r2, [r3, #0]
        phost->EnumState = ENUM_IDLE;
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	2200      	movs	r2, #0
 8009236:	705a      	strb	r2, [r3, #1]
      break;
 8009238:	e0d8      	b.n	80093ec <USBH_HandleEnum+0x3a0>

    case ENUM_GET_CFG_DESC:
      /* get standard configuration descriptor */
      ReqStatus = USBH_Get_CfgDesc(phost, USB_CONFIGURATION_DESC_SIZE);
 800923a:	2109      	movs	r1, #9
 800923c:	6878      	ldr	r0, [r7, #4]
 800923e:	f000 f9a1 	bl	8009584 <USBH_Get_CfgDesc>
 8009242:	4603      	mov	r3, r0
 8009244:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 8009246:	7bbb      	ldrb	r3, [r7, #14]
 8009248:	2b00      	cmp	r3, #0
 800924a:	d103      	bne.n	8009254 <USBH_HandleEnum+0x208>
      {
        phost->EnumState = ENUM_GET_FULL_CFG_DESC;
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	2204      	movs	r2, #4
 8009250:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 8009252:	e0cd      	b.n	80093f0 <USBH_HandleEnum+0x3a4>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009254:	7bbb      	ldrb	r3, [r7, #14]
 8009256:	2b03      	cmp	r3, #3
 8009258:	f040 80ca 	bne.w	80093f0 <USBH_HandleEnum+0x3a4>
        phost->device.EnumCnt++;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009262:	3301      	adds	r3, #1
 8009264:	b2da      	uxtb	r2, r3
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 8009272:	2b03      	cmp	r3, #3
 8009274:	d903      	bls.n	800927e <USBH_HandleEnum+0x232>
          phost->gState = HOST_ABORT_STATE;
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	220d      	movs	r2, #13
 800927a:	701a      	strb	r2, [r3, #0]
      break;
 800927c:	e0b8      	b.n	80093f0 <USBH_HandleEnum+0x3a4>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	795b      	ldrb	r3, [r3, #5]
 8009282:	4619      	mov	r1, r3
 8009284:	6878      	ldr	r0, [r7, #4]
 8009286:	f001 f851 	bl	800a32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	791b      	ldrb	r3, [r3, #4]
 800928e:	4619      	mov	r1, r3
 8009290:	6878      	ldr	r0, [r7, #4]
 8009292:	f001 f84b 	bl	800a32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	2200      	movs	r2, #0
 800929a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	2200      	movs	r2, #0
 80092a0:	701a      	strb	r2, [r3, #0]
      break;
 80092a2:	e0a5      	b.n	80093f0 <USBH_HandleEnum+0x3a4>

    case ENUM_GET_FULL_CFG_DESC:
      /* get FULL config descriptor (config, interface, endpoints) */
      ReqStatus = USBH_Get_CfgDesc(phost, phost->device.CfgDesc.wTotalLength);
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	f8b3 333a 	ldrh.w	r3, [r3, #826]	@ 0x33a
 80092aa:	4619      	mov	r1, r3
 80092ac:	6878      	ldr	r0, [r7, #4]
 80092ae:	f000 f969 	bl	8009584 <USBH_Get_CfgDesc>
 80092b2:	4603      	mov	r3, r0
 80092b4:	73bb      	strb	r3, [r7, #14]
      if (ReqStatus == USBH_OK)
 80092b6:	7bbb      	ldrb	r3, [r7, #14]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d103      	bne.n	80092c4 <USBH_HandleEnum+0x278>
      {
        phost->EnumState = ENUM_GET_MFC_STRING_DESC;
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	2205      	movs	r2, #5
 80092c0:	705a      	strb	r2, [r3, #1]
      }
      else
      {
        /* .. */
      }
      break;
 80092c2:	e097      	b.n	80093f4 <USBH_HandleEnum+0x3a8>
      else if (ReqStatus == USBH_NOT_SUPPORTED)
 80092c4:	7bbb      	ldrb	r3, [r7, #14]
 80092c6:	2b03      	cmp	r3, #3
 80092c8:	f040 8094 	bne.w	80093f4 <USBH_HandleEnum+0x3a8>
        phost->device.EnumCnt++;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092d2:	3301      	adds	r3, #1
 80092d4:	b2da      	uxtb	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f883 231e 	strb.w	r2, [r3, #798]	@ 0x31e
        if (phost->device.EnumCnt > 3U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f893 331e 	ldrb.w	r3, [r3, #798]	@ 0x31e
 80092e2:	2b03      	cmp	r3, #3
 80092e4:	d903      	bls.n	80092ee <USBH_HandleEnum+0x2a2>
          phost->gState = HOST_ABORT_STATE;
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	220d      	movs	r2, #13
 80092ea:	701a      	strb	r2, [r3, #0]
      break;
 80092ec:	e082      	b.n	80093f4 <USBH_HandleEnum+0x3a8>
          (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	795b      	ldrb	r3, [r3, #5]
 80092f2:	4619      	mov	r1, r3
 80092f4:	6878      	ldr	r0, [r7, #4]
 80092f6:	f001 f819 	bl	800a32c <USBH_FreePipe>
          (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 80092fa:	687b      	ldr	r3, [r7, #4]
 80092fc:	791b      	ldrb	r3, [r3, #4]
 80092fe:	4619      	mov	r1, r3
 8009300:	6878      	ldr	r0, [r7, #4]
 8009302:	f001 f813 	bl	800a32c <USBH_FreePipe>
          phost->EnumState = ENUM_IDLE;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	2200      	movs	r2, #0
 800930a:	705a      	strb	r2, [r3, #1]
          phost->gState = HOST_IDLE;
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2200      	movs	r2, #0
 8009310:	701a      	strb	r2, [r3, #0]
      break;
 8009312:	e06f      	b.n	80093f4 <USBH_HandleEnum+0x3a8>

    case ENUM_GET_MFC_STRING_DESC:
      if (phost->device.DevDesc.iManufacturer != 0U)
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	f893 3334 	ldrb.w	r3, [r3, #820]	@ 0x334
 800931a:	2b00      	cmp	r3, #0
 800931c:	d019      	beq.n	8009352 <USBH_HandleEnum+0x306>
      {
        /* Check that Manufacturer String is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	f893 1334 	ldrb.w	r1, [r3, #820]	@ 0x334
                                        phost->device.Data, 0xFFU);
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iManufacturer,
 800932a:	23ff      	movs	r3, #255	@ 0xff
 800932c:	6878      	ldr	r0, [r7, #4]
 800932e:	f000 f953 	bl	80095d8 <USBH_Get_StringDesc>
 8009332:	4603      	mov	r3, r0
 8009334:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 8009336:	7bbb      	ldrb	r3, [r7, #14]
 8009338:	2b00      	cmp	r3, #0
 800933a:	d103      	bne.n	8009344 <USBH_HandleEnum+0x2f8>
        {
          /* User callback for Manufacturing string */
          USBH_UsrLog("Manufacturer : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	2206      	movs	r2, #6
 8009340:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009342:	e059      	b.n	80093f8 <USBH_HandleEnum+0x3ac>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 8009344:	7bbb      	ldrb	r3, [r7, #14]
 8009346:	2b03      	cmp	r3, #3
 8009348:	d156      	bne.n	80093f8 <USBH_HandleEnum+0x3ac>
          phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2206      	movs	r2, #6
 800934e:	705a      	strb	r2, [r3, #1]
      break;
 8009350:	e052      	b.n	80093f8 <USBH_HandleEnum+0x3ac>
        phost->EnumState = ENUM_GET_PRODUCT_STRING_DESC;
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	2206      	movs	r2, #6
 8009356:	705a      	strb	r2, [r3, #1]
      break;
 8009358:	e04e      	b.n	80093f8 <USBH_HandleEnum+0x3ac>

    case ENUM_GET_PRODUCT_STRING_DESC:
      if (phost->device.DevDesc.iProduct != 0U)
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	f893 3335 	ldrb.w	r3, [r3, #821]	@ 0x335
 8009360:	2b00      	cmp	r3, #0
 8009362:	d019      	beq.n	8009398 <USBH_HandleEnum+0x34c>
      {
        /* Check that Product string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	f893 1335 	ldrb.w	r1, [r3, #821]	@ 0x335
                                        phost->device.Data, 0xFFU);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iProduct,
 8009370:	23ff      	movs	r3, #255	@ 0xff
 8009372:	6878      	ldr	r0, [r7, #4]
 8009374:	f000 f930 	bl	80095d8 <USBH_Get_StringDesc>
 8009378:	4603      	mov	r3, r0
 800937a:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 800937c:	7bbb      	ldrb	r3, [r7, #14]
 800937e:	2b00      	cmp	r3, #0
 8009380:	d103      	bne.n	800938a <USBH_HandleEnum+0x33e>
        {
          /* User callback for Product string */
          USBH_UsrLog("Product : %s", (char *)(void *)phost->device.Data);
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	2207      	movs	r2, #7
 8009386:	705a      	strb	r2, [r3, #1]
#else
        (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
      }
      break;
 8009388:	e038      	b.n	80093fc <USBH_HandleEnum+0x3b0>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 800938a:	7bbb      	ldrb	r3, [r7, #14]
 800938c:	2b03      	cmp	r3, #3
 800938e:	d135      	bne.n	80093fc <USBH_HandleEnum+0x3b0>
          phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009390:	687b      	ldr	r3, [r7, #4]
 8009392:	2207      	movs	r2, #7
 8009394:	705a      	strb	r2, [r3, #1]
      break;
 8009396:	e031      	b.n	80093fc <USBH_HandleEnum+0x3b0>
        phost->EnumState = ENUM_GET_SERIALNUM_STRING_DESC;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	2207      	movs	r2, #7
 800939c:	705a      	strb	r2, [r3, #1]
      break;
 800939e:	e02d      	b.n	80093fc <USBH_HandleEnum+0x3b0>

    case ENUM_GET_SERIALNUM_STRING_DESC:
      if (phost->device.DevDesc.iSerialNumber != 0U)
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f893 3336 	ldrb.w	r3, [r3, #822]	@ 0x336
 80093a6:	2b00      	cmp	r3, #0
 80093a8:	d017      	beq.n	80093da <USBH_HandleEnum+0x38e>
      {
        /* Check that Serial number string is available */
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f893 1336 	ldrb.w	r1, [r3, #822]	@ 0x336
                                        phost->device.Data, 0xFFU);
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
        ReqStatus = USBH_Get_StringDesc(phost, phost->device.DevDesc.iSerialNumber,
 80093b6:	23ff      	movs	r3, #255	@ 0xff
 80093b8:	6878      	ldr	r0, [r7, #4]
 80093ba:	f000 f90d 	bl	80095d8 <USBH_Get_StringDesc>
 80093be:	4603      	mov	r3, r0
 80093c0:	73bb      	strb	r3, [r7, #14]
        if (ReqStatus == USBH_OK)
 80093c2:	7bbb      	ldrb	r3, [r7, #14]
 80093c4:	2b00      	cmp	r3, #0
 80093c6:	d102      	bne.n	80093ce <USBH_HandleEnum+0x382>
        {
          /* User callback for Serial number string */
          USBH_UsrLog("Serial Number : %s", (char *)(void *)phost->device.Data);
          Status = USBH_OK;
 80093c8:	2300      	movs	r3, #0
 80093ca:	73fb      	strb	r3, [r7, #15]
      else
      {
        USBH_UsrLog("Serial Number : N/A");
        Status = USBH_OK;
      }
      break;
 80093cc:	e018      	b.n	8009400 <USBH_HandleEnum+0x3b4>
        else if (ReqStatus == USBH_NOT_SUPPORTED)
 80093ce:	7bbb      	ldrb	r3, [r7, #14]
 80093d0:	2b03      	cmp	r3, #3
 80093d2:	d115      	bne.n	8009400 <USBH_HandleEnum+0x3b4>
          Status = USBH_OK;
 80093d4:	2300      	movs	r3, #0
 80093d6:	73fb      	strb	r3, [r7, #15]
      break;
 80093d8:	e012      	b.n	8009400 <USBH_HandleEnum+0x3b4>
        Status = USBH_OK;
 80093da:	2300      	movs	r3, #0
 80093dc:	73fb      	strb	r3, [r7, #15]
      break;
 80093de:	e00f      	b.n	8009400 <USBH_HandleEnum+0x3b4>

    default:
      break;
 80093e0:	bf00      	nop
 80093e2:	e00e      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093e4:	bf00      	nop
 80093e6:	e00c      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093e8:	bf00      	nop
 80093ea:	e00a      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093ec:	bf00      	nop
 80093ee:	e008      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093f0:	bf00      	nop
 80093f2:	e006      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093f4:	bf00      	nop
 80093f6:	e004      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093f8:	bf00      	nop
 80093fa:	e002      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 80093fc:	bf00      	nop
 80093fe:	e000      	b.n	8009402 <USBH_HandleEnum+0x3b6>
      break;
 8009400:	bf00      	nop
  }
  return Status;
 8009402:	7bfb      	ldrb	r3, [r7, #15]
}
 8009404:	4618      	mov	r0, r3
 8009406:	3710      	adds	r7, #16
 8009408:	46bd      	mov	sp, r7
 800940a:	bd80      	pop	{r7, pc}

0800940c <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 800940c:	b480      	push	{r7}
 800940e:	b083      	sub	sp, #12
 8009410:	af00      	add	r7, sp, #0
 8009412:	6078      	str	r0, [r7, #4]
 8009414:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	683a      	ldr	r2, [r7, #0]
 800941a:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
}
 800941e:	bf00      	nop
 8009420:	370c      	adds	r7, #12
 8009422:	46bd      	mov	sp, r7
 8009424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009428:	4770      	bx	lr

0800942a <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 800942a:	b580      	push	{r7, lr}
 800942c:	b082      	sub	sp, #8
 800942e:	af00      	add	r7, sp, #0
 8009430:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009438:	1c5a      	adds	r2, r3, #1
 800943a:	687b      	ldr	r3, [r7, #4]
 800943c:	f8c3 23c4 	str.w	r2, [r3, #964]	@ 0x3c4
  USBH_HandleSof(phost);
 8009440:	6878      	ldr	r0, [r7, #4]
 8009442:	f000 f804 	bl	800944e <USBH_HandleSof>
}
 8009446:	bf00      	nop
 8009448:	3708      	adds	r7, #8
 800944a:	46bd      	mov	sp, r7
 800944c:	bd80      	pop	{r7, pc}

0800944e <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 800944e:	b580      	push	{r7, lr}
 8009450:	b082      	sub	sp, #8
 8009452:	af00      	add	r7, sp, #0
 8009454:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	781b      	ldrb	r3, [r3, #0]
 800945a:	b2db      	uxtb	r3, r3
 800945c:	2b0b      	cmp	r3, #11
 800945e:	d10a      	bne.n	8009476 <USBH_HandleSof+0x28>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009466:	2b00      	cmp	r3, #0
 8009468:	d005      	beq.n	8009476 <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	f8d3 337c 	ldr.w	r3, [r3, #892]	@ 0x37c
 8009470:	699b      	ldr	r3, [r3, #24]
 8009472:	6878      	ldr	r0, [r7, #4]
 8009474:	4798      	blx	r3
  }
}
 8009476:	bf00      	nop
 8009478:	3708      	adds	r7, #8
 800947a:	46bd      	mov	sp, r7
 800947c:	bd80      	pop	{r7, pc}

0800947e <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 800947e:	b480      	push	{r7}
 8009480:	b083      	sub	sp, #12
 8009482:	af00      	add	r7, sp, #0
 8009484:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8009486:	687b      	ldr	r3, [r7, #4]
 8009488:	2201      	movs	r2, #1
 800948a:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return;
 800948e:	bf00      	nop
}
 8009490:	370c      	adds	r7, #12
 8009492:	46bd      	mov	sp, r7
 8009494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009498:	4770      	bx	lr

0800949a <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 800949a:	b480      	push	{r7}
 800949c:	b083      	sub	sp, #12
 800949e:	af00      	add	r7, sp, #0
 80094a0:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  return;
 80094aa:	bf00      	nop
}
 80094ac:	370c      	adds	r7, #12
 80094ae:	46bd      	mov	sp, r7
 80094b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094b4:	4770      	bx	lr

080094b6 <USBH_LL_Connect>:
  *         Handle USB Host connection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 80094b6:	b480      	push	{r7}
 80094b8:	b083      	sub	sp, #12
 80094ba:	af00      	add	r7, sp, #0
 80094bc:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2201      	movs	r2, #1
 80094c2:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.is_disconnected = 0U;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_ReEnumerated = 0U;
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	2200      	movs	r2, #0
 80094d2:	f883 2322 	strb.w	r2, [r3, #802]	@ 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 80094d6:	2300      	movs	r3, #0
}
 80094d8:	4618      	mov	r0, r3
 80094da:	370c      	adds	r7, #12
 80094dc:	46bd      	mov	sp, r7
 80094de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e2:	4770      	bx	lr

080094e4 <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 80094e4:	b580      	push	{r7, lr}
 80094e6:	b082      	sub	sp, #8
 80094e8:	af00      	add	r7, sp, #0
 80094ea:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2321 	strb.w	r2, [r3, #801]	@ 0x321
  phost->device.is_connected = 0U;
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	2200      	movs	r2, #0
 80094f8:	f883 2320 	strb.w	r2, [r3, #800]	@ 0x320
  phost->device.PortEnabled = 0U;
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	2200      	movs	r2, #0
 8009500:	f883 2323 	strb.w	r2, [r3, #803]	@ 0x323

  /* Stop Host */
  (void)USBH_LL_Stop(phost);
 8009504:	6878      	ldr	r0, [r7, #4]
 8009506:	f001 f8be 	bl	800a686 <USBH_LL_Stop>

  /* FRee Control Pipes */
  (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	791b      	ldrb	r3, [r3, #4]
 800950e:	4619      	mov	r1, r3
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 ff0b 	bl	800a32c <USBH_FreePipe>
  (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 8009516:	687b      	ldr	r3, [r7, #4]
 8009518:	795b      	ldrb	r3, [r3, #5]
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f000 ff05 	bl	800a32c <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif

  return USBH_OK;
 8009522:	2300      	movs	r3, #0
}
 8009524:	4618      	mov	r0, r3
 8009526:	3708      	adds	r7, #8
 8009528:	46bd      	mov	sp, r7
 800952a:	bd80      	pop	{r7, pc}

0800952c <USBH_Get_DevDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_DevDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 800952c:	b580      	push	{r7, lr}
 800952e:	b086      	sub	sp, #24
 8009530:	af02      	add	r7, sp, #8
 8009532:	6078      	str	r0, [r7, #4]
 8009534:	460b      	mov	r3, r1
 8009536:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;

  if (length > sizeof(phost->device.Data))
 8009538:	887b      	ldrh	r3, [r7, #2]
 800953a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800953e:	d901      	bls.n	8009544 <USBH_Get_DevDesc+0x18>
  {
    USBH_ErrLog("Control error: Get Device Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 8009540:	2303      	movs	r3, #3
 8009542:	e01b      	b.n	800957c <USBH_Get_DevDesc+0x50>
  }

  status = USBH_GetDescriptor(phost,
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_DEVICE, phost->device.Data, length);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	f503 728e 	add.w	r2, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800954a:	887b      	ldrh	r3, [r7, #2]
 800954c:	9300      	str	r3, [sp, #0]
 800954e:	4613      	mov	r3, r2
 8009550:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009554:	2100      	movs	r1, #0
 8009556:	6878      	ldr	r0, [r7, #4]
 8009558:	f000 f872 	bl	8009640 <USBH_GetDescriptor>
 800955c:	4603      	mov	r3, r0
 800955e:	73fb      	strb	r3, [r7, #15]

  if (status == USBH_OK)
 8009560:	7bfb      	ldrb	r3, [r7, #15]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d109      	bne.n	800957a <USBH_Get_DevDesc+0x4e>
  {
    /* Commands successfully sent and Response Received */
    status = USBH_ParseDevDesc(phost, phost->device.Data, length);
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800956c:	887a      	ldrh	r2, [r7, #2]
 800956e:	4619      	mov	r1, r3
 8009570:	6878      	ldr	r0, [r7, #4]
 8009572:	f000 f929 	bl	80097c8 <USBH_ParseDevDesc>
 8009576:	4603      	mov	r3, r0
 8009578:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800957a:	7bfb      	ldrb	r3, [r7, #15]
}
 800957c:	4618      	mov	r0, r3
 800957e:	3710      	adds	r7, #16
 8009580:	46bd      	mov	sp, r7
 8009582:	bd80      	pop	{r7, pc}

08009584 <USBH_Get_CfgDesc>:
  * @param  phost: Host Handle
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_CfgDesc(USBH_HandleTypeDef *phost, uint16_t length)
{
 8009584:	b580      	push	{r7, lr}
 8009586:	b086      	sub	sp, #24
 8009588:	af02      	add	r7, sp, #8
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  USBH_StatusTypeDef status;
  uint8_t *pData = phost->device.CfgDesc_Raw;
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	331c      	adds	r3, #28
 8009594:	60bb      	str	r3, [r7, #8]

  if (length > sizeof(phost->device.CfgDesc_Raw))
 8009596:	887b      	ldrh	r3, [r7, #2]
 8009598:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800959c:	d901      	bls.n	80095a2 <USBH_Get_CfgDesc+0x1e>
  {
    USBH_ErrLog("Control error: Get configuration Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 800959e:	2303      	movs	r3, #3
 80095a0:	e016      	b.n	80095d0 <USBH_Get_CfgDesc+0x4c>
  }

  status = USBH_GetDescriptor(phost, (USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD),
 80095a2:	887b      	ldrh	r3, [r7, #2]
 80095a4:	9300      	str	r3, [sp, #0]
 80095a6:	68bb      	ldr	r3, [r7, #8]
 80095a8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80095ac:	2100      	movs	r1, #0
 80095ae:	6878      	ldr	r0, [r7, #4]
 80095b0:	f000 f846 	bl	8009640 <USBH_GetDescriptor>
 80095b4:	4603      	mov	r3, r0
 80095b6:	73fb      	strb	r3, [r7, #15]
                              USB_DESC_CONFIGURATION, pData, length);

  if (status == USBH_OK)
 80095b8:	7bfb      	ldrb	r3, [r7, #15]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d107      	bne.n	80095ce <USBH_Get_CfgDesc+0x4a>
  {
    /* Commands successfully sent and Response Received  */
    status = USBH_ParseCfgDesc(phost, pData, length);
 80095be:	887b      	ldrh	r3, [r7, #2]
 80095c0:	461a      	mov	r2, r3
 80095c2:	68b9      	ldr	r1, [r7, #8]
 80095c4:	6878      	ldr	r0, [r7, #4]
 80095c6:	f000 f9af 	bl	8009928 <USBH_ParseCfgDesc>
 80095ca:	4603      	mov	r3, r0
 80095cc:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80095ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80095d0:	4618      	mov	r0, r3
 80095d2:	3710      	adds	r7, #16
 80095d4:	46bd      	mov	sp, r7
 80095d6:	bd80      	pop	{r7, pc}

080095d8 <USBH_Get_StringDesc>:
  * @param  buff: Buffer address for the descriptor
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_Get_StringDesc(USBH_HandleTypeDef *phost, uint8_t string_index, uint8_t *buff, uint16_t length)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af02      	add	r7, sp, #8
 80095de:	60f8      	str	r0, [r7, #12]
 80095e0:	607a      	str	r2, [r7, #4]
 80095e2:	461a      	mov	r2, r3
 80095e4:	460b      	mov	r3, r1
 80095e6:	72fb      	strb	r3, [r7, #11]
 80095e8:	4613      	mov	r3, r2
 80095ea:	813b      	strh	r3, [r7, #8]
  USBH_StatusTypeDef status;

  if ((length > sizeof(phost->device.Data)) || (buff == NULL))
 80095ec:	893b      	ldrh	r3, [r7, #8]
 80095ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80095f2:	d802      	bhi.n	80095fa <USBH_Get_StringDesc+0x22>
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2b00      	cmp	r3, #0
 80095f8:	d101      	bne.n	80095fe <USBH_Get_StringDesc+0x26>
  {
    USBH_ErrLog("Control error: Get String Descriptor failed, data buffer size issue");
    return USBH_NOT_SUPPORTED;
 80095fa:	2303      	movs	r3, #3
 80095fc:	e01c      	b.n	8009638 <USBH_Get_StringDesc+0x60>
  }

  status = USBH_GetDescriptor(phost,
 80095fe:	7afb      	ldrb	r3, [r7, #11]
 8009600:	b29b      	uxth	r3, r3
 8009602:	f443 7340 	orr.w	r3, r3, #768	@ 0x300
 8009606:	b29a      	uxth	r2, r3
                              USB_REQ_RECIPIENT_DEVICE | USB_REQ_TYPE_STANDARD,
                              USB_DESC_STRING | string_index,
                              phost->device.Data, length);
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f503 718e 	add.w	r1, r3, #284	@ 0x11c
  status = USBH_GetDescriptor(phost,
 800960e:	893b      	ldrh	r3, [r7, #8]
 8009610:	9300      	str	r3, [sp, #0]
 8009612:	460b      	mov	r3, r1
 8009614:	2100      	movs	r1, #0
 8009616:	68f8      	ldr	r0, [r7, #12]
 8009618:	f000 f812 	bl	8009640 <USBH_GetDescriptor>
 800961c:	4603      	mov	r3, r0
 800961e:	75fb      	strb	r3, [r7, #23]

  if (status == USBH_OK)
 8009620:	7dfb      	ldrb	r3, [r7, #23]
 8009622:	2b00      	cmp	r3, #0
 8009624:	d107      	bne.n	8009636 <USBH_Get_StringDesc+0x5e>
  {
    /* Commands successfully sent and Response Received */
    USBH_ParseStringDesc(phost->device.Data, buff, length);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	f503 738e 	add.w	r3, r3, #284	@ 0x11c
 800962c:	893a      	ldrh	r2, [r7, #8]
 800962e:	6879      	ldr	r1, [r7, #4]
 8009630:	4618      	mov	r0, r3
 8009632:	f000 fb8d 	bl	8009d50 <USBH_ParseStringDesc>
  }

  return status;
 8009636:	7dfb      	ldrb	r3, [r7, #23]
}
 8009638:	4618      	mov	r0, r3
 800963a:	3718      	adds	r7, #24
 800963c:	46bd      	mov	sp, r7
 800963e:	bd80      	pop	{r7, pc}

08009640 <USBH_GetDescriptor>:
  * @param  length: Length of the descriptor
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_GetDescriptor(USBH_HandleTypeDef *phost, uint8_t req_type, uint16_t value_idx,
                                      uint8_t *buff, uint16_t length)
{
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	60f8      	str	r0, [r7, #12]
 8009648:	607b      	str	r3, [r7, #4]
 800964a:	460b      	mov	r3, r1
 800964c:	72fb      	strb	r3, [r7, #11]
 800964e:	4613      	mov	r3, r2
 8009650:	813b      	strh	r3, [r7, #8]
  if (phost->RequestState == CMD_SEND)
 8009652:	68fb      	ldr	r3, [r7, #12]
 8009654:	789b      	ldrb	r3, [r3, #2]
 8009656:	2b01      	cmp	r3, #1
 8009658:	d11c      	bne.n	8009694 <USBH_GetDescriptor+0x54>
  {
    phost->Control.setup.b.bmRequestType = USB_D2H | req_type;
 800965a:	7afb      	ldrb	r3, [r7, #11]
 800965c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8009660:	b2da      	uxtb	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	741a      	strb	r2, [r3, #16]
    phost->Control.setup.b.bRequest = USB_REQ_GET_DESCRIPTOR;
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	2206      	movs	r2, #6
 800966a:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = value_idx;
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	893a      	ldrh	r2, [r7, #8]
 8009670:	825a      	strh	r2, [r3, #18]

    if ((value_idx & 0xff00U) == USB_DESC_STRING)
 8009672:	893b      	ldrh	r3, [r7, #8]
 8009674:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8009678:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800967c:	d104      	bne.n	8009688 <USBH_GetDescriptor+0x48>
    {
      phost->Control.setup.b.wIndex.w = 0x0409U;
 800967e:	68fb      	ldr	r3, [r7, #12]
 8009680:	f240 4209 	movw	r2, #1033	@ 0x409
 8009684:	829a      	strh	r2, [r3, #20]
 8009686:	e002      	b.n	800968e <USBH_GetDescriptor+0x4e>
    }
    else
    {
      phost->Control.setup.b.wIndex.w = 0U;
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	2200      	movs	r2, #0
 800968c:	829a      	strh	r2, [r3, #20]
    }
    phost->Control.setup.b.wLength.w = length;
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	8b3a      	ldrh	r2, [r7, #24]
 8009692:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, buff, length);
 8009694:	8b3b      	ldrh	r3, [r7, #24]
 8009696:	461a      	mov	r2, r3
 8009698:	6879      	ldr	r1, [r7, #4]
 800969a:	68f8      	ldr	r0, [r7, #12]
 800969c:	f000 fba5 	bl	8009dea <USBH_CtlReq>
 80096a0:	4603      	mov	r3, r0
}
 80096a2:	4618      	mov	r0, r3
 80096a4:	3710      	adds	r7, #16
 80096a6:	46bd      	mov	sp, r7
 80096a8:	bd80      	pop	{r7, pc}

080096aa <USBH_SetAddress>:
  * @param  DeviceAddress: Device address to assign
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetAddress(USBH_HandleTypeDef *phost,
                                   uint8_t DeviceAddress)
{
 80096aa:	b580      	push	{r7, lr}
 80096ac:	b082      	sub	sp, #8
 80096ae:	af00      	add	r7, sp, #0
 80096b0:	6078      	str	r0, [r7, #4]
 80096b2:	460b      	mov	r3, r1
 80096b4:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 80096b6:	687b      	ldr	r3, [r7, #4]
 80096b8:	789b      	ldrb	r3, [r3, #2]
 80096ba:	2b01      	cmp	r3, #1
 80096bc:	d10f      	bne.n	80096de <USBH_SetAddress+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE | \
 80096be:	687b      	ldr	r3, [r7, #4]
 80096c0:	2200      	movs	r2, #0
 80096c2:	741a      	strb	r2, [r3, #16]
                                           USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_ADDRESS;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2205      	movs	r2, #5
 80096c8:	745a      	strb	r2, [r3, #17]

    phost->Control.setup.b.wValue.w = (uint16_t)DeviceAddress;
 80096ca:	78fb      	ldrb	r3, [r7, #3]
 80096cc:	b29a      	uxth	r2, r3
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 80096d2:	687b      	ldr	r3, [r7, #4]
 80096d4:	2200      	movs	r2, #0
 80096d6:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	2200      	movs	r2, #0
 80096dc:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80096de:	2200      	movs	r2, #0
 80096e0:	2100      	movs	r1, #0
 80096e2:	6878      	ldr	r0, [r7, #4]
 80096e4:	f000 fb81 	bl	8009dea <USBH_CtlReq>
 80096e8:	4603      	mov	r3, r0
}
 80096ea:	4618      	mov	r0, r3
 80096ec:	3708      	adds	r7, #8
 80096ee:	46bd      	mov	sp, r7
 80096f0:	bd80      	pop	{r7, pc}

080096f2 <USBH_SetCfg>:
  * @param  phost: Host Handle
  * @param  cfg_idx: Configuration value
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SetCfg(USBH_HandleTypeDef *phost, uint16_t cfg_idx)
{
 80096f2:	b580      	push	{r7, lr}
 80096f4:	b082      	sub	sp, #8
 80096f6:	af00      	add	r7, sp, #0
 80096f8:	6078      	str	r0, [r7, #4]
 80096fa:	460b      	mov	r3, r1
 80096fc:	807b      	strh	r3, [r7, #2]
  if (phost->RequestState == CMD_SEND)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	789b      	ldrb	r3, [r3, #2]
 8009702:	2b01      	cmp	r3, #1
 8009704:	d10e      	bne.n	8009724 <USBH_SetCfg+0x32>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 8009706:	687b      	ldr	r3, [r7, #4]
 8009708:	2200      	movs	r2, #0
 800970a:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_CONFIGURATION;
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	2209      	movs	r2, #9
 8009710:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = cfg_idx;
 8009712:	687b      	ldr	r3, [r7, #4]
 8009714:	887a      	ldrh	r2, [r7, #2]
 8009716:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	2200      	movs	r2, #0
 8009722:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 8009724:	2200      	movs	r2, #0
 8009726:	2100      	movs	r1, #0
 8009728:	6878      	ldr	r0, [r7, #4]
 800972a:	f000 fb5e 	bl	8009dea <USBH_CtlReq>
 800972e:	4603      	mov	r3, r0
}
 8009730:	4618      	mov	r0, r3
 8009732:	3708      	adds	r7, #8
 8009734:	46bd      	mov	sp, r7
 8009736:	bd80      	pop	{r7, pc}

08009738 <USBH_SetFeature>:
  * @param  pdev: Selected device
  * @param  itf_idx
  * @retval Status
  */
USBH_StatusTypeDef USBH_SetFeature(USBH_HandleTypeDef *phost, uint8_t wValue)
{
 8009738:	b580      	push	{r7, lr}
 800973a:	b082      	sub	sp, #8
 800973c:	af00      	add	r7, sp, #0
 800973e:	6078      	str	r0, [r7, #4]
 8009740:	460b      	mov	r3, r1
 8009742:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	789b      	ldrb	r3, [r3, #2]
 8009748:	2b01      	cmp	r3, #1
 800974a:	d10f      	bne.n	800976c <USBH_SetFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_DEVICE
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	2200      	movs	r2, #0
 8009750:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_SET_FEATURE;
 8009752:	687b      	ldr	r3, [r7, #4]
 8009754:	2203      	movs	r2, #3
 8009756:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = wValue;
 8009758:	78fb      	ldrb	r3, [r7, #3]
 800975a:	b29a      	uxth	r2, r3
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = 0U;
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	2200      	movs	r2, #0
 8009764:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	2200      	movs	r2, #0
 800976a:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 800976c:	2200      	movs	r2, #0
 800976e:	2100      	movs	r1, #0
 8009770:	6878      	ldr	r0, [r7, #4]
 8009772:	f000 fb3a 	bl	8009dea <USBH_CtlReq>
 8009776:	4603      	mov	r3, r0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3708      	adds	r7, #8
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}

08009780 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b082      	sub	sp, #8
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	460b      	mov	r3, r1
 800978a:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	789b      	ldrb	r3, [r3, #2]
 8009790:	2b01      	cmp	r3, #1
 8009792:	d10f      	bne.n	80097b4 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	2202      	movs	r2, #2
 8009798:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	2201      	movs	r2, #1
 800979e:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 80097a6:	78fb      	ldrb	r3, [r7, #3]
 80097a8:	b29a      	uxth	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	2200      	movs	r2, #0
 80097b2:	82da      	strh	r2, [r3, #22]
  }

  return USBH_CtlReq(phost, NULL, 0U);
 80097b4:	2200      	movs	r2, #0
 80097b6:	2100      	movs	r1, #0
 80097b8:	6878      	ldr	r0, [r7, #4]
 80097ba:	f000 fb16 	bl	8009dea <USBH_CtlReq>
 80097be:	4603      	mov	r3, r0
}
 80097c0:	4618      	mov	r0, r3
 80097c2:	3708      	adds	r7, #8
 80097c4:	46bd      	mov	sp, r7
 80097c6:	bd80      	pop	{r7, pc}

080097c8 <USBH_ParseDevDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseDevDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 80097c8:	b480      	push	{r7}
 80097ca:	b087      	sub	sp, #28
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	60f8      	str	r0, [r7, #12]
 80097d0:	60b9      	str	r1, [r7, #8]
 80097d2:	4613      	mov	r3, r2
 80097d4:	80fb      	strh	r3, [r7, #6]
  USBH_DevDescTypeDef *dev_desc = &phost->device.DevDesc;
 80097d6:	68fb      	ldr	r3, [r7, #12]
 80097d8:	f203 3326 	addw	r3, r3, #806	@ 0x326
 80097dc:	613b      	str	r3, [r7, #16]
  USBH_StatusTypeDef status = USBH_OK;
 80097de:	2300      	movs	r3, #0
 80097e0:	75fb      	strb	r3, [r7, #23]

  if (buf == NULL)
 80097e2:	68bb      	ldr	r3, [r7, #8]
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d101      	bne.n	80097ec <USBH_ParseDevDesc+0x24>
  {
    return USBH_FAIL;
 80097e8:	2302      	movs	r3, #2
 80097ea:	e094      	b.n	8009916 <USBH_ParseDevDesc+0x14e>
  }

  dev_desc->bLength            = *(uint8_t *)(buf +  0U);
 80097ec:	68bb      	ldr	r3, [r7, #8]
 80097ee:	781a      	ldrb	r2, [r3, #0]
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	701a      	strb	r2, [r3, #0]
  dev_desc->bDescriptorType    = *(uint8_t *)(buf +  1U);
 80097f4:	68bb      	ldr	r3, [r7, #8]
 80097f6:	785a      	ldrb	r2, [r3, #1]
 80097f8:	693b      	ldr	r3, [r7, #16]
 80097fa:	705a      	strb	r2, [r3, #1]
  dev_desc->bcdUSB             = LE16(buf +  2U);
 80097fc:	68bb      	ldr	r3, [r7, #8]
 80097fe:	3302      	adds	r3, #2
 8009800:	781b      	ldrb	r3, [r3, #0]
 8009802:	461a      	mov	r2, r3
 8009804:	68bb      	ldr	r3, [r7, #8]
 8009806:	3303      	adds	r3, #3
 8009808:	781b      	ldrb	r3, [r3, #0]
 800980a:	021b      	lsls	r3, r3, #8
 800980c:	b29b      	uxth	r3, r3
 800980e:	4313      	orrs	r3, r2
 8009810:	b29a      	uxth	r2, r3
 8009812:	693b      	ldr	r3, [r7, #16]
 8009814:	805a      	strh	r2, [r3, #2]
  dev_desc->bDeviceClass       = *(uint8_t *)(buf +  4U);
 8009816:	68bb      	ldr	r3, [r7, #8]
 8009818:	791a      	ldrb	r2, [r3, #4]
 800981a:	693b      	ldr	r3, [r7, #16]
 800981c:	711a      	strb	r2, [r3, #4]
  dev_desc->bDeviceSubClass    = *(uint8_t *)(buf +  5U);
 800981e:	68bb      	ldr	r3, [r7, #8]
 8009820:	795a      	ldrb	r2, [r3, #5]
 8009822:	693b      	ldr	r3, [r7, #16]
 8009824:	715a      	strb	r2, [r3, #5]
  dev_desc->bDeviceProtocol    = *(uint8_t *)(buf +  6U);
 8009826:	68bb      	ldr	r3, [r7, #8]
 8009828:	799a      	ldrb	r2, [r3, #6]
 800982a:	693b      	ldr	r3, [r7, #16]
 800982c:	719a      	strb	r2, [r3, #6]
  dev_desc->bMaxPacketSize     = *(uint8_t *)(buf +  7U);
 800982e:	68bb      	ldr	r3, [r7, #8]
 8009830:	79da      	ldrb	r2, [r3, #7]
 8009832:	693b      	ldr	r3, [r7, #16]
 8009834:	71da      	strb	r2, [r3, #7]

  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009836:	68fb      	ldr	r3, [r7, #12]
 8009838:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800983c:	2b00      	cmp	r3, #0
 800983e:	d004      	beq.n	800984a <USBH_ParseDevDesc+0x82>
      (phost->device.speed == (uint8_t)USBH_SPEED_FULL))
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
  if ((phost->device.speed == (uint8_t)USBH_SPEED_HIGH) ||
 8009846:	2b01      	cmp	r3, #1
 8009848:	d11b      	bne.n	8009882 <USBH_ParseDevDesc+0xba>
  {
    /* Make sure that the max packet size is either 8, 16, 32, 64 or force it to minimum allowed value */
    switch (dev_desc->bMaxPacketSize)
 800984a:	693b      	ldr	r3, [r7, #16]
 800984c:	79db      	ldrb	r3, [r3, #7]
 800984e:	2b20      	cmp	r3, #32
 8009850:	dc0f      	bgt.n	8009872 <USBH_ParseDevDesc+0xaa>
 8009852:	2b08      	cmp	r3, #8
 8009854:	db0f      	blt.n	8009876 <USBH_ParseDevDesc+0xae>
 8009856:	3b08      	subs	r3, #8
 8009858:	4a32      	ldr	r2, [pc, #200]	@ (8009924 <USBH_ParseDevDesc+0x15c>)
 800985a:	fa22 f303 	lsr.w	r3, r2, r3
 800985e:	f003 0301 	and.w	r3, r3, #1
 8009862:	2b00      	cmp	r3, #0
 8009864:	bf14      	ite	ne
 8009866:	2301      	movne	r3, #1
 8009868:	2300      	moveq	r3, #0
 800986a:	b2db      	uxtb	r3, r3
 800986c:	2b00      	cmp	r3, #0
 800986e:	d106      	bne.n	800987e <USBH_ParseDevDesc+0xb6>
 8009870:	e001      	b.n	8009876 <USBH_ParseDevDesc+0xae>
 8009872:	2b40      	cmp	r3, #64	@ 0x40
 8009874:	d003      	beq.n	800987e <USBH_ParseDevDesc+0xb6>
      case 64:
        break;

      default:
        /* set the size to min allowed value in case the device has answered with incorrect size */
        dev_desc->bMaxPacketSize = 8U;
 8009876:	693b      	ldr	r3, [r7, #16]
 8009878:	2208      	movs	r2, #8
 800987a:	71da      	strb	r2, [r3, #7]
        break;
 800987c:	e000      	b.n	8009880 <USBH_ParseDevDesc+0xb8>
        break;
 800987e:	bf00      	nop
    switch (dev_desc->bMaxPacketSize)
 8009880:	e00e      	b.n	80098a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009888:	2b02      	cmp	r3, #2
 800988a:	d107      	bne.n	800989c <USBH_ParseDevDesc+0xd4>
  {
    if (dev_desc->bMaxPacketSize != 8U)
 800988c:	693b      	ldr	r3, [r7, #16]
 800988e:	79db      	ldrb	r3, [r3, #7]
 8009890:	2b08      	cmp	r3, #8
 8009892:	d005      	beq.n	80098a0 <USBH_ParseDevDesc+0xd8>
    {
      /* set the size to 8 in case the device has answered with incorrect size */
      dev_desc->bMaxPacketSize = 8U;
 8009894:	693b      	ldr	r3, [r7, #16]
 8009896:	2208      	movs	r2, #8
 8009898:	71da      	strb	r2, [r3, #7]
 800989a:	e001      	b.n	80098a0 <USBH_ParseDevDesc+0xd8>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 800989c:	2303      	movs	r3, #3
 800989e:	75fb      	strb	r3, [r7, #23]
  }

  if (length > 8U)
 80098a0:	88fb      	ldrh	r3, [r7, #6]
 80098a2:	2b08      	cmp	r3, #8
 80098a4:	d936      	bls.n	8009914 <USBH_ParseDevDesc+0x14c>
  {
    /* For 1st time after device connection, Host may issue only 8 bytes for
    Device Descriptor Length  */
    dev_desc->idVendor           = LE16(buf +  8U);
 80098a6:	68bb      	ldr	r3, [r7, #8]
 80098a8:	3308      	adds	r3, #8
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	461a      	mov	r2, r3
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	3309      	adds	r3, #9
 80098b2:	781b      	ldrb	r3, [r3, #0]
 80098b4:	021b      	lsls	r3, r3, #8
 80098b6:	b29b      	uxth	r3, r3
 80098b8:	4313      	orrs	r3, r2
 80098ba:	b29a      	uxth	r2, r3
 80098bc:	693b      	ldr	r3, [r7, #16]
 80098be:	811a      	strh	r2, [r3, #8]
    dev_desc->idProduct          = LE16(buf + 10U);
 80098c0:	68bb      	ldr	r3, [r7, #8]
 80098c2:	330a      	adds	r3, #10
 80098c4:	781b      	ldrb	r3, [r3, #0]
 80098c6:	461a      	mov	r2, r3
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	330b      	adds	r3, #11
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	021b      	lsls	r3, r3, #8
 80098d0:	b29b      	uxth	r3, r3
 80098d2:	4313      	orrs	r3, r2
 80098d4:	b29a      	uxth	r2, r3
 80098d6:	693b      	ldr	r3, [r7, #16]
 80098d8:	815a      	strh	r2, [r3, #10]
    dev_desc->bcdDevice          = LE16(buf + 12U);
 80098da:	68bb      	ldr	r3, [r7, #8]
 80098dc:	330c      	adds	r3, #12
 80098de:	781b      	ldrb	r3, [r3, #0]
 80098e0:	461a      	mov	r2, r3
 80098e2:	68bb      	ldr	r3, [r7, #8]
 80098e4:	330d      	adds	r3, #13
 80098e6:	781b      	ldrb	r3, [r3, #0]
 80098e8:	021b      	lsls	r3, r3, #8
 80098ea:	b29b      	uxth	r3, r3
 80098ec:	4313      	orrs	r3, r2
 80098ee:	b29a      	uxth	r2, r3
 80098f0:	693b      	ldr	r3, [r7, #16]
 80098f2:	819a      	strh	r2, [r3, #12]
    dev_desc->iManufacturer      = *(uint8_t *)(buf + 14U);
 80098f4:	68bb      	ldr	r3, [r7, #8]
 80098f6:	7b9a      	ldrb	r2, [r3, #14]
 80098f8:	693b      	ldr	r3, [r7, #16]
 80098fa:	739a      	strb	r2, [r3, #14]
    dev_desc->iProduct           = *(uint8_t *)(buf + 15U);
 80098fc:	68bb      	ldr	r3, [r7, #8]
 80098fe:	7bda      	ldrb	r2, [r3, #15]
 8009900:	693b      	ldr	r3, [r7, #16]
 8009902:	73da      	strb	r2, [r3, #15]
    dev_desc->iSerialNumber      = *(uint8_t *)(buf + 16U);
 8009904:	68bb      	ldr	r3, [r7, #8]
 8009906:	7c1a      	ldrb	r2, [r3, #16]
 8009908:	693b      	ldr	r3, [r7, #16]
 800990a:	741a      	strb	r2, [r3, #16]
    dev_desc->bNumConfigurations = *(uint8_t *)(buf + 17U);
 800990c:	68bb      	ldr	r3, [r7, #8]
 800990e:	7c5a      	ldrb	r2, [r3, #17]
 8009910:	693b      	ldr	r3, [r7, #16]
 8009912:	745a      	strb	r2, [r3, #17]
  }

  return status;
 8009914:	7dfb      	ldrb	r3, [r7, #23]
}
 8009916:	4618      	mov	r0, r3
 8009918:	371c      	adds	r7, #28
 800991a:	46bd      	mov	sp, r7
 800991c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009920:	4770      	bx	lr
 8009922:	bf00      	nop
 8009924:	01000101 	.word	0x01000101

08009928 <USBH_ParseCfgDesc>:
  * @param  buf: Buffer where the source descriptor is available
  * @param  length: Length of the descriptor
  * @retval USBH status
  */
static USBH_StatusTypeDef USBH_ParseCfgDesc(USBH_HandleTypeDef *phost, uint8_t *buf, uint16_t length)
{
 8009928:	b580      	push	{r7, lr}
 800992a:	b08c      	sub	sp, #48	@ 0x30
 800992c:	af00      	add	r7, sp, #0
 800992e:	60f8      	str	r0, [r7, #12]
 8009930:	60b9      	str	r1, [r7, #8]
 8009932:	4613      	mov	r3, r2
 8009934:	80fb      	strh	r3, [r7, #6]
  USBH_CfgDescTypeDef *cfg_desc = &phost->device.CfgDesc;
 8009936:	68fb      	ldr	r3, [r7, #12]
 8009938:	f503 734e 	add.w	r3, r3, #824	@ 0x338
 800993c:	623b      	str	r3, [r7, #32]
  USBH_StatusTypeDef           status = USBH_OK;
 800993e:	2300      	movs	r3, #0
 8009940:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  USBH_InterfaceDescTypeDef    *pif;
  USBH_EpDescTypeDef           *pep;
  USBH_DescHeader_t            *pdesc;
  uint16_t                     ptr;
  uint8_t                      if_ix = 0U;
 8009944:	2300      	movs	r3, #0
 8009946:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint8_t                      ep_ix = 0U;
 800994a:	2300      	movs	r3, #0
 800994c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26

  if (buf == NULL)
 8009950:	68bb      	ldr	r3, [r7, #8]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d101      	bne.n	800995a <USBH_ParseCfgDesc+0x32>
  {
    return USBH_FAIL;
 8009956:	2302      	movs	r3, #2
 8009958:	e0da      	b.n	8009b10 <USBH_ParseCfgDesc+0x1e8>
  }

  pdesc = (USBH_DescHeader_t *)(void *)buf;
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Parse configuration descriptor */
  cfg_desc->bLength             = *(uint8_t *)(buf + 0U);
 800995e:	68bb      	ldr	r3, [r7, #8]
 8009960:	781a      	ldrb	r2, [r3, #0]
 8009962:	6a3b      	ldr	r3, [r7, #32]
 8009964:	701a      	strb	r2, [r3, #0]
  cfg_desc->bDescriptorType     = *(uint8_t *)(buf + 1U);
 8009966:	68bb      	ldr	r3, [r7, #8]
 8009968:	785a      	ldrb	r2, [r3, #1]
 800996a:	6a3b      	ldr	r3, [r7, #32]
 800996c:	705a      	strb	r2, [r3, #1]
  cfg_desc->wTotalLength        = MIN(((uint16_t) LE16(buf + 2U)), ((uint16_t)USBH_MAX_SIZE_CONFIGURATION));
 800996e:	68bb      	ldr	r3, [r7, #8]
 8009970:	3302      	adds	r3, #2
 8009972:	781b      	ldrb	r3, [r3, #0]
 8009974:	461a      	mov	r2, r3
 8009976:	68bb      	ldr	r3, [r7, #8]
 8009978:	3303      	adds	r3, #3
 800997a:	781b      	ldrb	r3, [r3, #0]
 800997c:	021b      	lsls	r3, r3, #8
 800997e:	b29b      	uxth	r3, r3
 8009980:	4313      	orrs	r3, r2
 8009982:	b29b      	uxth	r3, r3
 8009984:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009988:	bf28      	it	cs
 800998a:	f44f 7380 	movcs.w	r3, #256	@ 0x100
 800998e:	b29a      	uxth	r2, r3
 8009990:	6a3b      	ldr	r3, [r7, #32]
 8009992:	805a      	strh	r2, [r3, #2]
  cfg_desc->bNumInterfaces      = *(uint8_t *)(buf + 4U);
 8009994:	68bb      	ldr	r3, [r7, #8]
 8009996:	791a      	ldrb	r2, [r3, #4]
 8009998:	6a3b      	ldr	r3, [r7, #32]
 800999a:	711a      	strb	r2, [r3, #4]
  cfg_desc->bConfigurationValue = *(uint8_t *)(buf + 5U);
 800999c:	68bb      	ldr	r3, [r7, #8]
 800999e:	795a      	ldrb	r2, [r3, #5]
 80099a0:	6a3b      	ldr	r3, [r7, #32]
 80099a2:	715a      	strb	r2, [r3, #5]
  cfg_desc->iConfiguration      = *(uint8_t *)(buf + 6U);
 80099a4:	68bb      	ldr	r3, [r7, #8]
 80099a6:	799a      	ldrb	r2, [r3, #6]
 80099a8:	6a3b      	ldr	r3, [r7, #32]
 80099aa:	719a      	strb	r2, [r3, #6]
  cfg_desc->bmAttributes        = *(uint8_t *)(buf + 7U);
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	79da      	ldrb	r2, [r3, #7]
 80099b0:	6a3b      	ldr	r3, [r7, #32]
 80099b2:	71da      	strb	r2, [r3, #7]
  cfg_desc->bMaxPower           = *(uint8_t *)(buf + 8U);
 80099b4:	68bb      	ldr	r3, [r7, #8]
 80099b6:	7a1a      	ldrb	r2, [r3, #8]
 80099b8:	6a3b      	ldr	r3, [r7, #32]
 80099ba:	721a      	strb	r2, [r3, #8]

  /* Make sure that the Configuration descriptor's bLength is equal to USB_CONFIGURATION_DESC_SIZE */
  if (cfg_desc->bLength != USB_CONFIGURATION_DESC_SIZE)
 80099bc:	6a3b      	ldr	r3, [r7, #32]
 80099be:	781b      	ldrb	r3, [r3, #0]
 80099c0:	2b09      	cmp	r3, #9
 80099c2:	d002      	beq.n	80099ca <USBH_ParseCfgDesc+0xa2>
  {
    cfg_desc->bLength = USB_CONFIGURATION_DESC_SIZE;
 80099c4:	6a3b      	ldr	r3, [r7, #32]
 80099c6:	2209      	movs	r2, #9
 80099c8:	701a      	strb	r2, [r3, #0]
  }

  if (length > USB_CONFIGURATION_DESC_SIZE)
 80099ca:	88fb      	ldrh	r3, [r7, #6]
 80099cc:	2b09      	cmp	r3, #9
 80099ce:	f240 809d 	bls.w	8009b0c <USBH_ParseCfgDesc+0x1e4>
  {
    ptr = USB_LEN_CFG_DESC;
 80099d2:	2309      	movs	r3, #9
 80099d4:	82fb      	strh	r3, [r7, #22]
    pif = (USBH_InterfaceDescTypeDef *)NULL;
 80099d6:	2300      	movs	r3, #0
 80099d8:	61fb      	str	r3, [r7, #28]

    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 80099da:	e081      	b.n	8009ae0 <USBH_ParseCfgDesc+0x1b8>
    {
      pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 80099dc:	f107 0316 	add.w	r3, r7, #22
 80099e0:	4619      	mov	r1, r3
 80099e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80099e4:	f000 f9e7 	bl	8009db6 <USBH_GetNextDesc>
 80099e8:	62b8      	str	r0, [r7, #40]	@ 0x28
      if (pdesc->bDescriptorType == USB_DESC_TYPE_INTERFACE)
 80099ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099ec:	785b      	ldrb	r3, [r3, #1]
 80099ee:	2b04      	cmp	r3, #4
 80099f0:	d176      	bne.n	8009ae0 <USBH_ParseCfgDesc+0x1b8>
      {
        /* Make sure that the interface descriptor's bLength is equal to USB_INTERFACE_DESC_SIZE */
        if (pdesc->bLength != USB_INTERFACE_DESC_SIZE)
 80099f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099f4:	781b      	ldrb	r3, [r3, #0]
 80099f6:	2b09      	cmp	r3, #9
 80099f8:	d002      	beq.n	8009a00 <USBH_ParseCfgDesc+0xd8>
        {
          pdesc->bLength = USB_INTERFACE_DESC_SIZE;
 80099fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80099fc:	2209      	movs	r2, #9
 80099fe:	701a      	strb	r2, [r3, #0]
        }

        pif = &cfg_desc->Itf_Desc[if_ix];
 8009a00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a04:	221a      	movs	r2, #26
 8009a06:	fb02 f303 	mul.w	r3, r2, r3
 8009a0a:	3308      	adds	r3, #8
 8009a0c:	6a3a      	ldr	r2, [r7, #32]
 8009a0e:	4413      	add	r3, r2
 8009a10:	3302      	adds	r3, #2
 8009a12:	61fb      	str	r3, [r7, #28]
        USBH_ParseInterfaceDesc(pif, (uint8_t *)(void *)pdesc);
 8009a14:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8009a16:	69f8      	ldr	r0, [r7, #28]
 8009a18:	f000 f87e 	bl	8009b18 <USBH_ParseInterfaceDesc>

        ep_ix = 0U;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        pep = (USBH_EpDescTypeDef *)NULL;
 8009a22:	2300      	movs	r3, #0
 8009a24:	61bb      	str	r3, [r7, #24]

        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009a26:	e043      	b.n	8009ab0 <USBH_ParseCfgDesc+0x188>
        {
          pdesc = USBH_GetNextDesc((uint8_t *)(void *)pdesc, &ptr);
 8009a28:	f107 0316 	add.w	r3, r7, #22
 8009a2c:	4619      	mov	r1, r3
 8009a2e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8009a30:	f000 f9c1 	bl	8009db6 <USBH_GetNextDesc>
 8009a34:	62b8      	str	r0, [r7, #40]	@ 0x28

          if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8009a36:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a38:	785b      	ldrb	r3, [r3, #1]
 8009a3a:	2b05      	cmp	r3, #5
 8009a3c:	d138      	bne.n	8009ab0 <USBH_ParseCfgDesc+0x188>
          {
            /* Check if the endpoint is appartening to an audio streaming interface */
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a3e:	69fb      	ldr	r3, [r7, #28]
 8009a40:	795b      	ldrb	r3, [r3, #5]
 8009a42:	2b01      	cmp	r3, #1
 8009a44:	d113      	bne.n	8009a6e <USBH_ParseCfgDesc+0x146>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	799b      	ldrb	r3, [r3, #6]
            if ((pif->bInterfaceClass == 0x01U) &&
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d003      	beq.n	8009a56 <USBH_ParseCfgDesc+0x12e>
                ((pif->bInterfaceSubClass == 0x02U) || (pif->bInterfaceSubClass == 0x03U)))
 8009a4e:	69fb      	ldr	r3, [r7, #28]
 8009a50:	799b      	ldrb	r3, [r3, #6]
 8009a52:	2b03      	cmp	r3, #3
 8009a54:	d10b      	bne.n	8009a6e <USBH_ParseCfgDesc+0x146>
            {
              /* Check if it is supporting the USB AUDIO 01 class specification */
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a56:	69fb      	ldr	r3, [r7, #28]
 8009a58:	79db      	ldrb	r3, [r3, #7]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d10b      	bne.n	8009a76 <USBH_ParseCfgDesc+0x14e>
 8009a5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a60:	781b      	ldrb	r3, [r3, #0]
 8009a62:	2b09      	cmp	r3, #9
 8009a64:	d007      	beq.n	8009a76 <USBH_ParseCfgDesc+0x14e>
              {
                pdesc->bLength = 0x09U;
 8009a66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a68:	2209      	movs	r2, #9
 8009a6a:	701a      	strb	r2, [r3, #0]
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a6c:	e003      	b.n	8009a76 <USBH_ParseCfgDesc+0x14e>
            }
            /* Make sure that the endpoint descriptor's bLength is equal to
               USB_ENDPOINT_DESC_SIZE for all other endpoints types */
            else
            {
              pdesc->bLength = USB_ENDPOINT_DESC_SIZE;
 8009a6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009a70:	2207      	movs	r2, #7
 8009a72:	701a      	strb	r2, [r3, #0]
 8009a74:	e000      	b.n	8009a78 <USBH_ParseCfgDesc+0x150>
              if ((pif->bInterfaceProtocol == 0x00U) && (pdesc->bLength != 0x09U))
 8009a76:	bf00      	nop
            }

            pep = &cfg_desc->Itf_Desc[if_ix].Ep_Desc[ep_ix];
 8009a78:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009a7c:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009a80:	3201      	adds	r2, #1
 8009a82:	00d2      	lsls	r2, r2, #3
 8009a84:	211a      	movs	r1, #26
 8009a86:	fb01 f303 	mul.w	r3, r1, r3
 8009a8a:	4413      	add	r3, r2
 8009a8c:	3308      	adds	r3, #8
 8009a8e:	6a3a      	ldr	r2, [r7, #32]
 8009a90:	4413      	add	r3, r2
 8009a92:	3304      	adds	r3, #4
 8009a94:	61bb      	str	r3, [r7, #24]

            status = USBH_ParseEPDesc(phost, pep, (uint8_t *)(void *)pdesc);
 8009a96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009a98:	69b9      	ldr	r1, [r7, #24]
 8009a9a:	68f8      	ldr	r0, [r7, #12]
 8009a9c:	f000 f870 	bl	8009b80 <USBH_ParseEPDesc>
 8009aa0:	4603      	mov	r3, r0
 8009aa2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

            ep_ix++;
 8009aa6:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8009aaa:	3301      	adds	r3, #1
 8009aac:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        while ((ep_ix < pif->bNumEndpoints) && (ptr < cfg_desc->wTotalLength))
 8009ab0:	69fb      	ldr	r3, [r7, #28]
 8009ab2:	791b      	ldrb	r3, [r3, #4]
 8009ab4:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ab8:	429a      	cmp	r2, r3
 8009aba:	d204      	bcs.n	8009ac6 <USBH_ParseCfgDesc+0x19e>
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	885a      	ldrh	r2, [r3, #2]
 8009ac0:	8afb      	ldrh	r3, [r7, #22]
 8009ac2:	429a      	cmp	r2, r3
 8009ac4:	d8b0      	bhi.n	8009a28 <USBH_ParseCfgDesc+0x100>
          }
        }

        /* Check if the required endpoint(s) data are parsed */
        if (ep_ix < pif->bNumEndpoints)
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	791b      	ldrb	r3, [r3, #4]
 8009aca:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8009ace:	429a      	cmp	r2, r3
 8009ad0:	d201      	bcs.n	8009ad6 <USBH_ParseCfgDesc+0x1ae>
        {
          return USBH_NOT_SUPPORTED;
 8009ad2:	2303      	movs	r3, #3
 8009ad4:	e01c      	b.n	8009b10 <USBH_ParseCfgDesc+0x1e8>
        }

        if_ix++;
 8009ad6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ada:	3301      	adds	r3, #1
 8009adc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    while ((if_ix < USBH_MAX_NUM_INTERFACES) && (ptr < cfg_desc->wTotalLength))
 8009ae0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009ae4:	2b01      	cmp	r3, #1
 8009ae6:	d805      	bhi.n	8009af4 <USBH_ParseCfgDesc+0x1cc>
 8009ae8:	6a3b      	ldr	r3, [r7, #32]
 8009aea:	885a      	ldrh	r2, [r3, #2]
 8009aec:	8afb      	ldrh	r3, [r7, #22]
 8009aee:	429a      	cmp	r2, r3
 8009af0:	f63f af74 	bhi.w	80099dc <USBH_ParseCfgDesc+0xb4>
      }
    }

    /* Check if the required interface(s) data are parsed */
    if (if_ix < MIN(cfg_desc->bNumInterfaces, (uint8_t)USBH_MAX_NUM_INTERFACES))
 8009af4:	6a3b      	ldr	r3, [r7, #32]
 8009af6:	791b      	ldrb	r3, [r3, #4]
 8009af8:	2b02      	cmp	r3, #2
 8009afa:	bf28      	it	cs
 8009afc:	2302      	movcs	r3, #2
 8009afe:	b2db      	uxtb	r3, r3
 8009b00:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8009b04:	429a      	cmp	r2, r3
 8009b06:	d201      	bcs.n	8009b0c <USBH_ParseCfgDesc+0x1e4>
    {
      return USBH_NOT_SUPPORTED;
 8009b08:	2303      	movs	r3, #3
 8009b0a:	e001      	b.n	8009b10 <USBH_ParseCfgDesc+0x1e8>
    }
  }

  return status;
 8009b0c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8009b10:	4618      	mov	r0, r3
 8009b12:	3730      	adds	r7, #48	@ 0x30
 8009b14:	46bd      	mov	sp, r7
 8009b16:	bd80      	pop	{r7, pc}

08009b18 <USBH_ParseInterfaceDesc>:
  * @param  if_descriptor : Interface descriptor destination
  * @param  buf: Buffer where the descriptor data is available
  * @retval None
  */
static void USBH_ParseInterfaceDesc(USBH_InterfaceDescTypeDef *if_descriptor, uint8_t *buf)
{
 8009b18:	b480      	push	{r7}
 8009b1a:	b083      	sub	sp, #12
 8009b1c:	af00      	add	r7, sp, #0
 8009b1e:	6078      	str	r0, [r7, #4]
 8009b20:	6039      	str	r1, [r7, #0]
  if_descriptor->bLength            = *(uint8_t *)(buf + 0U);
 8009b22:	683b      	ldr	r3, [r7, #0]
 8009b24:	781a      	ldrb	r2, [r3, #0]
 8009b26:	687b      	ldr	r3, [r7, #4]
 8009b28:	701a      	strb	r2, [r3, #0]
  if_descriptor->bDescriptorType    = *(uint8_t *)(buf + 1U);
 8009b2a:	683b      	ldr	r3, [r7, #0]
 8009b2c:	785a      	ldrb	r2, [r3, #1]
 8009b2e:	687b      	ldr	r3, [r7, #4]
 8009b30:	705a      	strb	r2, [r3, #1]
  if_descriptor->bInterfaceNumber   = *(uint8_t *)(buf + 2U);
 8009b32:	683b      	ldr	r3, [r7, #0]
 8009b34:	789a      	ldrb	r2, [r3, #2]
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	709a      	strb	r2, [r3, #2]
  if_descriptor->bAlternateSetting  = *(uint8_t *)(buf + 3U);
 8009b3a:	683b      	ldr	r3, [r7, #0]
 8009b3c:	78da      	ldrb	r2, [r3, #3]
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	70da      	strb	r2, [r3, #3]
  if_descriptor->bNumEndpoints      = MIN(*(uint8_t *)(buf + 4U), USBH_MAX_NUM_ENDPOINTS);
 8009b42:	683b      	ldr	r3, [r7, #0]
 8009b44:	3304      	adds	r3, #4
 8009b46:	781b      	ldrb	r3, [r3, #0]
 8009b48:	2b02      	cmp	r3, #2
 8009b4a:	bf28      	it	cs
 8009b4c:	2302      	movcs	r3, #2
 8009b4e:	b2da      	uxtb	r2, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	711a      	strb	r2, [r3, #4]
  if_descriptor->bInterfaceClass    = *(uint8_t *)(buf + 5U);
 8009b54:	683b      	ldr	r3, [r7, #0]
 8009b56:	795a      	ldrb	r2, [r3, #5]
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	715a      	strb	r2, [r3, #5]
  if_descriptor->bInterfaceSubClass = *(uint8_t *)(buf + 6U);
 8009b5c:	683b      	ldr	r3, [r7, #0]
 8009b5e:	799a      	ldrb	r2, [r3, #6]
 8009b60:	687b      	ldr	r3, [r7, #4]
 8009b62:	719a      	strb	r2, [r3, #6]
  if_descriptor->bInterfaceProtocol = *(uint8_t *)(buf + 7U);
 8009b64:	683b      	ldr	r3, [r7, #0]
 8009b66:	79da      	ldrb	r2, [r3, #7]
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	71da      	strb	r2, [r3, #7]
  if_descriptor->iInterface         = *(uint8_t *)(buf + 8U);
 8009b6c:	683b      	ldr	r3, [r7, #0]
 8009b6e:	7a1a      	ldrb	r2, [r3, #8]
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	721a      	strb	r2, [r3, #8]
}
 8009b74:	bf00      	nop
 8009b76:	370c      	adds	r7, #12
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <USBH_ParseEPDesc>:
  * @param  ep_descriptor: Endpoint descriptor destination address
  * @param  buf: Buffer where the parsed descriptor stored
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_ParseEPDesc(USBH_HandleTypeDef *phost, USBH_EpDescTypeDef *ep_descriptor, uint8_t *buf)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b087      	sub	sp, #28
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	60f8      	str	r0, [r7, #12]
 8009b88:	60b9      	str	r1, [r7, #8]
 8009b8a:	607a      	str	r2, [r7, #4]
  USBH_StatusTypeDef status = USBH_OK;
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	75fb      	strb	r3, [r7, #23]

  ep_descriptor->bLength          = *(uint8_t *)(buf + 0U);
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	781a      	ldrb	r2, [r3, #0]
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	701a      	strb	r2, [r3, #0]
  ep_descriptor->bDescriptorType  = *(uint8_t *)(buf + 1U);
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	785a      	ldrb	r2, [r3, #1]
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	705a      	strb	r2, [r3, #1]
  ep_descriptor->bEndpointAddress = *(uint8_t *)(buf + 2U);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	789a      	ldrb	r2, [r3, #2]
 8009ba4:	68bb      	ldr	r3, [r7, #8]
 8009ba6:	709a      	strb	r2, [r3, #2]
  ep_descriptor->bmAttributes     = *(uint8_t *)(buf + 3U);
 8009ba8:	687b      	ldr	r3, [r7, #4]
 8009baa:	78da      	ldrb	r2, [r3, #3]
 8009bac:	68bb      	ldr	r3, [r7, #8]
 8009bae:	70da      	strb	r2, [r3, #3]
  ep_descriptor->wMaxPacketSize   = LE16(buf + 4U);
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	3304      	adds	r3, #4
 8009bb4:	781b      	ldrb	r3, [r3, #0]
 8009bb6:	461a      	mov	r2, r3
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	3305      	adds	r3, #5
 8009bbc:	781b      	ldrb	r3, [r3, #0]
 8009bbe:	021b      	lsls	r3, r3, #8
 8009bc0:	b29b      	uxth	r3, r3
 8009bc2:	4313      	orrs	r3, r2
 8009bc4:	b29a      	uxth	r2, r3
 8009bc6:	68bb      	ldr	r3, [r7, #8]
 8009bc8:	809a      	strh	r2, [r3, #4]
  ep_descriptor->bInterval        = *(uint8_t *)(buf + 6U);
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	799a      	ldrb	r2, [r3, #6]
 8009bce:	68bb      	ldr	r3, [r7, #8]
 8009bd0:	719a      	strb	r2, [r3, #6]

  /* Make sure that wMaxPacketSize is different from 0 */
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009bd2:	68bb      	ldr	r3, [r7, #8]
 8009bd4:	889b      	ldrh	r3, [r3, #4]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d009      	beq.n	8009bee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009bda:	68bb      	ldr	r3, [r7, #8]
 8009bdc:	889b      	ldrh	r3, [r3, #4]
  if ((ep_descriptor->wMaxPacketSize == 0x00U) ||
 8009bde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009be2:	d804      	bhi.n	8009bee <USBH_ParseEPDesc+0x6e>
      (ep_descriptor->wMaxPacketSize > USBH_MAX_DATA_BUFFER))
 8009be4:	68bb      	ldr	r3, [r7, #8]
 8009be6:	889b      	ldrh	r3, [r3, #4]
      (ep_descriptor->wMaxPacketSize > USBH_MAX_EP_PACKET_SIZE) ||
 8009be8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009bec:	d901      	bls.n	8009bf2 <USBH_ParseEPDesc+0x72>
  {
    status = USBH_NOT_SUPPORTED;
 8009bee:	2303      	movs	r3, #3
 8009bf0:	75fb      	strb	r3, [r7, #23]
  }

  if (phost->device.speed == (uint8_t)USBH_SPEED_HIGH)
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009bf8:	2b00      	cmp	r3, #0
 8009bfa:	d136      	bne.n	8009c6a <USBH_ParseEPDesc+0xea>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK)
 8009bfc:	68bb      	ldr	r3, [r7, #8]
 8009bfe:	78db      	ldrb	r3, [r3, #3]
 8009c00:	f003 0303 	and.w	r3, r3, #3
 8009c04:	2b02      	cmp	r3, #2
 8009c06:	d108      	bne.n	8009c1a <USBH_ParseEPDesc+0x9a>
    {
      if (ep_descriptor->wMaxPacketSize > 512U)
 8009c08:	68bb      	ldr	r3, [r7, #8]
 8009c0a:	889b      	ldrh	r3, [r3, #4]
 8009c0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8009c10:	f240 8097 	bls.w	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c14:	2303      	movs	r3, #3
 8009c16:	75fb      	strb	r3, [r7, #23]
 8009c18:	e093      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009c1a:	68bb      	ldr	r3, [r7, #8]
 8009c1c:	78db      	ldrb	r3, [r3, #3]
 8009c1e:	f003 0303 	and.w	r3, r3, #3
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d107      	bne.n	8009c36 <USBH_ParseEPDesc+0xb6>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c26:	68bb      	ldr	r3, [r7, #8]
 8009c28:	889b      	ldrh	r3, [r3, #4]
 8009c2a:	2b40      	cmp	r3, #64	@ 0x40
 8009c2c:	f240 8089 	bls.w	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c30:	2303      	movs	r3, #3
 8009c32:	75fb      	strb	r3, [r7, #23]
 8009c34:	e085      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For high-speed interrupt/isochronous endpoints, bInterval can vary from 1 to 16 */
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c36:	68bb      	ldr	r3, [r7, #8]
 8009c38:	78db      	ldrb	r3, [r3, #3]
 8009c3a:	f003 0303 	and.w	r3, r3, #3
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d005      	beq.n	8009c4e <USBH_ParseEPDesc+0xce>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR))
 8009c42:	68bb      	ldr	r3, [r7, #8]
 8009c44:	78db      	ldrb	r3, [r3, #3]
 8009c46:	f003 0303 	and.w	r3, r3, #3
    else if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC) ||
 8009c4a:	2b03      	cmp	r3, #3
 8009c4c:	d10a      	bne.n	8009c64 <USBH_ParseEPDesc+0xe4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c4e:	68bb      	ldr	r3, [r7, #8]
 8009c50:	799b      	ldrb	r3, [r3, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d003      	beq.n	8009c5e <USBH_ParseEPDesc+0xde>
 8009c56:	68bb      	ldr	r3, [r7, #8]
 8009c58:	799b      	ldrb	r3, [r3, #6]
 8009c5a:	2b10      	cmp	r3, #16
 8009c5c:	d970      	bls.n	8009d40 <USBH_ParseEPDesc+0x1c0>
      {
        status = USBH_NOT_SUPPORTED;
 8009c5e:	2303      	movs	r3, #3
 8009c60:	75fb      	strb	r3, [r7, #23]
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009c62:	e06d      	b.n	8009d40 <USBH_ParseEPDesc+0x1c0>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009c64:	2303      	movs	r3, #3
 8009c66:	75fb      	strb	r3, [r7, #23]
 8009c68:	e06b      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_FULL)
 8009c6a:	68fb      	ldr	r3, [r7, #12]
 8009c6c:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009c70:	2b01      	cmp	r3, #1
 8009c72:	d13c      	bne.n	8009cee <USBH_ParseEPDesc+0x16e>
  {
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009c74:	68bb      	ldr	r3, [r7, #8]
 8009c76:	78db      	ldrb	r3, [r3, #3]
 8009c78:	f003 0303 	and.w	r3, r3, #3
 8009c7c:	2b02      	cmp	r3, #2
 8009c7e:	d005      	beq.n	8009c8c <USBH_ParseEPDesc+0x10c>
        ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL))
 8009c80:	68bb      	ldr	r3, [r7, #8]
 8009c82:	78db      	ldrb	r3, [r3, #3]
 8009c84:	f003 0303 	and.w	r3, r3, #3
    if (((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_BULK) ||
 8009c88:	2b00      	cmp	r3, #0
 8009c8a:	d106      	bne.n	8009c9a <USBH_ParseEPDesc+0x11a>
    {
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c8c:	68bb      	ldr	r3, [r7, #8]
 8009c8e:	889b      	ldrh	r3, [r3, #4]
 8009c90:	2b40      	cmp	r3, #64	@ 0x40
 8009c92:	d956      	bls.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009c94:	2303      	movs	r3, #3
 8009c96:	75fb      	strb	r3, [r7, #23]
      if (ep_descriptor->wMaxPacketSize > 64U)
 8009c98:	e053      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed isochronous endpoints, the value of bInterval must be in the range from 1 to 16.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_ISOC)
 8009c9a:	68bb      	ldr	r3, [r7, #8]
 8009c9c:	78db      	ldrb	r3, [r3, #3]
 8009c9e:	f003 0303 	and.w	r3, r3, #3
 8009ca2:	2b01      	cmp	r3, #1
 8009ca4:	d10e      	bne.n	8009cc4 <USBH_ParseEPDesc+0x144>
    {
      if ((ep_descriptor->bInterval == 0U) ||
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	799b      	ldrb	r3, [r3, #6]
 8009caa:	2b00      	cmp	r3, #0
 8009cac:	d007      	beq.n	8009cbe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->bInterval > 0x10U) ||
 8009cae:	68bb      	ldr	r3, [r7, #8]
 8009cb0:	799b      	ldrb	r3, [r3, #6]
      if ((ep_descriptor->bInterval == 0U) ||
 8009cb2:	2b10      	cmp	r3, #16
 8009cb4:	d803      	bhi.n	8009cbe <USBH_ParseEPDesc+0x13e>
          (ep_descriptor->wMaxPacketSize > 64U))
 8009cb6:	68bb      	ldr	r3, [r7, #8]
 8009cb8:	889b      	ldrh	r3, [r3, #4]
          (ep_descriptor->bInterval > 0x10U) ||
 8009cba:	2b40      	cmp	r3, #64	@ 0x40
 8009cbc:	d941      	bls.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009cbe:	2303      	movs	r3, #3
 8009cc0:	75fb      	strb	r3, [r7, #23]
 8009cc2:	e03e      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For full-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009cc4:	68bb      	ldr	r3, [r7, #8]
 8009cc6:	78db      	ldrb	r3, [r3, #3]
 8009cc8:	f003 0303 	and.w	r3, r3, #3
 8009ccc:	2b03      	cmp	r3, #3
 8009cce:	d10b      	bne.n	8009ce8 <USBH_ParseEPDesc+0x168>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 1023U))
 8009cd0:	68bb      	ldr	r3, [r7, #8]
 8009cd2:	799b      	ldrb	r3, [r3, #6]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d004      	beq.n	8009ce2 <USBH_ParseEPDesc+0x162>
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	889b      	ldrh	r3, [r3, #4]
 8009cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8009ce0:	d32f      	bcc.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	75fb      	strb	r3, [r7, #23]
 8009ce6:	e02c      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009ce8:	2303      	movs	r3, #3
 8009cea:	75fb      	strb	r3, [r7, #23]
 8009cec:	e029      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else if (phost->device.speed == (uint8_t)USBH_SPEED_LOW)
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 8009cf4:	2b02      	cmp	r3, #2
 8009cf6:	d120      	bne.n	8009d3a <USBH_ParseEPDesc+0x1ba>
  {
    if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_CTRL)
 8009cf8:	68bb      	ldr	r3, [r7, #8]
 8009cfa:	78db      	ldrb	r3, [r3, #3]
 8009cfc:	f003 0303 	and.w	r3, r3, #3
 8009d00:	2b00      	cmp	r3, #0
 8009d02:	d106      	bne.n	8009d12 <USBH_ParseEPDesc+0x192>
    {
      if (ep_descriptor->wMaxPacketSize != 8U)
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	889b      	ldrh	r3, [r3, #4]
 8009d08:	2b08      	cmp	r3, #8
 8009d0a:	d01a      	beq.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	75fb      	strb	r3, [r7, #23]
 8009d10:	e017      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    /* For low-speed interrupt endpoints, the value of bInterval may be from 1 to 255.*/
    else if ((ep_descriptor->bmAttributes & EP_TYPE_MSK) == EP_TYPE_INTR)
 8009d12:	68bb      	ldr	r3, [r7, #8]
 8009d14:	78db      	ldrb	r3, [r3, #3]
 8009d16:	f003 0303 	and.w	r3, r3, #3
 8009d1a:	2b03      	cmp	r3, #3
 8009d1c:	d10a      	bne.n	8009d34 <USBH_ParseEPDesc+0x1b4>
    {
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->wMaxPacketSize > 8U))
 8009d1e:	68bb      	ldr	r3, [r7, #8]
 8009d20:	799b      	ldrb	r3, [r3, #6]
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	d003      	beq.n	8009d2e <USBH_ParseEPDesc+0x1ae>
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	889b      	ldrh	r3, [r3, #4]
 8009d2a:	2b08      	cmp	r3, #8
 8009d2c:	d909      	bls.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      {
        status = USBH_NOT_SUPPORTED;
 8009d2e:	2303      	movs	r3, #3
 8009d30:	75fb      	strb	r3, [r7, #23]
 8009d32:	e006      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      }
    }
    else
    {
      status = USBH_NOT_SUPPORTED;
 8009d34:	2303      	movs	r3, #3
 8009d36:	75fb      	strb	r3, [r7, #23]
 8009d38:	e003      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
    }
  }
  else
  {
    status = USBH_NOT_SUPPORTED;
 8009d3a:	2303      	movs	r3, #3
 8009d3c:	75fb      	strb	r3, [r7, #23]
 8009d3e:	e000      	b.n	8009d42 <USBH_ParseEPDesc+0x1c2>
      if ((ep_descriptor->bInterval == 0U) || (ep_descriptor->bInterval > 0x10U))
 8009d40:	bf00      	nop
  }

  return status;
 8009d42:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d44:	4618      	mov	r0, r3
 8009d46:	371c      	adds	r7, #28
 8009d48:	46bd      	mov	sp, r7
 8009d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d4e:	4770      	bx	lr

08009d50 <USBH_ParseStringDesc>:
  * @param  pdest: Destination address pointer
  * @param  length: Length of the descriptor
  * @retval None
  */
static void USBH_ParseStringDesc(uint8_t *psrc, uint8_t *pdest, uint16_t length)
{
 8009d50:	b480      	push	{r7}
 8009d52:	b087      	sub	sp, #28
 8009d54:	af00      	add	r7, sp, #0
 8009d56:	60f8      	str	r0, [r7, #12]
 8009d58:	60b9      	str	r1, [r7, #8]
 8009d5a:	4613      	mov	r3, r2
 8009d5c:	80fb      	strh	r3, [r7, #6]
  */

  /* Check which is lower size, the Size of string or the length of bytes read
  from the device */

  if (psrc[1] == USB_DESC_TYPE_STRING)
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	3301      	adds	r3, #1
 8009d62:	781b      	ldrb	r3, [r3, #0]
 8009d64:	2b03      	cmp	r3, #3
 8009d66:	d120      	bne.n	8009daa <USBH_ParseStringDesc+0x5a>
  {
    /* Make sure the Descriptor is String Type */

    /* psrc[0] contains Size of Descriptor, subtract 2 to get the length of string */
    strlength = ((((uint16_t)psrc[0] - 2U) <= length) ? ((uint16_t)psrc[0] - 2U) : length);
 8009d68:	68fb      	ldr	r3, [r7, #12]
 8009d6a:	781b      	ldrb	r3, [r3, #0]
 8009d6c:	1e9a      	subs	r2, r3, #2
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	4293      	cmp	r3, r2
 8009d72:	bf28      	it	cs
 8009d74:	4613      	movcs	r3, r2
 8009d76:	82bb      	strh	r3, [r7, #20]

    /* Adjust the offset ignoring the String Len and Descriptor type */
    psrc += 2U;
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	3302      	adds	r3, #2
 8009d7c:	60fb      	str	r3, [r7, #12]

    for (idx = 0U; idx < strlength; idx += 2U)
 8009d7e:	2300      	movs	r3, #0
 8009d80:	82fb      	strh	r3, [r7, #22]
 8009d82:	e00b      	b.n	8009d9c <USBH_ParseStringDesc+0x4c>
    {
      /* Copy Only the string and ignore the UNICODE ID, hence add the src */
      *pdest =  psrc[idx];
 8009d84:	8afb      	ldrh	r3, [r7, #22]
 8009d86:	68fa      	ldr	r2, [r7, #12]
 8009d88:	4413      	add	r3, r2
 8009d8a:	781a      	ldrb	r2, [r3, #0]
 8009d8c:	68bb      	ldr	r3, [r7, #8]
 8009d8e:	701a      	strb	r2, [r3, #0]
      pdest++;
 8009d90:	68bb      	ldr	r3, [r7, #8]
 8009d92:	3301      	adds	r3, #1
 8009d94:	60bb      	str	r3, [r7, #8]
    for (idx = 0U; idx < strlength; idx += 2U)
 8009d96:	8afb      	ldrh	r3, [r7, #22]
 8009d98:	3302      	adds	r3, #2
 8009d9a:	82fb      	strh	r3, [r7, #22]
 8009d9c:	8afa      	ldrh	r2, [r7, #22]
 8009d9e:	8abb      	ldrh	r3, [r7, #20]
 8009da0:	429a      	cmp	r2, r3
 8009da2:	d3ef      	bcc.n	8009d84 <USBH_ParseStringDesc+0x34>
    }
    *pdest = 0U; /* mark end of string */
 8009da4:	68bb      	ldr	r3, [r7, #8]
 8009da6:	2200      	movs	r2, #0
 8009da8:	701a      	strb	r2, [r3, #0]
  }
}
 8009daa:	bf00      	nop
 8009dac:	371c      	adds	r7, #28
 8009dae:	46bd      	mov	sp, r7
 8009db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009db4:	4770      	bx	lr

08009db6 <USBH_GetNextDesc>:
  * @param  buf: Buffer where the cfg descriptor is available
  * @param  ptr: data pointer inside the cfg descriptor
  * @retval next header
  */
USBH_DescHeader_t *USBH_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8009db6:	b480      	push	{r7}
 8009db8:	b085      	sub	sp, #20
 8009dba:	af00      	add	r7, sp, #0
 8009dbc:	6078      	str	r0, [r7, #4]
 8009dbe:	6039      	str	r1, [r7, #0]
  USBH_DescHeader_t *pnext;

  *ptr += ((USBH_DescHeader_t *)(void *)pbuf)->bLength;
 8009dc0:	683b      	ldr	r3, [r7, #0]
 8009dc2:	881b      	ldrh	r3, [r3, #0]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	7812      	ldrb	r2, [r2, #0]
 8009dc8:	4413      	add	r3, r2
 8009dca:	b29a      	uxth	r2, r3
 8009dcc:	683b      	ldr	r3, [r7, #0]
 8009dce:	801a      	strh	r2, [r3, #0]
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
                                        ((USBH_DescHeader_t *)(void *)pbuf)->bLength);
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	781b      	ldrb	r3, [r3, #0]
 8009dd4:	461a      	mov	r2, r3
  pnext = (USBH_DescHeader_t *)(void *)((uint8_t *)(void *)pbuf + \
 8009dd6:	687b      	ldr	r3, [r7, #4]
 8009dd8:	4413      	add	r3, r2
 8009dda:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8009ddc:	68fb      	ldr	r3, [r7, #12]
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	3714      	adds	r7, #20
 8009de2:	46bd      	mov	sp, r7
 8009de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de8:	4770      	bx	lr

08009dea <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8009dea:	b580      	push	{r7, lr}
 8009dec:	b086      	sub	sp, #24
 8009dee:	af00      	add	r7, sp, #0
 8009df0:	60f8      	str	r0, [r7, #12]
 8009df2:	60b9      	str	r1, [r7, #8]
 8009df4:	4613      	mov	r3, r2
 8009df6:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8009df8:	2301      	movs	r3, #1
 8009dfa:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8009dfc:	68fb      	ldr	r3, [r7, #12]
 8009dfe:	789b      	ldrb	r3, [r3, #2]
 8009e00:	2b01      	cmp	r3, #1
 8009e02:	d002      	beq.n	8009e0a <USBH_CtlReq+0x20>
 8009e04:	2b02      	cmp	r3, #2
 8009e06:	d00f      	beq.n	8009e28 <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8009e08:	e027      	b.n	8009e5a <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	68ba      	ldr	r2, [r7, #8]
 8009e0e:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	88fa      	ldrh	r2, [r7, #6]
 8009e14:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8009e16:	68fb      	ldr	r3, [r7, #12]
 8009e18:	2201      	movs	r2, #1
 8009e1a:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 8009e1c:	68fb      	ldr	r3, [r7, #12]
 8009e1e:	2202      	movs	r2, #2
 8009e20:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8009e22:	2301      	movs	r3, #1
 8009e24:	75fb      	strb	r3, [r7, #23]
      break;
 8009e26:	e018      	b.n	8009e5a <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 8009e28:	68f8      	ldr	r0, [r7, #12]
 8009e2a:	f000 f81b 	bl	8009e64 <USBH_HandleControl>
 8009e2e:	4603      	mov	r3, r0
 8009e30:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8009e32:	7dfb      	ldrb	r3, [r7, #23]
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	d002      	beq.n	8009e3e <USBH_CtlReq+0x54>
 8009e38:	7dfb      	ldrb	r3, [r7, #23]
 8009e3a:	2b03      	cmp	r3, #3
 8009e3c:	d106      	bne.n	8009e4c <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	2201      	movs	r2, #1
 8009e42:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8009e44:	68fb      	ldr	r3, [r7, #12]
 8009e46:	2200      	movs	r2, #0
 8009e48:	761a      	strb	r2, [r3, #24]
      break;
 8009e4a:	e005      	b.n	8009e58 <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 8009e4c:	7dfb      	ldrb	r3, [r7, #23]
 8009e4e:	2b02      	cmp	r3, #2
 8009e50:	d102      	bne.n	8009e58 <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2201      	movs	r2, #1
 8009e56:	709a      	strb	r2, [r3, #2]
      break;
 8009e58:	bf00      	nop
  }
  return status;
 8009e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3718      	adds	r7, #24
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}

08009e64 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8009e64:	b580      	push	{r7, lr}
 8009e66:	b086      	sub	sp, #24
 8009e68:	af02      	add	r7, sp, #8
 8009e6a:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8009e6c:	2301      	movs	r3, #1
 8009e6e:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8009e70:	2300      	movs	r3, #0
 8009e72:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	7e1b      	ldrb	r3, [r3, #24]
 8009e78:	3b01      	subs	r3, #1
 8009e7a:	2b0a      	cmp	r3, #10
 8009e7c:	f200 8156 	bhi.w	800a12c <USBH_HandleControl+0x2c8>
 8009e80:	a201      	add	r2, pc, #4	@ (adr r2, 8009e88 <USBH_HandleControl+0x24>)
 8009e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e86:	bf00      	nop
 8009e88:	08009eb5 	.word	0x08009eb5
 8009e8c:	08009ecf 	.word	0x08009ecf
 8009e90:	08009f39 	.word	0x08009f39
 8009e94:	08009f5f 	.word	0x08009f5f
 8009e98:	08009f97 	.word	0x08009f97
 8009e9c:	08009fc1 	.word	0x08009fc1
 8009ea0:	0800a013 	.word	0x0800a013
 8009ea4:	0800a035 	.word	0x0800a035
 8009ea8:	0800a071 	.word	0x0800a071
 8009eac:	0800a097 	.word	0x0800a097
 8009eb0:	0800a0d5 	.word	0x0800a0d5
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      (void)USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 8009eb4:	687b      	ldr	r3, [r7, #4]
 8009eb6:	f103 0110 	add.w	r1, r3, #16
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	795b      	ldrb	r3, [r3, #5]
 8009ebe:	461a      	mov	r2, r3
 8009ec0:	6878      	ldr	r0, [r7, #4]
 8009ec2:	f000 f943 	bl	800a14c <USBH_CtlSendSetup>
                              phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 8009ec6:	687b      	ldr	r3, [r7, #4]
 8009ec8:	2202      	movs	r2, #2
 8009eca:	761a      	strb	r2, [r3, #24]
      break;
 8009ecc:	e139      	b.n	800a142 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	795b      	ldrb	r3, [r3, #5]
 8009ed2:	4619      	mov	r1, r3
 8009ed4:	6878      	ldr	r0, [r7, #4]
 8009ed6:	f000 fcc5 	bl	800a864 <USBH_LL_GetURBState>
 8009eda:	4603      	mov	r3, r0
 8009edc:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 8009ede:	7bbb      	ldrb	r3, [r7, #14]
 8009ee0:	2b01      	cmp	r3, #1
 8009ee2:	d11e      	bne.n	8009f22 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	7c1b      	ldrb	r3, [r3, #16]
 8009ee8:	f023 037f 	bic.w	r3, r3, #127	@ 0x7f
 8009eec:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	8adb      	ldrh	r3, [r3, #22]
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d00a      	beq.n	8009f0c <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 8009ef6:	7b7b      	ldrb	r3, [r7, #13]
 8009ef8:	2b80      	cmp	r3, #128	@ 0x80
 8009efa:	d103      	bne.n	8009f04 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 8009efc:	687b      	ldr	r3, [r7, #4]
 8009efe:	2203      	movs	r2, #3
 8009f00:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f02:	e115      	b.n	800a130 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2205      	movs	r2, #5
 8009f08:	761a      	strb	r2, [r3, #24]
      break;
 8009f0a:	e111      	b.n	800a130 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8009f0c:	7b7b      	ldrb	r3, [r7, #13]
 8009f0e:	2b80      	cmp	r3, #128	@ 0x80
 8009f10:	d103      	bne.n	8009f1a <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2209      	movs	r2, #9
 8009f16:	761a      	strb	r2, [r3, #24]
      break;
 8009f18:	e10a      	b.n	800a130 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2207      	movs	r2, #7
 8009f1e:	761a      	strb	r2, [r3, #24]
      break;
 8009f20:	e106      	b.n	800a130 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8009f22:	7bbb      	ldrb	r3, [r7, #14]
 8009f24:	2b04      	cmp	r3, #4
 8009f26:	d003      	beq.n	8009f30 <USBH_HandleControl+0xcc>
 8009f28:	7bbb      	ldrb	r3, [r7, #14]
 8009f2a:	2b02      	cmp	r3, #2
 8009f2c:	f040 8100 	bne.w	800a130 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	220b      	movs	r2, #11
 8009f34:	761a      	strb	r2, [r3, #24]
      break;
 8009f36:	e0fb      	b.n	800a130 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009f3e:	b29a      	uxth	r2, r3
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	81da      	strh	r2, [r3, #14]
      (void)USBH_CtlReceiveData(phost, phost->Control.buff,
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	6899      	ldr	r1, [r3, #8]
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	899a      	ldrh	r2, [r3, #12]
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	791b      	ldrb	r3, [r3, #4]
 8009f50:	6878      	ldr	r0, [r7, #4]
 8009f52:	f000 f93a 	bl	800a1ca <USBH_CtlReceiveData>
                                phost->Control.length, phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	2204      	movs	r2, #4
 8009f5a:	761a      	strb	r2, [r3, #24]
      break;
 8009f5c:	e0f1      	b.n	800a142 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	791b      	ldrb	r3, [r3, #4]
 8009f62:	4619      	mov	r1, r3
 8009f64:	6878      	ldr	r0, [r7, #4]
 8009f66:	f000 fc7d 	bl	800a864 <USBH_LL_GetURBState>
 8009f6a:	4603      	mov	r3, r0
 8009f6c:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8009f6e:	7bbb      	ldrb	r3, [r7, #14]
 8009f70:	2b01      	cmp	r3, #1
 8009f72:	d102      	bne.n	8009f7a <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	2209      	movs	r2, #9
 8009f78:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 8009f7a:	7bbb      	ldrb	r3, [r7, #14]
 8009f7c:	2b05      	cmp	r3, #5
 8009f7e:	d102      	bne.n	8009f86 <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8009f80:	2303      	movs	r3, #3
 8009f82:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009f84:	e0d6      	b.n	800a134 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 8009f86:	7bbb      	ldrb	r3, [r7, #14]
 8009f88:	2b04      	cmp	r3, #4
 8009f8a:	f040 80d3 	bne.w	800a134 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	220b      	movs	r2, #11
 8009f92:	761a      	strb	r2, [r3, #24]
      break;
 8009f94:	e0ce      	b.n	800a134 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      (void)USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	6899      	ldr	r1, [r3, #8]
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	899a      	ldrh	r2, [r3, #12]
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	795b      	ldrb	r3, [r3, #5]
 8009fa2:	2001      	movs	r0, #1
 8009fa4:	9000      	str	r0, [sp, #0]
 8009fa6:	6878      	ldr	r0, [r7, #4]
 8009fa8:	f000 f8ea 	bl	800a180 <USBH_CtlSendData>
                             phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 8009fb2:	b29a      	uxth	r2, r3
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	2206      	movs	r2, #6
 8009fbc:	761a      	strb	r2, [r3, #24]
      break;
 8009fbe:	e0c0      	b.n	800a142 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 8009fc0:	687b      	ldr	r3, [r7, #4]
 8009fc2:	795b      	ldrb	r3, [r3, #5]
 8009fc4:	4619      	mov	r1, r3
 8009fc6:	6878      	ldr	r0, [r7, #4]
 8009fc8:	f000 fc4c 	bl	800a864 <USBH_LL_GetURBState>
 8009fcc:	4603      	mov	r3, r0
 8009fce:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8009fd0:	7bbb      	ldrb	r3, [r7, #14]
 8009fd2:	2b01      	cmp	r3, #1
 8009fd4:	d103      	bne.n	8009fde <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	2207      	movs	r2, #7
 8009fda:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 8009fdc:	e0ac      	b.n	800a138 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 8009fde:	7bbb      	ldrb	r3, [r7, #14]
 8009fe0:	2b05      	cmp	r3, #5
 8009fe2:	d105      	bne.n	8009ff0 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 8009fe4:	687b      	ldr	r3, [r7, #4]
 8009fe6:	220c      	movs	r2, #12
 8009fe8:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 8009fea:	2303      	movs	r3, #3
 8009fec:	73fb      	strb	r3, [r7, #15]
      break;
 8009fee:	e0a3      	b.n	800a138 <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 8009ff0:	7bbb      	ldrb	r3, [r7, #14]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d103      	bne.n	8009ffe <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	2205      	movs	r2, #5
 8009ffa:	761a      	strb	r2, [r3, #24]
      break;
 8009ffc:	e09c      	b.n	800a138 <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 8009ffe:	7bbb      	ldrb	r3, [r7, #14]
 800a000:	2b04      	cmp	r3, #4
 800a002:	f040 8099 	bne.w	800a138 <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	220b      	movs	r2, #11
 800a00a:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 800a00c:	2302      	movs	r3, #2
 800a00e:	73fb      	strb	r3, [r7, #15]
      break;
 800a010:	e092      	b.n	800a138 <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      (void)USBH_CtlReceiveData(phost, NULL, 0U, phost->Control.pipe_in);
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	791b      	ldrb	r3, [r3, #4]
 800a016:	2200      	movs	r2, #0
 800a018:	2100      	movs	r1, #0
 800a01a:	6878      	ldr	r0, [r7, #4]
 800a01c:	f000 f8d5 	bl	800a1ca <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a020:	687b      	ldr	r3, [r7, #4]
 800a022:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a026:	b29a      	uxth	r2, r3
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	2208      	movs	r2, #8
 800a030:	761a      	strb	r2, [r3, #24]

      break;
 800a032:	e086      	b.n	800a142 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	791b      	ldrb	r3, [r3, #4]
 800a038:	4619      	mov	r1, r3
 800a03a:	6878      	ldr	r0, [r7, #4]
 800a03c:	f000 fc12 	bl	800a864 <USBH_LL_GetURBState>
 800a040:	4603      	mov	r3, r0
 800a042:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 800a044:	7bbb      	ldrb	r3, [r7, #14]
 800a046:	2b01      	cmp	r3, #1
 800a048:	d105      	bne.n	800a056 <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800a04a:	687b      	ldr	r3, [r7, #4]
 800a04c:	220d      	movs	r2, #13
 800a04e:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 800a050:	2300      	movs	r3, #0
 800a052:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a054:	e072      	b.n	800a13c <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800a056:	7bbb      	ldrb	r3, [r7, #14]
 800a058:	2b04      	cmp	r3, #4
 800a05a:	d103      	bne.n	800a064 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	220b      	movs	r2, #11
 800a060:	761a      	strb	r2, [r3, #24]
      break;
 800a062:	e06b      	b.n	800a13c <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 800a064:	7bbb      	ldrb	r3, [r7, #14]
 800a066:	2b05      	cmp	r3, #5
 800a068:	d168      	bne.n	800a13c <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800a06a:	2303      	movs	r3, #3
 800a06c:	73fb      	strb	r3, [r7, #15]
      break;
 800a06e:	e065      	b.n	800a13c <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      (void)USBH_CtlSendData(phost, NULL, 0U, phost->Control.pipe_out, 1U);
 800a070:	687b      	ldr	r3, [r7, #4]
 800a072:	795b      	ldrb	r3, [r3, #5]
 800a074:	2201      	movs	r2, #1
 800a076:	9200      	str	r2, [sp, #0]
 800a078:	2200      	movs	r2, #0
 800a07a:	2100      	movs	r1, #0
 800a07c:	6878      	ldr	r0, [r7, #4]
 800a07e:	f000 f87f 	bl	800a180 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 800a082:	687b      	ldr	r3, [r7, #4]
 800a084:	f8d3 33c4 	ldr.w	r3, [r3, #964]	@ 0x3c4
 800a088:	b29a      	uxth	r2, r3
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	220a      	movs	r2, #10
 800a092:	761a      	strb	r2, [r3, #24]
      break;
 800a094:	e055      	b.n	800a142 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	795b      	ldrb	r3, [r3, #5]
 800a09a:	4619      	mov	r1, r3
 800a09c:	6878      	ldr	r0, [r7, #4]
 800a09e:	f000 fbe1 	bl	800a864 <USBH_LL_GetURBState>
 800a0a2:	4603      	mov	r3, r0
 800a0a4:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800a0a6:	7bbb      	ldrb	r3, [r7, #14]
 800a0a8:	2b01      	cmp	r3, #1
 800a0aa:	d105      	bne.n	800a0b8 <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 800a0ac:	2300      	movs	r3, #0
 800a0ae:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 800a0b0:	687b      	ldr	r3, [r7, #4]
 800a0b2:	220d      	movs	r2, #13
 800a0b4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, 0U);
#endif
#endif
        }
      }
      break;
 800a0b6:	e043      	b.n	800a140 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 800a0b8:	7bbb      	ldrb	r3, [r7, #14]
 800a0ba:	2b02      	cmp	r3, #2
 800a0bc:	d103      	bne.n	800a0c6 <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2209      	movs	r2, #9
 800a0c2:	761a      	strb	r2, [r3, #24]
      break;
 800a0c4:	e03c      	b.n	800a140 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 800a0c6:	7bbb      	ldrb	r3, [r7, #14]
 800a0c8:	2b04      	cmp	r3, #4
 800a0ca:	d139      	bne.n	800a140 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 800a0cc:	687b      	ldr	r3, [r7, #4]
 800a0ce:	220b      	movs	r2, #11
 800a0d0:	761a      	strb	r2, [r3, #24]
      break;
 800a0d2:	e035      	b.n	800a140 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 800a0d4:	687b      	ldr	r3, [r7, #4]
 800a0d6:	7e5b      	ldrb	r3, [r3, #25]
 800a0d8:	3301      	adds	r3, #1
 800a0da:	b2da      	uxtb	r2, r3
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	765a      	strb	r2, [r3, #25]
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	7e5b      	ldrb	r3, [r3, #25]
 800a0e4:	2b02      	cmp	r3, #2
 800a0e6:	d806      	bhi.n	800a0f6 <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 800a0ee:	687b      	ldr	r3, [r7, #4]
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	709a      	strb	r2, [r3, #2]
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 800a0f4:	e025      	b.n	800a142 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	f8d3 33d4 	ldr.w	r3, [r3, #980]	@ 0x3d4
 800a0fc:	2106      	movs	r1, #6
 800a0fe:	6878      	ldr	r0, [r7, #4]
 800a100:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	765a      	strb	r2, [r3, #25]
        (void)USBH_FreePipe(phost, phost->Control.pipe_out);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	795b      	ldrb	r3, [r3, #5]
 800a10c:	4619      	mov	r1, r3
 800a10e:	6878      	ldr	r0, [r7, #4]
 800a110:	f000 f90c 	bl	800a32c <USBH_FreePipe>
        (void)USBH_FreePipe(phost, phost->Control.pipe_in);
 800a114:	687b      	ldr	r3, [r7, #4]
 800a116:	791b      	ldrb	r3, [r3, #4]
 800a118:	4619      	mov	r1, r3
 800a11a:	6878      	ldr	r0, [r7, #4]
 800a11c:	f000 f906 	bl	800a32c <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 800a120:	687b      	ldr	r3, [r7, #4]
 800a122:	2200      	movs	r2, #0
 800a124:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800a126:	2302      	movs	r3, #2
 800a128:	73fb      	strb	r3, [r7, #15]
      break;
 800a12a:	e00a      	b.n	800a142 <USBH_HandleControl+0x2de>

    default:
      break;
 800a12c:	bf00      	nop
 800a12e:	e008      	b.n	800a142 <USBH_HandleControl+0x2de>
      break;
 800a130:	bf00      	nop
 800a132:	e006      	b.n	800a142 <USBH_HandleControl+0x2de>
      break;
 800a134:	bf00      	nop
 800a136:	e004      	b.n	800a142 <USBH_HandleControl+0x2de>
      break;
 800a138:	bf00      	nop
 800a13a:	e002      	b.n	800a142 <USBH_HandleControl+0x2de>
      break;
 800a13c:	bf00      	nop
 800a13e:	e000      	b.n	800a142 <USBH_HandleControl+0x2de>
      break;
 800a140:	bf00      	nop
  }

  return status;
 800a142:	7bfb      	ldrb	r3, [r7, #15]
}
 800a144:	4618      	mov	r0, r3
 800a146:	3710      	adds	r7, #16
 800a148:	46bd      	mov	sp, r7
 800a14a:	bd80      	pop	{r7, pc}

0800a14c <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 800a14c:	b580      	push	{r7, lr}
 800a14e:	b088      	sub	sp, #32
 800a150:	af04      	add	r7, sp, #16
 800a152:	60f8      	str	r0, [r7, #12]
 800a154:	60b9      	str	r1, [r7, #8]
 800a156:	4613      	mov	r3, r2
 800a158:	71fb      	strb	r3, [r7, #7]

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a15a:	79f9      	ldrb	r1, [r7, #7]
 800a15c:	2300      	movs	r3, #0
 800a15e:	9303      	str	r3, [sp, #12]
 800a160:	2308      	movs	r3, #8
 800a162:	9302      	str	r3, [sp, #8]
 800a164:	68bb      	ldr	r3, [r7, #8]
 800a166:	9301      	str	r3, [sp, #4]
 800a168:	2300      	movs	r3, #0
 800a16a:	9300      	str	r3, [sp, #0]
 800a16c:	2300      	movs	r3, #0
 800a16e:	2200      	movs	r2, #0
 800a170:	68f8      	ldr	r0, [r7, #12]
 800a172:	f000 fb46 	bl	800a802 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_SETUP,       /* Type setup       */
                          buff,                 /* data buffer      */
                          USBH_SETUP_PKT_SIZE,  /* data length      */
                          0U);
  return USBH_OK;
 800a176:	2300      	movs	r3, #0
}
 800a178:	4618      	mov	r0, r3
 800a17a:	3710      	adds	r7, #16
 800a17c:	46bd      	mov	sp, r7
 800a17e:	bd80      	pop	{r7, pc}

0800a180 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 800a180:	b580      	push	{r7, lr}
 800a182:	b088      	sub	sp, #32
 800a184:	af04      	add	r7, sp, #16
 800a186:	60f8      	str	r0, [r7, #12]
 800a188:	60b9      	str	r1, [r7, #8]
 800a18a:	4611      	mov	r1, r2
 800a18c:	461a      	mov	r2, r3
 800a18e:	460b      	mov	r3, r1
 800a190:	80fb      	strh	r3, [r7, #6]
 800a192:	4613      	mov	r3, r2
 800a194:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d001      	beq.n	800a1a4 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1a4:	7979      	ldrb	r1, [r7, #5]
 800a1a6:	7e3b      	ldrb	r3, [r7, #24]
 800a1a8:	9303      	str	r3, [sp, #12]
 800a1aa:	88fb      	ldrh	r3, [r7, #6]
 800a1ac:	9302      	str	r3, [sp, #8]
 800a1ae:	68bb      	ldr	r3, [r7, #8]
 800a1b0:	9301      	str	r3, [sp, #4]
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	9300      	str	r3, [sp, #0]
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	2200      	movs	r2, #0
 800a1ba:	68f8      	ldr	r0, [r7, #12]
 800a1bc:	f000 fb21 	bl	800a802 <USBH_LL_SubmitURB>
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 800a1c0:	2300      	movs	r3, #0
}
 800a1c2:	4618      	mov	r0, r3
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b088      	sub	sp, #32
 800a1ce:	af04      	add	r7, sp, #16
 800a1d0:	60f8      	str	r0, [r7, #12]
 800a1d2:	60b9      	str	r1, [r7, #8]
 800a1d4:	4611      	mov	r1, r2
 800a1d6:	461a      	mov	r2, r3
 800a1d8:	460b      	mov	r3, r1
 800a1da:	80fb      	strh	r3, [r7, #6]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a1e0:	7979      	ldrb	r1, [r7, #5]
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	9303      	str	r3, [sp, #12]
 800a1e6:	88fb      	ldrh	r3, [r7, #6]
 800a1e8:	9302      	str	r3, [sp, #8]
 800a1ea:	68bb      	ldr	r3, [r7, #8]
 800a1ec:	9301      	str	r3, [sp, #4]
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	2201      	movs	r2, #1
 800a1f6:	68f8      	ldr	r0, [r7, #12]
 800a1f8:	f000 fb03 	bl	800a802 <USBH_LL_SubmitURB>
                          USBH_EP_CONTROL,      /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a1fc:	2300      	movs	r3, #0

}
 800a1fe:	4618      	mov	r0, r3
 800a200:	3710      	adds	r7, #16
 800a202:	46bd      	mov	sp, r7
 800a204:	bd80      	pop	{r7, pc}

0800a206 <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 800a206:	b580      	push	{r7, lr}
 800a208:	b088      	sub	sp, #32
 800a20a:	af04      	add	r7, sp, #16
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	4611      	mov	r1, r2
 800a212:	461a      	mov	r2, r3
 800a214:	460b      	mov	r3, r1
 800a216:	80fb      	strh	r3, [r7, #6]
 800a218:	4613      	mov	r3, r2
 800a21a:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f893 331d 	ldrb.w	r3, [r3, #797]	@ 0x31d
 800a222:	2b00      	cmp	r3, #0
 800a224:	d001      	beq.n	800a22a <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800a226:	2300      	movs	r3, #0
 800a228:	763b      	strb	r3, [r7, #24]
  }

  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a22a:	7979      	ldrb	r1, [r7, #5]
 800a22c:	7e3b      	ldrb	r3, [r7, #24]
 800a22e:	9303      	str	r3, [sp, #12]
 800a230:	88fb      	ldrh	r3, [r7, #6]
 800a232:	9302      	str	r3, [sp, #8]
 800a234:	68bb      	ldr	r3, [r7, #8]
 800a236:	9301      	str	r3, [sp, #4]
 800a238:	2301      	movs	r3, #1
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	2302      	movs	r3, #2
 800a23e:	2200      	movs	r2, #0
 800a240:	68f8      	ldr	r0, [r7, #12]
 800a242:	f000 fade 	bl	800a802 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800a246:	2300      	movs	r3, #0
}
 800a248:	4618      	mov	r0, r3
 800a24a:	3710      	adds	r7, #16
 800a24c:	46bd      	mov	sp, r7
 800a24e:	bd80      	pop	{r7, pc}

0800a250 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 800a250:	b580      	push	{r7, lr}
 800a252:	b088      	sub	sp, #32
 800a254:	af04      	add	r7, sp, #16
 800a256:	60f8      	str	r0, [r7, #12]
 800a258:	60b9      	str	r1, [r7, #8]
 800a25a:	4611      	mov	r1, r2
 800a25c:	461a      	mov	r2, r3
 800a25e:	460b      	mov	r3, r1
 800a260:	80fb      	strh	r3, [r7, #6]
 800a262:	4613      	mov	r3, r2
 800a264:	717b      	strb	r3, [r7, #5]
  (void)USBH_LL_SubmitURB(phost,                /* Driver handle    */
 800a266:	7979      	ldrb	r1, [r7, #5]
 800a268:	2300      	movs	r3, #0
 800a26a:	9303      	str	r3, [sp, #12]
 800a26c:	88fb      	ldrh	r3, [r7, #6]
 800a26e:	9302      	str	r3, [sp, #8]
 800a270:	68bb      	ldr	r3, [r7, #8]
 800a272:	9301      	str	r3, [sp, #4]
 800a274:	2301      	movs	r3, #1
 800a276:	9300      	str	r3, [sp, #0]
 800a278:	2302      	movs	r3, #2
 800a27a:	2201      	movs	r2, #1
 800a27c:	68f8      	ldr	r0, [r7, #12]
 800a27e:	f000 fac0 	bl	800a802 <USBH_LL_SubmitURB>
                          USBH_EP_BULK,         /* EP type          */
                          USBH_PID_DATA,        /* Type Data        */
                          buff,                 /* data buffer      */
                          length,               /* data length      */
                          0U);
  return USBH_OK;
 800a282:	2300      	movs	r3, #0
}
 800a284:	4618      	mov	r0, r3
 800a286:	3710      	adds	r7, #16
 800a288:	46bd      	mov	sp, r7
 800a28a:	bd80      	pop	{r7, pc}

0800a28c <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af04      	add	r7, sp, #16
 800a292:	6078      	str	r0, [r7, #4]
 800a294:	4608      	mov	r0, r1
 800a296:	4611      	mov	r1, r2
 800a298:	461a      	mov	r2, r3
 800a29a:	4603      	mov	r3, r0
 800a29c:	70fb      	strb	r3, [r7, #3]
 800a29e:	460b      	mov	r3, r1
 800a2a0:	70bb      	strb	r3, [r7, #2]
 800a2a2:	4613      	mov	r3, r2
 800a2a4:	707b      	strb	r3, [r7, #1]
  (void)USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800a2a6:	7878      	ldrb	r0, [r7, #1]
 800a2a8:	78ba      	ldrb	r2, [r7, #2]
 800a2aa:	78f9      	ldrb	r1, [r7, #3]
 800a2ac:	8b3b      	ldrh	r3, [r7, #24]
 800a2ae:	9302      	str	r3, [sp, #8]
 800a2b0:	7d3b      	ldrb	r3, [r7, #20]
 800a2b2:	9301      	str	r3, [sp, #4]
 800a2b4:	7c3b      	ldrb	r3, [r7, #16]
 800a2b6:	9300      	str	r3, [sp, #0]
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	6878      	ldr	r0, [r7, #4]
 800a2bc:	f000 fa53 	bl	800a766 <USBH_LL_OpenPipe>

  return USBH_OK;
 800a2c0:	2300      	movs	r3, #0
}
 800a2c2:	4618      	mov	r0, r3
 800a2c4:	3708      	adds	r7, #8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}

0800a2ca <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 800a2ca:	b580      	push	{r7, lr}
 800a2cc:	b082      	sub	sp, #8
 800a2ce:	af00      	add	r7, sp, #0
 800a2d0:	6078      	str	r0, [r7, #4]
 800a2d2:	460b      	mov	r3, r1
 800a2d4:	70fb      	strb	r3, [r7, #3]
  (void)USBH_LL_ClosePipe(phost, pipe_num);
 800a2d6:	78fb      	ldrb	r3, [r7, #3]
 800a2d8:	4619      	mov	r1, r3
 800a2da:	6878      	ldr	r0, [r7, #4]
 800a2dc:	f000 fa72 	bl	800a7c4 <USBH_LL_ClosePipe>

  return USBH_OK;
 800a2e0:	2300      	movs	r3, #0
}
 800a2e2:	4618      	mov	r0, r3
 800a2e4:	3708      	adds	r7, #8
 800a2e6:	46bd      	mov	sp, r7
 800a2e8:	bd80      	pop	{r7, pc}

0800a2ea <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 800a2ea:	b580      	push	{r7, lr}
 800a2ec:	b084      	sub	sp, #16
 800a2ee:	af00      	add	r7, sp, #0
 800a2f0:	6078      	str	r0, [r7, #4]
 800a2f2:	460b      	mov	r3, r1
 800a2f4:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 800a2f6:	6878      	ldr	r0, [r7, #4]
 800a2f8:	f000 f836 	bl	800a368 <USBH_GetFreePipe>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 800a300:	89fb      	ldrh	r3, [r7, #14]
 800a302:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800a306:	4293      	cmp	r3, r2
 800a308:	d00a      	beq.n	800a320 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = (uint32_t)(0x8000U | ep_addr);
 800a30a:	78fa      	ldrb	r2, [r7, #3]
 800a30c:	89fb      	ldrh	r3, [r7, #14]
 800a30e:	f003 030f 	and.w	r3, r3, #15
 800a312:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a316:	6879      	ldr	r1, [r7, #4]
 800a318:	33e0      	adds	r3, #224	@ 0xe0
 800a31a:	009b      	lsls	r3, r3, #2
 800a31c:	440b      	add	r3, r1
 800a31e:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 800a320:	89fb      	ldrh	r3, [r7, #14]
 800a322:	b2db      	uxtb	r3, r3
}
 800a324:	4618      	mov	r0, r3
 800a326:	3710      	adds	r7, #16
 800a328:	46bd      	mov	sp, r7
 800a32a:	bd80      	pop	{r7, pc}

0800a32c <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 800a32c:	b480      	push	{r7}
 800a32e:	b083      	sub	sp, #12
 800a330:	af00      	add	r7, sp, #0
 800a332:	6078      	str	r0, [r7, #4]
 800a334:	460b      	mov	r3, r1
 800a336:	70fb      	strb	r3, [r7, #3]
  if (idx < USBH_MAX_PIPES_NBR)
 800a338:	78fb      	ldrb	r3, [r7, #3]
 800a33a:	2b0f      	cmp	r3, #15
 800a33c:	d80d      	bhi.n	800a35a <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 800a33e:	78fb      	ldrb	r3, [r7, #3]
 800a340:	687a      	ldr	r2, [r7, #4]
 800a342:	33e0      	adds	r3, #224	@ 0xe0
 800a344:	009b      	lsls	r3, r3, #2
 800a346:	4413      	add	r3, r2
 800a348:	685a      	ldr	r2, [r3, #4]
 800a34a:	78fb      	ldrb	r3, [r7, #3]
 800a34c:	f3c2 020e 	ubfx	r2, r2, #0, #15
 800a350:	6879      	ldr	r1, [r7, #4]
 800a352:	33e0      	adds	r3, #224	@ 0xe0
 800a354:	009b      	lsls	r3, r3, #2
 800a356:	440b      	add	r3, r1
 800a358:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800a35a:	2300      	movs	r3, #0
}
 800a35c:	4618      	mov	r0, r3
 800a35e:	370c      	adds	r7, #12
 800a360:	46bd      	mov	sp, r7
 800a362:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a366:	4770      	bx	lr

0800a368 <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800a368:	b480      	push	{r7}
 800a36a:	b085      	sub	sp, #20
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 800a370:	2300      	movs	r3, #0
 800a372:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a374:	2300      	movs	r3, #0
 800a376:	73fb      	strb	r3, [r7, #15]
 800a378:	e00f      	b.n	800a39a <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800a37a:	7bfb      	ldrb	r3, [r7, #15]
 800a37c:	687a      	ldr	r2, [r7, #4]
 800a37e:	33e0      	adds	r3, #224	@ 0xe0
 800a380:	009b      	lsls	r3, r3, #2
 800a382:	4413      	add	r3, r2
 800a384:	685b      	ldr	r3, [r3, #4]
 800a386:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d102      	bne.n	800a394 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 800a38e:	7bfb      	ldrb	r3, [r7, #15]
 800a390:	b29b      	uxth	r3, r3
 800a392:	e007      	b.n	800a3a4 <USBH_GetFreePipe+0x3c>
  for (idx = 0U; idx < USBH_MAX_PIPES_NBR; idx++)
 800a394:	7bfb      	ldrb	r3, [r7, #15]
 800a396:	3301      	adds	r3, #1
 800a398:	73fb      	strb	r3, [r7, #15]
 800a39a:	7bfb      	ldrb	r3, [r7, #15]
 800a39c:	2b0f      	cmp	r3, #15
 800a39e:	d9ec      	bls.n	800a37a <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 800a3a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
}
 800a3a4:	4618      	mov	r0, r3
 800a3a6:	3714      	adds	r7, #20
 800a3a8:	46bd      	mov	sp, r7
 800a3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ae:	4770      	bx	lr

0800a3b0 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 800a3b4:	2201      	movs	r2, #1
 800a3b6:	490e      	ldr	r1, [pc, #56]	@ (800a3f0 <MX_USB_HOST_Init+0x40>)
 800a3b8:	480e      	ldr	r0, [pc, #56]	@ (800a3f4 <MX_USB_HOST_Init+0x44>)
 800a3ba:	f7fe fb15 	bl	80089e8 <USBH_Init>
 800a3be:	4603      	mov	r3, r0
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d001      	beq.n	800a3c8 <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 800a3c4:	f7f6 faee 	bl	80009a4 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 800a3c8:	490b      	ldr	r1, [pc, #44]	@ (800a3f8 <MX_USB_HOST_Init+0x48>)
 800a3ca:	480a      	ldr	r0, [pc, #40]	@ (800a3f4 <MX_USB_HOST_Init+0x44>)
 800a3cc:	f7fe fbb9 	bl	8008b42 <USBH_RegisterClass>
 800a3d0:	4603      	mov	r3, r0
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d001      	beq.n	800a3da <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 800a3d6:	f7f6 fae5 	bl	80009a4 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 800a3da:	4806      	ldr	r0, [pc, #24]	@ (800a3f4 <MX_USB_HOST_Init+0x44>)
 800a3dc:	f7fe fc3d 	bl	8008c5a <USBH_Start>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d001      	beq.n	800a3ea <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 800a3e6:	f7f6 fadd 	bl	80009a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 800a3ea:	bf00      	nop
 800a3ec:	bd80      	pop	{r7, pc}
 800a3ee:	bf00      	nop
 800a3f0:	0800a411 	.word	0x0800a411
 800a3f4:	2000029c 	.word	0x2000029c
 800a3f8:	20000014 	.word	0x20000014

0800a3fc <MX_USB_HOST_Process>:

/*
 * Background task
 */
void MX_USB_HOST_Process(void)
{
 800a3fc:	b580      	push	{r7, lr}
 800a3fe:	af00      	add	r7, sp, #0
  /* USB Host Background task */
  USBH_Process(&hUsbHostFS);
 800a400:	4802      	ldr	r0, [pc, #8]	@ (800a40c <MX_USB_HOST_Process+0x10>)
 800a402:	f7fe fc3b 	bl	8008c7c <USBH_Process>
}
 800a406:	bf00      	nop
 800a408:	bd80      	pop	{r7, pc}
 800a40a:	bf00      	nop
 800a40c:	2000029c 	.word	0x2000029c

0800a410 <USBH_UserProcess>:
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 800a410:	b480      	push	{r7}
 800a412:	b083      	sub	sp, #12
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
 800a418:	460b      	mov	r3, r1
 800a41a:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 800a41c:	78fb      	ldrb	r3, [r7, #3]
 800a41e:	3b01      	subs	r3, #1
 800a420:	2b04      	cmp	r3, #4
 800a422:	d819      	bhi.n	800a458 <USBH_UserProcess+0x48>
 800a424:	a201      	add	r2, pc, #4	@ (adr r2, 800a42c <USBH_UserProcess+0x1c>)
 800a426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a42a:	bf00      	nop
 800a42c:	0800a459 	.word	0x0800a459
 800a430:	0800a449 	.word	0x0800a449
 800a434:	0800a459 	.word	0x0800a459
 800a438:	0800a451 	.word	0x0800a451
 800a43c:	0800a441 	.word	0x0800a441
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 800a440:	4b09      	ldr	r3, [pc, #36]	@ (800a468 <USBH_UserProcess+0x58>)
 800a442:	2203      	movs	r2, #3
 800a444:	701a      	strb	r2, [r3, #0]
  break;
 800a446:	e008      	b.n	800a45a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 800a448:	4b07      	ldr	r3, [pc, #28]	@ (800a468 <USBH_UserProcess+0x58>)
 800a44a:	2202      	movs	r2, #2
 800a44c:	701a      	strb	r2, [r3, #0]
  break;
 800a44e:	e004      	b.n	800a45a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 800a450:	4b05      	ldr	r3, [pc, #20]	@ (800a468 <USBH_UserProcess+0x58>)
 800a452:	2201      	movs	r2, #1
 800a454:	701a      	strb	r2, [r3, #0]
  break;
 800a456:	e000      	b.n	800a45a <USBH_UserProcess+0x4a>

  default:
  break;
 800a458:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800a45a:	bf00      	nop
 800a45c:	370c      	adds	r7, #12
 800a45e:	46bd      	mov	sp, r7
 800a460:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a464:	4770      	bx	lr
 800a466:	bf00      	nop
 800a468:	20000674 	.word	0x20000674

0800a46c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800a46c:	b580      	push	{r7, lr}
 800a46e:	b08a      	sub	sp, #40	@ 0x28
 800a470:	af00      	add	r7, sp, #0
 800a472:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a474:	f107 0314 	add.w	r3, r7, #20
 800a478:	2200      	movs	r2, #0
 800a47a:	601a      	str	r2, [r3, #0]
 800a47c:	605a      	str	r2, [r3, #4]
 800a47e:	609a      	str	r2, [r3, #8]
 800a480:	60da      	str	r2, [r3, #12]
 800a482:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800a48c:	d147      	bne.n	800a51e <HAL_HCD_MspInit+0xb2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800a48e:	2300      	movs	r3, #0
 800a490:	613b      	str	r3, [r7, #16]
 800a492:	4b25      	ldr	r3, [pc, #148]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a496:	4a24      	ldr	r2, [pc, #144]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a498:	f043 0301 	orr.w	r3, r3, #1
 800a49c:	6313      	str	r3, [r2, #48]	@ 0x30
 800a49e:	4b22      	ldr	r3, [pc, #136]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a4a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a2:	f003 0301 	and.w	r3, r3, #1
 800a4a6:	613b      	str	r3, [r7, #16]
 800a4a8:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 800a4aa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800a4ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800a4b0:	2300      	movs	r3, #0
 800a4b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4b4:	2300      	movs	r3, #0
 800a4b6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 800a4b8:	f107 0314 	add.w	r3, r7, #20
 800a4bc:	4619      	mov	r1, r3
 800a4be:	481b      	ldr	r0, [pc, #108]	@ (800a52c <HAL_HCD_MspInit+0xc0>)
 800a4c0:	f7f7 faf6 	bl	8001ab0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 800a4c4:	f44f 53e0 	mov.w	r3, #7168	@ 0x1c00
 800a4c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a4ca:	2302      	movs	r3, #2
 800a4cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a4ce:	2300      	movs	r3, #0
 800a4d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800a4d2:	2300      	movs	r3, #0
 800a4d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800a4d6:	230a      	movs	r3, #10
 800a4d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800a4da:	f107 0314 	add.w	r3, r7, #20
 800a4de:	4619      	mov	r1, r3
 800a4e0:	4812      	ldr	r0, [pc, #72]	@ (800a52c <HAL_HCD_MspInit+0xc0>)
 800a4e2:	f7f7 fae5 	bl	8001ab0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800a4e6:	4b10      	ldr	r3, [pc, #64]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a4e8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a4ea:	4a0f      	ldr	r2, [pc, #60]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a4ec:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a4f0:	6353      	str	r3, [r2, #52]	@ 0x34
 800a4f2:	2300      	movs	r3, #0
 800a4f4:	60fb      	str	r3, [r7, #12]
 800a4f6:	4b0c      	ldr	r3, [pc, #48]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a4f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a4fa:	4a0b      	ldr	r2, [pc, #44]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a4fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800a500:	6453      	str	r3, [r2, #68]	@ 0x44
 800a502:	4b09      	ldr	r3, [pc, #36]	@ (800a528 <HAL_HCD_MspInit+0xbc>)
 800a504:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800a506:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800a50a:	60fb      	str	r3, [r7, #12]
 800a50c:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 800a50e:	2200      	movs	r2, #0
 800a510:	2100      	movs	r1, #0
 800a512:	2043      	movs	r0, #67	@ 0x43
 800a514:	f7f6 fe93 	bl	800123e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800a518:	2043      	movs	r0, #67	@ 0x43
 800a51a:	f7f6 feac 	bl	8001276 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800a51e:	bf00      	nop
 800a520:	3728      	adds	r7, #40	@ 0x28
 800a522:	46bd      	mov	sp, r7
 800a524:	bd80      	pop	{r7, pc}
 800a526:	bf00      	nop
 800a528:	40023800 	.word	0x40023800
 800a52c:	40020000 	.word	0x40020000

0800a530 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b082      	sub	sp, #8
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a53e:	4618      	mov	r0, r3
 800a540:	f7fe ff73 	bl	800942a <USBH_LL_IncTimer>
}
 800a544:	bf00      	nop
 800a546:	3708      	adds	r7, #8
 800a548:	46bd      	mov	sp, r7
 800a54a:	bd80      	pop	{r7, pc}

0800a54c <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a54c:	b580      	push	{r7, lr}
 800a54e:	b082      	sub	sp, #8
 800a550:	af00      	add	r7, sp, #0
 800a552:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a55a:	4618      	mov	r0, r3
 800a55c:	f7fe ffab 	bl	80094b6 <USBH_LL_Connect>
}
 800a560:	bf00      	nop
 800a562:	3708      	adds	r7, #8
 800a564:	46bd      	mov	sp, r7
 800a566:	bd80      	pop	{r7, pc}

0800a568 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 800a568:	b580      	push	{r7, lr}
 800a56a:	b082      	sub	sp, #8
 800a56c:	af00      	add	r7, sp, #0
 800a56e:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a576:	4618      	mov	r0, r3
 800a578:	f7fe ffb4 	bl	80094e4 <USBH_LL_Disconnect>
}
 800a57c:	bf00      	nop
 800a57e:	3708      	adds	r7, #8
 800a580:	46bd      	mov	sp, r7
 800a582:	bd80      	pop	{r7, pc}

0800a584 <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800a584:	b480      	push	{r7}
 800a586:	b083      	sub	sp, #12
 800a588:	af00      	add	r7, sp, #0
 800a58a:	6078      	str	r0, [r7, #4]
 800a58c:	460b      	mov	r3, r1
 800a58e:	70fb      	strb	r3, [r7, #3]
 800a590:	4613      	mov	r3, r2
 800a592:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800a594:	bf00      	nop
 800a596:	370c      	adds	r7, #12
 800a598:	46bd      	mov	sp, r7
 800a59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a59e:	4770      	bx	lr

0800a5a0 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5a0:	b580      	push	{r7, lr}
 800a5a2:	b082      	sub	sp, #8
 800a5a4:	af00      	add	r7, sp, #0
 800a5a6:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f7fe ff65 	bl	800947e <USBH_LL_PortEnabled>
}
 800a5b4:	bf00      	nop
 800a5b6:	3708      	adds	r7, #8
 800a5b8:	46bd      	mov	sp, r7
 800a5ba:	bd80      	pop	{r7, pc}

0800a5bc <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 800a5bc:	b580      	push	{r7, lr}
 800a5be:	b082      	sub	sp, #8
 800a5c0:	af00      	add	r7, sp, #0
 800a5c2:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 800a5c4:	687b      	ldr	r3, [r7, #4]
 800a5c6:	f8d3 33dc 	ldr.w	r3, [r3, #988]	@ 0x3dc
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	f7fe ff65 	bl	800949a <USBH_LL_PortDisabled>
}
 800a5d0:	bf00      	nop
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	46bd      	mov	sp, r7
 800a5d6:	bd80      	pop	{r7, pc}

0800a5d8 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 800a5d8:	b580      	push	{r7, lr}
 800a5da:	b082      	sub	sp, #8
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a5e6:	2b01      	cmp	r3, #1
 800a5e8:	d12a      	bne.n	800a640 <USBH_LL_Init+0x68>
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 800a5ea:	4a18      	ldr	r2, [pc, #96]	@ (800a64c <USBH_LL_Init+0x74>)
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	f8c2 33dc 	str.w	r3, [r2, #988]	@ 0x3dc
  phost->pData = &hhcd_USB_OTG_FS;
 800a5f2:	687b      	ldr	r3, [r7, #4]
 800a5f4:	4a15      	ldr	r2, [pc, #84]	@ (800a64c <USBH_LL_Init+0x74>)
 800a5f6:	f8c3 23d0 	str.w	r2, [r3, #976]	@ 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800a5fa:	4b14      	ldr	r3, [pc, #80]	@ (800a64c <USBH_LL_Init+0x74>)
 800a5fc:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800a600:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 800a602:	4b12      	ldr	r3, [pc, #72]	@ (800a64c <USBH_LL_Init+0x74>)
 800a604:	2208      	movs	r2, #8
 800a606:	715a      	strb	r2, [r3, #5]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800a608:	4b10      	ldr	r3, [pc, #64]	@ (800a64c <USBH_LL_Init+0x74>)
 800a60a:	2201      	movs	r2, #1
 800a60c:	71da      	strb	r2, [r3, #7]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800a60e:	4b0f      	ldr	r3, [pc, #60]	@ (800a64c <USBH_LL_Init+0x74>)
 800a610:	2200      	movs	r2, #0
 800a612:	719a      	strb	r2, [r3, #6]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800a614:	4b0d      	ldr	r3, [pc, #52]	@ (800a64c <USBH_LL_Init+0x74>)
 800a616:	2202      	movs	r2, #2
 800a618:	725a      	strb	r2, [r3, #9]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800a61a:	4b0c      	ldr	r3, [pc, #48]	@ (800a64c <USBH_LL_Init+0x74>)
 800a61c:	2200      	movs	r2, #0
 800a61e:	729a      	strb	r2, [r3, #10]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 800a620:	480a      	ldr	r0, [pc, #40]	@ (800a64c <USBH_LL_Init+0x74>)
 800a622:	f7f7 fbfa 	bl	8001e1a <HAL_HCD_Init>
 800a626:	4603      	mov	r3, r0
 800a628:	2b00      	cmp	r3, #0
 800a62a:	d001      	beq.n	800a630 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 800a62c:	f7f6 f9ba 	bl	80009a4 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 800a630:	4806      	ldr	r0, [pc, #24]	@ (800a64c <USBH_LL_Init+0x74>)
 800a632:	f7f8 f85b 	bl	80026ec <HAL_HCD_GetCurrentFrame>
 800a636:	4603      	mov	r3, r0
 800a638:	4619      	mov	r1, r3
 800a63a:	6878      	ldr	r0, [r7, #4]
 800a63c:	f7fe fee6 	bl	800940c <USBH_LL_SetTimer>
  }
  return USBH_OK;
 800a640:	2300      	movs	r3, #0
}
 800a642:	4618      	mov	r0, r3
 800a644:	3708      	adds	r7, #8
 800a646:	46bd      	mov	sp, r7
 800a648:	bd80      	pop	{r7, pc}
 800a64a:	bf00      	nop
 800a64c:	20000678 	.word	0x20000678

0800a650 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 800a650:	b580      	push	{r7, lr}
 800a652:	b084      	sub	sp, #16
 800a654:	af00      	add	r7, sp, #0
 800a656:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a658:	2300      	movs	r3, #0
 800a65a:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a65c:	2300      	movs	r3, #0
 800a65e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a666:	4618      	mov	r0, r3
 800a668:	f7f7 ffc8 	bl	80025fc <HAL_HCD_Start>
 800a66c:	4603      	mov	r3, r0
 800a66e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a670:	7bfb      	ldrb	r3, [r7, #15]
 800a672:	4618      	mov	r0, r3
 800a674:	f000 f95e 	bl	800a934 <USBH_Get_USB_Status>
 800a678:	4603      	mov	r3, r0
 800a67a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a67c:	7bbb      	ldrb	r3, [r7, #14]
}
 800a67e:	4618      	mov	r0, r3
 800a680:	3710      	adds	r7, #16
 800a682:	46bd      	mov	sp, r7
 800a684:	bd80      	pop	{r7, pc}

0800a686 <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800a686:	b580      	push	{r7, lr}
 800a688:	b084      	sub	sp, #16
 800a68a:	af00      	add	r7, sp, #0
 800a68c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a68e:	2300      	movs	r3, #0
 800a690:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a692:	2300      	movs	r3, #0
 800a694:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a69c:	4618      	mov	r0, r3
 800a69e:	f7f7 ffd0 	bl	8002642 <HAL_HCD_Stop>
 800a6a2:	4603      	mov	r3, r0
 800a6a4:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a6a6:	7bfb      	ldrb	r3, [r7, #15]
 800a6a8:	4618      	mov	r0, r3
 800a6aa:	f000 f943 	bl	800a934 <USBH_Get_USB_Status>
 800a6ae:	4603      	mov	r3, r0
 800a6b0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a6b2:	7bbb      	ldrb	r3, [r7, #14]
}
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	3710      	adds	r7, #16
 800a6b8:	46bd      	mov	sp, r7
 800a6ba:	bd80      	pop	{r7, pc}

0800a6bc <USBH_LL_GetSpeed>:
  * @brief  Return the USB host speed from the low level driver.
  * @param  phost: Host handle
  * @retval USBH speeds
  */
USBH_SpeedTypeDef USBH_LL_GetSpeed(USBH_HandleTypeDef *phost)
{
 800a6bc:	b580      	push	{r7, lr}
 800a6be:	b084      	sub	sp, #16
 800a6c0:	af00      	add	r7, sp, #0
 800a6c2:	6078      	str	r0, [r7, #4]
  USBH_SpeedTypeDef speed = USBH_SPEED_FULL;
 800a6c4:	2301      	movs	r3, #1
 800a6c6:	73fb      	strb	r3, [r7, #15]

  switch (HAL_HCD_GetCurrentSpeed(phost->pData))
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f7f8 f81a 	bl	8002708 <HAL_HCD_GetCurrentSpeed>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d00c      	beq.n	800a6f4 <USBH_LL_GetSpeed+0x38>
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d80d      	bhi.n	800a6fa <USBH_LL_GetSpeed+0x3e>
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d002      	beq.n	800a6e8 <USBH_LL_GetSpeed+0x2c>
 800a6e2:	2b01      	cmp	r3, #1
 800a6e4:	d003      	beq.n	800a6ee <USBH_LL_GetSpeed+0x32>
 800a6e6:	e008      	b.n	800a6fa <USBH_LL_GetSpeed+0x3e>
  {
  case 0 :
    speed = USBH_SPEED_HIGH;
 800a6e8:	2300      	movs	r3, #0
 800a6ea:	73fb      	strb	r3, [r7, #15]
    break;
 800a6ec:	e008      	b.n	800a700 <USBH_LL_GetSpeed+0x44>

  case 1 :
    speed = USBH_SPEED_FULL;
 800a6ee:	2301      	movs	r3, #1
 800a6f0:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f2:	e005      	b.n	800a700 <USBH_LL_GetSpeed+0x44>

  case 2 :
    speed = USBH_SPEED_LOW;
 800a6f4:	2302      	movs	r3, #2
 800a6f6:	73fb      	strb	r3, [r7, #15]
    break;
 800a6f8:	e002      	b.n	800a700 <USBH_LL_GetSpeed+0x44>

  default:
   speed = USBH_SPEED_FULL;
 800a6fa:	2301      	movs	r3, #1
 800a6fc:	73fb      	strb	r3, [r7, #15]
    break;
 800a6fe:	bf00      	nop
  }
  return  speed;
 800a700:	7bfb      	ldrb	r3, [r7, #15]
}
 800a702:	4618      	mov	r0, r3
 800a704:	3710      	adds	r7, #16
 800a706:	46bd      	mov	sp, r7
 800a708:	bd80      	pop	{r7, pc}

0800a70a <USBH_LL_ResetPort>:
  * @brief  Reset the Host port of the low level driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ResetPort(USBH_HandleTypeDef *phost)
{
 800a70a:	b580      	push	{r7, lr}
 800a70c:	b084      	sub	sp, #16
 800a70e:	af00      	add	r7, sp, #0
 800a710:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a712:	2300      	movs	r3, #0
 800a714:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a716:	2300      	movs	r3, #0
 800a718:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_ResetPort(phost->pData);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a720:	4618      	mov	r0, r3
 800a722:	f7f7 ffab 	bl	800267c <HAL_HCD_ResetPort>
 800a726:	4603      	mov	r3, r0
 800a728:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a72a:	7bfb      	ldrb	r3, [r7, #15]
 800a72c:	4618      	mov	r0, r3
 800a72e:	f000 f901 	bl	800a934 <USBH_Get_USB_Status>
 800a732:	4603      	mov	r3, r0
 800a734:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a736:	7bbb      	ldrb	r3, [r7, #14]
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3710      	adds	r7, #16
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}

0800a740 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a740:	b580      	push	{r7, lr}
 800a742:	b082      	sub	sp, #8
 800a744:	af00      	add	r7, sp, #0
 800a746:	6078      	str	r0, [r7, #4]
 800a748:	460b      	mov	r3, r1
 800a74a:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 800a74c:	687b      	ldr	r3, [r7, #4]
 800a74e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a752:	78fa      	ldrb	r2, [r7, #3]
 800a754:	4611      	mov	r1, r2
 800a756:	4618      	mov	r0, r3
 800a758:	f7f7 ffb3 	bl	80026c2 <HAL_HCD_HC_GetXferCount>
 800a75c:	4603      	mov	r3, r0
}
 800a75e:	4618      	mov	r0, r3
 800a760:	3708      	adds	r7, #8
 800a762:	46bd      	mov	sp, r7
 800a764:	bd80      	pop	{r7, pc}

0800a766 <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 800a766:	b590      	push	{r4, r7, lr}
 800a768:	b089      	sub	sp, #36	@ 0x24
 800a76a:	af04      	add	r7, sp, #16
 800a76c:	6078      	str	r0, [r7, #4]
 800a76e:	4608      	mov	r0, r1
 800a770:	4611      	mov	r1, r2
 800a772:	461a      	mov	r2, r3
 800a774:	4603      	mov	r3, r0
 800a776:	70fb      	strb	r3, [r7, #3]
 800a778:	460b      	mov	r3, r1
 800a77a:	70bb      	strb	r3, [r7, #2]
 800a77c:	4613      	mov	r3, r2
 800a77e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a780:	2300      	movs	r3, #0
 800a782:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a784:	2300      	movs	r3, #0
 800a786:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 800a788:	687b      	ldr	r3, [r7, #4]
 800a78a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a78e:	787c      	ldrb	r4, [r7, #1]
 800a790:	78ba      	ldrb	r2, [r7, #2]
 800a792:	78f9      	ldrb	r1, [r7, #3]
 800a794:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a796:	9302      	str	r3, [sp, #8]
 800a798:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800a79c:	9301      	str	r3, [sp, #4]
 800a79e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a7a2:	9300      	str	r3, [sp, #0]
 800a7a4:	4623      	mov	r3, r4
 800a7a6:	f7f7 fb9f 	bl	8001ee8 <HAL_HCD_HC_Init>
 800a7aa:	4603      	mov	r3, r0
 800a7ac:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7ae:	7bfb      	ldrb	r3, [r7, #15]
 800a7b0:	4618      	mov	r0, r3
 800a7b2:	f000 f8bf 	bl	800a934 <USBH_Get_USB_Status>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7ba:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7bc:	4618      	mov	r0, r3
 800a7be:	3714      	adds	r7, #20
 800a7c0:	46bd      	mov	sp, r7
 800a7c2:	bd90      	pop	{r4, r7, pc}

0800a7c4 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a7c4:	b580      	push	{r7, lr}
 800a7c6:	b084      	sub	sp, #16
 800a7c8:	af00      	add	r7, sp, #0
 800a7ca:	6078      	str	r0, [r7, #4]
 800a7cc:	460b      	mov	r3, r1
 800a7ce:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800a7d8:	687b      	ldr	r3, [r7, #4]
 800a7da:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a7de:	78fa      	ldrb	r2, [r7, #3]
 800a7e0:	4611      	mov	r1, r2
 800a7e2:	4618      	mov	r0, r3
 800a7e4:	f7f7 fc38 	bl	8002058 <HAL_HCD_HC_Halt>
 800a7e8:	4603      	mov	r3, r0
 800a7ea:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800a7ec:	7bfb      	ldrb	r3, [r7, #15]
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	f000 f8a0 	bl	800a934 <USBH_Get_USB_Status>
 800a7f4:	4603      	mov	r3, r0
 800a7f6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a7f8:	7bbb      	ldrb	r3, [r7, #14]
}
 800a7fa:	4618      	mov	r0, r3
 800a7fc:	3710      	adds	r7, #16
 800a7fe:	46bd      	mov	sp, r7
 800a800:	bd80      	pop	{r7, pc}

0800a802 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 800a802:	b590      	push	{r4, r7, lr}
 800a804:	b089      	sub	sp, #36	@ 0x24
 800a806:	af04      	add	r7, sp, #16
 800a808:	6078      	str	r0, [r7, #4]
 800a80a:	4608      	mov	r0, r1
 800a80c:	4611      	mov	r1, r2
 800a80e:	461a      	mov	r2, r3
 800a810:	4603      	mov	r3, r0
 800a812:	70fb      	strb	r3, [r7, #3]
 800a814:	460b      	mov	r3, r1
 800a816:	70bb      	strb	r3, [r7, #2]
 800a818:	4613      	mov	r3, r2
 800a81a:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800a81c:	2300      	movs	r3, #0
 800a81e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a820:	2300      	movs	r3, #0
 800a822:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 800a824:	687b      	ldr	r3, [r7, #4]
 800a826:	f8d3 03d0 	ldr.w	r0, [r3, #976]	@ 0x3d0
 800a82a:	787c      	ldrb	r4, [r7, #1]
 800a82c:	78ba      	ldrb	r2, [r7, #2]
 800a82e:	78f9      	ldrb	r1, [r7, #3]
 800a830:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800a834:	9303      	str	r3, [sp, #12]
 800a836:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 800a838:	9302      	str	r3, [sp, #8]
 800a83a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a83c:	9301      	str	r3, [sp, #4]
 800a83e:	f897 3020 	ldrb.w	r3, [r7, #32]
 800a842:	9300      	str	r3, [sp, #0]
 800a844:	4623      	mov	r3, r4
 800a846:	f7f7 fc2b 	bl	80020a0 <HAL_HCD_HC_SubmitRequest>
 800a84a:	4603      	mov	r3, r0
 800a84c:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);
  usb_status =  USBH_Get_USB_Status(hal_status);
 800a84e:	7bfb      	ldrb	r3, [r7, #15]
 800a850:	4618      	mov	r0, r3
 800a852:	f000 f86f 	bl	800a934 <USBH_Get_USB_Status>
 800a856:	4603      	mov	r3, r0
 800a858:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800a85a:	7bbb      	ldrb	r3, [r7, #14]
}
 800a85c:	4618      	mov	r0, r3
 800a85e:	3714      	adds	r7, #20
 800a860:	46bd      	mov	sp, r7
 800a862:	bd90      	pop	{r4, r7, pc}

0800a864 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 800a864:	b580      	push	{r7, lr}
 800a866:	b082      	sub	sp, #8
 800a868:	af00      	add	r7, sp, #0
 800a86a:	6078      	str	r0, [r7, #4]
 800a86c:	460b      	mov	r3, r1
 800a86e:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 800a870:	687b      	ldr	r3, [r7, #4]
 800a872:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a876:	78fa      	ldrb	r2, [r7, #3]
 800a878:	4611      	mov	r1, r2
 800a87a:	4618      	mov	r0, r3
 800a87c:	f7f7 ff0c 	bl	8002698 <HAL_HCD_HC_GetURBState>
 800a880:	4603      	mov	r3, r0
}
 800a882:	4618      	mov	r0, r3
 800a884:	3708      	adds	r7, #8
 800a886:	46bd      	mov	sp, r7
 800a888:	bd80      	pop	{r7, pc}

0800a88a <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 800a88a:	b580      	push	{r7, lr}
 800a88c:	b082      	sub	sp, #8
 800a88e:	af00      	add	r7, sp, #0
 800a890:	6078      	str	r0, [r7, #4]
 800a892:	460b      	mov	r3, r1
 800a894:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	f893 33cc 	ldrb.w	r3, [r3, #972]	@ 0x3cc
 800a89c:	2b01      	cmp	r3, #1
 800a89e:	d103      	bne.n	800a8a8 <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 800a8a0:	78fb      	ldrb	r3, [r7, #3]
 800a8a2:	4618      	mov	r0, r3
 800a8a4:	f000 f872 	bl	800a98c <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 800a8a8:	20c8      	movs	r0, #200	@ 0xc8
 800a8aa:	f7f6 fbc9 	bl	8001040 <HAL_Delay>
  return USBH_OK;
 800a8ae:	2300      	movs	r3, #0
}
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	3708      	adds	r7, #8
 800a8b4:	46bd      	mov	sp, r7
 800a8b6:	bd80      	pop	{r7, pc}

0800a8b8 <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 800a8b8:	b480      	push	{r7}
 800a8ba:	b085      	sub	sp, #20
 800a8bc:	af00      	add	r7, sp, #0
 800a8be:	6078      	str	r0, [r7, #4]
 800a8c0:	460b      	mov	r3, r1
 800a8c2:	70fb      	strb	r3, [r7, #3]
 800a8c4:	4613      	mov	r3, r2
 800a8c6:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 800a8c8:	687b      	ldr	r3, [r7, #4]
 800a8ca:	f8d3 33d0 	ldr.w	r3, [r3, #976]	@ 0x3d0
 800a8ce:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 800a8d0:	78fa      	ldrb	r2, [r7, #3]
 800a8d2:	68f9      	ldr	r1, [r7, #12]
 800a8d4:	4613      	mov	r3, r2
 800a8d6:	011b      	lsls	r3, r3, #4
 800a8d8:	1a9b      	subs	r3, r3, r2
 800a8da:	009b      	lsls	r3, r3, #2
 800a8dc:	440b      	add	r3, r1
 800a8de:	3317      	adds	r3, #23
 800a8e0:	781b      	ldrb	r3, [r3, #0]
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d00a      	beq.n	800a8fc <USBH_LL_SetToggle+0x44>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 800a8e6:	78fa      	ldrb	r2, [r7, #3]
 800a8e8:	68f9      	ldr	r1, [r7, #12]
 800a8ea:	4613      	mov	r3, r2
 800a8ec:	011b      	lsls	r3, r3, #4
 800a8ee:	1a9b      	subs	r3, r3, r2
 800a8f0:	009b      	lsls	r3, r3, #2
 800a8f2:	440b      	add	r3, r1
 800a8f4:	333c      	adds	r3, #60	@ 0x3c
 800a8f6:	78ba      	ldrb	r2, [r7, #2]
 800a8f8:	701a      	strb	r2, [r3, #0]
 800a8fa:	e009      	b.n	800a910 <USBH_LL_SetToggle+0x58>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 800a8fc:	78fa      	ldrb	r2, [r7, #3]
 800a8fe:	68f9      	ldr	r1, [r7, #12]
 800a900:	4613      	mov	r3, r2
 800a902:	011b      	lsls	r3, r3, #4
 800a904:	1a9b      	subs	r3, r3, r2
 800a906:	009b      	lsls	r3, r3, #2
 800a908:	440b      	add	r3, r1
 800a90a:	333d      	adds	r3, #61	@ 0x3d
 800a90c:	78ba      	ldrb	r2, [r7, #2]
 800a90e:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 800a910:	2300      	movs	r3, #0
}
 800a912:	4618      	mov	r0, r3
 800a914:	3714      	adds	r7, #20
 800a916:	46bd      	mov	sp, r7
 800a918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a91c:	4770      	bx	lr

0800a91e <USBH_Delay>:
  * @brief  Delay routine for the USB Host Library
  * @param  Delay: Delay in ms
  * @retval None
  */
void USBH_Delay(uint32_t Delay)
{
 800a91e:	b580      	push	{r7, lr}
 800a920:	b082      	sub	sp, #8
 800a922:	af00      	add	r7, sp, #0
 800a924:	6078      	str	r0, [r7, #4]
  HAL_Delay(Delay);
 800a926:	6878      	ldr	r0, [r7, #4]
 800a928:	f7f6 fb8a 	bl	8001040 <HAL_Delay>
}
 800a92c:	bf00      	nop
 800a92e:	3708      	adds	r7, #8
 800a930:	46bd      	mov	sp, r7
 800a932:	bd80      	pop	{r7, pc}

0800a934 <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800a934:	b480      	push	{r7}
 800a936:	b085      	sub	sp, #20
 800a938:	af00      	add	r7, sp, #0
 800a93a:	4603      	mov	r3, r0
 800a93c:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800a93e:	2300      	movs	r3, #0
 800a940:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800a942:	79fb      	ldrb	r3, [r7, #7]
 800a944:	2b03      	cmp	r3, #3
 800a946:	d817      	bhi.n	800a978 <USBH_Get_USB_Status+0x44>
 800a948:	a201      	add	r2, pc, #4	@ (adr r2, 800a950 <USBH_Get_USB_Status+0x1c>)
 800a94a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a94e:	bf00      	nop
 800a950:	0800a961 	.word	0x0800a961
 800a954:	0800a967 	.word	0x0800a967
 800a958:	0800a96d 	.word	0x0800a96d
 800a95c:	0800a973 	.word	0x0800a973
  {
    case HAL_OK :
      usb_status = USBH_OK;
 800a960:	2300      	movs	r3, #0
 800a962:	73fb      	strb	r3, [r7, #15]
    break;
 800a964:	e00b      	b.n	800a97e <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 800a966:	2302      	movs	r3, #2
 800a968:	73fb      	strb	r3, [r7, #15]
    break;
 800a96a:	e008      	b.n	800a97e <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 800a96c:	2301      	movs	r3, #1
 800a96e:	73fb      	strb	r3, [r7, #15]
    break;
 800a970:	e005      	b.n	800a97e <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 800a972:	2302      	movs	r3, #2
 800a974:	73fb      	strb	r3, [r7, #15]
    break;
 800a976:	e002      	b.n	800a97e <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 800a978:	2302      	movs	r3, #2
 800a97a:	73fb      	strb	r3, [r7, #15]
    break;
 800a97c:	bf00      	nop
  }
  return usb_status;
 800a97e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a980:	4618      	mov	r0, r3
 800a982:	3714      	adds	r7, #20
 800a984:	46bd      	mov	sp, r7
 800a986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a98a:	4770      	bx	lr

0800a98c <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b084      	sub	sp, #16
 800a990:	af00      	add	r7, sp, #0
 800a992:	4603      	mov	r3, r0
 800a994:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 800a996:	79fb      	ldrb	r3, [r7, #7]
 800a998:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 800a99a:	79fb      	ldrb	r3, [r7, #7]
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d102      	bne.n	800a9a6 <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	73fb      	strb	r3, [r7, #15]
 800a9a4:	e001      	b.n	800a9aa <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 800a9a6:	2301      	movs	r3, #1
 800a9a8:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_0,(GPIO_PinState)data);
 800a9aa:	7bfb      	ldrb	r3, [r7, #15]
 800a9ac:	461a      	mov	r2, r3
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4803      	ldr	r0, [pc, #12]	@ (800a9c0 <MX_DriverVbusFS+0x34>)
 800a9b2:	f7f7 fa19 	bl	8001de8 <HAL_GPIO_WritePin>
}
 800a9b6:	bf00      	nop
 800a9b8:	3710      	adds	r7, #16
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	bd80      	pop	{r7, pc}
 800a9be:	bf00      	nop
 800a9c0:	40020800 	.word	0x40020800

0800a9c4 <malloc>:
 800a9c4:	4b02      	ldr	r3, [pc, #8]	@ (800a9d0 <malloc+0xc>)
 800a9c6:	4601      	mov	r1, r0
 800a9c8:	6818      	ldr	r0, [r3, #0]
 800a9ca:	f000 b82d 	b.w	800aa28 <_malloc_r>
 800a9ce:	bf00      	nop
 800a9d0:	20000034 	.word	0x20000034

0800a9d4 <free>:
 800a9d4:	4b02      	ldr	r3, [pc, #8]	@ (800a9e0 <free+0xc>)
 800a9d6:	4601      	mov	r1, r0
 800a9d8:	6818      	ldr	r0, [r3, #0]
 800a9da:	f000 b8f5 	b.w	800abc8 <_free_r>
 800a9de:	bf00      	nop
 800a9e0:	20000034 	.word	0x20000034

0800a9e4 <sbrk_aligned>:
 800a9e4:	b570      	push	{r4, r5, r6, lr}
 800a9e6:	4e0f      	ldr	r6, [pc, #60]	@ (800aa24 <sbrk_aligned+0x40>)
 800a9e8:	460c      	mov	r4, r1
 800a9ea:	6831      	ldr	r1, [r6, #0]
 800a9ec:	4605      	mov	r5, r0
 800a9ee:	b911      	cbnz	r1, 800a9f6 <sbrk_aligned+0x12>
 800a9f0:	f000 f8ae 	bl	800ab50 <_sbrk_r>
 800a9f4:	6030      	str	r0, [r6, #0]
 800a9f6:	4621      	mov	r1, r4
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	f000 f8a9 	bl	800ab50 <_sbrk_r>
 800a9fe:	1c43      	adds	r3, r0, #1
 800aa00:	d103      	bne.n	800aa0a <sbrk_aligned+0x26>
 800aa02:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800aa06:	4620      	mov	r0, r4
 800aa08:	bd70      	pop	{r4, r5, r6, pc}
 800aa0a:	1cc4      	adds	r4, r0, #3
 800aa0c:	f024 0403 	bic.w	r4, r4, #3
 800aa10:	42a0      	cmp	r0, r4
 800aa12:	d0f8      	beq.n	800aa06 <sbrk_aligned+0x22>
 800aa14:	1a21      	subs	r1, r4, r0
 800aa16:	4628      	mov	r0, r5
 800aa18:	f000 f89a 	bl	800ab50 <_sbrk_r>
 800aa1c:	3001      	adds	r0, #1
 800aa1e:	d1f2      	bne.n	800aa06 <sbrk_aligned+0x22>
 800aa20:	e7ef      	b.n	800aa02 <sbrk_aligned+0x1e>
 800aa22:	bf00      	nop
 800aa24:	20000a58 	.word	0x20000a58

0800aa28 <_malloc_r>:
 800aa28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa2c:	1ccd      	adds	r5, r1, #3
 800aa2e:	f025 0503 	bic.w	r5, r5, #3
 800aa32:	3508      	adds	r5, #8
 800aa34:	2d0c      	cmp	r5, #12
 800aa36:	bf38      	it	cc
 800aa38:	250c      	movcc	r5, #12
 800aa3a:	2d00      	cmp	r5, #0
 800aa3c:	4606      	mov	r6, r0
 800aa3e:	db01      	blt.n	800aa44 <_malloc_r+0x1c>
 800aa40:	42a9      	cmp	r1, r5
 800aa42:	d904      	bls.n	800aa4e <_malloc_r+0x26>
 800aa44:	230c      	movs	r3, #12
 800aa46:	6033      	str	r3, [r6, #0]
 800aa48:	2000      	movs	r0, #0
 800aa4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aa4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab24 <_malloc_r+0xfc>
 800aa52:	f000 f869 	bl	800ab28 <__malloc_lock>
 800aa56:	f8d8 3000 	ldr.w	r3, [r8]
 800aa5a:	461c      	mov	r4, r3
 800aa5c:	bb44      	cbnz	r4, 800aab0 <_malloc_r+0x88>
 800aa5e:	4629      	mov	r1, r5
 800aa60:	4630      	mov	r0, r6
 800aa62:	f7ff ffbf 	bl	800a9e4 <sbrk_aligned>
 800aa66:	1c43      	adds	r3, r0, #1
 800aa68:	4604      	mov	r4, r0
 800aa6a:	d158      	bne.n	800ab1e <_malloc_r+0xf6>
 800aa6c:	f8d8 4000 	ldr.w	r4, [r8]
 800aa70:	4627      	mov	r7, r4
 800aa72:	2f00      	cmp	r7, #0
 800aa74:	d143      	bne.n	800aafe <_malloc_r+0xd6>
 800aa76:	2c00      	cmp	r4, #0
 800aa78:	d04b      	beq.n	800ab12 <_malloc_r+0xea>
 800aa7a:	6823      	ldr	r3, [r4, #0]
 800aa7c:	4639      	mov	r1, r7
 800aa7e:	4630      	mov	r0, r6
 800aa80:	eb04 0903 	add.w	r9, r4, r3
 800aa84:	f000 f864 	bl	800ab50 <_sbrk_r>
 800aa88:	4581      	cmp	r9, r0
 800aa8a:	d142      	bne.n	800ab12 <_malloc_r+0xea>
 800aa8c:	6821      	ldr	r1, [r4, #0]
 800aa8e:	1a6d      	subs	r5, r5, r1
 800aa90:	4629      	mov	r1, r5
 800aa92:	4630      	mov	r0, r6
 800aa94:	f7ff ffa6 	bl	800a9e4 <sbrk_aligned>
 800aa98:	3001      	adds	r0, #1
 800aa9a:	d03a      	beq.n	800ab12 <_malloc_r+0xea>
 800aa9c:	6823      	ldr	r3, [r4, #0]
 800aa9e:	442b      	add	r3, r5
 800aaa0:	6023      	str	r3, [r4, #0]
 800aaa2:	f8d8 3000 	ldr.w	r3, [r8]
 800aaa6:	685a      	ldr	r2, [r3, #4]
 800aaa8:	bb62      	cbnz	r2, 800ab04 <_malloc_r+0xdc>
 800aaaa:	f8c8 7000 	str.w	r7, [r8]
 800aaae:	e00f      	b.n	800aad0 <_malloc_r+0xa8>
 800aab0:	6822      	ldr	r2, [r4, #0]
 800aab2:	1b52      	subs	r2, r2, r5
 800aab4:	d420      	bmi.n	800aaf8 <_malloc_r+0xd0>
 800aab6:	2a0b      	cmp	r2, #11
 800aab8:	d917      	bls.n	800aaea <_malloc_r+0xc2>
 800aaba:	1961      	adds	r1, r4, r5
 800aabc:	42a3      	cmp	r3, r4
 800aabe:	6025      	str	r5, [r4, #0]
 800aac0:	bf18      	it	ne
 800aac2:	6059      	strne	r1, [r3, #4]
 800aac4:	6863      	ldr	r3, [r4, #4]
 800aac6:	bf08      	it	eq
 800aac8:	f8c8 1000 	streq.w	r1, [r8]
 800aacc:	5162      	str	r2, [r4, r5]
 800aace:	604b      	str	r3, [r1, #4]
 800aad0:	4630      	mov	r0, r6
 800aad2:	f000 f82f 	bl	800ab34 <__malloc_unlock>
 800aad6:	f104 000b 	add.w	r0, r4, #11
 800aada:	1d23      	adds	r3, r4, #4
 800aadc:	f020 0007 	bic.w	r0, r0, #7
 800aae0:	1ac2      	subs	r2, r0, r3
 800aae2:	bf1c      	itt	ne
 800aae4:	1a1b      	subne	r3, r3, r0
 800aae6:	50a3      	strne	r3, [r4, r2]
 800aae8:	e7af      	b.n	800aa4a <_malloc_r+0x22>
 800aaea:	6862      	ldr	r2, [r4, #4]
 800aaec:	42a3      	cmp	r3, r4
 800aaee:	bf0c      	ite	eq
 800aaf0:	f8c8 2000 	streq.w	r2, [r8]
 800aaf4:	605a      	strne	r2, [r3, #4]
 800aaf6:	e7eb      	b.n	800aad0 <_malloc_r+0xa8>
 800aaf8:	4623      	mov	r3, r4
 800aafa:	6864      	ldr	r4, [r4, #4]
 800aafc:	e7ae      	b.n	800aa5c <_malloc_r+0x34>
 800aafe:	463c      	mov	r4, r7
 800ab00:	687f      	ldr	r7, [r7, #4]
 800ab02:	e7b6      	b.n	800aa72 <_malloc_r+0x4a>
 800ab04:	461a      	mov	r2, r3
 800ab06:	685b      	ldr	r3, [r3, #4]
 800ab08:	42a3      	cmp	r3, r4
 800ab0a:	d1fb      	bne.n	800ab04 <_malloc_r+0xdc>
 800ab0c:	2300      	movs	r3, #0
 800ab0e:	6053      	str	r3, [r2, #4]
 800ab10:	e7de      	b.n	800aad0 <_malloc_r+0xa8>
 800ab12:	230c      	movs	r3, #12
 800ab14:	6033      	str	r3, [r6, #0]
 800ab16:	4630      	mov	r0, r6
 800ab18:	f000 f80c 	bl	800ab34 <__malloc_unlock>
 800ab1c:	e794      	b.n	800aa48 <_malloc_r+0x20>
 800ab1e:	6005      	str	r5, [r0, #0]
 800ab20:	e7d6      	b.n	800aad0 <_malloc_r+0xa8>
 800ab22:	bf00      	nop
 800ab24:	20000a5c 	.word	0x20000a5c

0800ab28 <__malloc_lock>:
 800ab28:	4801      	ldr	r0, [pc, #4]	@ (800ab30 <__malloc_lock+0x8>)
 800ab2a:	f000 b84b 	b.w	800abc4 <__retarget_lock_acquire_recursive>
 800ab2e:	bf00      	nop
 800ab30:	20000b98 	.word	0x20000b98

0800ab34 <__malloc_unlock>:
 800ab34:	4801      	ldr	r0, [pc, #4]	@ (800ab3c <__malloc_unlock+0x8>)
 800ab36:	f000 b846 	b.w	800abc6 <__retarget_lock_release_recursive>
 800ab3a:	bf00      	nop
 800ab3c:	20000b98 	.word	0x20000b98

0800ab40 <memset>:
 800ab40:	4402      	add	r2, r0
 800ab42:	4603      	mov	r3, r0
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d100      	bne.n	800ab4a <memset+0xa>
 800ab48:	4770      	bx	lr
 800ab4a:	f803 1b01 	strb.w	r1, [r3], #1
 800ab4e:	e7f9      	b.n	800ab44 <memset+0x4>

0800ab50 <_sbrk_r>:
 800ab50:	b538      	push	{r3, r4, r5, lr}
 800ab52:	4d06      	ldr	r5, [pc, #24]	@ (800ab6c <_sbrk_r+0x1c>)
 800ab54:	2300      	movs	r3, #0
 800ab56:	4604      	mov	r4, r0
 800ab58:	4608      	mov	r0, r1
 800ab5a:	602b      	str	r3, [r5, #0]
 800ab5c:	f7f6 f98c 	bl	8000e78 <_sbrk>
 800ab60:	1c43      	adds	r3, r0, #1
 800ab62:	d102      	bne.n	800ab6a <_sbrk_r+0x1a>
 800ab64:	682b      	ldr	r3, [r5, #0]
 800ab66:	b103      	cbz	r3, 800ab6a <_sbrk_r+0x1a>
 800ab68:	6023      	str	r3, [r4, #0]
 800ab6a:	bd38      	pop	{r3, r4, r5, pc}
 800ab6c:	20000b9c 	.word	0x20000b9c

0800ab70 <__errno>:
 800ab70:	4b01      	ldr	r3, [pc, #4]	@ (800ab78 <__errno+0x8>)
 800ab72:	6818      	ldr	r0, [r3, #0]
 800ab74:	4770      	bx	lr
 800ab76:	bf00      	nop
 800ab78:	20000034 	.word	0x20000034

0800ab7c <__libc_init_array>:
 800ab7c:	b570      	push	{r4, r5, r6, lr}
 800ab7e:	4d0d      	ldr	r5, [pc, #52]	@ (800abb4 <__libc_init_array+0x38>)
 800ab80:	4c0d      	ldr	r4, [pc, #52]	@ (800abb8 <__libc_init_array+0x3c>)
 800ab82:	1b64      	subs	r4, r4, r5
 800ab84:	10a4      	asrs	r4, r4, #2
 800ab86:	2600      	movs	r6, #0
 800ab88:	42a6      	cmp	r6, r4
 800ab8a:	d109      	bne.n	800aba0 <__libc_init_array+0x24>
 800ab8c:	4d0b      	ldr	r5, [pc, #44]	@ (800abbc <__libc_init_array+0x40>)
 800ab8e:	4c0c      	ldr	r4, [pc, #48]	@ (800abc0 <__libc_init_array+0x44>)
 800ab90:	f000 f864 	bl	800ac5c <_init>
 800ab94:	1b64      	subs	r4, r4, r5
 800ab96:	10a4      	asrs	r4, r4, #2
 800ab98:	2600      	movs	r6, #0
 800ab9a:	42a6      	cmp	r6, r4
 800ab9c:	d105      	bne.n	800abaa <__libc_init_array+0x2e>
 800ab9e:	bd70      	pop	{r4, r5, r6, pc}
 800aba0:	f855 3b04 	ldr.w	r3, [r5], #4
 800aba4:	4798      	blx	r3
 800aba6:	3601      	adds	r6, #1
 800aba8:	e7ee      	b.n	800ab88 <__libc_init_array+0xc>
 800abaa:	f855 3b04 	ldr.w	r3, [r5], #4
 800abae:	4798      	blx	r3
 800abb0:	3601      	adds	r6, #1
 800abb2:	e7f2      	b.n	800ab9a <__libc_init_array+0x1e>
 800abb4:	0800aca0 	.word	0x0800aca0
 800abb8:	0800aca0 	.word	0x0800aca0
 800abbc:	0800aca0 	.word	0x0800aca0
 800abc0:	0800aca4 	.word	0x0800aca4

0800abc4 <__retarget_lock_acquire_recursive>:
 800abc4:	4770      	bx	lr

0800abc6 <__retarget_lock_release_recursive>:
 800abc6:	4770      	bx	lr

0800abc8 <_free_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4605      	mov	r5, r0
 800abcc:	2900      	cmp	r1, #0
 800abce:	d041      	beq.n	800ac54 <_free_r+0x8c>
 800abd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800abd4:	1f0c      	subs	r4, r1, #4
 800abd6:	2b00      	cmp	r3, #0
 800abd8:	bfb8      	it	lt
 800abda:	18e4      	addlt	r4, r4, r3
 800abdc:	f7ff ffa4 	bl	800ab28 <__malloc_lock>
 800abe0:	4a1d      	ldr	r2, [pc, #116]	@ (800ac58 <_free_r+0x90>)
 800abe2:	6813      	ldr	r3, [r2, #0]
 800abe4:	b933      	cbnz	r3, 800abf4 <_free_r+0x2c>
 800abe6:	6063      	str	r3, [r4, #4]
 800abe8:	6014      	str	r4, [r2, #0]
 800abea:	4628      	mov	r0, r5
 800abec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abf0:	f7ff bfa0 	b.w	800ab34 <__malloc_unlock>
 800abf4:	42a3      	cmp	r3, r4
 800abf6:	d908      	bls.n	800ac0a <_free_r+0x42>
 800abf8:	6820      	ldr	r0, [r4, #0]
 800abfa:	1821      	adds	r1, r4, r0
 800abfc:	428b      	cmp	r3, r1
 800abfe:	bf01      	itttt	eq
 800ac00:	6819      	ldreq	r1, [r3, #0]
 800ac02:	685b      	ldreq	r3, [r3, #4]
 800ac04:	1809      	addeq	r1, r1, r0
 800ac06:	6021      	streq	r1, [r4, #0]
 800ac08:	e7ed      	b.n	800abe6 <_free_r+0x1e>
 800ac0a:	461a      	mov	r2, r3
 800ac0c:	685b      	ldr	r3, [r3, #4]
 800ac0e:	b10b      	cbz	r3, 800ac14 <_free_r+0x4c>
 800ac10:	42a3      	cmp	r3, r4
 800ac12:	d9fa      	bls.n	800ac0a <_free_r+0x42>
 800ac14:	6811      	ldr	r1, [r2, #0]
 800ac16:	1850      	adds	r0, r2, r1
 800ac18:	42a0      	cmp	r0, r4
 800ac1a:	d10b      	bne.n	800ac34 <_free_r+0x6c>
 800ac1c:	6820      	ldr	r0, [r4, #0]
 800ac1e:	4401      	add	r1, r0
 800ac20:	1850      	adds	r0, r2, r1
 800ac22:	4283      	cmp	r3, r0
 800ac24:	6011      	str	r1, [r2, #0]
 800ac26:	d1e0      	bne.n	800abea <_free_r+0x22>
 800ac28:	6818      	ldr	r0, [r3, #0]
 800ac2a:	685b      	ldr	r3, [r3, #4]
 800ac2c:	6053      	str	r3, [r2, #4]
 800ac2e:	4408      	add	r0, r1
 800ac30:	6010      	str	r0, [r2, #0]
 800ac32:	e7da      	b.n	800abea <_free_r+0x22>
 800ac34:	d902      	bls.n	800ac3c <_free_r+0x74>
 800ac36:	230c      	movs	r3, #12
 800ac38:	602b      	str	r3, [r5, #0]
 800ac3a:	e7d6      	b.n	800abea <_free_r+0x22>
 800ac3c:	6820      	ldr	r0, [r4, #0]
 800ac3e:	1821      	adds	r1, r4, r0
 800ac40:	428b      	cmp	r3, r1
 800ac42:	bf04      	itt	eq
 800ac44:	6819      	ldreq	r1, [r3, #0]
 800ac46:	685b      	ldreq	r3, [r3, #4]
 800ac48:	6063      	str	r3, [r4, #4]
 800ac4a:	bf04      	itt	eq
 800ac4c:	1809      	addeq	r1, r1, r0
 800ac4e:	6021      	streq	r1, [r4, #0]
 800ac50:	6054      	str	r4, [r2, #4]
 800ac52:	e7ca      	b.n	800abea <_free_r+0x22>
 800ac54:	bd38      	pop	{r3, r4, r5, pc}
 800ac56:	bf00      	nop
 800ac58:	20000a5c 	.word	0x20000a5c

0800ac5c <_init>:
 800ac5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac5e:	bf00      	nop
 800ac60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac62:	bc08      	pop	{r3}
 800ac64:	469e      	mov	lr, r3
 800ac66:	4770      	bx	lr

0800ac68 <_fini>:
 800ac68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ac6a:	bf00      	nop
 800ac6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ac6e:	bc08      	pop	{r3}
 800ac70:	469e      	mov	lr, r3
 800ac72:	4770      	bx	lr

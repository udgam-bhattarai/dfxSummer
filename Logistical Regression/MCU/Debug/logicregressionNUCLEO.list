
logicregressionNUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004fb8  08000198  08000198  00001198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005150  08005150  00006150  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080051b8  080051b8  00007080  2**0
                  CONTENTS
  4 .ARM          00000000  080051b8  080051b8  00007080  2**0
                  CONTENTS
  5 .preinit_array 00000000  080051b8  080051b8  00007080  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080051b8  080051b8  000061b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080051bc  080051bc  000061bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000080  20000000  080051c0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00007080  2**0
                  CONTENTS
 10 .bss          00000274  20000080  20000080  00007080  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200002f4  200002f4  00007080  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00007080  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ad59  00000000  00000000  000070b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b77  00000000  00000000  00011e09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000007a0  00000000  00000000  00013980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000005d6  00000000  00000000  00014120  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fa48  00000000  00000000  000146f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000add0  00000000  00000000  0003413e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c0079  00000000  00000000  0003ef0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fef87  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002358  00000000  00000000  000fefcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000060  00000000  00000000  00101324  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000080 	.word	0x20000080
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005138 	.word	0x08005138

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000084 	.word	0x20000084
 80001d4:	08005138 	.word	0x08005138

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	@ 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ad8:	b09f      	sub	sp, #124	@ 0x7c
 8000ada:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN 1 */
 /* USER CODE END 1 */
 /* MCU Configuration--------------------------------------------------------*/
 /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
 HAL_Init();
 8000adc:	f000 fc2c 	bl	8001338 <HAL_Init>
 /* USER CODE BEGIN Init */
 /* USER CODE END Init */
 /* Configure the system clock */
 SystemClock_Config();
 8000ae0:	f000 f90a 	bl	8000cf8 <SystemClock_Config>
 /* USER CODE BEGIN SysInit */
 /* USER CODE END SysInit */
 /* Initialize all configured peripherals */
 MX_GPIO_Init();
 8000ae4:	f000 f9b0 	bl	8000e48 <MX_GPIO_Init>
 MX_DMA_Init();
 8000ae8:	f000 f988 	bl	8000dfc <MX_DMA_Init>
 MX_USART2_UART_Init();
 8000aec:	f000 f956 	bl	8000d9c <MX_USART2_UART_Init>
 /* USER CODE BEGIN WHILE */
 while (1)
 {
   /* USER CODE END WHILE */
   /* USER CODE BEGIN 3 */
	 if (data_ready){
 8000af0:	4b7e      	ldr	r3, [pc, #504]	@ (8000cec <main+0x218>)
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	2b00      	cmp	r3, #0
 8000af8:	f000 80f1 	beq.w	8000cde <main+0x20a>
 8000afc:	466b      	mov	r3, sp
 8000afe:	607b      	str	r3, [r7, #4]
		 uint32_t rows = X_size[0];
 8000b00:	4b7b      	ldr	r3, [pc, #492]	@ (8000cf0 <main+0x21c>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	677b      	str	r3, [r7, #116]	@ 0x74
		 uint32_t cols = X_size[1];
 8000b06:	4b7a      	ldr	r3, [pc, #488]	@ (8000cf0 <main+0x21c>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	673b      	str	r3, [r7, #112]	@ 0x70

		 float rx_buffer[rows * cols];
 8000b0c:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000b0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000b10:	fb03 f602 	mul.w	r6, r3, r2
 8000b14:	4633      	mov	r3, r6
 8000b16:	3b01      	subs	r3, #1
 8000b18:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8000b1a:	2300      	movs	r3, #0
 8000b1c:	61be      	str	r6, [r7, #24]
 8000b1e:	61fb      	str	r3, [r7, #28]
 8000b20:	f04f 0200 	mov.w	r2, #0
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e9d7 4506 	ldrd	r4, r5, [r7, #24]
 8000b2c:	4629      	mov	r1, r5
 8000b2e:	014b      	lsls	r3, r1, #5
 8000b30:	4621      	mov	r1, r4
 8000b32:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000b36:	4621      	mov	r1, r4
 8000b38:	014a      	lsls	r2, r1, #5
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	613e      	str	r6, [r7, #16]
 8000b3e:	617b      	str	r3, [r7, #20]
 8000b40:	f04f 0200 	mov.w	r2, #0
 8000b44:	f04f 0300 	mov.w	r3, #0
 8000b48:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8000b4c:	4629      	mov	r1, r5
 8000b4e:	014b      	lsls	r3, r1, #5
 8000b50:	4621      	mov	r1, r4
 8000b52:	ea43 63d1 	orr.w	r3, r3, r1, lsr #27
 8000b56:	4621      	mov	r1, r4
 8000b58:	014a      	lsls	r2, r1, #5
 8000b5a:	00b3      	lsls	r3, r6, #2
 8000b5c:	3307      	adds	r3, #7
 8000b5e:	08db      	lsrs	r3, r3, #3
 8000b60:	00db      	lsls	r3, r3, #3
 8000b62:	ebad 0d03 	sub.w	sp, sp, r3
 8000b66:	466b      	mov	r3, sp
 8000b68:	3303      	adds	r3, #3
 8000b6a:	089b      	lsrs	r3, r3, #2
 8000b6c:	009b      	lsls	r3, r3, #2
 8000b6e:	66bb      	str	r3, [r7, #104]	@ 0x68
		 float  X_test[rows][cols];
 8000b70:	6f39      	ldr	r1, [r7, #112]	@ 0x70
 8000b72:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 8000b74:	460b      	mov	r3, r1
 8000b76:	3b01      	subs	r3, #1
 8000b78:	667b      	str	r3, [r7, #100]	@ 0x64
 8000b7a:	2300      	movs	r3, #0
 8000b7c:	6439      	str	r1, [r7, #64]	@ 0x40
 8000b7e:	647b      	str	r3, [r7, #68]	@ 0x44
 8000b80:	f04f 0200 	mov.w	r2, #0
 8000b84:	f04f 0300 	mov.w	r3, #0
 8000b88:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8000b8a:	0163      	lsls	r3, r4, #5
 8000b8c:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8000b8e:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000b92:	6c3c      	ldr	r4, [r7, #64]	@ 0x40
 8000b94:	0162      	lsls	r2, r4, #5
 8000b96:	4603      	mov	r3, r0
 8000b98:	3b01      	subs	r3, #1
 8000b9a:	663b      	str	r3, [r7, #96]	@ 0x60
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8000ba0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	6338      	str	r0, [r7, #48]	@ 0x30
 8000ba6:	637b      	str	r3, [r7, #52]	@ 0x34
 8000ba8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8000baa:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8000bac:	fb04 f202 	mul.w	r2, r4, r2
 8000bb0:	6b7c      	ldr	r4, [r7, #52]	@ 0x34
 8000bb2:	6bbd      	ldr	r5, [r7, #56]	@ 0x38
 8000bb4:	fb05 f304 	mul.w	r3, r5, r4
 8000bb8:	4413      	add	r3, r2
 8000bba:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000bbc:	6b3c      	ldr	r4, [r7, #48]	@ 0x30
 8000bbe:	fba2 8904 	umull	r8, r9, r2, r4
 8000bc2:	444b      	add	r3, r9
 8000bc4:	4699      	mov	r9, r3
 8000bc6:	f04f 0200 	mov.w	r2, #0
 8000bca:	f04f 0300 	mov.w	r3, #0
 8000bce:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000bd2:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000bd6:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000bda:	2300      	movs	r3, #0
 8000bdc:	62b9      	str	r1, [r7, #40]	@ 0x28
 8000bde:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000be0:	2300      	movs	r3, #0
 8000be2:	6238      	str	r0, [r7, #32]
 8000be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000be8:	6a3c      	ldr	r4, [r7, #32]
 8000bea:	fb04 f202 	mul.w	r2, r4, r2
 8000bee:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8000bf0:	6abd      	ldr	r5, [r7, #40]	@ 0x28
 8000bf2:	fb05 f304 	mul.w	r3, r5, r4
 8000bf6:	4413      	add	r3, r2
 8000bf8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000bfa:	6a3c      	ldr	r4, [r7, #32]
 8000bfc:	fba2 4204 	umull	r4, r2, r2, r4
 8000c00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8000c02:	4622      	mov	r2, r4
 8000c04:	64ba      	str	r2, [r7, #72]	@ 0x48
 8000c06:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8000c08:	4413      	add	r3, r2
 8000c0a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000c0c:	f04f 0200 	mov.w	r2, #0
 8000c10:	f04f 0300 	mov.w	r3, #0
 8000c14:	6cfc      	ldr	r4, [r7, #76]	@ 0x4c
 8000c16:	0163      	lsls	r3, r4, #5
 8000c18:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8000c1a:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000c1e:	6cbc      	ldr	r4, [r7, #72]	@ 0x48
 8000c20:	0162      	lsls	r2, r4, #5
 8000c22:	fb00 f301 	mul.w	r3, r0, r1
 8000c26:	009b      	lsls	r3, r3, #2
 8000c28:	3307      	adds	r3, #7
 8000c2a:	08db      	lsrs	r3, r3, #3
 8000c2c:	00db      	lsls	r3, r3, #3
 8000c2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000c32:	466b      	mov	r3, sp
 8000c34:	3303      	adds	r3, #3
 8000c36:	089b      	lsrs	r3, r3, #2
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
		 uint32_t Y_test[rows];
 8000c3c:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8000c3e:	460b      	mov	r3, r1
 8000c40:	3b01      	subs	r3, #1
 8000c42:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c44:	2300      	movs	r3, #0
 8000c46:	60b9      	str	r1, [r7, #8]
 8000c48:	60fb      	str	r3, [r7, #12]
 8000c4a:	f04f 0200 	mov.w	r2, #0
 8000c4e:	f04f 0300 	mov.w	r3, #0
 8000c52:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8000c56:	4628      	mov	r0, r5
 8000c58:	0143      	lsls	r3, r0, #5
 8000c5a:	4620      	mov	r0, r4
 8000c5c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8000c60:	4620      	mov	r0, r4
 8000c62:	0142      	lsls	r2, r0, #5
 8000c64:	2300      	movs	r3, #0
 8000c66:	468a      	mov	sl, r1
 8000c68:	469b      	mov	fp, r3
 8000c6a:	f04f 0200 	mov.w	r2, #0
 8000c6e:	f04f 0300 	mov.w	r3, #0
 8000c72:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000c76:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000c7a:	ea4f 124a 	mov.w	r2, sl, lsl #5
 8000c7e:	008b      	lsls	r3, r1, #2
 8000c80:	3307      	adds	r3, #7
 8000c82:	08db      	lsrs	r3, r3, #3
 8000c84:	00db      	lsls	r3, r3, #3
 8000c86:	ebad 0d03 	sub.w	sp, sp, r3
 8000c8a:	466b      	mov	r3, sp
 8000c8c:	3303      	adds	r3, #3
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	009b      	lsls	r3, r3, #2
 8000c92:	657b      	str	r3, [r7, #84]	@ 0x54

		 HAL_UART_Receive(&huart2, rx_buffer, sizeof(rx_buffer), HAL_MAX_DELAY);
 8000c94:	b2b3      	uxth	r3, r6
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	b29a      	uxth	r2, r3
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c9e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8000ca0:	4814      	ldr	r0, [pc, #80]	@ (8000cf4 <main+0x220>)
 8000ca2:	f002 fdfa 	bl	800389a <HAL_UART_Receive>
		 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_SET);
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	2120      	movs	r1, #32
 8000caa:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000cae:	f001 f873 	bl	8001d98 <HAL_GPIO_WritePin>

		 //rxbufferUnpack(rx_buffer, X_test, rows, cols);
		 regressionPredict(rx_buffer, Y_test, rows, cols);
 8000cb2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8000cb4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8000cb6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000cb8:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8000cba:	f000 f90b 	bl	8000ed4 <regressionPredict>
		 HAL_UART_Transmit(&huart2, Y_test, (rows*4), HAL_MAX_DELAY);
 8000cbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8000cc0:	b29b      	uxth	r3, r3
 8000cc2:	009b      	lsls	r3, r3, #2
 8000cc4:	b29a      	uxth	r2, r3
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000cca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8000ccc:	4809      	ldr	r0, [pc, #36]	@ (8000cf4 <main+0x220>)
 8000cce:	f002 fd5b 	bl	8003788 <HAL_UART_Transmit>
		 data_ready = false;
 8000cd2:	4a06      	ldr	r2, [pc, #24]	@ (8000cec <main+0x218>)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	7013      	strb	r3, [r2, #0]
 8000cd8:	f8d7 d004 	ldr.w	sp, [r7, #4]
 8000cdc:	e708      	b.n	8000af0 <main+0x1c>
	 }
	 else{
		 HAL_UART_Receive_DMA(&huart2, X_size, 8);
 8000cde:	2208      	movs	r2, #8
 8000ce0:	4903      	ldr	r1, [pc, #12]	@ (8000cf0 <main+0x21c>)
 8000ce2:	4804      	ldr	r0, [pc, #16]	@ (8000cf4 <main+0x220>)
 8000ce4:	f002 fea2 	bl	8003a2c <HAL_UART_Receive_DMA>
	 if (data_ready){
 8000ce8:	e702      	b.n	8000af0 <main+0x1c>
 8000cea:	bf00      	nop
 8000cec:	200001b4 	.word	0x200001b4
 8000cf0:	200001ac 	.word	0x200001ac
 8000cf4:	2000009c 	.word	0x2000009c

08000cf8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b0a6      	sub	sp, #152	@ 0x98
 8000cfc:	af00      	add	r7, sp, #0
 RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000cfe:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d02:	2228      	movs	r2, #40	@ 0x28
 8000d04:	2100      	movs	r1, #0
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 ffd5 	bl	8004cb6 <memset>
 RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d0c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]
 8000d1a:	611a      	str	r2, [r3, #16]
 RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d1c:	1d3b      	adds	r3, r7, #4
 8000d1e:	2258      	movs	r2, #88	@ 0x58
 8000d20:	2100      	movs	r1, #0
 8000d22:	4618      	mov	r0, r3
 8000d24:	f003 ffc7 	bl	8004cb6 <memset>
 /** Initializes the RCC Oscillators according to the specified parameters
 * in the RCC_OscInitTypeDef structure.
 */
 RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d28:	2302      	movs	r3, #2
 8000d2a:	673b      	str	r3, [r7, #112]	@ 0x70
 RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d2c:	2301      	movs	r3, #1
 8000d2e:	67fb      	str	r3, [r7, #124]	@ 0x7c
 RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d30:	2310      	movs	r3, #16
 8000d32:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000d36:	2300      	movs	r3, #0
 8000d38:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d3c:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d40:	4618      	mov	r0, r3
 8000d42:	f001 f841 	bl	8001dc8 <HAL_RCC_OscConfig>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d001      	beq.n	8000d50 <SystemClock_Config+0x58>
 {
   Error_Handler();
 8000d4c:	f000 f9a1 	bl	8001092 <Error_Handler>
 }
 /** Initializes the CPU, AHB and APB buses clocks
 */
 RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d50:	230f      	movs	r3, #15
 8000d52:	65fb      	str	r3, [r7, #92]	@ 0x5c
                             |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000d54:	2300      	movs	r3, #0
 8000d56:	663b      	str	r3, [r7, #96]	@ 0x60
 RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	667b      	str	r3, [r7, #100]	@ 0x64
 RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	66bb      	str	r3, [r7, #104]	@ 0x68
 RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d60:	2300      	movs	r3, #0
 8000d62:	66fb      	str	r3, [r7, #108]	@ 0x6c
 if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000d64:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d68:	2100      	movs	r1, #0
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	f002 f880 	bl	8002e70 <HAL_RCC_ClockConfig>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d001      	beq.n	8000d7a <SystemClock_Config+0x82>
 {
   Error_Handler();
 8000d76:	f000 f98c 	bl	8001092 <Error_Handler>
 }
 PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	607b      	str	r3, [r7, #4]
 PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	613b      	str	r3, [r7, #16]
 if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d82:	1d3b      	adds	r3, r7, #4
 8000d84:	4618      	mov	r0, r3
 8000d86:	f002 fa93 	bl	80032b0 <HAL_RCCEx_PeriphCLKConfig>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <SystemClock_Config+0x9c>
 {
   Error_Handler();
 8000d90:	f000 f97f 	bl	8001092 <Error_Handler>
 }
}
 8000d94:	bf00      	nop
 8000d96:	3798      	adds	r7, #152	@ 0x98
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	bd80      	pop	{r7, pc}

08000d9c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
 /* USER CODE BEGIN USART2_Init 0 */
 /* USER CODE END USART2_Init 0 */
 /* USER CODE BEGIN USART2_Init 1 */
 /* USER CODE END USART2_Init 1 */
 huart2.Instance = USART2;
 8000da0:	4b14      	ldr	r3, [pc, #80]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da2:	4a15      	ldr	r2, [pc, #84]	@ (8000df8 <MX_USART2_UART_Init+0x5c>)
 8000da4:	601a      	str	r2, [r3, #0]
 huart2.Init.BaudRate = 9600;
 8000da6:	4b13      	ldr	r3, [pc, #76]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000da8:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000dac:	605a      	str	r2, [r3, #4]
 huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dae:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db0:	2200      	movs	r2, #0
 8000db2:	609a      	str	r2, [r3, #8]
 huart2.Init.StopBits = UART_STOPBITS_1;
 8000db4:	4b0f      	ldr	r3, [pc, #60]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000db6:	2200      	movs	r2, #0
 8000db8:	60da      	str	r2, [r3, #12]
 huart2.Init.Parity = UART_PARITY_NONE;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	611a      	str	r2, [r3, #16]
 huart2.Init.Mode = UART_MODE_TX_RX;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc2:	220c      	movs	r2, #12
 8000dc4:	615a      	str	r2, [r3, #20]
 huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	619a      	str	r2, [r3, #24]
 huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dce:	2200      	movs	r2, #0
 8000dd0:	61da      	str	r2, [r3, #28]
 huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	621a      	str	r2, [r3, #32]
 huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	625a      	str	r2, [r3, #36]	@ 0x24
 if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART2_UART_Init+0x58>)
 8000de0:	f002 fc84 	bl	80036ec <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x52>
 {
   Error_Handler();
 8000dea:	f000 f952 	bl	8001092 <Error_Handler>
 }
 /* USER CODE BEGIN USART2_Init 2 */
 /* USER CODE END USART2_Init 2 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2000009c 	.word	0x2000009c
 8000df8:	40004400 	.word	0x40004400

08000dfc <MX_DMA_Init>:
/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 /* DMA controller clock enable */
 __HAL_RCC_DMA1_CLK_ENABLE();
 8000e02:	4b10      	ldr	r3, [pc, #64]	@ (8000e44 <MX_DMA_Init+0x48>)
 8000e04:	695b      	ldr	r3, [r3, #20]
 8000e06:	4a0f      	ldr	r2, [pc, #60]	@ (8000e44 <MX_DMA_Init+0x48>)
 8000e08:	f043 0301 	orr.w	r3, r3, #1
 8000e0c:	6153      	str	r3, [r2, #20]
 8000e0e:	4b0d      	ldr	r3, [pc, #52]	@ (8000e44 <MX_DMA_Init+0x48>)
 8000e10:	695b      	ldr	r3, [r3, #20]
 8000e12:	f003 0301 	and.w	r3, r3, #1
 8000e16:	607b      	str	r3, [r7, #4]
 8000e18:	687b      	ldr	r3, [r7, #4]
 /* DMA interrupt init */
 /* DMA1_Channel6_IRQn interrupt configuration */
 HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	2100      	movs	r1, #0
 8000e1e:	2010      	movs	r0, #16
 8000e20:	f000 fbcb 	bl	80015ba <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000e24:	2010      	movs	r0, #16
 8000e26:	f000 fbe4 	bl	80015f2 <HAL_NVIC_EnableIRQ>
 /* DMA1_Channel7_IRQn interrupt configuration */
 HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	2100      	movs	r1, #0
 8000e2e:	2011      	movs	r0, #17
 8000e30:	f000 fbc3 	bl	80015ba <HAL_NVIC_SetPriority>
 HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000e34:	2011      	movs	r0, #17
 8000e36:	f000 fbdc 	bl	80015f2 <HAL_NVIC_EnableIRQ>
}
 8000e3a:	bf00      	nop
 8000e3c:	3708      	adds	r7, #8
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bd80      	pop	{r7, pc}
 8000e42:	bf00      	nop
 8000e44:	40021000 	.word	0x40021000

08000e48 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4e:	1d3b      	adds	r3, r7, #4
 8000e50:	2200      	movs	r2, #0
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	605a      	str	r2, [r3, #4]
 8000e56:	609a      	str	r2, [r3, #8]
 8000e58:	60da      	str	r2, [r3, #12]
 8000e5a:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */
 /* GPIO Ports Clock Enable */
 __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5c:	4b11      	ldr	r3, [pc, #68]	@ (8000ea4 <MX_GPIO_Init+0x5c>)
 8000e5e:	695b      	ldr	r3, [r3, #20]
 8000e60:	4a10      	ldr	r2, [pc, #64]	@ (8000ea4 <MX_GPIO_Init+0x5c>)
 8000e62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e66:	6153      	str	r3, [r2, #20]
 8000e68:	4b0e      	ldr	r3, [pc, #56]	@ (8000ea4 <MX_GPIO_Init+0x5c>)
 8000e6a:	695b      	ldr	r3, [r3, #20]
 8000e6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e70:	603b      	str	r3, [r7, #0]
 8000e72:	683b      	ldr	r3, [r7, #0]
 /*Configure GPIO pin Output Level */
 HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000e74:	2200      	movs	r2, #0
 8000e76:	2120      	movs	r1, #32
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e7c:	f000 ff8c 	bl	8001d98 <HAL_GPIO_WritePin>
 /*Configure GPIO pin : PA5 */
 GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000e80:	2320      	movs	r3, #32
 8000e82:	607b      	str	r3, [r7, #4]
 GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e84:	2301      	movs	r3, #1
 8000e86:	60bb      	str	r3, [r7, #8]
 GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e88:	2300      	movs	r3, #0
 8000e8a:	60fb      	str	r3, [r7, #12]
 GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	613b      	str	r3, [r7, #16]
 HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e90:	1d3b      	adds	r3, r7, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e98:	f000 fdf4 	bl	8001a84 <HAL_GPIO_Init>
/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000e9c:	bf00      	nop
 8000e9e:	3718      	adds	r7, #24
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000ea8:	b480      	push	{r7}
 8000eaa:	b083      	sub	sp, #12
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	4a05      	ldr	r2, [pc, #20]	@ (8000ecc <HAL_UART_RxCpltCallback+0x24>)
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d102      	bne.n	8000ec0 <HAL_UART_RxCpltCallback+0x18>
	  {
		data_ready = true;
 8000eba:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <HAL_UART_RxCpltCallback+0x28>)
 8000ebc:	2201      	movs	r2, #1
 8000ebe:	701a      	strb	r2, [r3, #0]
	  }
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40004400 	.word	0x40004400
 8000ed0:	200001b4 	.word	0x200001b4

08000ed4 <regressionPredict>:
void regressionPredict(float* buffer, uint32_t* Y, uint32_t rows, uint32_t cols) {
 8000ed4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ed8:	b08d      	sub	sp, #52	@ 0x34
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	60f8      	str	r0, [r7, #12]
 8000ede:	60b9      	str	r1, [r7, #8]
 8000ee0:	607a      	str	r2, [r7, #4]
 8000ee2:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < rows; i++) {
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000ee8:	e08e      	b.n	8001008 <regressionPredict+0x134>
 8000eea:	466b      	mov	r3, sp
 8000eec:	461e      	mov	r6, r3
        // Calculate the dot product of features and weights
        float features[cols];
 8000eee:	6839      	ldr	r1, [r7, #0]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	3b01      	subs	r3, #1
 8000ef4:	627b      	str	r3, [r7, #36]	@ 0x24
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	460c      	mov	r4, r1
 8000efa:	461d      	mov	r5, r3
 8000efc:	f04f 0200 	mov.w	r2, #0
 8000f00:	f04f 0300 	mov.w	r3, #0
 8000f04:	016b      	lsls	r3, r5, #5
 8000f06:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000f0a:	0162      	lsls	r2, r4, #5
 8000f0c:	2300      	movs	r3, #0
 8000f0e:	4688      	mov	r8, r1
 8000f10:	4699      	mov	r9, r3
 8000f12:	f04f 0200 	mov.w	r2, #0
 8000f16:	f04f 0300 	mov.w	r3, #0
 8000f1a:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000f1e:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000f22:	ea4f 1248 	mov.w	r2, r8, lsl #5
 8000f26:	008b      	lsls	r3, r1, #2
 8000f28:	3307      	adds	r3, #7
 8000f2a:	08db      	lsrs	r3, r3, #3
 8000f2c:	00db      	lsls	r3, r3, #3
 8000f2e:	ebad 0d03 	sub.w	sp, sp, r3
 8000f32:	466b      	mov	r3, sp
 8000f34:	3303      	adds	r3, #3
 8000f36:	089b      	lsrs	r3, r3, #2
 8000f38:	009b      	lsls	r3, r3, #2
 8000f3a:	623b      	str	r3, [r7, #32]
        for (uint32_t j = 0; j < cols; j++) {
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f40:	e011      	b.n	8000f66 <regressionPredict+0x92>
            features[j] = buffer[i * cols + j];
 8000f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f44:	683a      	ldr	r2, [r7, #0]
 8000f46:	fb03 f202 	mul.w	r2, r3, r2
 8000f4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f4c:	4413      	add	r3, r2
 8000f4e:	009b      	lsls	r3, r3, #2
 8000f50:	68fa      	ldr	r2, [r7, #12]
 8000f52:	4413      	add	r3, r2
 8000f54:	681a      	ldr	r2, [r3, #0]
 8000f56:	6a39      	ldr	r1, [r7, #32]
 8000f58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f5a:	009b      	lsls	r3, r3, #2
 8000f5c:	440b      	add	r3, r1
 8000f5e:	601a      	str	r2, [r3, #0]
        for (uint32_t j = 0; j < cols; j++) {
 8000f60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f62:	3301      	adds	r3, #1
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000f66:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000f68:	683b      	ldr	r3, [r7, #0]
 8000f6a:	429a      	cmp	r2, r3
 8000f6c:	d3e9      	bcc.n	8000f42 <regressionPredict+0x6e>
        }
        double dot_product = dotProduct(features, Weights, cols);
 8000f6e:	683a      	ldr	r2, [r7, #0]
 8000f70:	492b      	ldr	r1, [pc, #172]	@ (8001020 <regressionPredict+0x14c>)
 8000f72:	6a38      	ldr	r0, [r7, #32]
 8000f74:	f000 f85c 	bl	8001030 <dotProduct>
 8000f78:	ee10 3a10 	vmov	r3, s0
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	f7ff fa8f 	bl	80004a0 <__aeabi_f2d>
 8000f82:	4602      	mov	r2, r0
 8000f84:	460b      	mov	r3, r1
 8000f86:	e9c7 2306 	strd	r2, r3, [r7, #24]

        // Calculate the logistic regression output
        double Z = 1 / (1 + exp(-(dot_product + Bias)));
 8000f8a:	4b26      	ldr	r3, [pc, #152]	@ (8001024 <regressionPredict+0x150>)
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	4618      	mov	r0, r3
 8000f90:	f7ff fa86 	bl	80004a0 <__aeabi_f2d>
 8000f94:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8000f98:	f7ff f924 	bl	80001e4 <__adddf3>
 8000f9c:	4602      	mov	r2, r0
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	4692      	mov	sl, r2
 8000fa2:	f083 4b00 	eor.w	fp, r3, #2147483648	@ 0x80000000
 8000fa6:	ec4b ab10 	vmov	d0, sl, fp
 8000faa:	f003 feb9 	bl	8004d20 <exp>
 8000fae:	ec51 0b10 	vmov	r0, r1, d0
 8000fb2:	f04f 0200 	mov.w	r2, #0
 8000fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8001028 <regressionPredict+0x154>)
 8000fb8:	f7ff f914 	bl	80001e4 <__adddf3>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	f04f 0000 	mov.w	r0, #0
 8000fc4:	4918      	ldr	r1, [pc, #96]	@ (8001028 <regressionPredict+0x154>)
 8000fc6:	f7ff fbed 	bl	80007a4 <__aeabi_ddiv>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	460b      	mov	r3, r1
 8000fce:	e9c7 2304 	strd	r2, r3, [r7, #16]

        // Store the prediction result in the output array
        if (Z < 0.5) {
 8000fd2:	f04f 0200 	mov.w	r2, #0
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <regressionPredict+0x158>)
 8000fd8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000fdc:	f7ff fd2a 	bl	8000a34 <__aeabi_dcmplt>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d006      	beq.n	8000ff4 <regressionPredict+0x120>
            Y[i] = 0;
 8000fe6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000fe8:	009b      	lsls	r3, r3, #2
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	4413      	add	r3, r2
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	e005      	b.n	8001000 <regressionPredict+0x12c>
        } else {
            Y[i] = 1;
 8000ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ff6:	009b      	lsls	r3, r3, #2
 8000ff8:	68ba      	ldr	r2, [r7, #8]
 8000ffa:	4413      	add	r3, r2
 8000ffc:	2201      	movs	r2, #1
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	46b5      	mov	sp, r6
    for (uint32_t i = 0; i < rows; i++) {
 8001002:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001004:	3301      	adds	r3, #1
 8001006:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001008:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	429a      	cmp	r2, r3
 800100e:	f4ff af6c 	bcc.w	8000eea <regressionPredict+0x16>
        }
    }
}
 8001012:	bf00      	nop
 8001014:	bf00      	nop
 8001016:	3734      	adds	r7, #52	@ 0x34
 8001018:	46bd      	mov	sp, r7
 800101a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800101e:	bf00      	nop
 8001020:	20000000 	.word	0x20000000
 8001024:	20000020 	.word	0x20000020
 8001028:	3ff00000 	.word	0x3ff00000
 800102c:	3fe00000 	.word	0x3fe00000

08001030 <dotProduct>:


float dotProduct(float* a, float* b, uint32_t size) {
 8001030:	b480      	push	{r7}
 8001032:	b087      	sub	sp, #28
 8001034:	af00      	add	r7, sp, #0
 8001036:	60f8      	str	r0, [r7, #12]
 8001038:	60b9      	str	r1, [r7, #8]
 800103a:	607a      	str	r2, [r7, #4]
    float result = 0.0;
 800103c:	f04f 0300 	mov.w	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < size; i++) {
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	e016      	b.n	8001076 <dotProduct+0x46>
        result += a[i] * b[i];
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	68fa      	ldr	r2, [r7, #12]
 800104e:	4413      	add	r3, r2
 8001050:	ed93 7a00 	vldr	s14, [r3]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	009b      	lsls	r3, r3, #2
 8001058:	68ba      	ldr	r2, [r7, #8]
 800105a:	4413      	add	r3, r2
 800105c:	edd3 7a00 	vldr	s15, [r3]
 8001060:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001064:	ed97 7a05 	vldr	s14, [r7, #20]
 8001068:	ee77 7a27 	vadd.f32	s15, s14, s15
 800106c:	edc7 7a05 	vstr	s15, [r7, #20]
    for (uint32_t i = 0; i < size; i++) {
 8001070:	693b      	ldr	r3, [r7, #16]
 8001072:	3301      	adds	r3, #1
 8001074:	613b      	str	r3, [r7, #16]
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	429a      	cmp	r2, r3
 800107c:	d3e4      	bcc.n	8001048 <dotProduct+0x18>
    }
    return result;
 800107e:	697b      	ldr	r3, [r7, #20]
 8001080:	ee07 3a90 	vmov	s15, r3
}
 8001084:	eeb0 0a67 	vmov.f32	s0, s15
 8001088:	371c      	adds	r7, #28
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr

08001092 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001092:	b480      	push	{r7}
 8001094:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001096:	b672      	cpsid	i
}
 8001098:	bf00      	nop
 /* USER CODE BEGIN Error_Handler_Debug */
 /* User can add his own implementation to report the HAL error return state */
 __disable_irq();
 while (1)
 800109a:	bf00      	nop
 800109c:	e7fd      	b.n	800109a <Error_Handler+0x8>
	...

080010a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010a6:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <HAL_MspInit+0x44>)
 80010a8:	699b      	ldr	r3, [r3, #24]
 80010aa:	4a0e      	ldr	r2, [pc, #56]	@ (80010e4 <HAL_MspInit+0x44>)
 80010ac:	f043 0301 	orr.w	r3, r3, #1
 80010b0:	6193      	str	r3, [r2, #24]
 80010b2:	4b0c      	ldr	r3, [pc, #48]	@ (80010e4 <HAL_MspInit+0x44>)
 80010b4:	699b      	ldr	r3, [r3, #24]
 80010b6:	f003 0301 	and.w	r3, r3, #1
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010be:	4b09      	ldr	r3, [pc, #36]	@ (80010e4 <HAL_MspInit+0x44>)
 80010c0:	69db      	ldr	r3, [r3, #28]
 80010c2:	4a08      	ldr	r2, [pc, #32]	@ (80010e4 <HAL_MspInit+0x44>)
 80010c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c8:	61d3      	str	r3, [r2, #28]
 80010ca:	4b06      	ldr	r3, [pc, #24]	@ (80010e4 <HAL_MspInit+0x44>)
 80010cc:	69db      	ldr	r3, [r3, #28]
 80010ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010d2:	603b      	str	r3, [r7, #0]
 80010d4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010d6:	bf00      	nop
 80010d8:	370c      	adds	r7, #12
 80010da:	46bd      	mov	sp, r7
 80010dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e0:	4770      	bx	lr
 80010e2:	bf00      	nop
 80010e4:	40021000 	.word	0x40021000

080010e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b08a      	sub	sp, #40	@ 0x28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010f0:	f107 0314 	add.w	r3, r7, #20
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	4a41      	ldr	r2, [pc, #260]	@ (800120c <HAL_UART_MspInit+0x124>)
 8001106:	4293      	cmp	r3, r2
 8001108:	d17c      	bne.n	8001204 <HAL_UART_MspInit+0x11c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800110a:	4b41      	ldr	r3, [pc, #260]	@ (8001210 <HAL_UART_MspInit+0x128>)
 800110c:	69db      	ldr	r3, [r3, #28]
 800110e:	4a40      	ldr	r2, [pc, #256]	@ (8001210 <HAL_UART_MspInit+0x128>)
 8001110:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001114:	61d3      	str	r3, [r2, #28]
 8001116:	4b3e      	ldr	r3, [pc, #248]	@ (8001210 <HAL_UART_MspInit+0x128>)
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800111e:	613b      	str	r3, [r7, #16]
 8001120:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001122:	4b3b      	ldr	r3, [pc, #236]	@ (8001210 <HAL_UART_MspInit+0x128>)
 8001124:	695b      	ldr	r3, [r3, #20]
 8001126:	4a3a      	ldr	r2, [pc, #232]	@ (8001210 <HAL_UART_MspInit+0x128>)
 8001128:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800112c:	6153      	str	r3, [r2, #20]
 800112e:	4b38      	ldr	r3, [pc, #224]	@ (8001210 <HAL_UART_MspInit+0x128>)
 8001130:	695b      	ldr	r3, [r3, #20]
 8001132:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001136:	60fb      	str	r3, [r7, #12]
 8001138:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800113a:	230c      	movs	r3, #12
 800113c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113e:	2302      	movs	r3, #2
 8001140:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001142:	2300      	movs	r3, #0
 8001144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001146:	2303      	movs	r3, #3
 8001148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800114a:	2307      	movs	r3, #7
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114e:	f107 0314 	add.w	r3, r7, #20
 8001152:	4619      	mov	r1, r3
 8001154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001158:	f000 fc94 	bl	8001a84 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800115c:	4b2d      	ldr	r3, [pc, #180]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 800115e:	4a2e      	ldr	r2, [pc, #184]	@ (8001218 <HAL_UART_MspInit+0x130>)
 8001160:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001162:	4b2c      	ldr	r3, [pc, #176]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 8001164:	2200      	movs	r2, #0
 8001166:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001168:	4b2a      	ldr	r3, [pc, #168]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 800116a:	2200      	movs	r2, #0
 800116c:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800116e:	4b29      	ldr	r3, [pc, #164]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 8001170:	2280      	movs	r2, #128	@ 0x80
 8001172:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001174:	4b27      	ldr	r3, [pc, #156]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 8001176:	2200      	movs	r2, #0
 8001178:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800117a:	4b26      	ldr	r3, [pc, #152]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 800117c:	2200      	movs	r2, #0
 800117e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001180:	4b24      	ldr	r3, [pc, #144]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 8001182:	2200      	movs	r2, #0
 8001184:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001186:	4b23      	ldr	r3, [pc, #140]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 8001188:	2200      	movs	r2, #0
 800118a:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800118c:	4821      	ldr	r0, [pc, #132]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 800118e:	f000 fa4a 	bl	8001626 <HAL_DMA_Init>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d001      	beq.n	800119c <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8001198:	f7ff ff7b 	bl	8001092 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	4a1d      	ldr	r2, [pc, #116]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 80011a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80011a2:	4a1c      	ldr	r2, [pc, #112]	@ (8001214 <HAL_UART_MspInit+0x12c>)
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 80011a8:	4b1c      	ldr	r3, [pc, #112]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_UART_MspInit+0x138>)
 80011ac:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80011ae:	4b1b      	ldr	r3, [pc, #108]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011b0:	2210      	movs	r2, #16
 80011b2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011b4:	4b19      	ldr	r3, [pc, #100]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011b6:	2200      	movs	r2, #0
 80011b8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80011ba:	4b18      	ldr	r3, [pc, #96]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011bc:	2280      	movs	r2, #128	@ 0x80
 80011be:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011c0:	4b16      	ldr	r3, [pc, #88]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011c6:	4b15      	ldr	r3, [pc, #84]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011c8:	2200      	movs	r2, #0
 80011ca:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80011cc:	4b13      	ldr	r3, [pc, #76]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80011d2:	4b12      	ldr	r3, [pc, #72]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80011d8:	4810      	ldr	r0, [pc, #64]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011da:	f000 fa24 	bl	8001626 <HAL_DMA_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80011e4:	f7ff ff55 	bl	8001092 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a0c      	ldr	r2, [pc, #48]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011ec:	671a      	str	r2, [r3, #112]	@ 0x70
 80011ee:	4a0b      	ldr	r2, [pc, #44]	@ (800121c <HAL_UART_MspInit+0x134>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80011f4:	2200      	movs	r2, #0
 80011f6:	2100      	movs	r1, #0
 80011f8:	2026      	movs	r0, #38	@ 0x26
 80011fa:	f000 f9de 	bl	80015ba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80011fe:	2026      	movs	r0, #38	@ 0x26
 8001200:	f000 f9f7 	bl	80015f2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001204:	bf00      	nop
 8001206:	3728      	adds	r7, #40	@ 0x28
 8001208:	46bd      	mov	sp, r7
 800120a:	bd80      	pop	{r7, pc}
 800120c:	40004400 	.word	0x40004400
 8001210:	40021000 	.word	0x40021000
 8001214:	20000124 	.word	0x20000124
 8001218:	4002006c 	.word	0x4002006c
 800121c:	20000168 	.word	0x20000168
 8001220:	40020080 	.word	0x40020080

08001224 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001228:	bf00      	nop
 800122a:	e7fd      	b.n	8001228 <NMI_Handler+0x4>

0800122c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001230:	bf00      	nop
 8001232:	e7fd      	b.n	8001230 <HardFault_Handler+0x4>

08001234 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001238:	bf00      	nop
 800123a:	e7fd      	b.n	8001238 <MemManage_Handler+0x4>

0800123c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001240:	bf00      	nop
 8001242:	e7fd      	b.n	8001240 <BusFault_Handler+0x4>

08001244 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001244:	b480      	push	{r7}
 8001246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001248:	bf00      	nop
 800124a:	e7fd      	b.n	8001248 <UsageFault_Handler+0x4>

0800124c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800124c:	b480      	push	{r7}
 800124e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	46bd      	mov	sp, r7
 8001254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001258:	4770      	bx	lr

0800125a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800125a:	b480      	push	{r7}
 800125c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	46bd      	mov	sp, r7
 8001262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001266:	4770      	bx	lr

08001268 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001268:	b480      	push	{r7}
 800126a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800126c:	bf00      	nop
 800126e:	46bd      	mov	sp, r7
 8001270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001274:	4770      	bx	lr

08001276 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001276:	b580      	push	{r7, lr}
 8001278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800127a:	f000 f8a3 	bl	80013c4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800127e:	bf00      	nop
 8001280:	bd80      	pop	{r7, pc}
	...

08001284 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001288:	4802      	ldr	r0, [pc, #8]	@ (8001294 <DMA1_Channel6_IRQHandler+0x10>)
 800128a:	f000 faee 	bl	800186a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800128e:	bf00      	nop
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	20000124 	.word	0x20000124

08001298 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 800129c:	4802      	ldr	r0, [pc, #8]	@ (80012a8 <DMA1_Channel7_IRQHandler+0x10>)
 800129e:	f000 fae4 	bl	800186a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 80012a2:	bf00      	nop
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	20000168 	.word	0x20000168

080012ac <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80012b0:	4802      	ldr	r0, [pc, #8]	@ (80012bc <USART2_IRQHandler+0x10>)
 80012b2:	f002 fbff 	bl	8003ab4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80012b6:	bf00      	nop
 80012b8:	bd80      	pop	{r7, pc}
 80012ba:	bf00      	nop
 80012bc:	2000009c 	.word	0x2000009c

080012c0 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012c4:	4b06      	ldr	r3, [pc, #24]	@ (80012e0 <SystemInit+0x20>)
 80012c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012ca:	4a05      	ldr	r2, [pc, #20]	@ (80012e0 <SystemInit+0x20>)
 80012cc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012d0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012d4:	bf00      	nop
 80012d6:	46bd      	mov	sp, r7
 80012d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	e000ed00 	.word	0xe000ed00

080012e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012e4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800131c <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012e8:	f7ff ffea 	bl	80012c0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012ec:	480c      	ldr	r0, [pc, #48]	@ (8001320 <LoopForever+0x6>)
  ldr r1, =_edata
 80012ee:	490d      	ldr	r1, [pc, #52]	@ (8001324 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001328 <LoopForever+0xe>)
  movs r3, #0
 80012f2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012f4:	e002      	b.n	80012fc <LoopCopyDataInit>

080012f6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012f6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012f8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012fa:	3304      	adds	r3, #4

080012fc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012fc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012fe:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001300:	d3f9      	bcc.n	80012f6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001302:	4a0a      	ldr	r2, [pc, #40]	@ (800132c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001304:	4c0a      	ldr	r4, [pc, #40]	@ (8001330 <LoopForever+0x16>)
  movs r3, #0
 8001306:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001308:	e001      	b.n	800130e <LoopFillZerobss>

0800130a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800130a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800130c:	3204      	adds	r2, #4

0800130e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800130e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001310:	d3fb      	bcc.n	800130a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001312:	f003 fcdf 	bl	8004cd4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001316:	f7ff fbdd 	bl	8000ad4 <main>

0800131a <LoopForever>:

LoopForever:
    b LoopForever
 800131a:	e7fe      	b.n	800131a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800131c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001320:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001324:	20000080 	.word	0x20000080
  ldr r2, =_sidata
 8001328:	080051c0 	.word	0x080051c0
  ldr r2, =_sbss
 800132c:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 8001330:	200002f4 	.word	0x200002f4

08001334 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001334:	e7fe      	b.n	8001334 <ADC1_2_IRQHandler>
	...

08001338 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800133c:	4b08      	ldr	r3, [pc, #32]	@ (8001360 <HAL_Init+0x28>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	4a07      	ldr	r2, [pc, #28]	@ (8001360 <HAL_Init+0x28>)
 8001342:	f043 0310 	orr.w	r3, r3, #16
 8001346:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001348:	2003      	movs	r0, #3
 800134a:	f000 f92b 	bl	80015a4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800134e:	200f      	movs	r0, #15
 8001350:	f000 f808 	bl	8001364 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001354:	f7ff fea4 	bl	80010a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001358:	2300      	movs	r3, #0
}
 800135a:	4618      	mov	r0, r3
 800135c:	bd80      	pop	{r7, pc}
 800135e:	bf00      	nop
 8001360:	40022000 	.word	0x40022000

08001364 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b082      	sub	sp, #8
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800136c:	4b12      	ldr	r3, [pc, #72]	@ (80013b8 <HAL_InitTick+0x54>)
 800136e:	681a      	ldr	r2, [r3, #0]
 8001370:	4b12      	ldr	r3, [pc, #72]	@ (80013bc <HAL_InitTick+0x58>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4619      	mov	r1, r3
 8001376:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800137a:	fbb3 f3f1 	udiv	r3, r3, r1
 800137e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001382:	4618      	mov	r0, r3
 8001384:	f000 f943 	bl	800160e <HAL_SYSTICK_Config>
 8001388:	4603      	mov	r3, r0
 800138a:	2b00      	cmp	r3, #0
 800138c:	d001      	beq.n	8001392 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800138e:	2301      	movs	r3, #1
 8001390:	e00e      	b.n	80013b0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	2b0f      	cmp	r3, #15
 8001396:	d80a      	bhi.n	80013ae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001398:	2200      	movs	r2, #0
 800139a:	6879      	ldr	r1, [r7, #4]
 800139c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80013a0:	f000 f90b 	bl	80015ba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013a4:	4a06      	ldr	r2, [pc, #24]	@ (80013c0 <HAL_InitTick+0x5c>)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013aa:	2300      	movs	r3, #0
 80013ac:	e000      	b.n	80013b0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ae:	2301      	movs	r3, #1
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	20000024 	.word	0x20000024
 80013bc:	2000002c 	.word	0x2000002c
 80013c0:	20000028 	.word	0x20000028

080013c4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013c4:	b480      	push	{r7}
 80013c6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013c8:	4b06      	ldr	r3, [pc, #24]	@ (80013e4 <HAL_IncTick+0x20>)
 80013ca:	781b      	ldrb	r3, [r3, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4413      	add	r3, r2
 80013d4:	4a04      	ldr	r2, [pc, #16]	@ (80013e8 <HAL_IncTick+0x24>)
 80013d6:	6013      	str	r3, [r2, #0]
}
 80013d8:	bf00      	nop
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	2000002c 	.word	0x2000002c
 80013e8:	200001b8 	.word	0x200001b8

080013ec <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  return uwTick;  
 80013f0:	4b03      	ldr	r3, [pc, #12]	@ (8001400 <HAL_GetTick+0x14>)
 80013f2:	681b      	ldr	r3, [r3, #0]
}
 80013f4:	4618      	mov	r0, r3
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	200001b8 	.word	0x200001b8

08001404 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001404:	b480      	push	{r7}
 8001406:	b085      	sub	sp, #20
 8001408:	af00      	add	r7, sp, #0
 800140a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	f003 0307 	and.w	r3, r3, #7
 8001412:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001414:	4b0c      	ldr	r3, [pc, #48]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800141a:	68ba      	ldr	r2, [r7, #8]
 800141c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001420:	4013      	ands	r3, r2
 8001422:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800142c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001430:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001434:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001436:	4a04      	ldr	r2, [pc, #16]	@ (8001448 <__NVIC_SetPriorityGrouping+0x44>)
 8001438:	68bb      	ldr	r3, [r7, #8]
 800143a:	60d3      	str	r3, [r2, #12]
}
 800143c:	bf00      	nop
 800143e:	3714      	adds	r7, #20
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr
 8001448:	e000ed00 	.word	0xe000ed00

0800144c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800144c:	b480      	push	{r7}
 800144e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001450:	4b04      	ldr	r3, [pc, #16]	@ (8001464 <__NVIC_GetPriorityGrouping+0x18>)
 8001452:	68db      	ldr	r3, [r3, #12]
 8001454:	0a1b      	lsrs	r3, r3, #8
 8001456:	f003 0307 	and.w	r3, r3, #7
}
 800145a:	4618      	mov	r0, r3
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr
 8001464:	e000ed00 	.word	0xe000ed00

08001468 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001468:	b480      	push	{r7}
 800146a:	b083      	sub	sp, #12
 800146c:	af00      	add	r7, sp, #0
 800146e:	4603      	mov	r3, r0
 8001470:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001472:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001476:	2b00      	cmp	r3, #0
 8001478:	db0b      	blt.n	8001492 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800147a:	79fb      	ldrb	r3, [r7, #7]
 800147c:	f003 021f 	and.w	r2, r3, #31
 8001480:	4907      	ldr	r1, [pc, #28]	@ (80014a0 <__NVIC_EnableIRQ+0x38>)
 8001482:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	2001      	movs	r0, #1
 800148a:	fa00 f202 	lsl.w	r2, r0, r2
 800148e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001492:	bf00      	nop
 8001494:	370c      	adds	r7, #12
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr
 800149e:	bf00      	nop
 80014a0:	e000e100 	.word	0xe000e100

080014a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	6039      	str	r1, [r7, #0]
 80014ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	db0a      	blt.n	80014ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	b2da      	uxtb	r2, r3
 80014bc:	490c      	ldr	r1, [pc, #48]	@ (80014f0 <__NVIC_SetPriority+0x4c>)
 80014be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014c2:	0112      	lsls	r2, r2, #4
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	440b      	add	r3, r1
 80014c8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014cc:	e00a      	b.n	80014e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	b2da      	uxtb	r2, r3
 80014d2:	4908      	ldr	r1, [pc, #32]	@ (80014f4 <__NVIC_SetPriority+0x50>)
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f003 030f 	and.w	r3, r3, #15
 80014da:	3b04      	subs	r3, #4
 80014dc:	0112      	lsls	r2, r2, #4
 80014de:	b2d2      	uxtb	r2, r2
 80014e0:	440b      	add	r3, r1
 80014e2:	761a      	strb	r2, [r3, #24]
}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	e000e100 	.word	0xe000e100
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b089      	sub	sp, #36	@ 0x24
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f003 0307 	and.w	r3, r3, #7
 800150a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800150c:	69fb      	ldr	r3, [r7, #28]
 800150e:	f1c3 0307 	rsb	r3, r3, #7
 8001512:	2b04      	cmp	r3, #4
 8001514:	bf28      	it	cs
 8001516:	2304      	movcs	r3, #4
 8001518:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	3304      	adds	r3, #4
 800151e:	2b06      	cmp	r3, #6
 8001520:	d902      	bls.n	8001528 <NVIC_EncodePriority+0x30>
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3b03      	subs	r3, #3
 8001526:	e000      	b.n	800152a <NVIC_EncodePriority+0x32>
 8001528:	2300      	movs	r3, #0
 800152a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800152c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	fa02 f303 	lsl.w	r3, r2, r3
 8001536:	43da      	mvns	r2, r3
 8001538:	68bb      	ldr	r3, [r7, #8]
 800153a:	401a      	ands	r2, r3
 800153c:	697b      	ldr	r3, [r7, #20]
 800153e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001540:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	fa01 f303 	lsl.w	r3, r1, r3
 800154a:	43d9      	mvns	r1, r3
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001550:	4313      	orrs	r3, r2
         );
}
 8001552:	4618      	mov	r0, r3
 8001554:	3724      	adds	r7, #36	@ 0x24
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
	...

08001560 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	3b01      	subs	r3, #1
 800156c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001570:	d301      	bcc.n	8001576 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001572:	2301      	movs	r3, #1
 8001574:	e00f      	b.n	8001596 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001576:	4a0a      	ldr	r2, [pc, #40]	@ (80015a0 <SysTick_Config+0x40>)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	3b01      	subs	r3, #1
 800157c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800157e:	210f      	movs	r1, #15
 8001580:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001584:	f7ff ff8e 	bl	80014a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001588:	4b05      	ldr	r3, [pc, #20]	@ (80015a0 <SysTick_Config+0x40>)
 800158a:	2200      	movs	r2, #0
 800158c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800158e:	4b04      	ldr	r3, [pc, #16]	@ (80015a0 <SysTick_Config+0x40>)
 8001590:	2207      	movs	r2, #7
 8001592:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001594:	2300      	movs	r3, #0
}
 8001596:	4618      	mov	r0, r3
 8001598:	3708      	adds	r7, #8
 800159a:	46bd      	mov	sp, r7
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	e000e010 	.word	0xe000e010

080015a4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b082      	sub	sp, #8
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80015ac:	6878      	ldr	r0, [r7, #4]
 80015ae:	f7ff ff29 	bl	8001404 <__NVIC_SetPriorityGrouping>
}
 80015b2:	bf00      	nop
 80015b4:	3708      	adds	r7, #8
 80015b6:	46bd      	mov	sp, r7
 80015b8:	bd80      	pop	{r7, pc}

080015ba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015ba:	b580      	push	{r7, lr}
 80015bc:	b086      	sub	sp, #24
 80015be:	af00      	add	r7, sp, #0
 80015c0:	4603      	mov	r3, r0
 80015c2:	60b9      	str	r1, [r7, #8]
 80015c4:	607a      	str	r2, [r7, #4]
 80015c6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80015c8:	2300      	movs	r3, #0
 80015ca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80015cc:	f7ff ff3e 	bl	800144c <__NVIC_GetPriorityGrouping>
 80015d0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80015d2:	687a      	ldr	r2, [r7, #4]
 80015d4:	68b9      	ldr	r1, [r7, #8]
 80015d6:	6978      	ldr	r0, [r7, #20]
 80015d8:	f7ff ff8e 	bl	80014f8 <NVIC_EncodePriority>
 80015dc:	4602      	mov	r2, r0
 80015de:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015e2:	4611      	mov	r1, r2
 80015e4:	4618      	mov	r0, r3
 80015e6:	f7ff ff5d 	bl	80014a4 <__NVIC_SetPriority>
}
 80015ea:	bf00      	nop
 80015ec:	3718      	adds	r7, #24
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	b082      	sub	sp, #8
 80015f6:	af00      	add	r7, sp, #0
 80015f8:	4603      	mov	r3, r0
 80015fa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001600:	4618      	mov	r0, r3
 8001602:	f7ff ff31 	bl	8001468 <__NVIC_EnableIRQ>
}
 8001606:	bf00      	nop
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}

0800160e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160e:	b580      	push	{r7, lr}
 8001610:	b082      	sub	sp, #8
 8001612:	af00      	add	r7, sp, #0
 8001614:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001616:	6878      	ldr	r0, [r7, #4]
 8001618:	f7ff ffa2 	bl	8001560 <SysTick_Config>
 800161c:	4603      	mov	r3, r0
}
 800161e:	4618      	mov	r0, r3
 8001620:	3708      	adds	r7, #8
 8001622:	46bd      	mov	sp, r7
 8001624:	bd80      	pop	{r7, pc}

08001626 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001626:	b580      	push	{r7, lr}
 8001628:	b084      	sub	sp, #16
 800162a:	af00      	add	r7, sp, #0
 800162c:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d101      	bne.n	800163c <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001638:	2301      	movs	r3, #1
 800163a:	e037      	b.n	80016ac <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	2202      	movs	r2, #2
 8001640:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	681b      	ldr	r3, [r3, #0]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8001652:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8001656:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8001660:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800166c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	695b      	ldr	r3, [r3, #20]
 8001672:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001678:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	69db      	ldr	r3, [r3, #28]
 800167e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8001680:	68fa      	ldr	r2, [r7, #12]
 8001682:	4313      	orrs	r3, r2
 8001684:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	68fa      	ldr	r2, [r7, #12]
 800168c:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 800168e:	6878      	ldr	r0, [r7, #4]
 8001690:	f000 f9bc 	bl	8001a0c <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	2200      	movs	r2, #0
 8001698:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	2201      	movs	r2, #1
 800169e:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2200      	movs	r2, #0
 80016a6:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80016aa:	2300      	movs	r3, #0
}
 80016ac:	4618      	mov	r0, r3
 80016ae:	3710      	adds	r7, #16
 80016b0:	46bd      	mov	sp, r7
 80016b2:	bd80      	pop	{r7, pc}

080016b4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b086      	sub	sp, #24
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	60f8      	str	r0, [r7, #12]
 80016bc:	60b9      	str	r1, [r7, #8]
 80016be:	607a      	str	r2, [r7, #4]
 80016c0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80016c2:	2300      	movs	r3, #0
 80016c4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d101      	bne.n	80016d4 <HAL_DMA_Start_IT+0x20>
 80016d0:	2302      	movs	r3, #2
 80016d2:	e04a      	b.n	800176a <HAL_DMA_Start_IT+0xb6>
 80016d4:	68fb      	ldr	r3, [r7, #12]
 80016d6:	2201      	movs	r2, #1
 80016d8:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d13a      	bne.n	800175c <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	2202      	movs	r2, #2
 80016ea:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2200      	movs	r2, #0
 80016f2:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	681a      	ldr	r2, [r3, #0]
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f022 0201 	bic.w	r2, r2, #1
 8001702:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	68b9      	ldr	r1, [r7, #8]
 800170a:	68f8      	ldr	r0, [r7, #12]
 800170c:	f000 f950 	bl	80019b0 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001714:	2b00      	cmp	r3, #0
 8001716:	d008      	beq.n	800172a <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f042 020e 	orr.w	r2, r2, #14
 8001726:	601a      	str	r2, [r3, #0]
 8001728:	e00f      	b.n	800174a <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	681a      	ldr	r2, [r3, #0]
 8001730:	68fb      	ldr	r3, [r7, #12]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f042 020a 	orr.w	r2, r2, #10
 8001738:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	681a      	ldr	r2, [r3, #0]
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f022 0204 	bic.w	r2, r2, #4
 8001748:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 800174a:	68fb      	ldr	r3, [r7, #12]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	681a      	ldr	r2, [r3, #0]
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f042 0201 	orr.w	r2, r2, #1
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	e005      	b.n	8001768 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	2200      	movs	r2, #0
 8001760:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8001764:	2302      	movs	r3, #2
 8001766:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8001768:	7dfb      	ldrb	r3, [r7, #23]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3718      	adds	r7, #24
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <HAL_DMA_Abort>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
  /* Check the DMA handle allocation */
  if(NULL == hdma)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	2b00      	cmp	r3, #0
 800177e:	d101      	bne.n	8001784 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8001780:	2301      	movs	r3, #1
 8001782:	e02e      	b.n	80017e2 <HAL_DMA_Abort+0x70>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800178a:	2b02      	cmp	r3, #2
 800178c:	d008      	beq.n	80017a0 <HAL_DMA_Abort+0x2e>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2204      	movs	r2, #4
 8001792:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	f883 2020 	strb.w	r2, [r3, #32]

    return HAL_ERROR;
 800179c:	2301      	movs	r3, #1
 800179e:	e020      	b.n	80017e2 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	681a      	ldr	r2, [r3, #0]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	681b      	ldr	r3, [r3, #0]
 80017aa:	f022 020e 	bic.w	r2, r2, #14
 80017ae:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	681a      	ldr	r2, [r3, #0]
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f022 0201 	bic.w	r2, r2, #1
 80017be:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80017c8:	2101      	movs	r1, #1
 80017ca:	fa01 f202 	lsl.w	r2, r1, r2
 80017ce:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	2201      	movs	r2, #1
 80017d4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 80017e0:	2300      	movs	r3, #0
}
 80017e2:	4618      	mov	r0, r3
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	b084      	sub	sp, #16
 80017f2:	af00      	add	r7, sp, #0
 80017f4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80017f6:	2300      	movs	r3, #0
 80017f8:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001800:	2b02      	cmp	r3, #2
 8001802:	d005      	beq.n	8001810 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2204      	movs	r2, #4
 8001808:	639a      	str	r2, [r3, #56]	@ 0x38

    status = HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	73fb      	strb	r3, [r7, #15]
 800180e:	e027      	b.n	8001860 <HAL_DMA_Abort_IT+0x72>
  }
  else
  {
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	681a      	ldr	r2, [r3, #0]
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	f022 020e 	bic.w	r2, r2, #14
 800181e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	681a      	ldr	r2, [r3, #0]
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0201 	bic.w	r2, r2, #1
 800182e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001838:	2101      	movs	r1, #1
 800183a:	fa01 f202 	lsl.w	r2, r1, r2
 800183e:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2201      	movs	r2, #1
 8001844:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	2200      	movs	r2, #0
 800184c:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001854:	2b00      	cmp	r3, #0
 8001856:	d003      	beq.n	8001860 <HAL_DMA_Abort_IT+0x72>
    {
      hdma->XferAbortCallback(hdma);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800185c:	6878      	ldr	r0, [r7, #4]
 800185e:	4798      	blx	r3
    }
  }
  return status;
 8001860:	7bfb      	ldrb	r3, [r7, #15]
}
 8001862:	4618      	mov	r0, r3
 8001864:	3710      	adds	r7, #16
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}

0800186a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800186a:	b580      	push	{r7, lr}
 800186c:	b084      	sub	sp, #16
 800186e:	af00      	add	r7, sp, #0
 8001870:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001886:	2204      	movs	r2, #4
 8001888:	409a      	lsls	r2, r3
 800188a:	68fb      	ldr	r3, [r7, #12]
 800188c:	4013      	ands	r3, r2
 800188e:	2b00      	cmp	r3, #0
 8001890:	d024      	beq.n	80018dc <HAL_DMA_IRQHandler+0x72>
 8001892:	68bb      	ldr	r3, [r7, #8]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d01f      	beq.n	80018dc <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f003 0320 	and.w	r3, r3, #32
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d107      	bne.n	80018ba <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	681a      	ldr	r2, [r3, #0]
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	f022 0204 	bic.w	r2, r2, #4
 80018b8:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80018c2:	2104      	movs	r1, #4
 80018c4:	fa01 f202 	lsl.w	r2, r1, r2
 80018c8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d06a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80018d6:	6878      	ldr	r0, [r7, #4]
 80018d8:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80018da:	e065      	b.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018e0:	2202      	movs	r2, #2
 80018e2:	409a      	lsls	r2, r3
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	4013      	ands	r3, r2
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d02c      	beq.n	8001946 <HAL_DMA_IRQHandler+0xdc>
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	f003 0302 	and.w	r3, r3, #2
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d027      	beq.n	8001946 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0320 	and.w	r3, r3, #32
 8001900:	2b00      	cmp	r3, #0
 8001902:	d10b      	bne.n	800191c <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	681a      	ldr	r2, [r3, #0]
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	f022 020a 	bic.w	r2, r2, #10
 8001912:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001924:	2102      	movs	r1, #2
 8001926:	fa01 f202 	lsl.w	r2, r1, r2
 800192a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2200      	movs	r2, #0
 8001930:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001938:	2b00      	cmp	r3, #0
 800193a:	d035      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8001944:	e030      	b.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800194a:	2208      	movs	r2, #8
 800194c:	409a      	lsls	r2, r3
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	4013      	ands	r3, r2
 8001952:	2b00      	cmp	r3, #0
 8001954:	d028      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
 8001956:	68bb      	ldr	r3, [r7, #8]
 8001958:	f003 0308 	and.w	r3, r3, #8
 800195c:	2b00      	cmp	r3, #0
 800195e:	d023      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	681a      	ldr	r2, [r3, #0]
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f022 020e 	bic.w	r2, r2, #14
 800196e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001978:	2101      	movs	r1, #1
 800197a:	fa01 f202 	lsl.w	r2, r1, r2
 800197e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	2201      	movs	r2, #1
 8001984:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	2201      	movs	r2, #1
 800198a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	2200      	movs	r2, #0
 8001992:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199a:	2b00      	cmp	r3, #0
 800199c:	d004      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	4798      	blx	r3
    }
  }
}
 80019a6:	e7ff      	b.n	80019a8 <HAL_DMA_IRQHandler+0x13e>
 80019a8:	bf00      	nop
 80019aa:	3710      	adds	r7, #16
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80019c6:	2101      	movs	r1, #1
 80019c8:	fa01 f202 	lsl.w	r2, r1, r2
 80019cc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	685b      	ldr	r3, [r3, #4]
 80019da:	2b10      	cmp	r3, #16
 80019dc:	d108      	bne.n	80019f0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	687a      	ldr	r2, [r7, #4]
 80019e4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	68ba      	ldr	r2, [r7, #8]
 80019ec:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80019ee:	e007      	b.n	8001a00 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	68ba      	ldr	r2, [r7, #8]
 80019f6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	687a      	ldr	r2, [r7, #4]
 80019fe:	60da      	str	r2, [r3, #12]
}
 8001a00:	bf00      	nop
 8001a02:	3714      	adds	r7, #20
 8001a04:	46bd      	mov	sp, r7
 8001a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0a:	4770      	bx	lr

08001a0c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4b14      	ldr	r3, [pc, #80]	@ (8001a6c <DMA_CalcBaseAndBitshift+0x60>)
 8001a1c:	429a      	cmp	r2, r3
 8001a1e:	d80f      	bhi.n	8001a40 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	461a      	mov	r2, r3
 8001a26:	4b12      	ldr	r3, [pc, #72]	@ (8001a70 <DMA_CalcBaseAndBitshift+0x64>)
 8001a28:	4413      	add	r3, r2
 8001a2a:	4a12      	ldr	r2, [pc, #72]	@ (8001a74 <DMA_CalcBaseAndBitshift+0x68>)
 8001a2c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a30:	091b      	lsrs	r3, r3, #4
 8001a32:	009a      	lsls	r2, r3, #2
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	4a0f      	ldr	r2, [pc, #60]	@ (8001a78 <DMA_CalcBaseAndBitshift+0x6c>)
 8001a3c:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8001a3e:	e00e      	b.n	8001a5e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	461a      	mov	r2, r3
 8001a46:	4b0d      	ldr	r3, [pc, #52]	@ (8001a7c <DMA_CalcBaseAndBitshift+0x70>)
 8001a48:	4413      	add	r3, r2
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	@ (8001a74 <DMA_CalcBaseAndBitshift+0x68>)
 8001a4c:	fba2 2303 	umull	r2, r3, r2, r3
 8001a50:	091b      	lsrs	r3, r3, #4
 8001a52:	009a      	lsls	r2, r3, #2
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a09      	ldr	r2, [pc, #36]	@ (8001a80 <DMA_CalcBaseAndBitshift+0x74>)
 8001a5c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40020407 	.word	0x40020407
 8001a70:	bffdfff8 	.word	0xbffdfff8
 8001a74:	cccccccd 	.word	0xcccccccd
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	bffdfbf8 	.word	0xbffdfbf8
 8001a80:	40020400 	.word	0x40020400

08001a84 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b087      	sub	sp, #28
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	6078      	str	r0, [r7, #4]
 8001a8c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001a92:	e160      	b.n	8001d56 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681a      	ldr	r2, [r3, #0]
 8001a98:	2101      	movs	r1, #1
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	f000 8152 	beq.w	8001d50 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	685b      	ldr	r3, [r3, #4]
 8001ab0:	f003 0303 	and.w	r3, r3, #3
 8001ab4:	2b01      	cmp	r3, #1
 8001ab6:	d005      	beq.n	8001ac4 <HAL_GPIO_Init+0x40>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	685b      	ldr	r3, [r3, #4]
 8001abc:	f003 0303 	and.w	r3, r3, #3
 8001ac0:	2b02      	cmp	r3, #2
 8001ac2:	d130      	bne.n	8001b26 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	005b      	lsls	r3, r3, #1
 8001ace:	2203      	movs	r2, #3
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	43db      	mvns	r3, r3
 8001ad6:	693a      	ldr	r2, [r7, #16]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	68da      	ldr	r2, [r3, #12]
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	693a      	ldr	r2, [r7, #16]
 8001af2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001afa:	2201      	movs	r2, #1
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	fa02 f303 	lsl.w	r3, r2, r3
 8001b02:	43db      	mvns	r3, r3
 8001b04:	693a      	ldr	r2, [r7, #16]
 8001b06:	4013      	ands	r3, r2
 8001b08:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	091b      	lsrs	r3, r3, #4
 8001b10:	f003 0201 	and.w	r2, r3, #1
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	693a      	ldr	r2, [r7, #16]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f003 0303 	and.w	r3, r3, #3
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d017      	beq.n	8001b62 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	68db      	ldr	r3, [r3, #12]
 8001b36:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8001b38:	697b      	ldr	r3, [r7, #20]
 8001b3a:	005b      	lsls	r3, r3, #1
 8001b3c:	2203      	movs	r2, #3
 8001b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b42:	43db      	mvns	r3, r3
 8001b44:	693a      	ldr	r2, [r7, #16]
 8001b46:	4013      	ands	r3, r2
 8001b48:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001b4a:	683b      	ldr	r3, [r7, #0]
 8001b4c:	689a      	ldr	r2, [r3, #8]
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	fa02 f303 	lsl.w	r3, r2, r3
 8001b56:	693a      	ldr	r2, [r7, #16]
 8001b58:	4313      	orrs	r3, r2
 8001b5a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	685b      	ldr	r3, [r3, #4]
 8001b66:	f003 0303 	and.w	r3, r3, #3
 8001b6a:	2b02      	cmp	r3, #2
 8001b6c:	d123      	bne.n	8001bb6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	08da      	lsrs	r2, r3, #3
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	3208      	adds	r2, #8
 8001b76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b7a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001b7c:	697b      	ldr	r3, [r7, #20]
 8001b7e:	f003 0307 	and.w	r3, r3, #7
 8001b82:	009b      	lsls	r3, r3, #2
 8001b84:	220f      	movs	r2, #15
 8001b86:	fa02 f303 	lsl.w	r3, r2, r3
 8001b8a:	43db      	mvns	r3, r3
 8001b8c:	693a      	ldr	r2, [r7, #16]
 8001b8e:	4013      	ands	r3, r2
 8001b90:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	691a      	ldr	r2, [r3, #16]
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	f003 0307 	and.w	r3, r3, #7
 8001b9c:	009b      	lsls	r3, r3, #2
 8001b9e:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	08da      	lsrs	r2, r3, #3
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	3208      	adds	r2, #8
 8001bb0:	6939      	ldr	r1, [r7, #16]
 8001bb2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8001bbc:	697b      	ldr	r3, [r7, #20]
 8001bbe:	005b      	lsls	r3, r3, #1
 8001bc0:	2203      	movs	r2, #3
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43db      	mvns	r3, r3
 8001bc8:	693a      	ldr	r2, [r7, #16]
 8001bca:	4013      	ands	r3, r2
 8001bcc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
 8001bd2:	f003 0203 	and.w	r2, r3, #3
 8001bd6:	697b      	ldr	r3, [r7, #20]
 8001bd8:	005b      	lsls	r3, r3, #1
 8001bda:	fa02 f303 	lsl.w	r3, r2, r3
 8001bde:	693a      	ldr	r2, [r7, #16]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	693a      	ldr	r2, [r7, #16]
 8001be8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	685b      	ldr	r3, [r3, #4]
 8001bee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	f000 80ac 	beq.w	8001d50 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bf8:	4b5e      	ldr	r3, [pc, #376]	@ (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001bfa:	699b      	ldr	r3, [r3, #24]
 8001bfc:	4a5d      	ldr	r2, [pc, #372]	@ (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001bfe:	f043 0301 	orr.w	r3, r3, #1
 8001c02:	6193      	str	r3, [r2, #24]
 8001c04:	4b5b      	ldr	r3, [pc, #364]	@ (8001d74 <HAL_GPIO_Init+0x2f0>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	f003 0301 	and.w	r3, r3, #1
 8001c0c:	60bb      	str	r3, [r7, #8]
 8001c0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001c10:	4a59      	ldr	r2, [pc, #356]	@ (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c12:	697b      	ldr	r3, [r7, #20]
 8001c14:	089b      	lsrs	r3, r3, #2
 8001c16:	3302      	adds	r3, #2
 8001c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	f003 0303 	and.w	r3, r3, #3
 8001c24:	009b      	lsls	r3, r3, #2
 8001c26:	220f      	movs	r2, #15
 8001c28:	fa02 f303 	lsl.w	r3, r2, r3
 8001c2c:	43db      	mvns	r3, r3
 8001c2e:	693a      	ldr	r2, [r7, #16]
 8001c30:	4013      	ands	r3, r2
 8001c32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001c3a:	d025      	beq.n	8001c88 <HAL_GPIO_Init+0x204>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4a4f      	ldr	r2, [pc, #316]	@ (8001d7c <HAL_GPIO_Init+0x2f8>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d01f      	beq.n	8001c84 <HAL_GPIO_Init+0x200>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	4a4e      	ldr	r2, [pc, #312]	@ (8001d80 <HAL_GPIO_Init+0x2fc>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d019      	beq.n	8001c80 <HAL_GPIO_Init+0x1fc>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	4a4d      	ldr	r2, [pc, #308]	@ (8001d84 <HAL_GPIO_Init+0x300>)
 8001c50:	4293      	cmp	r3, r2
 8001c52:	d013      	beq.n	8001c7c <HAL_GPIO_Init+0x1f8>
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	4a4c      	ldr	r2, [pc, #304]	@ (8001d88 <HAL_GPIO_Init+0x304>)
 8001c58:	4293      	cmp	r3, r2
 8001c5a:	d00d      	beq.n	8001c78 <HAL_GPIO_Init+0x1f4>
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	4a4b      	ldr	r2, [pc, #300]	@ (8001d8c <HAL_GPIO_Init+0x308>)
 8001c60:	4293      	cmp	r3, r2
 8001c62:	d007      	beq.n	8001c74 <HAL_GPIO_Init+0x1f0>
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	4a4a      	ldr	r2, [pc, #296]	@ (8001d90 <HAL_GPIO_Init+0x30c>)
 8001c68:	4293      	cmp	r3, r2
 8001c6a:	d101      	bne.n	8001c70 <HAL_GPIO_Init+0x1ec>
 8001c6c:	2306      	movs	r3, #6
 8001c6e:	e00c      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c70:	2307      	movs	r3, #7
 8001c72:	e00a      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c74:	2305      	movs	r3, #5
 8001c76:	e008      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c78:	2304      	movs	r3, #4
 8001c7a:	e006      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	e004      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c80:	2302      	movs	r3, #2
 8001c82:	e002      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c84:	2301      	movs	r3, #1
 8001c86:	e000      	b.n	8001c8a <HAL_GPIO_Init+0x206>
 8001c88:	2300      	movs	r3, #0
 8001c8a:	697a      	ldr	r2, [r7, #20]
 8001c8c:	f002 0203 	and.w	r2, r2, #3
 8001c90:	0092      	lsls	r2, r2, #2
 8001c92:	4093      	lsls	r3, r2
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001c9a:	4937      	ldr	r1, [pc, #220]	@ (8001d78 <HAL_GPIO_Init+0x2f4>)
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	089b      	lsrs	r3, r3, #2
 8001ca0:	3302      	adds	r3, #2
 8001ca2:	693a      	ldr	r2, [r7, #16]
 8001ca4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001ca8:	4b3a      	ldr	r3, [pc, #232]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001caa:	689b      	ldr	r3, [r3, #8]
 8001cac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	693a      	ldr	r2, [r7, #16]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001cc4:	693a      	ldr	r2, [r7, #16]
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001ccc:	4a31      	ldr	r2, [pc, #196]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001cd2:	4b30      	ldr	r3, [pc, #192]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001cd4:	68db      	ldr	r3, [r3, #12]
 8001cd6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	4013      	ands	r3, r2
 8001ce0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001ce2:	683b      	ldr	r3, [r7, #0]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d003      	beq.n	8001cf6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8001cee:	693a      	ldr	r2, [r7, #16]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8001cf6:	4a27      	ldr	r2, [pc, #156]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cfc:	4b25      	ldr	r3, [pc, #148]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	693a      	ldr	r2, [r7, #16]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d003      	beq.n	8001d20 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8001d18:	693a      	ldr	r2, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001d20:	4a1c      	ldr	r2, [pc, #112]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d26:	4b1b      	ldr	r3, [pc, #108]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	43db      	mvns	r3, r3
 8001d30:	693a      	ldr	r2, [r7, #16]
 8001d32:	4013      	ands	r3, r2
 8001d34:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001d36:	683b      	ldr	r3, [r7, #0]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001d42:	693a      	ldr	r2, [r7, #16]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4313      	orrs	r3, r2
 8001d48:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001d4a:	4a12      	ldr	r2, [pc, #72]	@ (8001d94 <HAL_GPIO_Init+0x310>)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001d50:	697b      	ldr	r3, [r7, #20]
 8001d52:	3301      	adds	r3, #1
 8001d54:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	f47f ae97 	bne.w	8001a94 <HAL_GPIO_Init+0x10>
  }
}
 8001d66:	bf00      	nop
 8001d68:	bf00      	nop
 8001d6a:	371c      	adds	r7, #28
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr
 8001d74:	40021000 	.word	0x40021000
 8001d78:	40010000 	.word	0x40010000
 8001d7c:	48000400 	.word	0x48000400
 8001d80:	48000800 	.word	0x48000800
 8001d84:	48000c00 	.word	0x48000c00
 8001d88:	48001000 	.word	0x48001000
 8001d8c:	48001400 	.word	0x48001400
 8001d90:	48001800 	.word	0x48001800
 8001d94:	40010400 	.word	0x40010400

08001d98 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	460b      	mov	r3, r1
 8001da2:	807b      	strh	r3, [r7, #2]
 8001da4:	4613      	mov	r3, r2
 8001da6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da8:	787b      	ldrb	r3, [r7, #1]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d003      	beq.n	8001db6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001dae:	887a      	ldrh	r2, [r7, #2]
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001db4:	e002      	b.n	8001dbc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001db6:	887a      	ldrh	r2, [r7, #2]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001dbc:	bf00      	nop
 8001dbe:	370c      	adds	r7, #12
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc6:	4770      	bx	lr

08001dc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dd4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001dd8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dde:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001de8:	2301      	movs	r3, #1
 8001dea:	f001 b83a 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001df2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f003 0301 	and.w	r3, r3, #1
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	f000 816f 	beq.w	80020e2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001e04:	4bb5      	ldr	r3, [pc, #724]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	f003 030c 	and.w	r3, r3, #12
 8001e0c:	2b04      	cmp	r3, #4
 8001e0e:	d00c      	beq.n	8001e2a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001e10:	4bb2      	ldr	r3, [pc, #712]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 030c 	and.w	r3, r3, #12
 8001e18:	2b08      	cmp	r3, #8
 8001e1a:	d15c      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x10e>
 8001e1c:	4baf      	ldr	r3, [pc, #700]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8001e24:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e28:	d155      	bne.n	8001ed6 <HAL_RCC_OscConfig+0x10e>
 8001e2a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e2e:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e32:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001e3e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	095b      	lsrs	r3, r3, #5
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	f043 0301 	orr.w	r3, r3, #1
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	2b01      	cmp	r3, #1
 8001e54:	d102      	bne.n	8001e5c <HAL_RCC_OscConfig+0x94>
 8001e56:	4ba1      	ldr	r3, [pc, #644]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	e015      	b.n	8001e88 <HAL_RCC_OscConfig+0xc0>
 8001e5c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e60:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8001e68:	fa93 f3a3 	rbit	r3, r3
 8001e6c:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001e70:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001e74:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001e78:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001e84:	4b95      	ldr	r3, [pc, #596]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001e86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001e88:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001e8c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001e90:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001e94:	fa92 f2a2 	rbit	r2, r2
 8001e98:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8001e9c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001ea0:	fab2 f282 	clz	r2, r2
 8001ea4:	b2d2      	uxtb	r2, r2
 8001ea6:	f042 0220 	orr.w	r2, r2, #32
 8001eaa:	b2d2      	uxtb	r2, r2
 8001eac:	f002 021f 	and.w	r2, r2, #31
 8001eb0:	2101      	movs	r1, #1
 8001eb2:	fa01 f202 	lsl.w	r2, r1, r2
 8001eb6:	4013      	ands	r3, r2
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	f000 8111 	beq.w	80020e0 <HAL_RCC_OscConfig+0x318>
 8001ebe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ec2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	685b      	ldr	r3, [r3, #4]
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f040 8108 	bne.w	80020e0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	f000 bfc6 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001ed6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ee6:	d106      	bne.n	8001ef6 <HAL_RCC_OscConfig+0x12e>
 8001ee8:	4b7c      	ldr	r3, [pc, #496]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a7b      	ldr	r2, [pc, #492]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001eee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001ef2:	6013      	str	r3, [r2, #0]
 8001ef4:	e036      	b.n	8001f64 <HAL_RCC_OscConfig+0x19c>
 8001ef6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001efa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	685b      	ldr	r3, [r3, #4]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d10c      	bne.n	8001f20 <HAL_RCC_OscConfig+0x158>
 8001f06:	4b75      	ldr	r3, [pc, #468]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a74      	ldr	r2, [pc, #464]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f0c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f10:	6013      	str	r3, [r2, #0]
 8001f12:	4b72      	ldr	r3, [pc, #456]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	4a71      	ldr	r2, [pc, #452]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f18:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f1c:	6013      	str	r3, [r2, #0]
 8001f1e:	e021      	b.n	8001f64 <HAL_RCC_OscConfig+0x19c>
 8001f20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f24:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f30:	d10c      	bne.n	8001f4c <HAL_RCC_OscConfig+0x184>
 8001f32:	4b6a      	ldr	r3, [pc, #424]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a69      	ldr	r2, [pc, #420]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f38:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f3c:	6013      	str	r3, [r2, #0]
 8001f3e:	4b67      	ldr	r3, [pc, #412]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	4a66      	ldr	r2, [pc, #408]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f44:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f48:	6013      	str	r3, [r2, #0]
 8001f4a:	e00b      	b.n	8001f64 <HAL_RCC_OscConfig+0x19c>
 8001f4c:	4b63      	ldr	r3, [pc, #396]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a62      	ldr	r2, [pc, #392]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f52:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f56:	6013      	str	r3, [r2, #0]
 8001f58:	4b60      	ldr	r3, [pc, #384]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a5f      	ldr	r2, [pc, #380]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001f5e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f62:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f68:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d059      	beq.n	8002028 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f74:	f7ff fa3a 	bl	80013ec <HAL_GetTick>
 8001f78:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f7c:	e00a      	b.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f7e:	f7ff fa35 	bl	80013ec <HAL_GetTick>
 8001f82:	4602      	mov	r2, r0
 8001f84:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	2b64      	cmp	r3, #100	@ 0x64
 8001f8c:	d902      	bls.n	8001f94 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8001f8e:	2303      	movs	r3, #3
 8001f90:	f000 bf67 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8001f94:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001f98:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001fa8:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fac:	fab3 f383 	clz	r3, r3
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	095b      	lsrs	r3, r3, #5
 8001fb4:	b2db      	uxtb	r3, r3
 8001fb6:	f043 0301 	orr.w	r3, r3, #1
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d102      	bne.n	8001fc6 <HAL_RCC_OscConfig+0x1fe>
 8001fc0:	4b46      	ldr	r3, [pc, #280]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	e015      	b.n	8001ff2 <HAL_RCC_OscConfig+0x22a>
 8001fc6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fca:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fce:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001fd2:	fa93 f3a3 	rbit	r3, r3
 8001fd6:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 8001fda:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001fde:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001fe2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8001fee:	4b3b      	ldr	r3, [pc, #236]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8001ff0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001ff6:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 8001ffa:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 8001ffe:	fa92 f2a2 	rbit	r2, r2
 8002002:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8002006:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800200a:	fab2 f282 	clz	r2, r2
 800200e:	b2d2      	uxtb	r2, r2
 8002010:	f042 0220 	orr.w	r2, r2, #32
 8002014:	b2d2      	uxtb	r2, r2
 8002016:	f002 021f 	and.w	r2, r2, #31
 800201a:	2101      	movs	r1, #1
 800201c:	fa01 f202 	lsl.w	r2, r1, r2
 8002020:	4013      	ands	r3, r2
 8002022:	2b00      	cmp	r3, #0
 8002024:	d0ab      	beq.n	8001f7e <HAL_RCC_OscConfig+0x1b6>
 8002026:	e05c      	b.n	80020e2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002028:	f7ff f9e0 	bl	80013ec <HAL_GetTick>
 800202c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002032:	f7ff f9db 	bl	80013ec <HAL_GetTick>
 8002036:	4602      	mov	r2, r0
 8002038:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	2b64      	cmp	r3, #100	@ 0x64
 8002040:	d902      	bls.n	8002048 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8002042:	2303      	movs	r3, #3
 8002044:	f000 bf0d 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002048:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800204c:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002050:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 8002054:	fa93 f3a3 	rbit	r3, r3
 8002058:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 800205c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002060:	fab3 f383 	clz	r3, r3
 8002064:	b2db      	uxtb	r3, r3
 8002066:	095b      	lsrs	r3, r3, #5
 8002068:	b2db      	uxtb	r3, r3
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	b2db      	uxtb	r3, r3
 8002070:	2b01      	cmp	r3, #1
 8002072:	d102      	bne.n	800207a <HAL_RCC_OscConfig+0x2b2>
 8002074:	4b19      	ldr	r3, [pc, #100]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	e015      	b.n	80020a6 <HAL_RCC_OscConfig+0x2de>
 800207a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800207e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002082:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8002086:	fa93 f3a3 	rbit	r3, r3
 800208a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800208e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002092:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8002096:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 80020a2:	4b0e      	ldr	r3, [pc, #56]	@ (80020dc <HAL_RCC_OscConfig+0x314>)
 80020a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020a6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80020aa:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 80020ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 80020b2:	fa92 f2a2 	rbit	r2, r2
 80020b6:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80020ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80020be:	fab2 f282 	clz	r2, r2
 80020c2:	b2d2      	uxtb	r2, r2
 80020c4:	f042 0220 	orr.w	r2, r2, #32
 80020c8:	b2d2      	uxtb	r2, r2
 80020ca:	f002 021f 	and.w	r2, r2, #31
 80020ce:	2101      	movs	r1, #1
 80020d0:	fa01 f202 	lsl.w	r2, r1, r2
 80020d4:	4013      	ands	r3, r2
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d1ab      	bne.n	8002032 <HAL_RCC_OscConfig+0x26a>
 80020da:	e002      	b.n	80020e2 <HAL_RCC_OscConfig+0x31a>
 80020dc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020e6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	f000 817f 	beq.w	80023f6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80020f8:	4ba7      	ldr	r3, [pc, #668]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	f003 030c 	and.w	r3, r3, #12
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00c      	beq.n	800211e <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8002104:	4ba4      	ldr	r3, [pc, #656]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f003 030c 	and.w	r3, r3, #12
 800210c:	2b08      	cmp	r3, #8
 800210e:	d173      	bne.n	80021f8 <HAL_RCC_OscConfig+0x430>
 8002110:	4ba1      	ldr	r3, [pc, #644]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8002118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800211c:	d16c      	bne.n	80021f8 <HAL_RCC_OscConfig+0x430>
 800211e:	2302      	movs	r3, #2
 8002120:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002124:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8002128:	fa93 f3a3 	rbit	r3, r3
 800212c:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8002130:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002134:	fab3 f383 	clz	r3, r3
 8002138:	b2db      	uxtb	r3, r3
 800213a:	095b      	lsrs	r3, r3, #5
 800213c:	b2db      	uxtb	r3, r3
 800213e:	f043 0301 	orr.w	r3, r3, #1
 8002142:	b2db      	uxtb	r3, r3
 8002144:	2b01      	cmp	r3, #1
 8002146:	d102      	bne.n	800214e <HAL_RCC_OscConfig+0x386>
 8002148:	4b93      	ldr	r3, [pc, #588]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	e013      	b.n	8002176 <HAL_RCC_OscConfig+0x3ae>
 800214e:	2302      	movs	r3, #2
 8002150:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8002160:	2302      	movs	r3, #2
 8002162:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 8002166:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800216a:	fa93 f3a3 	rbit	r3, r3
 800216e:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8002172:	4b89      	ldr	r3, [pc, #548]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002174:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002176:	2202      	movs	r2, #2
 8002178:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800217c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8002180:	fa92 f2a2 	rbit	r2, r2
 8002184:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8002188:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800218c:	fab2 f282 	clz	r2, r2
 8002190:	b2d2      	uxtb	r2, r2
 8002192:	f042 0220 	orr.w	r2, r2, #32
 8002196:	b2d2      	uxtb	r2, r2
 8002198:	f002 021f 	and.w	r2, r2, #31
 800219c:	2101      	movs	r1, #1
 800219e:	fa01 f202 	lsl.w	r2, r1, r2
 80021a2:	4013      	ands	r3, r2
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00a      	beq.n	80021be <HAL_RCC_OscConfig+0x3f6>
 80021a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ac:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	2b01      	cmp	r3, #1
 80021b6:	d002      	beq.n	80021be <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	f000 be52 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021be:	4b76      	ldr	r3, [pc, #472]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021ca:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	691b      	ldr	r3, [r3, #16]
 80021d2:	21f8      	movs	r1, #248	@ 0xf8
 80021d4:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80021dc:	fa91 f1a1 	rbit	r1, r1
 80021e0:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80021e4:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80021e8:	fab1 f181 	clz	r1, r1
 80021ec:	b2c9      	uxtb	r1, r1
 80021ee:	408b      	lsls	r3, r1
 80021f0:	4969      	ldr	r1, [pc, #420]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 80021f2:	4313      	orrs	r3, r2
 80021f4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021f6:	e0fe      	b.n	80023f6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021fc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	68db      	ldr	r3, [r3, #12]
 8002204:	2b00      	cmp	r3, #0
 8002206:	f000 8088 	beq.w	800231a <HAL_RCC_OscConfig+0x552>
 800220a:	2301      	movs	r3, #1
 800220c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002210:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 8002214:	fa93 f3a3 	rbit	r3, r3
 8002218:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 800221c:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002220:	fab3 f383 	clz	r3, r3
 8002224:	b2db      	uxtb	r3, r3
 8002226:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800222a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800222e:	009b      	lsls	r3, r3, #2
 8002230:	461a      	mov	r2, r3
 8002232:	2301      	movs	r3, #1
 8002234:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002236:	f7ff f8d9 	bl	80013ec <HAL_GetTick>
 800223a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800223e:	e00a      	b.n	8002256 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002240:	f7ff f8d4 	bl	80013ec <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	2b02      	cmp	r3, #2
 800224e:	d902      	bls.n	8002256 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8002250:	2303      	movs	r3, #3
 8002252:	f000 be06 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002256:	2302      	movs	r3, #2
 8002258:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225c:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8002260:	fa93 f3a3 	rbit	r3, r3
 8002264:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8002268:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800226c:	fab3 f383 	clz	r3, r3
 8002270:	b2db      	uxtb	r3, r3
 8002272:	095b      	lsrs	r3, r3, #5
 8002274:	b2db      	uxtb	r3, r3
 8002276:	f043 0301 	orr.w	r3, r3, #1
 800227a:	b2db      	uxtb	r3, r3
 800227c:	2b01      	cmp	r3, #1
 800227e:	d102      	bne.n	8002286 <HAL_RCC_OscConfig+0x4be>
 8002280:	4b45      	ldr	r3, [pc, #276]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	e013      	b.n	80022ae <HAL_RCC_OscConfig+0x4e6>
 8002286:	2302      	movs	r3, #2
 8002288:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8002290:	fa93 f3a3 	rbit	r3, r3
 8002294:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8002298:	2302      	movs	r3, #2
 800229a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800229e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80022a2:	fa93 f3a3 	rbit	r3, r3
 80022a6:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 80022aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 80022ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80022ae:	2202      	movs	r2, #2
 80022b0:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 80022b4:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80022b8:	fa92 f2a2 	rbit	r2, r2
 80022bc:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80022c0:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80022c4:	fab2 f282 	clz	r2, r2
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	f042 0220 	orr.w	r2, r2, #32
 80022ce:	b2d2      	uxtb	r2, r2
 80022d0:	f002 021f 	and.w	r2, r2, #31
 80022d4:	2101      	movs	r1, #1
 80022d6:	fa01 f202 	lsl.w	r2, r1, r2
 80022da:	4013      	ands	r3, r2
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d0af      	beq.n	8002240 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80022e0:	4b2d      	ldr	r3, [pc, #180]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80022e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022ec:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	691b      	ldr	r3, [r3, #16]
 80022f4:	21f8      	movs	r1, #248	@ 0xf8
 80022f6:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fa:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80022fe:	fa91 f1a1 	rbit	r1, r1
 8002302:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8002306:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800230a:	fab1 f181 	clz	r1, r1
 800230e:	b2c9      	uxtb	r1, r1
 8002310:	408b      	lsls	r3, r1
 8002312:	4921      	ldr	r1, [pc, #132]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002314:	4313      	orrs	r3, r2
 8002316:	600b      	str	r3, [r1, #0]
 8002318:	e06d      	b.n	80023f6 <HAL_RCC_OscConfig+0x62e>
 800231a:	2301      	movs	r3, #1
 800231c:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 800232c:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800233a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800233e:	009b      	lsls	r3, r3, #2
 8002340:	461a      	mov	r2, r3
 8002342:	2300      	movs	r3, #0
 8002344:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff f851 	bl	80013ec <HAL_GetTick>
 800234a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800234e:	e00a      	b.n	8002366 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002350:	f7ff f84c 	bl	80013ec <HAL_GetTick>
 8002354:	4602      	mov	r2, r0
 8002356:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800235a:	1ad3      	subs	r3, r2, r3
 800235c:	2b02      	cmp	r3, #2
 800235e:	d902      	bls.n	8002366 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8002360:	2303      	movs	r3, #3
 8002362:	f000 bd7e 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002366:	2302      	movs	r3, #2
 8002368:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800236c:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8002370:	fa93 f3a3 	rbit	r3, r3
 8002374:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8002378:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800237c:	fab3 f383 	clz	r3, r3
 8002380:	b2db      	uxtb	r3, r3
 8002382:	095b      	lsrs	r3, r3, #5
 8002384:	b2db      	uxtb	r3, r3
 8002386:	f043 0301 	orr.w	r3, r3, #1
 800238a:	b2db      	uxtb	r3, r3
 800238c:	2b01      	cmp	r3, #1
 800238e:	d105      	bne.n	800239c <HAL_RCC_OscConfig+0x5d4>
 8002390:	4b01      	ldr	r3, [pc, #4]	@ (8002398 <HAL_RCC_OscConfig+0x5d0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	e016      	b.n	80023c4 <HAL_RCC_OscConfig+0x5fc>
 8002396:	bf00      	nop
 8002398:	40021000 	.word	0x40021000
 800239c:	2302      	movs	r3, #2
 800239e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 80023ae:	2302      	movs	r3, #2
 80023b0:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 80023b4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80023b8:	fa93 f3a3 	rbit	r3, r3
 80023bc:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80023c0:	4bbf      	ldr	r3, [pc, #764]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 80023c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c4:	2202      	movs	r2, #2
 80023c6:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80023ca:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80023d6:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80023da:	fab2 f282 	clz	r2, r2
 80023de:	b2d2      	uxtb	r2, r2
 80023e0:	f042 0220 	orr.w	r2, r2, #32
 80023e4:	b2d2      	uxtb	r2, r2
 80023e6:	f002 021f 	and.w	r2, r2, #31
 80023ea:	2101      	movs	r1, #1
 80023ec:	fa01 f202 	lsl.w	r2, r1, r2
 80023f0:	4013      	ands	r3, r2
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d1ac      	bne.n	8002350 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b00      	cmp	r3, #0
 8002408:	f000 8113 	beq.w	8002632 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800240c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002410:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	695b      	ldr	r3, [r3, #20]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d07c      	beq.n	8002516 <HAL_RCC_OscConfig+0x74e>
 800241c:	2301      	movs	r3, #1
 800241e:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002422:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002426:	fa93 f3a3 	rbit	r3, r3
 800242a:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 800242e:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002432:	fab3 f383 	clz	r3, r3
 8002436:	b2db      	uxtb	r3, r3
 8002438:	461a      	mov	r2, r3
 800243a:	4ba2      	ldr	r3, [pc, #648]	@ (80026c4 <HAL_RCC_OscConfig+0x8fc>)
 800243c:	4413      	add	r3, r2
 800243e:	009b      	lsls	r3, r3, #2
 8002440:	461a      	mov	r2, r3
 8002442:	2301      	movs	r3, #1
 8002444:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002446:	f7fe ffd1 	bl	80013ec <HAL_GetTick>
 800244a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e00a      	b.n	8002466 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe ffcc 	bl	80013ec <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	2b02      	cmp	r3, #2
 800245e:	d902      	bls.n	8002466 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002460:	2303      	movs	r3, #3
 8002462:	f000 bcfe 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002466:	2302      	movs	r3, #2
 8002468:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8002470:	fa93 f2a3 	rbit	r2, r3
 8002474:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002478:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002482:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002486:	2202      	movs	r2, #2
 8002488:	601a      	str	r2, [r3, #0]
 800248a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800248e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	fa93 f2a3 	rbit	r2, r3
 8002498:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80024a0:	601a      	str	r2, [r3, #0]
 80024a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a6:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024aa:	2202      	movs	r2, #2
 80024ac:	601a      	str	r2, [r3, #0]
 80024ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024b2:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa93 f2a3 	rbit	r2, r3
 80024bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c0:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80024c4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024c6:	4b7e      	ldr	r3, [pc, #504]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 80024c8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80024ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ce:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024d2:	2102      	movs	r1, #2
 80024d4:	6019      	str	r1, [r3, #0]
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	fa93 f1a3 	rbit	r1, r3
 80024e4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024e8:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024ec:	6019      	str	r1, [r3, #0]
  return result;
 80024ee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f2:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	fab3 f383 	clz	r3, r3
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f003 031f 	and.w	r3, r3, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f303 	lsl.w	r3, r1, r3
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d09d      	beq.n	8002450 <HAL_RCC_OscConfig+0x688>
 8002514:	e08d      	b.n	8002632 <HAL_RCC_OscConfig+0x86a>
 8002516:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800251a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800251e:	2201      	movs	r2, #1
 8002520:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002522:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002526:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	fa93 f2a3 	rbit	r2, r3
 8002530:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002534:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002538:	601a      	str	r2, [r3, #0]
  return result;
 800253a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8002542:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002544:	fab3 f383 	clz	r3, r3
 8002548:	b2db      	uxtb	r3, r3
 800254a:	461a      	mov	r2, r3
 800254c:	4b5d      	ldr	r3, [pc, #372]	@ (80026c4 <HAL_RCC_OscConfig+0x8fc>)
 800254e:	4413      	add	r3, r2
 8002550:	009b      	lsls	r3, r3, #2
 8002552:	461a      	mov	r2, r3
 8002554:	2300      	movs	r3, #0
 8002556:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002558:	f7fe ff48 	bl	80013ec <HAL_GetTick>
 800255c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002560:	e00a      	b.n	8002578 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002562:	f7fe ff43 	bl	80013ec <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d902      	bls.n	8002578 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	f000 bc75 	b.w	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002578:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800257c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8002580:	2202      	movs	r2, #2
 8002582:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002584:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002588:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	fa93 f2a3 	rbit	r2, r3
 8002592:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002596:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800259a:	601a      	str	r2, [r3, #0]
 800259c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025a0:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025a4:	2202      	movs	r2, #2
 80025a6:	601a      	str	r2, [r3, #0]
 80025a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ac:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	fa93 f2a3 	rbit	r2, r3
 80025b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ba:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80025be:	601a      	str	r2, [r3, #0]
 80025c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025c4:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025c8:	2202      	movs	r2, #2
 80025ca:	601a      	str	r2, [r3, #0]
 80025cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025d0:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	fa93 f2a3 	rbit	r2, r3
 80025da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80025e2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025e4:	4b36      	ldr	r3, [pc, #216]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 80025e6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80025e8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025ec:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025f0:	2102      	movs	r1, #2
 80025f2:	6019      	str	r1, [r3, #0]
 80025f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80025f8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	fa93 f1a3 	rbit	r1, r3
 8002602:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002606:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 800260a:	6019      	str	r1, [r3, #0]
  return result;
 800260c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002610:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	fab3 f383 	clz	r3, r3
 800261a:	b2db      	uxtb	r3, r3
 800261c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f003 031f 	and.w	r3, r3, #31
 8002626:	2101      	movs	r1, #1
 8002628:	fa01 f303 	lsl.w	r3, r1, r3
 800262c:	4013      	ands	r3, r2
 800262e:	2b00      	cmp	r3, #0
 8002630:	d197      	bne.n	8002562 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002632:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002636:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0304 	and.w	r3, r3, #4
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 81a5 	beq.w	8002992 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002648:	2300      	movs	r3, #0
 800264a:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800264e:	4b1c      	ldr	r3, [pc, #112]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 8002650:	69db      	ldr	r3, [r3, #28]
 8002652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002656:	2b00      	cmp	r3, #0
 8002658:	d116      	bne.n	8002688 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800265a:	4b19      	ldr	r3, [pc, #100]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 800265c:	69db      	ldr	r3, [r3, #28]
 800265e:	4a18      	ldr	r2, [pc, #96]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 8002660:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002664:	61d3      	str	r3, [r2, #28]
 8002666:	4b16      	ldr	r3, [pc, #88]	@ (80026c0 <HAL_RCC_OscConfig+0x8f8>)
 8002668:	69db      	ldr	r3, [r3, #28]
 800266a:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 800266e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002672:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002676:	601a      	str	r2, [r3, #0]
 8002678:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800267c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8002680:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002682:	2301      	movs	r3, #1
 8002684:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002688:	4b0f      	ldr	r3, [pc, #60]	@ (80026c8 <HAL_RCC_OscConfig+0x900>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002690:	2b00      	cmp	r3, #0
 8002692:	d121      	bne.n	80026d8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002694:	4b0c      	ldr	r3, [pc, #48]	@ (80026c8 <HAL_RCC_OscConfig+0x900>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a0b      	ldr	r2, [pc, #44]	@ (80026c8 <HAL_RCC_OscConfig+0x900>)
 800269a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800269e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a0:	f7fe fea4 	bl	80013ec <HAL_GetTick>
 80026a4:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026a8:	e010      	b.n	80026cc <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026aa:	f7fe fe9f 	bl	80013ec <HAL_GetTick>
 80026ae:	4602      	mov	r2, r0
 80026b0:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b64      	cmp	r3, #100	@ 0x64
 80026b8:	d908      	bls.n	80026cc <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e3d1      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 80026be:	bf00      	nop
 80026c0:	40021000 	.word	0x40021000
 80026c4:	10908120 	.word	0x10908120
 80026c8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002904 <HAL_RCC_OscConfig+0xb3c>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d0e8      	beq.n	80026aa <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d106      	bne.n	80026f6 <HAL_RCC_OscConfig+0x92e>
 80026e8:	4b87      	ldr	r3, [pc, #540]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 80026ea:	6a1b      	ldr	r3, [r3, #32]
 80026ec:	4a86      	ldr	r2, [pc, #536]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 80026ee:	f043 0301 	orr.w	r3, r3, #1
 80026f2:	6213      	str	r3, [r2, #32]
 80026f4:	e035      	b.n	8002762 <HAL_RCC_OscConfig+0x99a>
 80026f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80026fa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d10c      	bne.n	8002720 <HAL_RCC_OscConfig+0x958>
 8002706:	4b80      	ldr	r3, [pc, #512]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002708:	6a1b      	ldr	r3, [r3, #32]
 800270a:	4a7f      	ldr	r2, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 800270c:	f023 0301 	bic.w	r3, r3, #1
 8002710:	6213      	str	r3, [r2, #32]
 8002712:	4b7d      	ldr	r3, [pc, #500]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002714:	6a1b      	ldr	r3, [r3, #32]
 8002716:	4a7c      	ldr	r2, [pc, #496]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002718:	f023 0304 	bic.w	r3, r3, #4
 800271c:	6213      	str	r3, [r2, #32]
 800271e:	e020      	b.n	8002762 <HAL_RCC_OscConfig+0x99a>
 8002720:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002724:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b05      	cmp	r3, #5
 800272e:	d10c      	bne.n	800274a <HAL_RCC_OscConfig+0x982>
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002732:	6a1b      	ldr	r3, [r3, #32]
 8002734:	4a74      	ldr	r2, [pc, #464]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002736:	f043 0304 	orr.w	r3, r3, #4
 800273a:	6213      	str	r3, [r2, #32]
 800273c:	4b72      	ldr	r3, [pc, #456]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 800273e:	6a1b      	ldr	r3, [r3, #32]
 8002740:	4a71      	ldr	r2, [pc, #452]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002742:	f043 0301 	orr.w	r3, r3, #1
 8002746:	6213      	str	r3, [r2, #32]
 8002748:	e00b      	b.n	8002762 <HAL_RCC_OscConfig+0x99a>
 800274a:	4b6f      	ldr	r3, [pc, #444]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 800274c:	6a1b      	ldr	r3, [r3, #32]
 800274e:	4a6e      	ldr	r2, [pc, #440]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002750:	f023 0301 	bic.w	r3, r3, #1
 8002754:	6213      	str	r3, [r2, #32]
 8002756:	4b6c      	ldr	r3, [pc, #432]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002758:	6a1b      	ldr	r3, [r3, #32]
 800275a:	4a6b      	ldr	r2, [pc, #428]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 800275c:	f023 0304 	bic.w	r3, r3, #4
 8002760:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002762:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002766:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	689b      	ldr	r3, [r3, #8]
 800276e:	2b00      	cmp	r3, #0
 8002770:	f000 8081 	beq.w	8002876 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002774:	f7fe fe3a 	bl	80013ec <HAL_GetTick>
 8002778:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800277c:	e00b      	b.n	8002796 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800277e:	f7fe fe35 	bl	80013ec <HAL_GetTick>
 8002782:	4602      	mov	r2, r0
 8002784:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002788:	1ad3      	subs	r3, r2, r3
 800278a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800278e:	4293      	cmp	r3, r2
 8002790:	d901      	bls.n	8002796 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8002792:	2303      	movs	r3, #3
 8002794:	e365      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002796:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800279a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800279e:	2202      	movs	r2, #2
 80027a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027a6:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	fa93 f2a3 	rbit	r2, r3
 80027b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027b4:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80027b8:	601a      	str	r2, [r3, #0]
 80027ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027be:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027c2:	2202      	movs	r2, #2
 80027c4:	601a      	str	r2, [r3, #0]
 80027c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027ca:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	fa93 f2a3 	rbit	r2, r3
 80027d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027d8:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027dc:	601a      	str	r2, [r3, #0]
  return result;
 80027de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80027e2:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80027e6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027e8:	fab3 f383 	clz	r3, r3
 80027ec:	b2db      	uxtb	r3, r3
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	b2db      	uxtb	r3, r3
 80027f2:	f043 0302 	orr.w	r3, r3, #2
 80027f6:	b2db      	uxtb	r3, r3
 80027f8:	2b02      	cmp	r3, #2
 80027fa:	d102      	bne.n	8002802 <HAL_RCC_OscConfig+0xa3a>
 80027fc:	4b42      	ldr	r3, [pc, #264]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	e013      	b.n	800282a <HAL_RCC_OscConfig+0xa62>
 8002802:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002806:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 800280a:	2202      	movs	r2, #2
 800280c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800280e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002812:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	fa93 f2a3 	rbit	r2, r3
 800281c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002820:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	4b38      	ldr	r3, [pc, #224]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002828:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800282a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800282e:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8002832:	2102      	movs	r1, #2
 8002834:	6011      	str	r1, [r2, #0]
 8002836:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800283a:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 800283e:	6812      	ldr	r2, [r2, #0]
 8002840:	fa92 f1a2 	rbit	r1, r2
 8002844:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002848:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 800284c:	6011      	str	r1, [r2, #0]
  return result;
 800284e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002852:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8002856:	6812      	ldr	r2, [r2, #0]
 8002858:	fab2 f282 	clz	r2, r2
 800285c:	b2d2      	uxtb	r2, r2
 800285e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002862:	b2d2      	uxtb	r2, r2
 8002864:	f002 021f 	and.w	r2, r2, #31
 8002868:	2101      	movs	r1, #1
 800286a:	fa01 f202 	lsl.w	r2, r1, r2
 800286e:	4013      	ands	r3, r2
 8002870:	2b00      	cmp	r3, #0
 8002872:	d084      	beq.n	800277e <HAL_RCC_OscConfig+0x9b6>
 8002874:	e083      	b.n	800297e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002876:	f7fe fdb9 	bl	80013ec <HAL_GetTick>
 800287a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800287e:	e00b      	b.n	8002898 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002880:	f7fe fdb4 	bl	80013ec <HAL_GetTick>
 8002884:	4602      	mov	r2, r0
 8002886:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002890:	4293      	cmp	r3, r2
 8002892:	d901      	bls.n	8002898 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8002894:	2303      	movs	r3, #3
 8002896:	e2e4      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002898:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800289c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028a0:	2202      	movs	r2, #2
 80028a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028a8:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	fa93 f2a3 	rbit	r2, r3
 80028b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028b6:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 80028ba:	601a      	str	r2, [r3, #0]
 80028bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028c0:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028c4:	2202      	movs	r2, #2
 80028c6:	601a      	str	r2, [r3, #0]
 80028c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028cc:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	fa93 f2a3 	rbit	r2, r3
 80028d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028da:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028de:	601a      	str	r2, [r3, #0]
  return result;
 80028e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80028e4:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 80028e8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80028ea:	fab3 f383 	clz	r3, r3
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	095b      	lsrs	r3, r3, #5
 80028f2:	b2db      	uxtb	r3, r3
 80028f4:	f043 0302 	orr.w	r3, r3, #2
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b02      	cmp	r3, #2
 80028fc:	d106      	bne.n	800290c <HAL_RCC_OscConfig+0xb44>
 80028fe:	4b02      	ldr	r3, [pc, #8]	@ (8002908 <HAL_RCC_OscConfig+0xb40>)
 8002900:	6a1b      	ldr	r3, [r3, #32]
 8002902:	e017      	b.n	8002934 <HAL_RCC_OscConfig+0xb6c>
 8002904:	40007000 	.word	0x40007000
 8002908:	40021000 	.word	0x40021000
 800290c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002910:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002914:	2202      	movs	r2, #2
 8002916:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002918:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800291c:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	fa93 f2a3 	rbit	r2, r3
 8002926:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800292a:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	4bb3      	ldr	r3, [pc, #716]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002932:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002934:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002938:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 800293c:	2102      	movs	r1, #2
 800293e:	6011      	str	r1, [r2, #0]
 8002940:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002944:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8002948:	6812      	ldr	r2, [r2, #0]
 800294a:	fa92 f1a2 	rbit	r1, r2
 800294e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002952:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002956:	6011      	str	r1, [r2, #0]
  return result;
 8002958:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800295c:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8002960:	6812      	ldr	r2, [r2, #0]
 8002962:	fab2 f282 	clz	r2, r2
 8002966:	b2d2      	uxtb	r2, r2
 8002968:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800296c:	b2d2      	uxtb	r2, r2
 800296e:	f002 021f 	and.w	r2, r2, #31
 8002972:	2101      	movs	r1, #1
 8002974:	fa01 f202 	lsl.w	r2, r1, r2
 8002978:	4013      	ands	r3, r2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d180      	bne.n	8002880 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800297e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8002982:	2b01      	cmp	r3, #1
 8002984:	d105      	bne.n	8002992 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002986:	4b9e      	ldr	r3, [pc, #632]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002988:	69db      	ldr	r3, [r3, #28]
 800298a:	4a9d      	ldr	r2, [pc, #628]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 800298c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002990:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002992:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002996:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	699b      	ldr	r3, [r3, #24]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	f000 825e 	beq.w	8002e60 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029a4:	4b96      	ldr	r3, [pc, #600]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	f003 030c 	and.w	r3, r3, #12
 80029ac:	2b08      	cmp	r3, #8
 80029ae:	f000 821f 	beq.w	8002df0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80029b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029b6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	699b      	ldr	r3, [r3, #24]
 80029be:	2b02      	cmp	r3, #2
 80029c0:	f040 8170 	bne.w	8002ca4 <HAL_RCC_OscConfig+0xedc>
 80029c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029c8:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80029d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029d6:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	fa93 f2a3 	rbit	r2, r3
 80029e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029e4:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029e8:	601a      	str	r2, [r3, #0]
  return result;
 80029ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80029ee:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 80029f2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80029fe:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	461a      	mov	r2, r3
 8002a06:	2300      	movs	r3, #0
 8002a08:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a0a:	f7fe fcef 	bl	80013ec <HAL_GetTick>
 8002a0e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a12:	e009      	b.n	8002a28 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a14:	f7fe fcea 	bl	80013ec <HAL_GetTick>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002a1e:	1ad3      	subs	r3, r2, r3
 8002a20:	2b02      	cmp	r3, #2
 8002a22:	d901      	bls.n	8002a28 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8002a24:	2303      	movs	r3, #3
 8002a26:	e21c      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002a28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a2c:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a3a:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	fa93 f2a3 	rbit	r2, r3
 8002a44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a48:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a4c:	601a      	str	r2, [r3, #0]
  return result;
 8002a4e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a52:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8002a56:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a58:	fab3 f383 	clz	r3, r3
 8002a5c:	b2db      	uxtb	r3, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	f043 0301 	orr.w	r3, r3, #1
 8002a66:	b2db      	uxtb	r3, r3
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d102      	bne.n	8002a72 <HAL_RCC_OscConfig+0xcaa>
 8002a6c:	4b64      	ldr	r3, [pc, #400]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	e027      	b.n	8002ac2 <HAL_RCC_OscConfig+0xcfa>
 8002a72:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a76:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a7a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002a7e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a84:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	fa93 f2a3 	rbit	r2, r3
 8002a8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a92:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002a9c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002aa0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002aa4:	601a      	str	r2, [r3, #0]
 8002aa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002aaa:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fa93 f2a3 	rbit	r2, r3
 8002ab4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ab8:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8002abc:	601a      	str	r2, [r3, #0]
 8002abe:	4b50      	ldr	r3, [pc, #320]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ac2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ac6:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002aca:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002ace:	6011      	str	r1, [r2, #0]
 8002ad0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ad4:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8002ad8:	6812      	ldr	r2, [r2, #0]
 8002ada:	fa92 f1a2 	rbit	r1, r2
 8002ade:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002ae2:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002ae6:	6011      	str	r1, [r2, #0]
  return result;
 8002ae8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002aec:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8002af0:	6812      	ldr	r2, [r2, #0]
 8002af2:	fab2 f282 	clz	r2, r2
 8002af6:	b2d2      	uxtb	r2, r2
 8002af8:	f042 0220 	orr.w	r2, r2, #32
 8002afc:	b2d2      	uxtb	r2, r2
 8002afe:	f002 021f 	and.w	r2, r2, #31
 8002b02:	2101      	movs	r1, #1
 8002b04:	fa01 f202 	lsl.w	r2, r1, r2
 8002b08:	4013      	ands	r3, r2
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d182      	bne.n	8002a14 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b0e:	4b3c      	ldr	r3, [pc, #240]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b12:	f023 020f 	bic.w	r2, r3, #15
 8002b16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b1a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b22:	4937      	ldr	r1, [pc, #220]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002b24:	4313      	orrs	r3, r2
 8002b26:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8002b28:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8002b30:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b34:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6a19      	ldr	r1, [r3, #32]
 8002b3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b40:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	69db      	ldr	r3, [r3, #28]
 8002b48:	430b      	orrs	r3, r1
 8002b4a:	492d      	ldr	r1, [pc, #180]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	604b      	str	r3, [r1, #4]
 8002b50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b54:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b58:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002b5c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b62:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	fa93 f2a3 	rbit	r2, r3
 8002b6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b70:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b74:	601a      	str	r2, [r3, #0]
  return result;
 8002b76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002b7a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002b7e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b80:	fab3 f383 	clz	r3, r3
 8002b84:	b2db      	uxtb	r3, r3
 8002b86:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002b8a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002b8e:	009b      	lsls	r3, r3, #2
 8002b90:	461a      	mov	r2, r3
 8002b92:	2301      	movs	r3, #1
 8002b94:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b96:	f7fe fc29 	bl	80013ec <HAL_GetTick>
 8002b9a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b9e:	e009      	b.n	8002bb4 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ba0:	f7fe fc24 	bl	80013ec <HAL_GetTick>
 8002ba4:	4602      	mov	r2, r0
 8002ba6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002baa:	1ad3      	subs	r3, r2, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d901      	bls.n	8002bb4 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002bb0:	2303      	movs	r3, #3
 8002bb2:	e156      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002bb4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bb8:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bbc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002bc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bc6:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	fa93 f2a3 	rbit	r2, r3
 8002bd0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bd4:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002bd8:	601a      	str	r2, [r3, #0]
  return result;
 8002bda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002bde:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002be2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002be4:	fab3 f383 	clz	r3, r3
 8002be8:	b2db      	uxtb	r3, r3
 8002bea:	095b      	lsrs	r3, r3, #5
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	f043 0301 	orr.w	r3, r3, #1
 8002bf2:	b2db      	uxtb	r3, r3
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d105      	bne.n	8002c04 <HAL_RCC_OscConfig+0xe3c>
 8002bf8:	4b01      	ldr	r3, [pc, #4]	@ (8002c00 <HAL_RCC_OscConfig+0xe38>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	e02a      	b.n	8002c54 <HAL_RCC_OscConfig+0xe8c>
 8002bfe:	bf00      	nop
 8002c00:	40021000 	.word	0x40021000
 8002c04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c08:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c0c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c16:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	fa93 f2a3 	rbit	r2, r3
 8002c20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c24:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002c28:	601a      	str	r2, [r3, #0]
 8002c2a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c2e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c32:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002c36:	601a      	str	r2, [r3, #0]
 8002c38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c3c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	fa93 f2a3 	rbit	r2, r3
 8002c46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002c4a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002c4e:	601a      	str	r2, [r3, #0]
 8002c50:	4b86      	ldr	r3, [pc, #536]	@ (8002e6c <HAL_RCC_OscConfig+0x10a4>)
 8002c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c54:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c58:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c5c:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002c60:	6011      	str	r1, [r2, #0]
 8002c62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c66:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8002c6a:	6812      	ldr	r2, [r2, #0]
 8002c6c:	fa92 f1a2 	rbit	r1, r2
 8002c70:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c74:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c78:	6011      	str	r1, [r2, #0]
  return result;
 8002c7a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002c7e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002c82:	6812      	ldr	r2, [r2, #0]
 8002c84:	fab2 f282 	clz	r2, r2
 8002c88:	b2d2      	uxtb	r2, r2
 8002c8a:	f042 0220 	orr.w	r2, r2, #32
 8002c8e:	b2d2      	uxtb	r2, r2
 8002c90:	f002 021f 	and.w	r2, r2, #31
 8002c94:	2101      	movs	r1, #1
 8002c96:	fa01 f202 	lsl.w	r2, r1, r2
 8002c9a:	4013      	ands	r3, r2
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	f43f af7f 	beq.w	8002ba0 <HAL_RCC_OscConfig+0xdd8>
 8002ca2:	e0dd      	b.n	8002e60 <HAL_RCC_OscConfig+0x1098>
 8002ca4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002ca8:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002cb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cb6:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	fa93 f2a3 	rbit	r2, r3
 8002cc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cc4:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cc8:	601a      	str	r2, [r3, #0]
  return result;
 8002cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002cce:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002cd2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cd4:	fab3 f383 	clz	r3, r3
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8002cde:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002ce2:	009b      	lsls	r3, r3, #2
 8002ce4:	461a      	mov	r2, r3
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cea:	f7fe fb7f 	bl	80013ec <HAL_GetTick>
 8002cee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002cf2:	e009      	b.n	8002d08 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002cf4:	f7fe fb7a 	bl	80013ec <HAL_GetTick>
 8002cf8:	4602      	mov	r2, r0
 8002cfa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8002cfe:	1ad3      	subs	r3, r2, r3
 8002d00:	2b02      	cmp	r3, #2
 8002d02:	d901      	bls.n	8002d08 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002d04:	2303      	movs	r3, #3
 8002d06:	e0ac      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
 8002d08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d0c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d10:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d14:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d1a:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	fa93 f2a3 	rbit	r2, r3
 8002d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d28:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d2c:	601a      	str	r2, [r3, #0]
  return result;
 8002d2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d32:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8002d36:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002d38:	fab3 f383 	clz	r3, r3
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	095b      	lsrs	r3, r3, #5
 8002d40:	b2db      	uxtb	r3, r3
 8002d42:	f043 0301 	orr.w	r3, r3, #1
 8002d46:	b2db      	uxtb	r3, r3
 8002d48:	2b01      	cmp	r3, #1
 8002d4a:	d102      	bne.n	8002d52 <HAL_RCC_OscConfig+0xf8a>
 8002d4c:	4b47      	ldr	r3, [pc, #284]	@ (8002e6c <HAL_RCC_OscConfig+0x10a4>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	e027      	b.n	8002da2 <HAL_RCC_OscConfig+0xfda>
 8002d52:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d56:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d5a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d64:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	fa93 f2a3 	rbit	r2, r3
 8002d6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d72:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002d76:	601a      	str	r2, [r3, #0]
 8002d78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d7c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d80:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002d84:	601a      	str	r2, [r3, #0]
 8002d86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d8a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	fa93 f2a3 	rbit	r2, r3
 8002d94:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002d98:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	4b33      	ldr	r3, [pc, #204]	@ (8002e6c <HAL_RCC_OscConfig+0x10a4>)
 8002da0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002da6:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002daa:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8002dae:	6011      	str	r1, [r2, #0]
 8002db0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002db4:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	fa92 f1a2 	rbit	r1, r2
 8002dbe:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dc2:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002dc6:	6011      	str	r1, [r2, #0]
  return result;
 8002dc8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002dcc:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002dd0:	6812      	ldr	r2, [r2, #0]
 8002dd2:	fab2 f282 	clz	r2, r2
 8002dd6:	b2d2      	uxtb	r2, r2
 8002dd8:	f042 0220 	orr.w	r2, r2, #32
 8002ddc:	b2d2      	uxtb	r2, r2
 8002dde:	f002 021f 	and.w	r2, r2, #31
 8002de2:	2101      	movs	r1, #1
 8002de4:	fa01 f202 	lsl.w	r2, r1, r2
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d182      	bne.n	8002cf4 <HAL_RCC_OscConfig+0xf2c>
 8002dee:	e037      	b.n	8002e60 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002df0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002df4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	699b      	ldr	r3, [r3, #24]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e02e      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002e04:	4b19      	ldr	r3, [pc, #100]	@ (8002e6c <HAL_RCC_OscConfig+0x10a4>)
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8002e0c:	4b17      	ldr	r3, [pc, #92]	@ (8002e6c <HAL_RCC_OscConfig+0x10a4>)
 8002e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e10:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e14:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e18:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8002e1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e20:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	69db      	ldr	r3, [r3, #28]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d117      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e2c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8002e30:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002e34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e38:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8002e40:	429a      	cmp	r2, r3
 8002e42:	d10b      	bne.n	8002e5c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8002e44:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8002e48:	f003 020f 	and.w	r2, r3, #15
 8002e4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002e50:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8002e58:	429a      	cmp	r2, r3
 8002e5a:	d001      	beq.n	8002e60 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	e000      	b.n	8002e62 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8002e60:	2300      	movs	r3, #0
}
 8002e62:	4618      	mov	r0, r3
 8002e64:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	bd80      	pop	{r7, pc}
 8002e6c:	40021000 	.word	0x40021000

08002e70 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b09e      	sub	sp, #120	@ 0x78
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002e7a:	2300      	movs	r3, #0
 8002e7c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e84:	2301      	movs	r3, #1
 8002e86:	e162      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e88:	4b90      	ldr	r3, [pc, #576]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	683a      	ldr	r2, [r7, #0]
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d910      	bls.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e96:	4b8d      	ldr	r3, [pc, #564]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f023 0207 	bic.w	r2, r3, #7
 8002e9e:	498b      	ldr	r1, [pc, #556]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea0:	683b      	ldr	r3, [r7, #0]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ea6:	4b89      	ldr	r3, [pc, #548]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	683a      	ldr	r2, [r7, #0]
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	d001      	beq.n	8002eb8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	e14a      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	f003 0302 	and.w	r3, r3, #2
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ec4:	4b82      	ldr	r3, [pc, #520]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	689b      	ldr	r3, [r3, #8]
 8002ed0:	497f      	ldr	r1, [pc, #508]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	f003 0301 	and.w	r3, r3, #1
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	f000 80dc 	beq.w	800309c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	685b      	ldr	r3, [r3, #4]
 8002ee8:	2b01      	cmp	r3, #1
 8002eea:	d13c      	bne.n	8002f66 <HAL_RCC_ClockConfig+0xf6>
 8002eec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002ef0:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ef2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002ef4:	fa93 f3a3 	rbit	r3, r3
 8002ef8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8002efa:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002efc:	fab3 f383 	clz	r3, r3
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	095b      	lsrs	r3, r3, #5
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	f043 0301 	orr.w	r3, r3, #1
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	2b01      	cmp	r3, #1
 8002f0e:	d102      	bne.n	8002f16 <HAL_RCC_ClockConfig+0xa6>
 8002f10:	4b6f      	ldr	r3, [pc, #444]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	e00f      	b.n	8002f36 <HAL_RCC_ClockConfig+0xc6>
 8002f16:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f1a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002f1e:	fa93 f3a3 	rbit	r3, r3
 8002f22:	667b      	str	r3, [r7, #100]	@ 0x64
 8002f24:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002f28:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f2a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002f2c:	fa93 f3a3 	rbit	r3, r3
 8002f30:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002f32:	4b67      	ldr	r3, [pc, #412]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f36:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8002f3a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002f3c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002f3e:	fa92 f2a2 	rbit	r2, r2
 8002f42:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 8002f44:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8002f46:	fab2 f282 	clz	r2, r2
 8002f4a:	b2d2      	uxtb	r2, r2
 8002f4c:	f042 0220 	orr.w	r2, r2, #32
 8002f50:	b2d2      	uxtb	r2, r2
 8002f52:	f002 021f 	and.w	r2, r2, #31
 8002f56:	2101      	movs	r1, #1
 8002f58:	fa01 f202 	lsl.w	r2, r1, r2
 8002f5c:	4013      	ands	r3, r2
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d17b      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002f62:	2301      	movs	r3, #1
 8002f64:	e0f3      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	685b      	ldr	r3, [r3, #4]
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d13c      	bne.n	8002fe8 <HAL_RCC_ClockConfig+0x178>
 8002f6e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f72:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002f76:	fa93 f3a3 	rbit	r3, r3
 8002f7a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f7e:	fab3 f383 	clz	r3, r3
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	095b      	lsrs	r3, r3, #5
 8002f86:	b2db      	uxtb	r3, r3
 8002f88:	f043 0301 	orr.w	r3, r3, #1
 8002f8c:	b2db      	uxtb	r3, r3
 8002f8e:	2b01      	cmp	r3, #1
 8002f90:	d102      	bne.n	8002f98 <HAL_RCC_ClockConfig+0x128>
 8002f92:	4b4f      	ldr	r3, [pc, #316]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	e00f      	b.n	8002fb8 <HAL_RCC_ClockConfig+0x148>
 8002f98:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002fa0:	fa93 f3a3 	rbit	r3, r3
 8002fa4:	647b      	str	r3, [r7, #68]	@ 0x44
 8002fa6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002faa:	643b      	str	r3, [r7, #64]	@ 0x40
 8002fac:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002fae:	fa93 f3a3 	rbit	r3, r3
 8002fb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002fb4:	4b46      	ldr	r3, [pc, #280]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8002fb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fb8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002fbc:	63ba      	str	r2, [r7, #56]	@ 0x38
 8002fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002fc0:	fa92 f2a2 	rbit	r2, r2
 8002fc4:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002fc6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002fc8:	fab2 f282 	clz	r2, r2
 8002fcc:	b2d2      	uxtb	r2, r2
 8002fce:	f042 0220 	orr.w	r2, r2, #32
 8002fd2:	b2d2      	uxtb	r2, r2
 8002fd4:	f002 021f 	and.w	r2, r2, #31
 8002fd8:	2101      	movs	r1, #1
 8002fda:	fa01 f202 	lsl.w	r2, r1, r2
 8002fde:	4013      	ands	r3, r2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d13a      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	e0b2      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002fee:	fa93 f3a3 	rbit	r3, r3
 8002ff2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002ff4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ff6:	fab3 f383 	clz	r3, r3
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	095b      	lsrs	r3, r3, #5
 8002ffe:	b2db      	uxtb	r3, r3
 8003000:	f043 0301 	orr.w	r3, r3, #1
 8003004:	b2db      	uxtb	r3, r3
 8003006:	2b01      	cmp	r3, #1
 8003008:	d102      	bne.n	8003010 <HAL_RCC_ClockConfig+0x1a0>
 800300a:	4b31      	ldr	r3, [pc, #196]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	e00d      	b.n	800302c <HAL_RCC_ClockConfig+0x1bc>
 8003010:	2302      	movs	r3, #2
 8003012:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003014:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003016:	fa93 f3a3 	rbit	r3, r3
 800301a:	627b      	str	r3, [r7, #36]	@ 0x24
 800301c:	2302      	movs	r3, #2
 800301e:	623b      	str	r3, [r7, #32]
 8003020:	6a3b      	ldr	r3, [r7, #32]
 8003022:	fa93 f3a3 	rbit	r3, r3
 8003026:	61fb      	str	r3, [r7, #28]
 8003028:	4b29      	ldr	r3, [pc, #164]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800302a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800302c:	2202      	movs	r2, #2
 800302e:	61ba      	str	r2, [r7, #24]
 8003030:	69ba      	ldr	r2, [r7, #24]
 8003032:	fa92 f2a2 	rbit	r2, r2
 8003036:	617a      	str	r2, [r7, #20]
  return result;
 8003038:	697a      	ldr	r2, [r7, #20]
 800303a:	fab2 f282 	clz	r2, r2
 800303e:	b2d2      	uxtb	r2, r2
 8003040:	f042 0220 	orr.w	r2, r2, #32
 8003044:	b2d2      	uxtb	r2, r2
 8003046:	f002 021f 	and.w	r2, r2, #31
 800304a:	2101      	movs	r1, #1
 800304c:	fa01 f202 	lsl.w	r2, r1, r2
 8003050:	4013      	ands	r3, r2
 8003052:	2b00      	cmp	r3, #0
 8003054:	d101      	bne.n	800305a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	e079      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800305a:	4b1d      	ldr	r3, [pc, #116]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f023 0203 	bic.w	r2, r3, #3
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	685b      	ldr	r3, [r3, #4]
 8003066:	491a      	ldr	r1, [pc, #104]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 8003068:	4313      	orrs	r3, r2
 800306a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800306c:	f7fe f9be 	bl	80013ec <HAL_GetTick>
 8003070:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003072:	e00a      	b.n	800308a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003074:	f7fe f9ba 	bl	80013ec <HAL_GetTick>
 8003078:	4602      	mov	r2, r0
 800307a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800307c:	1ad3      	subs	r3, r2, r3
 800307e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003082:	4293      	cmp	r3, r2
 8003084:	d901      	bls.n	800308a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e061      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800308a:	4b11      	ldr	r3, [pc, #68]	@ (80030d0 <HAL_RCC_ClockConfig+0x260>)
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f003 020c 	and.w	r2, r3, #12
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	009b      	lsls	r3, r3, #2
 8003098:	429a      	cmp	r2, r3
 800309a:	d1eb      	bne.n	8003074 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0307 	and.w	r3, r3, #7
 80030a4:	683a      	ldr	r2, [r7, #0]
 80030a6:	429a      	cmp	r2, r3
 80030a8:	d214      	bcs.n	80030d4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030aa:	4b08      	ldr	r3, [pc, #32]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f023 0207 	bic.w	r2, r3, #7
 80030b2:	4906      	ldr	r1, [pc, #24]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	4313      	orrs	r3, r2
 80030b8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030ba:	4b04      	ldr	r3, [pc, #16]	@ (80030cc <HAL_RCC_ClockConfig+0x25c>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f003 0307 	and.w	r3, r3, #7
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	429a      	cmp	r2, r3
 80030c6:	d005      	beq.n	80030d4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80030c8:	2301      	movs	r3, #1
 80030ca:	e040      	b.n	800314e <HAL_RCC_ClockConfig+0x2de>
 80030cc:	40022000 	.word	0x40022000
 80030d0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 0304 	and.w	r3, r3, #4
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d008      	beq.n	80030f2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80030e0:	4b1d      	ldr	r3, [pc, #116]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	491a      	ldr	r1, [pc, #104]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 80030ee:	4313      	orrs	r3, r2
 80030f0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f003 0308 	and.w	r3, r3, #8
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d009      	beq.n	8003112 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80030fe:	4b16      	ldr	r3, [pc, #88]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 8003100:	685b      	ldr	r3, [r3, #4]
 8003102:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	00db      	lsls	r3, r3, #3
 800310c:	4912      	ldr	r1, [pc, #72]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800310e:	4313      	orrs	r3, r2
 8003110:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003112:	f000 f829 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8003116:	4601      	mov	r1, r0
 8003118:	4b0f      	ldr	r3, [pc, #60]	@ (8003158 <HAL_RCC_ClockConfig+0x2e8>)
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003120:	22f0      	movs	r2, #240	@ 0xf0
 8003122:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	fa92 f2a2 	rbit	r2, r2
 800312a:	60fa      	str	r2, [r7, #12]
  return result;
 800312c:	68fa      	ldr	r2, [r7, #12]
 800312e:	fab2 f282 	clz	r2, r2
 8003132:	b2d2      	uxtb	r2, r2
 8003134:	40d3      	lsrs	r3, r2
 8003136:	4a09      	ldr	r2, [pc, #36]	@ (800315c <HAL_RCC_ClockConfig+0x2ec>)
 8003138:	5cd3      	ldrb	r3, [r2, r3]
 800313a:	fa21 f303 	lsr.w	r3, r1, r3
 800313e:	4a08      	ldr	r2, [pc, #32]	@ (8003160 <HAL_RCC_ClockConfig+0x2f0>)
 8003140:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8003142:	4b08      	ldr	r3, [pc, #32]	@ (8003164 <HAL_RCC_ClockConfig+0x2f4>)
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	4618      	mov	r0, r3
 8003148:	f7fe f90c 	bl	8001364 <HAL_InitTick>
  
  return HAL_OK;
 800314c:	2300      	movs	r3, #0
}
 800314e:	4618      	mov	r0, r3
 8003150:	3778      	adds	r7, #120	@ 0x78
 8003152:	46bd      	mov	sp, r7
 8003154:	bd80      	pop	{r7, pc}
 8003156:	bf00      	nop
 8003158:	40021000 	.word	0x40021000
 800315c:	08005150 	.word	0x08005150
 8003160:	20000024 	.word	0x20000024
 8003164:	20000028 	.word	0x20000028

08003168 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003168:	b480      	push	{r7}
 800316a:	b087      	sub	sp, #28
 800316c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800316e:	2300      	movs	r3, #0
 8003170:	60fb      	str	r3, [r7, #12]
 8003172:	2300      	movs	r3, #0
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	2300      	movs	r3, #0
 8003178:	617b      	str	r3, [r7, #20]
 800317a:	2300      	movs	r3, #0
 800317c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800317e:	2300      	movs	r3, #0
 8003180:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8003182:	4b1f      	ldr	r3, [pc, #124]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 030c 	and.w	r3, r3, #12
 800318e:	2b04      	cmp	r3, #4
 8003190:	d002      	beq.n	8003198 <HAL_RCC_GetSysClockFreq+0x30>
 8003192:	2b08      	cmp	r3, #8
 8003194:	d003      	beq.n	800319e <HAL_RCC_GetSysClockFreq+0x36>
 8003196:	e029      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003198:	4b1a      	ldr	r3, [pc, #104]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 800319a:	613b      	str	r3, [r7, #16]
      break;
 800319c:	e029      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	0c9b      	lsrs	r3, r3, #18
 80031a2:	f003 030f 	and.w	r3, r3, #15
 80031a6:	4a18      	ldr	r2, [pc, #96]	@ (8003208 <HAL_RCC_GetSysClockFreq+0xa0>)
 80031a8:	5cd3      	ldrb	r3, [r2, r3]
 80031aa:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 80031ac:	4b14      	ldr	r3, [pc, #80]	@ (8003200 <HAL_RCC_GetSysClockFreq+0x98>)
 80031ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80031b0:	f003 030f 	and.w	r3, r3, #15
 80031b4:	4a15      	ldr	r2, [pc, #84]	@ (800320c <HAL_RCC_GetSysClockFreq+0xa4>)
 80031b6:	5cd3      	ldrb	r3, [r2, r3]
 80031b8:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d008      	beq.n	80031d6 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031c4:	4a0f      	ldr	r2, [pc, #60]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031c6:	68bb      	ldr	r3, [r7, #8]
 80031c8:	fbb2 f2f3 	udiv	r2, r2, r3
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	fb02 f303 	mul.w	r3, r2, r3
 80031d2:	617b      	str	r3, [r7, #20]
 80031d4:	e007      	b.n	80031e6 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80031d6:	4a0b      	ldr	r2, [pc, #44]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031d8:	68bb      	ldr	r3, [r7, #8]
 80031da:	fbb2 f2f3 	udiv	r2, r2, r3
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	fb02 f303 	mul.w	r3, r2, r3
 80031e4:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80031e6:	697b      	ldr	r3, [r7, #20]
 80031e8:	613b      	str	r3, [r7, #16]
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b05      	ldr	r3, [pc, #20]	@ (8003204 <HAL_RCC_GetSysClockFreq+0x9c>)
 80031ee:	613b      	str	r3, [r7, #16]
      break;
 80031f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f2:	693b      	ldr	r3, [r7, #16]
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	371c      	adds	r7, #28
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr
 8003200:	40021000 	.word	0x40021000
 8003204:	007a1200 	.word	0x007a1200
 8003208:	08005168 	.word	0x08005168
 800320c:	08005178 	.word	0x08005178

08003210 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003214:	4b03      	ldr	r3, [pc, #12]	@ (8003224 <HAL_RCC_GetHCLKFreq+0x14>)
 8003216:	681b      	ldr	r3, [r3, #0]
}
 8003218:	4618      	mov	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	20000024 	.word	0x20000024

08003228 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003228:	b580      	push	{r7, lr}
 800322a:	b082      	sub	sp, #8
 800322c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800322e:	f7ff ffef 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003232:	4601      	mov	r1, r0
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800323c:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8003240:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003242:	687a      	ldr	r2, [r7, #4]
 8003244:	fa92 f2a2 	rbit	r2, r2
 8003248:	603a      	str	r2, [r7, #0]
  return result;
 800324a:	683a      	ldr	r2, [r7, #0]
 800324c:	fab2 f282 	clz	r2, r2
 8003250:	b2d2      	uxtb	r2, r2
 8003252:	40d3      	lsrs	r3, r2
 8003254:	4a04      	ldr	r2, [pc, #16]	@ (8003268 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003256:	5cd3      	ldrb	r3, [r2, r3]
 8003258:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800325c:	4618      	mov	r0, r3
 800325e:	3708      	adds	r7, #8
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40021000 	.word	0x40021000
 8003268:	08005160 	.word	0x08005160

0800326c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b082      	sub	sp, #8
 8003270:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003272:	f7ff ffcd 	bl	8003210 <HAL_RCC_GetHCLKFreq>
 8003276:	4601      	mov	r1, r0
 8003278:	4b0b      	ldr	r3, [pc, #44]	@ (80032a8 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8003280:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8003284:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	fa92 f2a2 	rbit	r2, r2
 800328c:	603a      	str	r2, [r7, #0]
  return result;
 800328e:	683a      	ldr	r2, [r7, #0]
 8003290:	fab2 f282 	clz	r2, r2
 8003294:	b2d2      	uxtb	r2, r2
 8003296:	40d3      	lsrs	r3, r2
 8003298:	4a04      	ldr	r2, [pc, #16]	@ (80032ac <HAL_RCC_GetPCLK2Freq+0x40>)
 800329a:	5cd3      	ldrb	r3, [r2, r3]
 800329c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 80032a0:	4618      	mov	r0, r3
 80032a2:	3708      	adds	r7, #8
 80032a4:	46bd      	mov	sp, r7
 80032a6:	bd80      	pop	{r7, pc}
 80032a8:	40021000 	.word	0x40021000
 80032ac:	08005160 	.word	0x08005160

080032b0 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b092      	sub	sp, #72	@ 0x48
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032b8:	2300      	movs	r3, #0
 80032ba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80032bc:	2300      	movs	r3, #0
 80032be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80d4 	beq.w	800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032d4:	4b4e      	ldr	r3, [pc, #312]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d10e      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032e0:	4b4b      	ldr	r3, [pc, #300]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e2:	69db      	ldr	r3, [r3, #28]
 80032e4:	4a4a      	ldr	r2, [pc, #296]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032e6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ea:	61d3      	str	r3, [r2, #28]
 80032ec:	4b48      	ldr	r3, [pc, #288]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80032ee:	69db      	ldr	r3, [r3, #28]
 80032f0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032f4:	60bb      	str	r3, [r7, #8]
 80032f6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032f8:	2301      	movs	r3, #1
 80032fa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032fe:	4b45      	ldr	r3, [pc, #276]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003306:	2b00      	cmp	r3, #0
 8003308:	d118      	bne.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800330a:	4b42      	ldr	r3, [pc, #264]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4a41      	ldr	r2, [pc, #260]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003310:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003314:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003316:	f7fe f869 	bl	80013ec <HAL_GetTick>
 800331a:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800331c:	e008      	b.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800331e:	f7fe f865 	bl	80013ec <HAL_GetTick>
 8003322:	4602      	mov	r2, r0
 8003324:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003326:	1ad3      	subs	r3, r2, r3
 8003328:	2b64      	cmp	r3, #100	@ 0x64
 800332a:	d901      	bls.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800332c:	2303      	movs	r3, #3
 800332e:	e1d6      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003330:	4b38      	ldr	r3, [pc, #224]	@ (8003414 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003338:	2b00      	cmp	r3, #0
 800333a:	d0f0      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800333c:	4b34      	ldr	r3, [pc, #208]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003346:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 8084 	beq.w	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003356:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003358:	429a      	cmp	r2, r3
 800335a:	d07c      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800335c:	4b2c      	ldr	r3, [pc, #176]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800335e:	6a1b      	ldr	r3, [r3, #32]
 8003360:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003364:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003366:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800336a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800336c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800336e:	fa93 f3a3 	rbit	r3, r3
 8003372:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8003374:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003376:	fab3 f383 	clz	r3, r3
 800337a:	b2db      	uxtb	r3, r3
 800337c:	461a      	mov	r2, r3
 800337e:	4b26      	ldr	r3, [pc, #152]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003380:	4413      	add	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	461a      	mov	r2, r3
 8003386:	2301      	movs	r3, #1
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800338e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003390:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003392:	fa93 f3a3 	rbit	r3, r3
 8003396:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8003398:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800339a:	fab3 f383 	clz	r3, r3
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	461a      	mov	r2, r3
 80033a2:	4b1d      	ldr	r3, [pc, #116]	@ (8003418 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80033a4:	4413      	add	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	461a      	mov	r2, r3
 80033aa:	2300      	movs	r3, #0
 80033ac:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 80033ae:	4a18      	ldr	r2, [pc, #96]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80033b0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b2:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80033b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80033b6:	f003 0301 	and.w	r3, r3, #1
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d04b      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033be:	f7fe f815 	bl	80013ec <HAL_GetTick>
 80033c2:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033c4:	e00a      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033c6:	f7fe f811 	bl	80013ec <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d901      	bls.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80033d8:	2303      	movs	r3, #3
 80033da:	e180      	b.n	80036de <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80033dc:	2302      	movs	r3, #2
 80033de:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033e2:	fa93 f3a3 	rbit	r3, r3
 80033e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80033e8:	2302      	movs	r3, #2
 80033ea:	623b      	str	r3, [r7, #32]
 80033ec:	6a3b      	ldr	r3, [r7, #32]
 80033ee:	fa93 f3a3 	rbit	r3, r3
 80033f2:	61fb      	str	r3, [r7, #28]
  return result;
 80033f4:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033f6:	fab3 f383 	clz	r3, r3
 80033fa:	b2db      	uxtb	r3, r3
 80033fc:	095b      	lsrs	r3, r3, #5
 80033fe:	b2db      	uxtb	r3, r3
 8003400:	f043 0302 	orr.w	r3, r3, #2
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b02      	cmp	r3, #2
 8003408:	d108      	bne.n	800341c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800340a:	4b01      	ldr	r3, [pc, #4]	@ (8003410 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	e00d      	b.n	800342c <HAL_RCCEx_PeriphCLKConfig+0x17c>
 8003410:	40021000 	.word	0x40021000
 8003414:	40007000 	.word	0x40007000
 8003418:	10908100 	.word	0x10908100
 800341c:	2302      	movs	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003420:	69bb      	ldr	r3, [r7, #24]
 8003422:	fa93 f3a3 	rbit	r3, r3
 8003426:	617b      	str	r3, [r7, #20]
 8003428:	4b9a      	ldr	r3, [pc, #616]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800342a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800342c:	2202      	movs	r2, #2
 800342e:	613a      	str	r2, [r7, #16]
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	fa92 f2a2 	rbit	r2, r2
 8003436:	60fa      	str	r2, [r7, #12]
  return result;
 8003438:	68fa      	ldr	r2, [r7, #12]
 800343a:	fab2 f282 	clz	r2, r2
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	f002 021f 	and.w	r2, r2, #31
 800344a:	2101      	movs	r1, #1
 800344c:	fa01 f202 	lsl.w	r2, r1, r2
 8003450:	4013      	ands	r3, r2
 8003452:	2b00      	cmp	r3, #0
 8003454:	d0b7      	beq.n	80033c6 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003456:	4b8f      	ldr	r3, [pc, #572]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003458:	6a1b      	ldr	r3, [r3, #32]
 800345a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	498c      	ldr	r1, [pc, #560]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003464:	4313      	orrs	r3, r2
 8003466:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003468:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800346c:	2b01      	cmp	r3, #1
 800346e:	d105      	bne.n	800347c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003470:	4b88      	ldr	r3, [pc, #544]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003472:	69db      	ldr	r3, [r3, #28]
 8003474:	4a87      	ldr	r2, [pc, #540]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003476:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800347a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0301 	and.w	r3, r3, #1
 8003484:	2b00      	cmp	r3, #0
 8003486:	d008      	beq.n	800349a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003488:	4b82      	ldr	r3, [pc, #520]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800348a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800348c:	f023 0203 	bic.w	r2, r3, #3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	497f      	ldr	r1, [pc, #508]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003496:	4313      	orrs	r3, r2
 8003498:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d008      	beq.n	80034b8 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80034a6:	4b7b      	ldr	r3, [pc, #492]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034aa:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	68db      	ldr	r3, [r3, #12]
 80034b2:	4978      	ldr	r1, [pc, #480]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034b4:	4313      	orrs	r3, r2
 80034b6:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d008      	beq.n	80034d6 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80034c4:	4b73      	ldr	r3, [pc, #460]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c8:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	4970      	ldr	r1, [pc, #448]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034d2:	4313      	orrs	r3, r2
 80034d4:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0320 	and.w	r3, r3, #32
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d008      	beq.n	80034f4 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80034e2:	4b6c      	ldr	r3, [pc, #432]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e6:	f023 0210 	bic.w	r2, r3, #16
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69db      	ldr	r3, [r3, #28]
 80034ee:	4969      	ldr	r1, [pc, #420]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80034f0:	4313      	orrs	r3, r2
 80034f2:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d008      	beq.n	8003512 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8003500:	4b64      	ldr	r3, [pc, #400]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800350c:	4961      	ldr	r1, [pc, #388]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800350e:	4313      	orrs	r3, r2
 8003510:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800351a:	2b00      	cmp	r3, #0
 800351c:	d008      	beq.n	8003530 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800351e:	4b5d      	ldr	r3, [pc, #372]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003522:	f023 0220 	bic.w	r2, r3, #32
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6a1b      	ldr	r3, [r3, #32]
 800352a:	495a      	ldr	r1, [pc, #360]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800352c:	4313      	orrs	r3, r2
 800352e:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003538:	2b00      	cmp	r3, #0
 800353a:	d008      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800353c:	4b55      	ldr	r3, [pc, #340]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800353e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003540:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003548:	4952      	ldr	r1, [pc, #328]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800354a:	4313      	orrs	r3, r2
 800354c:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0308 	and.w	r3, r3, #8
 8003556:	2b00      	cmp	r3, #0
 8003558:	d008      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800355a:	4b4e      	ldr	r3, [pc, #312]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800355c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800355e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	494b      	ldr	r1, [pc, #300]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003568:	4313      	orrs	r3, r2
 800356a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0310 	and.w	r3, r3, #16
 8003574:	2b00      	cmp	r3, #0
 8003576:	d008      	beq.n	800358a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003578:	4b46      	ldr	r3, [pc, #280]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800357a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800357c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	699b      	ldr	r3, [r3, #24]
 8003584:	4943      	ldr	r1, [pc, #268]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003586:	4313      	orrs	r3, r2
 8003588:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003592:	2b00      	cmp	r3, #0
 8003594:	d008      	beq.n	80035a8 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003596:	4b3f      	ldr	r3, [pc, #252]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035a2:	493c      	ldr	r1, [pc, #240]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035a4:	4313      	orrs	r3, r2
 80035a6:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d008      	beq.n	80035c6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80035b4:	4b37      	ldr	r3, [pc, #220]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035b8:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035c0:	4934      	ldr	r1, [pc, #208]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035c2:	4313      	orrs	r3, r2
 80035c4:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d008      	beq.n	80035e4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80035d2:	4b30      	ldr	r3, [pc, #192]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035d6:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80035de:	492d      	ldr	r1, [pc, #180]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035e0:	4313      	orrs	r3, r2
 80035e2:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d008      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80035f0:	4b28      	ldr	r3, [pc, #160]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035f4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80035fc:	4925      	ldr	r1, [pc, #148]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80035fe:	4313      	orrs	r3, r2
 8003600:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d008      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800360e:	4b21      	ldr	r3, [pc, #132]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003612:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800361a:	491e      	ldr	r1, [pc, #120]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800361c:	4313      	orrs	r3, r2
 800361e:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003628:	2b00      	cmp	r3, #0
 800362a:	d008      	beq.n	800363e <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 800362c:	4b19      	ldr	r3, [pc, #100]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800362e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003630:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003638:	4916      	ldr	r1, [pc, #88]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800363a:	4313      	orrs	r3, r2
 800363c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003646:	2b00      	cmp	r3, #0
 8003648:	d008      	beq.n	800365c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 800364a:	4b12      	ldr	r3, [pc, #72]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800364c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800364e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003656:	490f      	ldr	r1, [pc, #60]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003658:	4313      	orrs	r3, r2
 800365a:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003664:	2b00      	cmp	r3, #0
 8003666:	d008      	beq.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800366a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800366c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003674:	4907      	ldr	r1, [pc, #28]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003676:	4313      	orrs	r3, r2
 8003678:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d00c      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8003686:	4b03      	ldr	r3, [pc, #12]	@ (8003694 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8003688:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800368a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	e002      	b.n	8003698 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8003692:	bf00      	nop
 8003694:	40021000 	.word	0x40021000
 8003698:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800369a:	4913      	ldr	r1, [pc, #76]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800369c:	4313      	orrs	r3, r2
 800369e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d008      	beq.n	80036be <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 80036ac:	4b0e      	ldr	r3, [pc, #56]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036b0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036b8:	490b      	ldr	r1, [pc, #44]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d008      	beq.n	80036dc <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80036ca:	4b07      	ldr	r3, [pc, #28]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036ce:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80036d6:	4904      	ldr	r1, [pc, #16]	@ (80036e8 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80036d8:	4313      	orrs	r3, r2
 80036da:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80036dc:	2300      	movs	r3, #0
}
 80036de:	4618      	mov	r0, r3
 80036e0:	3748      	adds	r7, #72	@ 0x48
 80036e2:	46bd      	mov	sp, r7
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	40021000 	.word	0x40021000

080036ec <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b082      	sub	sp, #8
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d101      	bne.n	80036fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80036fa:	2301      	movs	r3, #1
 80036fc:	e040      	b.n	8003780 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fd fcea 	bl	80010e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	@ 0x24
 8003718:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0201 	bic.w	r2, r2, #1
 8003728:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8003732:	6878      	ldr	r0, [r7, #4]
 8003734:	f000 fea2 	bl	800447c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003738:	6878      	ldr	r0, [r7, #4]
 800373a:	f000 fccb 	bl	80040d4 <UART_SetConfig>
 800373e:	4603      	mov	r3, r0
 8003740:	2b01      	cmp	r3, #1
 8003742:	d101      	bne.n	8003748 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8003744:	2301      	movs	r3, #1
 8003746:	e01b      	b.n	8003780 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	685a      	ldr	r2, [r3, #4]
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003756:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	689a      	ldr	r2, [r3, #8]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003766:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	681a      	ldr	r2, [r3, #0]
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	f042 0201 	orr.w	r2, r2, #1
 8003776:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003778:	6878      	ldr	r0, [r7, #4]
 800377a:	f000 ff21 	bl	80045c0 <UART_CheckIdleState>
 800377e:	4603      	mov	r3, r0
}
 8003780:	4618      	mov	r0, r3
 8003782:	3708      	adds	r7, #8
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b08a      	sub	sp, #40	@ 0x28
 800378c:	af02      	add	r7, sp, #8
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	603b      	str	r3, [r7, #0]
 8003794:	4613      	mov	r3, r2
 8003796:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800379c:	2b20      	cmp	r3, #32
 800379e:	d177      	bne.n	8003890 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d002      	beq.n	80037ac <HAL_UART_Transmit+0x24>
 80037a6:	88fb      	ldrh	r3, [r7, #6]
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e070      	b.n	8003892 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2221      	movs	r2, #33	@ 0x21
 80037bc:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80037be:	f7fd fe15 	bl	80013ec <HAL_GetTick>
 80037c2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	88fa      	ldrh	r2, [r7, #6]
 80037c8:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	88fa      	ldrh	r2, [r7, #6]
 80037d0:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80037dc:	d108      	bne.n	80037f0 <HAL_UART_Transmit+0x68>
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	691b      	ldr	r3, [r3, #16]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d104      	bne.n	80037f0 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80037ea:	68bb      	ldr	r3, [r7, #8]
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e003      	b.n	80037f8 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80037f0:	68bb      	ldr	r3, [r7, #8]
 80037f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80037f4:	2300      	movs	r3, #0
 80037f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80037f8:	e02f      	b.n	800385a <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	9300      	str	r3, [sp, #0]
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2200      	movs	r2, #0
 8003802:	2180      	movs	r1, #128	@ 0x80
 8003804:	68f8      	ldr	r0, [r7, #12]
 8003806:	f000 ff83 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 800380a:	4603      	mov	r3, r0
 800380c:	2b00      	cmp	r3, #0
 800380e:	d004      	beq.n	800381a <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	2220      	movs	r2, #32
 8003814:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e03b      	b.n	8003892 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 800381a:	69fb      	ldr	r3, [r7, #28]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d10b      	bne.n	8003838 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	881a      	ldrh	r2, [r3, #0]
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800382c:	b292      	uxth	r2, r2
 800382e:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	3302      	adds	r3, #2
 8003834:	61bb      	str	r3, [r7, #24]
 8003836:	e007      	b.n	8003848 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003838:	69fb      	ldr	r3, [r7, #28]
 800383a:	781a      	ldrb	r2, [r3, #0]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003842:	69fb      	ldr	r3, [r7, #28]
 8003844:	3301      	adds	r3, #1
 8003846:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 800384e:	b29b      	uxth	r3, r3
 8003850:	3b01      	subs	r3, #1
 8003852:	b29a      	uxth	r2, r3
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003860:	b29b      	uxth	r3, r3
 8003862:	2b00      	cmp	r3, #0
 8003864:	d1c9      	bne.n	80037fa <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	9300      	str	r3, [sp, #0]
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	2200      	movs	r2, #0
 800386e:	2140      	movs	r1, #64	@ 0x40
 8003870:	68f8      	ldr	r0, [r7, #12]
 8003872:	f000 ff4d 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8003876:	4603      	mov	r3, r0
 8003878:	2b00      	cmp	r3, #0
 800387a:	d004      	beq.n	8003886 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	2220      	movs	r2, #32
 8003880:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e005      	b.n	8003892 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	2220      	movs	r2, #32
 800388a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 800388c:	2300      	movs	r3, #0
 800388e:	e000      	b.n	8003892 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003890:	2302      	movs	r3, #2
  }
}
 8003892:	4618      	mov	r0, r3
 8003894:	3720      	adds	r7, #32
 8003896:	46bd      	mov	sp, r7
 8003898:	bd80      	pop	{r7, pc}

0800389a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800389a:	b580      	push	{r7, lr}
 800389c:	b08a      	sub	sp, #40	@ 0x28
 800389e:	af02      	add	r7, sp, #8
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	603b      	str	r3, [r7, #0]
 80038a6:	4613      	mov	r3, r2
 80038a8:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038b0:	2b20      	cmp	r3, #32
 80038b2:	f040 80b6 	bne.w	8003a22 <HAL_UART_Receive+0x188>
  {
    if ((pData == NULL) || (Size == 0U))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d002      	beq.n	80038c2 <HAL_UART_Receive+0x28>
 80038bc:	88fb      	ldrh	r3, [r7, #6]
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d101      	bne.n	80038c6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 80038c2:	2301      	movs	r3, #1
 80038c4:	e0ae      	b.n	8003a24 <HAL_UART_Receive+0x18a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2222      	movs	r2, #34	@ 0x22
 80038d2:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	2200      	movs	r2, #0
 80038da:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038dc:	f7fd fd86 	bl	80013ec <HAL_GetTick>
 80038e0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	88fa      	ldrh	r2, [r7, #6]
 80038e6:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
    huart->RxXferCount = Size;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	88fa      	ldrh	r2, [r7, #6]
 80038ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038fa:	d10e      	bne.n	800391a <HAL_UART_Receive+0x80>
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	691b      	ldr	r3, [r3, #16]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d105      	bne.n	8003910 <HAL_UART_Receive+0x76>
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	f240 12ff 	movw	r2, #511	@ 0x1ff
 800390a:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800390e:	e02d      	b.n	800396c <HAL_UART_Receive+0xd2>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	22ff      	movs	r2, #255	@ 0xff
 8003914:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003918:	e028      	b.n	800396c <HAL_UART_Receive+0xd2>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d10d      	bne.n	800393e <HAL_UART_Receive+0xa4>
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d104      	bne.n	8003934 <HAL_UART_Receive+0x9a>
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	22ff      	movs	r2, #255	@ 0xff
 800392e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003932:	e01b      	b.n	800396c <HAL_UART_Receive+0xd2>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	227f      	movs	r2, #127	@ 0x7f
 8003938:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 800393c:	e016      	b.n	800396c <HAL_UART_Receive+0xd2>
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003946:	d10d      	bne.n	8003964 <HAL_UART_Receive+0xca>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	691b      	ldr	r3, [r3, #16]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d104      	bne.n	800395a <HAL_UART_Receive+0xc0>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	227f      	movs	r2, #127	@ 0x7f
 8003954:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003958:	e008      	b.n	800396c <HAL_UART_Receive+0xd2>
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	223f      	movs	r2, #63	@ 0x3f
 800395e:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8003962:	e003      	b.n	800396c <HAL_UART_Receive+0xd2>
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	2200      	movs	r2, #0
 8003968:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
    uhMask = huart->Mask;
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8003972:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800397c:	d108      	bne.n	8003990 <HAL_UART_Receive+0xf6>
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	691b      	ldr	r3, [r3, #16]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d104      	bne.n	8003990 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003986:	2300      	movs	r3, #0
 8003988:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800398a:	68bb      	ldr	r3, [r7, #8]
 800398c:	61bb      	str	r3, [r7, #24]
 800398e:	e003      	b.n	8003998 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003990:	68bb      	ldr	r3, [r7, #8]
 8003992:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003994:	2300      	movs	r3, #0
 8003996:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003998:	e037      	b.n	8003a0a <HAL_UART_Receive+0x170>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	9300      	str	r3, [sp, #0]
 800399e:	697b      	ldr	r3, [r7, #20]
 80039a0:	2200      	movs	r2, #0
 80039a2:	2120      	movs	r1, #32
 80039a4:	68f8      	ldr	r0, [r7, #12]
 80039a6:	f000 feb3 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d005      	beq.n	80039bc <HAL_UART_Receive+0x122>
      {
        huart->RxState = HAL_UART_STATE_READY;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	2220      	movs	r2, #32
 80039b4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

        return HAL_TIMEOUT;
 80039b8:	2303      	movs	r3, #3
 80039ba:	e033      	b.n	8003a24 <HAL_UART_Receive+0x18a>
      }
      if (pdata8bits == NULL)
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d10c      	bne.n	80039dc <HAL_UART_Receive+0x142>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039c8:	b29a      	uxth	r2, r3
 80039ca:	8a7b      	ldrh	r3, [r7, #18]
 80039cc:	4013      	ands	r3, r2
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 80039d4:	69bb      	ldr	r3, [r7, #24]
 80039d6:	3302      	adds	r3, #2
 80039d8:	61bb      	str	r3, [r7, #24]
 80039da:	e00d      	b.n	80039f8 <HAL_UART_Receive+0x15e>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	b2da      	uxtb	r2, r3
 80039e6:	8a7b      	ldrh	r3, [r7, #18]
 80039e8:	b2db      	uxtb	r3, r3
 80039ea:	4013      	ands	r3, r2
 80039ec:	b2da      	uxtb	r2, r3
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	3301      	adds	r3, #1
 80039f6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    while (huart->RxXferCount > 0U)
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003a10:	b29b      	uxth	r3, r3
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d1c1      	bne.n	800399a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	2220      	movs	r2, #32
 8003a1a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    return HAL_OK;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	e000      	b.n	8003a24 <HAL_UART_Receive+0x18a>
  }
  else
  {
    return HAL_BUSY;
 8003a22:	2302      	movs	r3, #2
  }
}
 8003a24:	4618      	mov	r0, r3
 8003a26:	3720      	adds	r7, #32
 8003a28:	46bd      	mov	sp, r7
 8003a2a:	bd80      	pop	{r7, pc}

08003a2c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b08a      	sub	sp, #40	@ 0x28
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	60f8      	str	r0, [r7, #12]
 8003a34:	60b9      	str	r1, [r7, #8]
 8003a36:	4613      	mov	r3, r2
 8003a38:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003a40:	2b20      	cmp	r3, #32
 8003a42:	d132      	bne.n	8003aaa <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a44:	68bb      	ldr	r3, [r7, #8]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d002      	beq.n	8003a50 <HAL_UART_Receive_DMA+0x24>
 8003a4a:	88fb      	ldrh	r3, [r7, #6]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d101      	bne.n	8003a54 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8003a50:	2301      	movs	r3, #1
 8003a52:	e02b      	b.n	8003aac <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2200      	movs	r2, #0
 8003a58:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d018      	beq.n	8003a9a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	e853 3f00 	ldrex	r3, [r3]
 8003a74:	613b      	str	r3, [r7, #16]
   return(result);
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003a7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	461a      	mov	r2, r3
 8003a84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a86:	623b      	str	r3, [r7, #32]
 8003a88:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a8a:	69f9      	ldr	r1, [r7, #28]
 8003a8c:	6a3a      	ldr	r2, [r7, #32]
 8003a8e:	e841 2300 	strex	r3, r2, [r1]
 8003a92:	61bb      	str	r3, [r7, #24]
   return(result);
 8003a94:	69bb      	ldr	r3, [r7, #24]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d1e6      	bne.n	8003a68 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8003a9a:	88fb      	ldrh	r3, [r7, #6]
 8003a9c:	461a      	mov	r2, r3
 8003a9e:	68b9      	ldr	r1, [r7, #8]
 8003aa0:	68f8      	ldr	r0, [r7, #12]
 8003aa2:	f000 fea3 	bl	80047ec <UART_Start_Receive_DMA>
 8003aa6:	4603      	mov	r3, r0
 8003aa8:	e000      	b.n	8003aac <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8003aaa:	2302      	movs	r3, #2
  }
}
 8003aac:	4618      	mov	r0, r3
 8003aae:	3728      	adds	r7, #40	@ 0x28
 8003ab0:	46bd      	mov	sp, r7
 8003ab2:	bd80      	pop	{r7, pc}

08003ab4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003ab4:	b580      	push	{r7, lr}
 8003ab6:	b0ba      	sub	sp, #232	@ 0xe8
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	69db      	ldr	r3, [r3, #28]
 8003ac2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	689b      	ldr	r3, [r3, #8]
 8003ad6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003ada:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003ade:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003ae2:	4013      	ands	r3, r2
 8003ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003ae8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d115      	bne.n	8003b1c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003af0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003af4:	f003 0320 	and.w	r3, r3, #32
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d00f      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003afc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b00:	f003 0320 	and.w	r3, r3, #32
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d009      	beq.n	8003b1c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	f000 82ab 	beq.w	8004068 <HAL_UART_IRQHandler+0x5b4>
      {
        huart->RxISR(huart);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003b16:	6878      	ldr	r0, [r7, #4]
 8003b18:	4798      	blx	r3
      }
      return;
 8003b1a:	e2a5      	b.n	8004068 <HAL_UART_IRQHandler+0x5b4>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8003b1c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	f000 8117 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003b26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b2a:	f003 0301 	and.w	r3, r3, #1
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d106      	bne.n	8003b40 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003b32:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003b36:	4b85      	ldr	r3, [pc, #532]	@ (8003d4c <HAL_UART_IRQHandler+0x298>)
 8003b38:	4013      	ands	r3, r2
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	f000 810a 	beq.w	8003d54 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003b40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b44:	f003 0301 	and.w	r3, r3, #1
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d011      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
 8003b4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d00b      	beq.n	8003b70 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b66:	f043 0201 	orr.w	r2, r3, #1
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003b70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d011      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
 8003b7c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b80:	f003 0301 	and.w	r3, r3, #1
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d00b      	beq.n	8003ba0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	2202      	movs	r2, #2
 8003b8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003b96:	f043 0204 	orr.w	r2, r3, #4
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba4:	f003 0304 	and.w	r3, r3, #4
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d011      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
 8003bac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bb0:	f003 0301 	and.w	r3, r3, #1
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d00b      	beq.n	8003bd0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	2204      	movs	r2, #4
 8003bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003bc6:	f043 0202 	orr.w	r2, r3, #2
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003bd0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003bd4:	f003 0308 	and.w	r3, r3, #8
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d017      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bdc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003be0:	f003 0320 	and.w	r3, r3, #32
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d105      	bne.n	8003bf4 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003be8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003bec:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d00b      	beq.n	8003c0c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	2208      	movs	r2, #8
 8003bfa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c02:	f043 0208 	orr.w	r2, r3, #8
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003c0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c10:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d012      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
 8003c18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c1c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d00c      	beq.n	8003c3e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003c2c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c34:	f043 0220 	orr.w	r2, r3, #32
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	f000 8211 	beq.w	800406c <HAL_UART_IRQHandler+0x5b8>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c4a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c4e:	f003 0320 	and.w	r3, r3, #32
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d00d      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c56:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c5a:	f003 0320 	and.w	r3, r3, #32
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d007      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d003      	beq.n	8003c72 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c78:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	689b      	ldr	r3, [r3, #8]
 8003c82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c86:	2b40      	cmp	r3, #64	@ 0x40
 8003c88:	d005      	beq.n	8003c96 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003c8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003c8e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d04f      	beq.n	8003d36 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 fe6e 	bl	8004978 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	689b      	ldr	r3, [r3, #8]
 8003ca2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca6:	2b40      	cmp	r3, #64	@ 0x40
 8003ca8:	d141      	bne.n	8003d2e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	3308      	adds	r3, #8
 8003cb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003cb8:	e853 3f00 	ldrex	r3, [r3]
 8003cbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003cc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003cc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003cc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	3308      	adds	r3, #8
 8003cd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003cd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003cda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003ce2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003ce6:	e841 2300 	strex	r3, r2, [r1]
 8003cea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003cee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d1d9      	bne.n	8003caa <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d013      	beq.n	8003d26 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d02:	4a13      	ldr	r2, [pc, #76]	@ (8003d50 <HAL_UART_IRQHandler+0x29c>)
 8003d04:	635a      	str	r2, [r3, #52]	@ 0x34

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	f7fd fd6f 	bl	80017ee <HAL_DMA_Abort_IT>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d017      	beq.n	8003d46 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003d20:	4610      	mov	r0, r2
 8003d22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d24:	e00f      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f9be 	bl	80040a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d2c:	e00b      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f9ba 	bl	80040a8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d34:	e007      	b.n	8003d46 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003d36:	6878      	ldr	r0, [r7, #4]
 8003d38:	f000 f9b6 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2200      	movs	r2, #0
 8003d40:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003d44:	e192      	b.n	800406c <HAL_UART_IRQHandler+0x5b8>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d46:	bf00      	nop
    return;
 8003d48:	e190      	b.n	800406c <HAL_UART_IRQHandler+0x5b8>
 8003d4a:	bf00      	nop
 8003d4c:	04000120 	.word	0x04000120
 8003d50:	08004c23 	.word	0x08004c23

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	f040 814b 	bne.w	8003ff4 <HAL_UART_IRQHandler+0x540>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003d5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d62:	f003 0310 	and.w	r3, r3, #16
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	f000 8144 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x540>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003d6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d70:	f003 0310 	and.w	r3, r3, #16
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	f000 813d 	beq.w	8003ff4 <HAL_UART_IRQHandler+0x540>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	2210      	movs	r2, #16
 8003d80:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003d8c:	2b40      	cmp	r3, #64	@ 0x40
 8003d8e:	f040 80b5 	bne.w	8003efc <HAL_UART_IRQHandler+0x448>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	685b      	ldr	r3, [r3, #4]
 8003d9a:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003d9e:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	f000 8164 	beq.w	8004070 <HAL_UART_IRQHandler+0x5bc>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003dae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003db2:	429a      	cmp	r2, r3
 8003db4:	f080 815c 	bcs.w	8004070 <HAL_UART_IRQHandler+0x5bc>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003dbe:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	f000 8086 	beq.w	8003eda <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003dda:	e853 3f00 	ldrex	r3, [r3]
 8003dde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003de2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003de6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003dea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	461a      	mov	r2, r3
 8003df4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003df8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003dfc:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003e04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003e08:	e841 2300 	strex	r3, r2, [r1]
 8003e0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003e10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1da      	bne.n	8003dce <HAL_UART_IRQHandler+0x31a>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	3308      	adds	r3, #8
 8003e1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003e22:	e853 3f00 	ldrex	r3, [r3]
 8003e26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003e28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003e2a:	f023 0301 	bic.w	r3, r3, #1
 8003e2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	3308      	adds	r3, #8
 8003e38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003e3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003e40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003e44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003e48:	e841 2300 	strex	r3, r2, [r1]
 8003e4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003e4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d1e1      	bne.n	8003e18 <HAL_UART_IRQHandler+0x364>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	3308      	adds	r3, #8
 8003e5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003e5e:	e853 3f00 	ldrex	r3, [r3]
 8003e62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003e64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003e66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003e6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	3308      	adds	r3, #8
 8003e74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003e78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003e7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003e7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003e80:	e841 2300 	strex	r3, r2, [r1]
 8003e84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003e86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d1e3      	bne.n	8003e54 <HAL_UART_IRQHandler+0x3a0>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2220      	movs	r2, #32
 8003e90:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2200      	movs	r2, #0
 8003e98:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003ea2:	e853 3f00 	ldrex	r3, [r3]
 8003ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003ea8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003eaa:	f023 0310 	bic.w	r3, r3, #16
 8003eae:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003ebc:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003ebe:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003ec2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003ec4:	e841 2300 	strex	r3, r2, [r1]
 8003ec8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003eca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d1e4      	bne.n	8003e9a <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	f7fd fc4c 	bl	8001772 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2202      	movs	r2, #2
 8003ede:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003eec:	b29b      	uxth	r3, r3
 8003eee:	1ad3      	subs	r3, r2, r3
 8003ef0:	b29b      	uxth	r3, r3
 8003ef2:	4619      	mov	r1, r3
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f000 f8e1 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003efa:	e0b9      	b.n	8004070 <HAL_UART_IRQHandler+0x5bc>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f08:	b29b      	uxth	r3, r3
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8003f16:	b29b      	uxth	r3, r3
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	f000 80ab 	beq.w	8004074 <HAL_UART_IRQHandler+0x5c0>
          && (nb_rx_data > 0U))
 8003f1e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80a6 	beq.w	8004074 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003f30:	e853 3f00 	ldrex	r3, [r3]
 8003f34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003f36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003f38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003f3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	461a      	mov	r2, r3
 8003f46:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8003f4a:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f4c:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003f50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003f52:	e841 2300 	strex	r3, r2, [r1]
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003f58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d1e4      	bne.n	8003f28 <HAL_UART_IRQHandler+0x474>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	3308      	adds	r3, #8
 8003f64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f68:	e853 3f00 	ldrex	r3, [r3]
 8003f6c:	623b      	str	r3, [r7, #32]
   return(result);
 8003f6e:	6a3b      	ldr	r3, [r7, #32]
 8003f70:	f023 0301 	bic.w	r3, r3, #1
 8003f74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	3308      	adds	r3, #8
 8003f7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003f82:	633a      	str	r2, [r7, #48]	@ 0x30
 8003f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003f88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003f8a:	e841 2300 	strex	r3, r2, [r1]
 8003f8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1e3      	bne.n	8003f5e <HAL_UART_IRQHandler+0x4aa>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2220      	movs	r2, #32
 8003f9a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	60fb      	str	r3, [r7, #12]
   return(result);
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0310 	bic.w	r3, r3, #16
 8003fbe:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003fcc:	61fb      	str	r3, [r7, #28]
 8003fce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fd0:	69b9      	ldr	r1, [r7, #24]
 8003fd2:	69fa      	ldr	r2, [r7, #28]
 8003fd4:	e841 2300 	strex	r3, r2, [r1]
 8003fd8:	617b      	str	r3, [r7, #20]
   return(result);
 8003fda:	697b      	ldr	r3, [r7, #20]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d1e4      	bne.n	8003faa <HAL_UART_IRQHandler+0x4f6>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2202      	movs	r2, #2
 8003fe4:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003fe6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003fea:	4619      	mov	r1, r3
 8003fec:	6878      	ldr	r0, [r7, #4]
 8003fee:	f000 f865 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003ff2:	e03f      	b.n	8004074 <HAL_UART_IRQHandler+0x5c0>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ff8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d00e      	beq.n	800401e <HAL_UART_IRQHandler+0x56a>
 8004000:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004004:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004008:	2b00      	cmp	r3, #0
 800400a:	d008      	beq.n	800401e <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004014:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fe43 	bl	8004ca2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800401c:	e02d      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004022:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004026:	2b00      	cmp	r3, #0
 8004028:	d00e      	beq.n	8004048 <HAL_UART_IRQHandler+0x594>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800402a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800402e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004032:	2b00      	cmp	r3, #0
 8004034:	d008      	beq.n	8004048 <HAL_UART_IRQHandler+0x594>
  {
    if (huart->TxISR != NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800403a:	2b00      	cmp	r3, #0
 800403c:	d01c      	beq.n	8004078 <HAL_UART_IRQHandler+0x5c4>
    {
      huart->TxISR(huart);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004042:	6878      	ldr	r0, [r7, #4]
 8004044:	4798      	blx	r3
    }
    return;
 8004046:	e017      	b.n	8004078 <HAL_UART_IRQHandler+0x5c4>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8004048:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004050:	2b00      	cmp	r3, #0
 8004052:	d012      	beq.n	800407a <HAL_UART_IRQHandler+0x5c6>
 8004054:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800405c:	2b00      	cmp	r3, #0
 800405e:	d00c      	beq.n	800407a <HAL_UART_IRQHandler+0x5c6>
  {
    UART_EndTransmit_IT(huart);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fdf4 	bl	8004c4e <UART_EndTransmit_IT>
    return;
 8004066:	e008      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004068:	bf00      	nop
 800406a:	e006      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
    return;
 800406c:	bf00      	nop
 800406e:	e004      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004070:	bf00      	nop
 8004072:	e002      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
      return;
 8004074:	bf00      	nop
 8004076:	e000      	b.n	800407a <HAL_UART_IRQHandler+0x5c6>
    return;
 8004078:	bf00      	nop
  }

}
 800407a:	37e8      	adds	r7, #232	@ 0xe8
 800407c:	46bd      	mov	sp, r7
 800407e:	bd80      	pop	{r7, pc}

08004080 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004080:	b480      	push	{r7}
 8004082:	b083      	sub	sp, #12
 8004084:	af00      	add	r7, sp, #0
 8004086:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8004088:	bf00      	nop
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8004094:	b480      	push	{r7}
 8004096:	b083      	sub	sp, #12
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr

080040a8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80040a8:	b480      	push	{r7}
 80040aa:	b083      	sub	sp, #12
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80040b0:	bf00      	nop
 80040b2:	370c      	adds	r7, #12
 80040b4:	46bd      	mov	sp, r7
 80040b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ba:	4770      	bx	lr

080040bc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80040bc:	b480      	push	{r7}
 80040be:	b083      	sub	sp, #12
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	6078      	str	r0, [r7, #4]
 80040c4:	460b      	mov	r3, r1
 80040c6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80040c8:	bf00      	nop
 80040ca:	370c      	adds	r7, #12
 80040cc:	46bd      	mov	sp, r7
 80040ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d2:	4770      	bx	lr

080040d4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	b088      	sub	sp, #32
 80040d8:	af00      	add	r7, sp, #0
 80040da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80040dc:	2300      	movs	r3, #0
 80040de:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	691b      	ldr	r3, [r3, #16]
 80040e8:	431a      	orrs	r2, r3
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	695b      	ldr	r3, [r3, #20]
 80040ee:	431a      	orrs	r2, r3
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	69db      	ldr	r3, [r3, #28]
 80040f4:	4313      	orrs	r3, r2
 80040f6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	4b92      	ldr	r3, [pc, #584]	@ (8004348 <UART_SetConfig+0x274>)
 8004100:	4013      	ands	r3, r2
 8004102:	687a      	ldr	r2, [r7, #4]
 8004104:	6812      	ldr	r2, [r2, #0]
 8004106:	6979      	ldr	r1, [r7, #20]
 8004108:	430b      	orrs	r3, r1
 800410a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	685b      	ldr	r3, [r3, #4]
 8004112:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	68da      	ldr	r2, [r3, #12]
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	430a      	orrs	r2, r1
 8004120:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	699b      	ldr	r3, [r3, #24]
 8004126:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6a1b      	ldr	r3, [r3, #32]
 800412c:	697a      	ldr	r2, [r7, #20]
 800412e:	4313      	orrs	r3, r2
 8004130:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	689b      	ldr	r3, [r3, #8]
 8004138:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	697a      	ldr	r2, [r7, #20]
 8004142:	430a      	orrs	r2, r1
 8004144:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a80      	ldr	r2, [pc, #512]	@ (800434c <UART_SetConfig+0x278>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d120      	bne.n	8004192 <UART_SetConfig+0xbe>
 8004150:	4b7f      	ldr	r3, [pc, #508]	@ (8004350 <UART_SetConfig+0x27c>)
 8004152:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004154:	f003 0303 	and.w	r3, r3, #3
 8004158:	2b03      	cmp	r3, #3
 800415a:	d817      	bhi.n	800418c <UART_SetConfig+0xb8>
 800415c:	a201      	add	r2, pc, #4	@ (adr r2, 8004164 <UART_SetConfig+0x90>)
 800415e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004162:	bf00      	nop
 8004164:	08004175 	.word	0x08004175
 8004168:	08004181 	.word	0x08004181
 800416c:	08004187 	.word	0x08004187
 8004170:	0800417b 	.word	0x0800417b
 8004174:	2301      	movs	r3, #1
 8004176:	77fb      	strb	r3, [r7, #31]
 8004178:	e0b5      	b.n	80042e6 <UART_SetConfig+0x212>
 800417a:	2302      	movs	r3, #2
 800417c:	77fb      	strb	r3, [r7, #31]
 800417e:	e0b2      	b.n	80042e6 <UART_SetConfig+0x212>
 8004180:	2304      	movs	r3, #4
 8004182:	77fb      	strb	r3, [r7, #31]
 8004184:	e0af      	b.n	80042e6 <UART_SetConfig+0x212>
 8004186:	2308      	movs	r3, #8
 8004188:	77fb      	strb	r3, [r7, #31]
 800418a:	e0ac      	b.n	80042e6 <UART_SetConfig+0x212>
 800418c:	2310      	movs	r3, #16
 800418e:	77fb      	strb	r3, [r7, #31]
 8004190:	e0a9      	b.n	80042e6 <UART_SetConfig+0x212>
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	4a6f      	ldr	r2, [pc, #444]	@ (8004354 <UART_SetConfig+0x280>)
 8004198:	4293      	cmp	r3, r2
 800419a:	d124      	bne.n	80041e6 <UART_SetConfig+0x112>
 800419c:	4b6c      	ldr	r3, [pc, #432]	@ (8004350 <UART_SetConfig+0x27c>)
 800419e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041a0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80041a4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041a8:	d011      	beq.n	80041ce <UART_SetConfig+0xfa>
 80041aa:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80041ae:	d817      	bhi.n	80041e0 <UART_SetConfig+0x10c>
 80041b0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041b4:	d011      	beq.n	80041da <UART_SetConfig+0x106>
 80041b6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80041ba:	d811      	bhi.n	80041e0 <UART_SetConfig+0x10c>
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <UART_SetConfig+0xf4>
 80041c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80041c4:	d006      	beq.n	80041d4 <UART_SetConfig+0x100>
 80041c6:	e00b      	b.n	80041e0 <UART_SetConfig+0x10c>
 80041c8:	2300      	movs	r3, #0
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e08b      	b.n	80042e6 <UART_SetConfig+0x212>
 80041ce:	2302      	movs	r3, #2
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e088      	b.n	80042e6 <UART_SetConfig+0x212>
 80041d4:	2304      	movs	r3, #4
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e085      	b.n	80042e6 <UART_SetConfig+0x212>
 80041da:	2308      	movs	r3, #8
 80041dc:	77fb      	strb	r3, [r7, #31]
 80041de:	e082      	b.n	80042e6 <UART_SetConfig+0x212>
 80041e0:	2310      	movs	r3, #16
 80041e2:	77fb      	strb	r3, [r7, #31]
 80041e4:	e07f      	b.n	80042e6 <UART_SetConfig+0x212>
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	4a5b      	ldr	r2, [pc, #364]	@ (8004358 <UART_SetConfig+0x284>)
 80041ec:	4293      	cmp	r3, r2
 80041ee:	d124      	bne.n	800423a <UART_SetConfig+0x166>
 80041f0:	4b57      	ldr	r3, [pc, #348]	@ (8004350 <UART_SetConfig+0x27c>)
 80041f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80041f4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 80041f8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80041fc:	d011      	beq.n	8004222 <UART_SetConfig+0x14e>
 80041fe:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004202:	d817      	bhi.n	8004234 <UART_SetConfig+0x160>
 8004204:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004208:	d011      	beq.n	800422e <UART_SetConfig+0x15a>
 800420a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800420e:	d811      	bhi.n	8004234 <UART_SetConfig+0x160>
 8004210:	2b00      	cmp	r3, #0
 8004212:	d003      	beq.n	800421c <UART_SetConfig+0x148>
 8004214:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004218:	d006      	beq.n	8004228 <UART_SetConfig+0x154>
 800421a:	e00b      	b.n	8004234 <UART_SetConfig+0x160>
 800421c:	2300      	movs	r3, #0
 800421e:	77fb      	strb	r3, [r7, #31]
 8004220:	e061      	b.n	80042e6 <UART_SetConfig+0x212>
 8004222:	2302      	movs	r3, #2
 8004224:	77fb      	strb	r3, [r7, #31]
 8004226:	e05e      	b.n	80042e6 <UART_SetConfig+0x212>
 8004228:	2304      	movs	r3, #4
 800422a:	77fb      	strb	r3, [r7, #31]
 800422c:	e05b      	b.n	80042e6 <UART_SetConfig+0x212>
 800422e:	2308      	movs	r3, #8
 8004230:	77fb      	strb	r3, [r7, #31]
 8004232:	e058      	b.n	80042e6 <UART_SetConfig+0x212>
 8004234:	2310      	movs	r3, #16
 8004236:	77fb      	strb	r3, [r7, #31]
 8004238:	e055      	b.n	80042e6 <UART_SetConfig+0x212>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	4a47      	ldr	r2, [pc, #284]	@ (800435c <UART_SetConfig+0x288>)
 8004240:	4293      	cmp	r3, r2
 8004242:	d124      	bne.n	800428e <UART_SetConfig+0x1ba>
 8004244:	4b42      	ldr	r3, [pc, #264]	@ (8004350 <UART_SetConfig+0x27c>)
 8004246:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004248:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 800424c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004250:	d011      	beq.n	8004276 <UART_SetConfig+0x1a2>
 8004252:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004256:	d817      	bhi.n	8004288 <UART_SetConfig+0x1b4>
 8004258:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800425c:	d011      	beq.n	8004282 <UART_SetConfig+0x1ae>
 800425e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004262:	d811      	bhi.n	8004288 <UART_SetConfig+0x1b4>
 8004264:	2b00      	cmp	r3, #0
 8004266:	d003      	beq.n	8004270 <UART_SetConfig+0x19c>
 8004268:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800426c:	d006      	beq.n	800427c <UART_SetConfig+0x1a8>
 800426e:	e00b      	b.n	8004288 <UART_SetConfig+0x1b4>
 8004270:	2300      	movs	r3, #0
 8004272:	77fb      	strb	r3, [r7, #31]
 8004274:	e037      	b.n	80042e6 <UART_SetConfig+0x212>
 8004276:	2302      	movs	r3, #2
 8004278:	77fb      	strb	r3, [r7, #31]
 800427a:	e034      	b.n	80042e6 <UART_SetConfig+0x212>
 800427c:	2304      	movs	r3, #4
 800427e:	77fb      	strb	r3, [r7, #31]
 8004280:	e031      	b.n	80042e6 <UART_SetConfig+0x212>
 8004282:	2308      	movs	r3, #8
 8004284:	77fb      	strb	r3, [r7, #31]
 8004286:	e02e      	b.n	80042e6 <UART_SetConfig+0x212>
 8004288:	2310      	movs	r3, #16
 800428a:	77fb      	strb	r3, [r7, #31]
 800428c:	e02b      	b.n	80042e6 <UART_SetConfig+0x212>
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	4a33      	ldr	r2, [pc, #204]	@ (8004360 <UART_SetConfig+0x28c>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d124      	bne.n	80042e2 <UART_SetConfig+0x20e>
 8004298:	4b2d      	ldr	r3, [pc, #180]	@ (8004350 <UART_SetConfig+0x27c>)
 800429a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800429c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 80042a0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042a4:	d011      	beq.n	80042ca <UART_SetConfig+0x1f6>
 80042a6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80042aa:	d817      	bhi.n	80042dc <UART_SetConfig+0x208>
 80042ac:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042b0:	d011      	beq.n	80042d6 <UART_SetConfig+0x202>
 80042b2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80042b6:	d811      	bhi.n	80042dc <UART_SetConfig+0x208>
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d003      	beq.n	80042c4 <UART_SetConfig+0x1f0>
 80042bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042c0:	d006      	beq.n	80042d0 <UART_SetConfig+0x1fc>
 80042c2:	e00b      	b.n	80042dc <UART_SetConfig+0x208>
 80042c4:	2300      	movs	r3, #0
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e00d      	b.n	80042e6 <UART_SetConfig+0x212>
 80042ca:	2302      	movs	r3, #2
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e00a      	b.n	80042e6 <UART_SetConfig+0x212>
 80042d0:	2304      	movs	r3, #4
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e007      	b.n	80042e6 <UART_SetConfig+0x212>
 80042d6:	2308      	movs	r3, #8
 80042d8:	77fb      	strb	r3, [r7, #31]
 80042da:	e004      	b.n	80042e6 <UART_SetConfig+0x212>
 80042dc:	2310      	movs	r3, #16
 80042de:	77fb      	strb	r3, [r7, #31]
 80042e0:	e001      	b.n	80042e6 <UART_SetConfig+0x212>
 80042e2:	2310      	movs	r3, #16
 80042e4:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	69db      	ldr	r3, [r3, #28]
 80042ea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80042ee:	d16b      	bne.n	80043c8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 80042f0:	7ffb      	ldrb	r3, [r7, #31]
 80042f2:	2b08      	cmp	r3, #8
 80042f4:	d838      	bhi.n	8004368 <UART_SetConfig+0x294>
 80042f6:	a201      	add	r2, pc, #4	@ (adr r2, 80042fc <UART_SetConfig+0x228>)
 80042f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042fc:	08004321 	.word	0x08004321
 8004300:	08004329 	.word	0x08004329
 8004304:	08004331 	.word	0x08004331
 8004308:	08004369 	.word	0x08004369
 800430c:	08004337 	.word	0x08004337
 8004310:	08004369 	.word	0x08004369
 8004314:	08004369 	.word	0x08004369
 8004318:	08004369 	.word	0x08004369
 800431c:	0800433f 	.word	0x0800433f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004320:	f7fe ff82 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 8004324:	61b8      	str	r0, [r7, #24]
        break;
 8004326:	e024      	b.n	8004372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004328:	f7fe ffa0 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 800432c:	61b8      	str	r0, [r7, #24]
        break;
 800432e:	e020      	b.n	8004372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004330:	4b0c      	ldr	r3, [pc, #48]	@ (8004364 <UART_SetConfig+0x290>)
 8004332:	61bb      	str	r3, [r7, #24]
        break;
 8004334:	e01d      	b.n	8004372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004336:	f7fe ff17 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 800433a:	61b8      	str	r0, [r7, #24]
        break;
 800433c:	e019      	b.n	8004372 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800433e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004342:	61bb      	str	r3, [r7, #24]
        break;
 8004344:	e015      	b.n	8004372 <UART_SetConfig+0x29e>
 8004346:	bf00      	nop
 8004348:	efff69f3 	.word	0xefff69f3
 800434c:	40013800 	.word	0x40013800
 8004350:	40021000 	.word	0x40021000
 8004354:	40004400 	.word	0x40004400
 8004358:	40004800 	.word	0x40004800
 800435c:	40004c00 	.word	0x40004c00
 8004360:	40005000 	.word	0x40005000
 8004364:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004368:	2300      	movs	r3, #0
 800436a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800436c:	2301      	movs	r3, #1
 800436e:	77bb      	strb	r3, [r7, #30]
        break;
 8004370:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004372:	69bb      	ldr	r3, [r7, #24]
 8004374:	2b00      	cmp	r3, #0
 8004376:	d073      	beq.n	8004460 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004378:	69bb      	ldr	r3, [r7, #24]
 800437a:	005a      	lsls	r2, r3, #1
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	441a      	add	r2, r3
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	fbb2 f3f3 	udiv	r3, r2, r3
 800438c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	2b0f      	cmp	r3, #15
 8004392:	d916      	bls.n	80043c2 <UART_SetConfig+0x2ee>
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800439a:	d212      	bcs.n	80043c2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	b29b      	uxth	r3, r3
 80043a0:	f023 030f 	bic.w	r3, r3, #15
 80043a4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	085b      	lsrs	r3, r3, #1
 80043aa:	b29b      	uxth	r3, r3
 80043ac:	f003 0307 	and.w	r3, r3, #7
 80043b0:	b29a      	uxth	r2, r3
 80043b2:	89fb      	ldrh	r3, [r7, #14]
 80043b4:	4313      	orrs	r3, r2
 80043b6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	89fa      	ldrh	r2, [r7, #14]
 80043be:	60da      	str	r2, [r3, #12]
 80043c0:	e04e      	b.n	8004460 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77bb      	strb	r3, [r7, #30]
 80043c6:	e04b      	b.n	8004460 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80043c8:	7ffb      	ldrb	r3, [r7, #31]
 80043ca:	2b08      	cmp	r3, #8
 80043cc:	d827      	bhi.n	800441e <UART_SetConfig+0x34a>
 80043ce:	a201      	add	r2, pc, #4	@ (adr r2, 80043d4 <UART_SetConfig+0x300>)
 80043d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043d4:	080043f9 	.word	0x080043f9
 80043d8:	08004401 	.word	0x08004401
 80043dc:	08004409 	.word	0x08004409
 80043e0:	0800441f 	.word	0x0800441f
 80043e4:	0800440f 	.word	0x0800440f
 80043e8:	0800441f 	.word	0x0800441f
 80043ec:	0800441f 	.word	0x0800441f
 80043f0:	0800441f 	.word	0x0800441f
 80043f4:	08004417 	.word	0x08004417
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80043f8:	f7fe ff16 	bl	8003228 <HAL_RCC_GetPCLK1Freq>
 80043fc:	61b8      	str	r0, [r7, #24]
        break;
 80043fe:	e013      	b.n	8004428 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004400:	f7fe ff34 	bl	800326c <HAL_RCC_GetPCLK2Freq>
 8004404:	61b8      	str	r0, [r7, #24]
        break;
 8004406:	e00f      	b.n	8004428 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004408:	4b1b      	ldr	r3, [pc, #108]	@ (8004478 <UART_SetConfig+0x3a4>)
 800440a:	61bb      	str	r3, [r7, #24]
        break;
 800440c:	e00c      	b.n	8004428 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800440e:	f7fe feab 	bl	8003168 <HAL_RCC_GetSysClockFreq>
 8004412:	61b8      	str	r0, [r7, #24]
        break;
 8004414:	e008      	b.n	8004428 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004416:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800441a:	61bb      	str	r3, [r7, #24]
        break;
 800441c:	e004      	b.n	8004428 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800441e:	2300      	movs	r3, #0
 8004420:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	77bb      	strb	r3, [r7, #30]
        break;
 8004426:	bf00      	nop
    }

    if (pclk != 0U)
 8004428:	69bb      	ldr	r3, [r7, #24]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d018      	beq.n	8004460 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	085a      	lsrs	r2, r3, #1
 8004434:	69bb      	ldr	r3, [r7, #24]
 8004436:	441a      	add	r2, r3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685b      	ldr	r3, [r3, #4]
 800443c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004440:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004442:	693b      	ldr	r3, [r7, #16]
 8004444:	2b0f      	cmp	r3, #15
 8004446:	d909      	bls.n	800445c <UART_SetConfig+0x388>
 8004448:	693b      	ldr	r3, [r7, #16]
 800444a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800444e:	d205      	bcs.n	800445c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	b29a      	uxth	r2, r3
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	60da      	str	r2, [r3, #12]
 800445a:	e001      	b.n	8004460 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800446c:	7fbb      	ldrb	r3, [r7, #30]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3720      	adds	r7, #32
 8004472:	46bd      	mov	sp, r7
 8004474:	bd80      	pop	{r7, pc}
 8004476:	bf00      	nop
 8004478:	007a1200 	.word	0x007a1200

0800447c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800447c:	b480      	push	{r7}
 800447e:	b083      	sub	sp, #12
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d00a      	beq.n	80044a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	685b      	ldr	r3, [r3, #4]
 8004496:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	430a      	orrs	r2, r1
 80044a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044aa:	f003 0301 	and.w	r3, r3, #1
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d00a      	beq.n	80044c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	430a      	orrs	r2, r1
 80044c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044cc:	f003 0302 	and.w	r3, r3, #2
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d00a      	beq.n	80044ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	430a      	orrs	r2, r1
 80044e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044ee:	f003 0304 	and.w	r3, r3, #4
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d00a      	beq.n	800450c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	430a      	orrs	r2, r1
 800450a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004510:	f003 0310 	and.w	r3, r3, #16
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00a      	beq.n	800452e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	689b      	ldr	r3, [r3, #8]
 800451e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	430a      	orrs	r2, r1
 800452c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	f003 0320 	and.w	r3, r3, #32
 8004536:	2b00      	cmp	r3, #0
 8004538:	d00a      	beq.n	8004550 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	430a      	orrs	r2, r1
 800454e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004554:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01a      	beq.n	8004592 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	685b      	ldr	r3, [r3, #4]
 8004562:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	430a      	orrs	r2, r1
 8004570:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004576:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800457a:	d10a      	bne.n	8004592 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	685b      	ldr	r3, [r3, #4]
 8004582:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	430a      	orrs	r2, r1
 8004590:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004596:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800459a:	2b00      	cmp	r3, #0
 800459c:	d00a      	beq.n	80045b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	430a      	orrs	r2, r1
 80045b2:	605a      	str	r2, [r3, #4]
  }
}
 80045b4:	bf00      	nop
 80045b6:	370c      	adds	r7, #12
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b098      	sub	sp, #96	@ 0x60
 80045c4:	af02      	add	r7, sp, #8
 80045c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80045d0:	f7fc ff0c 	bl	80013ec <HAL_GetTick>
 80045d4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f003 0308 	and.w	r3, r3, #8
 80045e0:	2b08      	cmp	r3, #8
 80045e2:	d12e      	bne.n	8004642 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80045e4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80045e8:	9300      	str	r3, [sp, #0]
 80045ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80045ec:	2200      	movs	r2, #0
 80045ee:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f88c 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 80045f8:	4603      	mov	r3, r0
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d021      	beq.n	8004642 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004604:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004606:	e853 3f00 	ldrex	r3, [r3]
 800460a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800460c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800460e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004612:	653b      	str	r3, [r7, #80]	@ 0x50
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	461a      	mov	r2, r3
 800461a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800461c:	647b      	str	r3, [r7, #68]	@ 0x44
 800461e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004620:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004622:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004624:	e841 2300 	strex	r3, r2, [r1]
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800462c:	2b00      	cmp	r3, #0
 800462e:	d1e6      	bne.n	80045fe <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2200      	movs	r2, #0
 800463a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800463e:	2303      	movs	r3, #3
 8004640:	e062      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	f003 0304 	and.w	r3, r3, #4
 800464c:	2b04      	cmp	r3, #4
 800464e:	d149      	bne.n	80046e4 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004650:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004654:	9300      	str	r3, [sp, #0]
 8004656:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004658:	2200      	movs	r2, #0
 800465a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800465e:	6878      	ldr	r0, [r7, #4]
 8004660:	f000 f856 	bl	8004710 <UART_WaitOnFlagUntilTimeout>
 8004664:	4603      	mov	r3, r0
 8004666:	2b00      	cmp	r3, #0
 8004668:	d03c      	beq.n	80046e4 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	623b      	str	r3, [r7, #32]
   return(result);
 8004678:	6a3b      	ldr	r3, [r7, #32]
 800467a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800467e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004688:	633b      	str	r3, [r7, #48]	@ 0x30
 800468a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004696:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	3308      	adds	r3, #8
 80046a2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	e853 3f00 	ldrex	r3, [r3]
 80046aa:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0301 	bic.w	r3, r3, #1
 80046b2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	3308      	adds	r3, #8
 80046ba:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80046bc:	61fa      	str	r2, [r7, #28]
 80046be:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046c0:	69b9      	ldr	r1, [r7, #24]
 80046c2:	69fa      	ldr	r2, [r7, #28]
 80046c4:	e841 2300 	strex	r3, r2, [r1]
 80046c8:	617b      	str	r3, [r7, #20]
   return(result);
 80046ca:	697b      	ldr	r3, [r7, #20]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d1e5      	bne.n	800469c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	2220      	movs	r2, #32
 80046d4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2200      	movs	r2, #0
 80046dc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80046e0:	2303      	movs	r3, #3
 80046e2:	e011      	b.n	8004708 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	2220      	movs	r2, #32
 80046e8:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	2220      	movs	r2, #32
 80046ee:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	2200      	movs	r2, #0
 80046f6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2200      	movs	r2, #0
 80046fc:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	2200      	movs	r2, #0
 8004702:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3758      	adds	r7, #88	@ 0x58
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}

08004710 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004710:	b580      	push	{r7, lr}
 8004712:	b084      	sub	sp, #16
 8004714:	af00      	add	r7, sp, #0
 8004716:	60f8      	str	r0, [r7, #12]
 8004718:	60b9      	str	r1, [r7, #8]
 800471a:	603b      	str	r3, [r7, #0]
 800471c:	4613      	mov	r3, r2
 800471e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004720:	e04f      	b.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004722:	69bb      	ldr	r3, [r7, #24]
 8004724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004728:	d04b      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800472a:	f7fc fe5f 	bl	80013ec <HAL_GetTick>
 800472e:	4602      	mov	r2, r0
 8004730:	683b      	ldr	r3, [r7, #0]
 8004732:	1ad3      	subs	r3, r2, r3
 8004734:	69ba      	ldr	r2, [r7, #24]
 8004736:	429a      	cmp	r2, r3
 8004738:	d302      	bcc.n	8004740 <UART_WaitOnFlagUntilTimeout+0x30>
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d101      	bne.n	8004744 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	e04e      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f003 0304 	and.w	r3, r3, #4
 800474e:	2b00      	cmp	r3, #0
 8004750:	d037      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	2b80      	cmp	r3, #128	@ 0x80
 8004756:	d034      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b40      	cmp	r3, #64	@ 0x40
 800475c:	d031      	beq.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	69db      	ldr	r3, [r3, #28]
 8004764:	f003 0308 	and.w	r3, r3, #8
 8004768:	2b08      	cmp	r3, #8
 800476a:	d110      	bne.n	800478e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	2208      	movs	r2, #8
 8004772:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004774:	68f8      	ldr	r0, [r7, #12]
 8004776:	f000 f8ff 	bl	8004978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	2208      	movs	r2, #8
 800477e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2200      	movs	r2, #0
 8004786:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800478a:	2301      	movs	r3, #1
 800478c:	e029      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	69db      	ldr	r3, [r3, #28]
 8004794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800479c:	d111      	bne.n	80047c2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80047a6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80047a8:	68f8      	ldr	r0, [r7, #12]
 80047aa:	f000 f8e5 	bl	8004978 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2220      	movs	r2, #32
 80047b2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2200      	movs	r2, #0
 80047ba:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e00f      	b.n	80047e2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	69da      	ldr	r2, [r3, #28]
 80047c8:	68bb      	ldr	r3, [r7, #8]
 80047ca:	4013      	ands	r3, r2
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	429a      	cmp	r2, r3
 80047d0:	bf0c      	ite	eq
 80047d2:	2301      	moveq	r3, #1
 80047d4:	2300      	movne	r3, #0
 80047d6:	b2db      	uxtb	r3, r3
 80047d8:	461a      	mov	r2, r3
 80047da:	79fb      	ldrb	r3, [r7, #7]
 80047dc:	429a      	cmp	r2, r3
 80047de:	d0a0      	beq.n	8004722 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80047e0:	2300      	movs	r3, #0
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3710      	adds	r7, #16
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
	...

080047ec <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80047ec:	b580      	push	{r7, lr}
 80047ee:	b096      	sub	sp, #88	@ 0x58
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	60f8      	str	r0, [r7, #12]
 80047f4:	60b9      	str	r1, [r7, #8]
 80047f6:	4613      	mov	r3, r2
 80047f8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	68ba      	ldr	r2, [r7, #8]
 80047fe:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	88fa      	ldrh	r2, [r7, #6]
 8004804:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2200      	movs	r2, #0
 800480c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	2222      	movs	r2, #34	@ 0x22
 8004814:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8004820:	68fb      	ldr	r3, [r7, #12]
 8004822:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004824:	4a3e      	ldr	r2, [pc, #248]	@ (8004920 <UART_Start_Receive_DMA+0x134>)
 8004826:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800482c:	4a3d      	ldr	r2, [pc, #244]	@ (8004924 <UART_Start_Receive_DMA+0x138>)
 800482e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8004830:	68fb      	ldr	r3, [r7, #12]
 8004832:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004834:	4a3c      	ldr	r2, [pc, #240]	@ (8004928 <UART_Start_Receive_DMA+0x13c>)
 8004836:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800483c:	2200      	movs	r2, #0
 800483e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	3324      	adds	r3, #36	@ 0x24
 800484a:	4619      	mov	r1, r3
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004850:	461a      	mov	r2, r3
 8004852:	88fb      	ldrh	r3, [r7, #6]
 8004854:	f7fc ff2e 	bl	80016b4 <HAL_DMA_Start_IT>
 8004858:	4603      	mov	r3, r0
 800485a:	2b00      	cmp	r3, #0
 800485c:	d009      	beq.n	8004872 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	2210      	movs	r2, #16
 8004862:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	2220      	movs	r2, #32
 800486a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	e051      	b.n	8004916 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d018      	beq.n	80048ac <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004880:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004882:	e853 3f00 	ldrex	r3, [r3]
 8004886:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004888:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800488a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800488e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	461a      	mov	r2, r3
 8004896:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004898:	64bb      	str	r3, [r7, #72]	@ 0x48
 800489a:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800489c:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800489e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80048a0:	e841 2300 	strex	r3, r2, [r1]
 80048a4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80048a6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d1e6      	bne.n	800487a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80048ac:	68fb      	ldr	r3, [r7, #12]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3308      	adds	r3, #8
 80048b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80048b6:	e853 3f00 	ldrex	r3, [r3]
 80048ba:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80048bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80048be:	f043 0301 	orr.w	r3, r3, #1
 80048c2:	653b      	str	r3, [r7, #80]	@ 0x50
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	3308      	adds	r3, #8
 80048ca:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80048cc:	637a      	str	r2, [r7, #52]	@ 0x34
 80048ce:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048d0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80048d2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80048d4:	e841 2300 	strex	r3, r2, [r1]
 80048d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80048da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d1e5      	bne.n	80048ac <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	3308      	adds	r3, #8
 80048e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048e8:	697b      	ldr	r3, [r7, #20]
 80048ea:	e853 3f00 	ldrex	r3, [r3]
 80048ee:	613b      	str	r3, [r7, #16]
   return(result);
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80048f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	3308      	adds	r3, #8
 80048fe:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004900:	623a      	str	r2, [r7, #32]
 8004902:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004904:	69f9      	ldr	r1, [r7, #28]
 8004906:	6a3a      	ldr	r2, [r7, #32]
 8004908:	e841 2300 	strex	r3, r2, [r1]
 800490c:	61bb      	str	r3, [r7, #24]
   return(result);
 800490e:	69bb      	ldr	r3, [r7, #24]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d1e5      	bne.n	80048e0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8004914:	2300      	movs	r3, #0
}
 8004916:	4618      	mov	r0, r3
 8004918:	3758      	adds	r7, #88	@ 0x58
 800491a:	46bd      	mov	sp, r7
 800491c:	bd80      	pop	{r7, pc}
 800491e:	bf00      	nop
 8004920:	08004a41 	.word	0x08004a41
 8004924:	08004b67 	.word	0x08004b67
 8004928:	08004ba5 	.word	0x08004ba5

0800492c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800492c:	b480      	push	{r7}
 800492e:	b089      	sub	sp, #36	@ 0x24
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	e853 3f00 	ldrex	r3, [r3]
 8004940:	60bb      	str	r3, [r7, #8]
   return(result);
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	461a      	mov	r2, r3
 8004950:	69fb      	ldr	r3, [r7, #28]
 8004952:	61bb      	str	r3, [r7, #24]
 8004954:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	69ba      	ldr	r2, [r7, #24]
 800495a:	e841 2300 	strex	r3, r2, [r1]
 800495e:	613b      	str	r3, [r7, #16]
   return(result);
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d1e6      	bne.n	8004934 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2220      	movs	r2, #32
 800496a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800496c:	bf00      	nop
 800496e:	3724      	adds	r7, #36	@ 0x24
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004978:	b480      	push	{r7}
 800497a:	b095      	sub	sp, #84	@ 0x54
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004986:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004988:	e853 3f00 	ldrex	r3, [r3]
 800498c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800498e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004990:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004994:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	461a      	mov	r2, r3
 800499c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499e:	643b      	str	r3, [r7, #64]	@ 0x40
 80049a0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80049a4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80049a6:	e841 2300 	strex	r3, r2, [r1]
 80049aa:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80049ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1e6      	bne.n	8004980 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	3308      	adds	r3, #8
 80049b8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ba:	6a3b      	ldr	r3, [r7, #32]
 80049bc:	e853 3f00 	ldrex	r3, [r3]
 80049c0:	61fb      	str	r3, [r7, #28]
   return(result);
 80049c2:	69fb      	ldr	r3, [r7, #28]
 80049c4:	f023 0301 	bic.w	r3, r3, #1
 80049c8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	3308      	adds	r3, #8
 80049d0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80049d4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80049d8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80049da:	e841 2300 	strex	r3, r2, [r1]
 80049de:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80049e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d1e5      	bne.n	80049b2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80049ea:	2b01      	cmp	r3, #1
 80049ec:	d118      	bne.n	8004a20 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049f4:	68fb      	ldr	r3, [r7, #12]
 80049f6:	e853 3f00 	ldrex	r3, [r3]
 80049fa:	60bb      	str	r3, [r7, #8]
   return(result);
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	f023 0310 	bic.w	r3, r3, #16
 8004a02:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	461a      	mov	r2, r3
 8004a0a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004a0c:	61bb      	str	r3, [r7, #24]
 8004a0e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a10:	6979      	ldr	r1, [r7, #20]
 8004a12:	69ba      	ldr	r2, [r7, #24]
 8004a14:	e841 2300 	strex	r3, r2, [r1]
 8004a18:	613b      	str	r3, [r7, #16]
   return(result);
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d1e6      	bne.n	80049ee <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2200      	movs	r2, #0
 8004a2c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004a34:	bf00      	nop
 8004a36:	3754      	adds	r7, #84	@ 0x54
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3e:	4770      	bx	lr

08004a40 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b09c      	sub	sp, #112	@ 0x70
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a4c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	d071      	beq.n	8004b3a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8004a56:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a58:	2200      	movs	r2, #0
 8004a5a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004a5e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004a66:	e853 3f00 	ldrex	r3, [r3]
 8004a6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004a6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004a6e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004a72:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004a74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004a7c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004a7e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a80:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004a82:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004a84:	e841 2300 	strex	r3, r2, [r1]
 8004a88:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004a8a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d1e6      	bne.n	8004a5e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a90:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	3308      	adds	r3, #8
 8004a96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a9a:	e853 3f00 	ldrex	r3, [r3]
 8004a9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004aa2:	f023 0301 	bic.w	r3, r3, #1
 8004aa6:	667b      	str	r3, [r7, #100]	@ 0x64
 8004aa8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	3308      	adds	r3, #8
 8004aae:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004ab0:	647a      	str	r2, [r7, #68]	@ 0x44
 8004ab2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ab4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004ab6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ab8:	e841 2300 	strex	r3, r2, [r1]
 8004abc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004abe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	d1e5      	bne.n	8004a90 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004ac4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	3308      	adds	r3, #8
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ace:	e853 3f00 	ldrex	r3, [r3]
 8004ad2:	623b      	str	r3, [r7, #32]
   return(result);
 8004ad4:	6a3b      	ldr	r3, [r7, #32]
 8004ad6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004ada:	663b      	str	r3, [r7, #96]	@ 0x60
 8004adc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004ade:	681b      	ldr	r3, [r3, #0]
 8004ae0:	3308      	adds	r3, #8
 8004ae2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8004ae4:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ae8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004aea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004aec:	e841 2300 	strex	r3, r2, [r1]
 8004af0:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004af2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1e5      	bne.n	8004ac4 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004af8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004afa:	2220      	movs	r2, #32
 8004afc:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b00:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d118      	bne.n	8004b3a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b08:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	e853 3f00 	ldrex	r3, [r3]
 8004b14:	60fb      	str	r3, [r7, #12]
   return(result);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	f023 0310 	bic.w	r3, r3, #16
 8004b1c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004b1e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	461a      	mov	r2, r3
 8004b24:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b26:	61fb      	str	r3, [r7, #28]
 8004b28:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2a:	69b9      	ldr	r1, [r7, #24]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	e841 2300 	strex	r3, r2, [r1]
 8004b32:	617b      	str	r3, [r7, #20]
   return(result);
 8004b34:	697b      	ldr	r3, [r7, #20]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d1e6      	bne.n	8004b08 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b3a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b40:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b42:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b44:	2b01      	cmp	r3, #1
 8004b46:	d107      	bne.n	8004b58 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b48:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8004b4a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b4e:	4619      	mov	r1, r3
 8004b50:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004b52:	f7ff fab3 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b56:	e002      	b.n	8004b5e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8004b58:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8004b5a:	f7fc f9a5 	bl	8000ea8 <HAL_UART_RxCpltCallback>
}
 8004b5e:	bf00      	nop
 8004b60:	3770      	adds	r7, #112	@ 0x70
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b084      	sub	sp, #16
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b72:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2201      	movs	r2, #1
 8004b78:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004b7e:	2b01      	cmp	r3, #1
 8004b80:	d109      	bne.n	8004b96 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004b88:	085b      	lsrs	r3, r3, #1
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	4619      	mov	r1, r3
 8004b8e:	68f8      	ldr	r0, [r7, #12]
 8004b90:	f7ff fa94 	bl	80040bc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8004b94:	e002      	b.n	8004b9c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 8004b96:	68f8      	ldr	r0, [r7, #12]
 8004b98:	f7ff fa7c 	bl	8004094 <HAL_UART_RxHalfCpltCallback>
}
 8004b9c:	bf00      	nop
 8004b9e:	3710      	adds	r7, #16
 8004ba0:	46bd      	mov	sp, r7
 8004ba2:	bd80      	pop	{r7, pc}

08004ba4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b086      	sub	sp, #24
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bb0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004bb6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bbe:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	689b      	ldr	r3, [r3, #8]
 8004bc6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004bca:	2b80      	cmp	r3, #128	@ 0x80
 8004bcc:	d109      	bne.n	8004be2 <UART_DMAError+0x3e>
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	2b21      	cmp	r3, #33	@ 0x21
 8004bd2:	d106      	bne.n	8004be2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	2200      	movs	r2, #0
 8004bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 8004bdc:	6978      	ldr	r0, [r7, #20]
 8004bde:	f7ff fea5 	bl	800492c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8004be2:	697b      	ldr	r3, [r7, #20]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bec:	2b40      	cmp	r3, #64	@ 0x40
 8004bee:	d109      	bne.n	8004c04 <UART_DMAError+0x60>
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b22      	cmp	r3, #34	@ 0x22
 8004bf4:	d106      	bne.n	8004c04 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8004bf6:	697b      	ldr	r3, [r7, #20]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 8004bfe:	6978      	ldr	r0, [r7, #20]
 8004c00:	f7ff feba 	bl	8004978 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8004c04:	697b      	ldr	r3, [r7, #20]
 8004c06:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004c0a:	f043 0210 	orr.w	r2, r3, #16
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c14:	6978      	ldr	r0, [r7, #20]
 8004c16:	f7ff fa47 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c1a:	bf00      	nop
 8004c1c:	3718      	adds	r7, #24
 8004c1e:	46bd      	mov	sp, r7
 8004c20:	bd80      	pop	{r7, pc}

08004c22 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004c22:	b580      	push	{r7, lr}
 8004c24:	b084      	sub	sp, #16
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c2e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	2200      	movs	r2, #0
 8004c34:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	2200      	movs	r2, #0
 8004c3c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004c40:	68f8      	ldr	r0, [r7, #12]
 8004c42:	f7ff fa31 	bl	80040a8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c46:	bf00      	nop
 8004c48:	3710      	adds	r7, #16
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}

08004c4e <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004c4e:	b580      	push	{r7, lr}
 8004c50:	b088      	sub	sp, #32
 8004c52:	af00      	add	r7, sp, #0
 8004c54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	e853 3f00 	ldrex	r3, [r3]
 8004c62:	60bb      	str	r3, [r7, #8]
   return(result);
 8004c64:	68bb      	ldr	r3, [r7, #8]
 8004c66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c6a:	61fb      	str	r3, [r7, #28]
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	461a      	mov	r2, r3
 8004c72:	69fb      	ldr	r3, [r7, #28]
 8004c74:	61bb      	str	r3, [r7, #24]
 8004c76:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c78:	6979      	ldr	r1, [r7, #20]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	e841 2300 	strex	r3, r2, [r1]
 8004c80:	613b      	str	r3, [r7, #16]
   return(result);
 8004c82:	693b      	ldr	r3, [r7, #16]
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d1e6      	bne.n	8004c56 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	2200      	movs	r2, #0
 8004c92:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004c94:	6878      	ldr	r0, [r7, #4]
 8004c96:	f7ff f9f3 	bl	8004080 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004c9a:	bf00      	nop
 8004c9c:	3720      	adds	r7, #32
 8004c9e:	46bd      	mov	sp, r7
 8004ca0:	bd80      	pop	{r7, pc}

08004ca2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004ca2:	b480      	push	{r7}
 8004ca4:	b083      	sub	sp, #12
 8004ca6:	af00      	add	r7, sp, #0
 8004ca8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8004caa:	bf00      	nop
 8004cac:	370c      	adds	r7, #12
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr

08004cb6 <memset>:
 8004cb6:	4402      	add	r2, r0
 8004cb8:	4603      	mov	r3, r0
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d100      	bne.n	8004cc0 <memset+0xa>
 8004cbe:	4770      	bx	lr
 8004cc0:	f803 1b01 	strb.w	r1, [r3], #1
 8004cc4:	e7f9      	b.n	8004cba <memset+0x4>
	...

08004cc8 <__errno>:
 8004cc8:	4b01      	ldr	r3, [pc, #4]	@ (8004cd0 <__errno+0x8>)
 8004cca:	6818      	ldr	r0, [r3, #0]
 8004ccc:	4770      	bx	lr
 8004cce:	bf00      	nop
 8004cd0:	20000030 	.word	0x20000030

08004cd4 <__libc_init_array>:
 8004cd4:	b570      	push	{r4, r5, r6, lr}
 8004cd6:	4d0d      	ldr	r5, [pc, #52]	@ (8004d0c <__libc_init_array+0x38>)
 8004cd8:	4c0d      	ldr	r4, [pc, #52]	@ (8004d10 <__libc_init_array+0x3c>)
 8004cda:	1b64      	subs	r4, r4, r5
 8004cdc:	10a4      	asrs	r4, r4, #2
 8004cde:	2600      	movs	r6, #0
 8004ce0:	42a6      	cmp	r6, r4
 8004ce2:	d109      	bne.n	8004cf8 <__libc_init_array+0x24>
 8004ce4:	4d0b      	ldr	r5, [pc, #44]	@ (8004d14 <__libc_init_array+0x40>)
 8004ce6:	4c0c      	ldr	r4, [pc, #48]	@ (8004d18 <__libc_init_array+0x44>)
 8004ce8:	f000 fa26 	bl	8005138 <_init>
 8004cec:	1b64      	subs	r4, r4, r5
 8004cee:	10a4      	asrs	r4, r4, #2
 8004cf0:	2600      	movs	r6, #0
 8004cf2:	42a6      	cmp	r6, r4
 8004cf4:	d105      	bne.n	8004d02 <__libc_init_array+0x2e>
 8004cf6:	bd70      	pop	{r4, r5, r6, pc}
 8004cf8:	f855 3b04 	ldr.w	r3, [r5], #4
 8004cfc:	4798      	blx	r3
 8004cfe:	3601      	adds	r6, #1
 8004d00:	e7ee      	b.n	8004ce0 <__libc_init_array+0xc>
 8004d02:	f855 3b04 	ldr.w	r3, [r5], #4
 8004d06:	4798      	blx	r3
 8004d08:	3601      	adds	r6, #1
 8004d0a:	e7f2      	b.n	8004cf2 <__libc_init_array+0x1e>
 8004d0c:	080051b8 	.word	0x080051b8
 8004d10:	080051b8 	.word	0x080051b8
 8004d14:	080051b8 	.word	0x080051b8
 8004d18:	080051bc 	.word	0x080051bc
 8004d1c:	00000000 	.word	0x00000000

08004d20 <exp>:
 8004d20:	b538      	push	{r3, r4, r5, lr}
 8004d22:	ed2d 8b02 	vpush	{d8}
 8004d26:	ec55 4b10 	vmov	r4, r5, d0
 8004d2a:	f000 f84d 	bl	8004dc8 <__ieee754_exp>
 8004d2e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d32:	eef0 8a60 	vmov.f32	s17, s1
 8004d36:	ec45 4b10 	vmov	d0, r4, r5
 8004d3a:	f000 f839 	bl	8004db0 <finite>
 8004d3e:	b168      	cbz	r0, 8004d5c <exp+0x3c>
 8004d40:	a317      	add	r3, pc, #92	@ (adr r3, 8004da0 <exp+0x80>)
 8004d42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d46:	4620      	mov	r0, r4
 8004d48:	4629      	mov	r1, r5
 8004d4a:	f7fb fe91 	bl	8000a70 <__aeabi_dcmpgt>
 8004d4e:	b160      	cbz	r0, 8004d6a <exp+0x4a>
 8004d50:	f7ff ffba 	bl	8004cc8 <__errno>
 8004d54:	ed9f 8b0e 	vldr	d8, [pc, #56]	@ 8004d90 <exp+0x70>
 8004d58:	2322      	movs	r3, #34	@ 0x22
 8004d5a:	6003      	str	r3, [r0, #0]
 8004d5c:	eeb0 0a48 	vmov.f32	s0, s16
 8004d60:	eef0 0a68 	vmov.f32	s1, s17
 8004d64:	ecbd 8b02 	vpop	{d8}
 8004d68:	bd38      	pop	{r3, r4, r5, pc}
 8004d6a:	a30f      	add	r3, pc, #60	@ (adr r3, 8004da8 <exp+0x88>)
 8004d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d70:	4620      	mov	r0, r4
 8004d72:	4629      	mov	r1, r5
 8004d74:	f7fb fe5e 	bl	8000a34 <__aeabi_dcmplt>
 8004d78:	2800      	cmp	r0, #0
 8004d7a:	d0ef      	beq.n	8004d5c <exp+0x3c>
 8004d7c:	f7ff ffa4 	bl	8004cc8 <__errno>
 8004d80:	2322      	movs	r3, #34	@ 0x22
 8004d82:	ed9f 8b05 	vldr	d8, [pc, #20]	@ 8004d98 <exp+0x78>
 8004d86:	6003      	str	r3, [r0, #0]
 8004d88:	e7e8      	b.n	8004d5c <exp+0x3c>
 8004d8a:	bf00      	nop
 8004d8c:	f3af 8000 	nop.w
 8004d90:	00000000 	.word	0x00000000
 8004d94:	7ff00000 	.word	0x7ff00000
	...
 8004da0:	fefa39ef 	.word	0xfefa39ef
 8004da4:	40862e42 	.word	0x40862e42
 8004da8:	d52d3051 	.word	0xd52d3051
 8004dac:	c0874910 	.word	0xc0874910

08004db0 <finite>:
 8004db0:	b082      	sub	sp, #8
 8004db2:	ed8d 0b00 	vstr	d0, [sp]
 8004db6:	9801      	ldr	r0, [sp, #4]
 8004db8:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 8004dbc:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 8004dc0:	0fc0      	lsrs	r0, r0, #31
 8004dc2:	b002      	add	sp, #8
 8004dc4:	4770      	bx	lr
	...

08004dc8 <__ieee754_exp>:
 8004dc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004dcc:	ec55 4b10 	vmov	r4, r5, d0
 8004dd0:	49b1      	ldr	r1, [pc, #708]	@ (8005098 <__ieee754_exp+0x2d0>)
 8004dd2:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 8004dd6:	428a      	cmp	r2, r1
 8004dd8:	ea4f 76d5 	mov.w	r6, r5, lsr #31
 8004ddc:	d936      	bls.n	8004e4c <__ieee754_exp+0x84>
 8004dde:	49af      	ldr	r1, [pc, #700]	@ (800509c <__ieee754_exp+0x2d4>)
 8004de0:	428a      	cmp	r2, r1
 8004de2:	d914      	bls.n	8004e0e <__ieee754_exp+0x46>
 8004de4:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8004de8:	4323      	orrs	r3, r4
 8004dea:	4622      	mov	r2, r4
 8004dec:	d007      	beq.n	8004dfe <__ieee754_exp+0x36>
 8004dee:	462b      	mov	r3, r5
 8004df0:	4620      	mov	r0, r4
 8004df2:	4629      	mov	r1, r5
 8004df4:	f7fb f9f6 	bl	80001e4 <__adddf3>
 8004df8:	4604      	mov	r4, r0
 8004dfa:	460d      	mov	r5, r1
 8004dfc:	e002      	b.n	8004e04 <__ieee754_exp+0x3c>
 8004dfe:	2e00      	cmp	r6, #0
 8004e00:	f040 8118 	bne.w	8005034 <__ieee754_exp+0x26c>
 8004e04:	ec45 4b10 	vmov	d0, r4, r5
 8004e08:	b004      	add	sp, #16
 8004e0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e0e:	a38c      	add	r3, pc, #560	@ (adr r3, 8005040 <__ieee754_exp+0x278>)
 8004e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e14:	4620      	mov	r0, r4
 8004e16:	4629      	mov	r1, r5
 8004e18:	f7fb fe2a 	bl	8000a70 <__aeabi_dcmpgt>
 8004e1c:	4607      	mov	r7, r0
 8004e1e:	b128      	cbz	r0, 8004e2c <__ieee754_exp+0x64>
 8004e20:	2000      	movs	r0, #0
 8004e22:	b004      	add	sp, #16
 8004e24:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e28:	f000 b97e 	b.w	8005128 <__math_oflow>
 8004e2c:	a386      	add	r3, pc, #536	@ (adr r3, 8005048 <__ieee754_exp+0x280>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	4620      	mov	r0, r4
 8004e34:	4629      	mov	r1, r5
 8004e36:	f7fb fdfd 	bl	8000a34 <__aeabi_dcmplt>
 8004e3a:	2800      	cmp	r0, #0
 8004e3c:	f000 8087 	beq.w	8004f4e <__ieee754_exp+0x186>
 8004e40:	4638      	mov	r0, r7
 8004e42:	b004      	add	sp, #16
 8004e44:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004e48:	f000 b966 	b.w	8005118 <__math_uflow>
 8004e4c:	4b94      	ldr	r3, [pc, #592]	@ (80050a0 <__ieee754_exp+0x2d8>)
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	f240 80a9 	bls.w	8004fa6 <__ieee754_exp+0x1de>
 8004e54:	4b93      	ldr	r3, [pc, #588]	@ (80050a4 <__ieee754_exp+0x2dc>)
 8004e56:	429a      	cmp	r2, r3
 8004e58:	d879      	bhi.n	8004f4e <__ieee754_exp+0x186>
 8004e5a:	4b93      	ldr	r3, [pc, #588]	@ (80050a8 <__ieee754_exp+0x2e0>)
 8004e5c:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8004e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	f7fb f9ba 	bl	80001e0 <__aeabi_dsub>
 8004e6c:	4b8f      	ldr	r3, [pc, #572]	@ (80050ac <__ieee754_exp+0x2e4>)
 8004e6e:	00f7      	lsls	r7, r6, #3
 8004e70:	443b      	add	r3, r7
 8004e72:	ed93 7b00 	vldr	d7, [r3]
 8004e76:	ed8d 7b00 	vstr	d7, [sp]
 8004e7a:	f1c6 0a01 	rsb	sl, r6, #1
 8004e7e:	4680      	mov	r8, r0
 8004e80:	4689      	mov	r9, r1
 8004e82:	ebaa 0a06 	sub.w	sl, sl, r6
 8004e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e8a:	4640      	mov	r0, r8
 8004e8c:	4649      	mov	r1, r9
 8004e8e:	f7fb f9a7 	bl	80001e0 <__aeabi_dsub>
 8004e92:	4604      	mov	r4, r0
 8004e94:	460d      	mov	r5, r1
 8004e96:	4622      	mov	r2, r4
 8004e98:	462b      	mov	r3, r5
 8004e9a:	4620      	mov	r0, r4
 8004e9c:	4629      	mov	r1, r5
 8004e9e:	f7fb fb57 	bl	8000550 <__aeabi_dmul>
 8004ea2:	a36b      	add	r3, pc, #428	@ (adr r3, 8005050 <__ieee754_exp+0x288>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	f7fb fb50 	bl	8000550 <__aeabi_dmul>
 8004eb0:	a369      	add	r3, pc, #420	@ (adr r3, 8005058 <__ieee754_exp+0x290>)
 8004eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb6:	f7fb f993 	bl	80001e0 <__aeabi_dsub>
 8004eba:	4632      	mov	r2, r6
 8004ebc:	463b      	mov	r3, r7
 8004ebe:	f7fb fb47 	bl	8000550 <__aeabi_dmul>
 8004ec2:	a367      	add	r3, pc, #412	@ (adr r3, 8005060 <__ieee754_exp+0x298>)
 8004ec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec8:	f7fb f98c 	bl	80001e4 <__adddf3>
 8004ecc:	4632      	mov	r2, r6
 8004ece:	463b      	mov	r3, r7
 8004ed0:	f7fb fb3e 	bl	8000550 <__aeabi_dmul>
 8004ed4:	a364      	add	r3, pc, #400	@ (adr r3, 8005068 <__ieee754_exp+0x2a0>)
 8004ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eda:	f7fb f981 	bl	80001e0 <__aeabi_dsub>
 8004ede:	4632      	mov	r2, r6
 8004ee0:	463b      	mov	r3, r7
 8004ee2:	f7fb fb35 	bl	8000550 <__aeabi_dmul>
 8004ee6:	a362      	add	r3, pc, #392	@ (adr r3, 8005070 <__ieee754_exp+0x2a8>)
 8004ee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eec:	f7fb f97a 	bl	80001e4 <__adddf3>
 8004ef0:	4632      	mov	r2, r6
 8004ef2:	463b      	mov	r3, r7
 8004ef4:	f7fb fb2c 	bl	8000550 <__aeabi_dmul>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4620      	mov	r0, r4
 8004efe:	4629      	mov	r1, r5
 8004f00:	f7fb f96e 	bl	80001e0 <__aeabi_dsub>
 8004f04:	4602      	mov	r2, r0
 8004f06:	460b      	mov	r3, r1
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4620      	mov	r0, r4
 8004f0e:	4629      	mov	r1, r5
 8004f10:	f7fb fb1e 	bl	8000550 <__aeabi_dmul>
 8004f14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f18:	f1ba 0f00 	cmp.w	sl, #0
 8004f1c:	d15c      	bne.n	8004fd8 <__ieee754_exp+0x210>
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8004f24:	4630      	mov	r0, r6
 8004f26:	4639      	mov	r1, r7
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_dsub>
 8004f2c:	4602      	mov	r2, r0
 8004f2e:	460b      	mov	r3, r1
 8004f30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f34:	f7fb fc36 	bl	80007a4 <__aeabi_ddiv>
 8004f38:	4622      	mov	r2, r4
 8004f3a:	462b      	mov	r3, r5
 8004f3c:	f7fb f950 	bl	80001e0 <__aeabi_dsub>
 8004f40:	4602      	mov	r2, r0
 8004f42:	460b      	mov	r3, r1
 8004f44:	2000      	movs	r0, #0
 8004f46:	495a      	ldr	r1, [pc, #360]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004f48:	f7fb f94a 	bl	80001e0 <__aeabi_dsub>
 8004f4c:	e754      	b.n	8004df8 <__ieee754_exp+0x30>
 8004f4e:	4b59      	ldr	r3, [pc, #356]	@ (80050b4 <__ieee754_exp+0x2ec>)
 8004f50:	4620      	mov	r0, r4
 8004f52:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004f56:	4629      	mov	r1, r5
 8004f58:	a347      	add	r3, pc, #284	@ (adr r3, 8005078 <__ieee754_exp+0x2b0>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb faf7 	bl	8000550 <__aeabi_dmul>
 8004f62:	e9d6 2300 	ldrd	r2, r3, [r6]
 8004f66:	f7fb f93d 	bl	80001e4 <__adddf3>
 8004f6a:	f7fb fd8b 	bl	8000a84 <__aeabi_d2iz>
 8004f6e:	4682      	mov	sl, r0
 8004f70:	f7fb fa84 	bl	800047c <__aeabi_i2d>
 8004f74:	a342      	add	r3, pc, #264	@ (adr r3, 8005080 <__ieee754_exp+0x2b8>)
 8004f76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7a:	4606      	mov	r6, r0
 8004f7c:	460f      	mov	r7, r1
 8004f7e:	f7fb fae7 	bl	8000550 <__aeabi_dmul>
 8004f82:	4602      	mov	r2, r0
 8004f84:	460b      	mov	r3, r1
 8004f86:	4620      	mov	r0, r4
 8004f88:	4629      	mov	r1, r5
 8004f8a:	f7fb f929 	bl	80001e0 <__aeabi_dsub>
 8004f8e:	a33e      	add	r3, pc, #248	@ (adr r3, 8005088 <__ieee754_exp+0x2c0>)
 8004f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f94:	4680      	mov	r8, r0
 8004f96:	4689      	mov	r9, r1
 8004f98:	4630      	mov	r0, r6
 8004f9a:	4639      	mov	r1, r7
 8004f9c:	f7fb fad8 	bl	8000550 <__aeabi_dmul>
 8004fa0:	e9cd 0100 	strd	r0, r1, [sp]
 8004fa4:	e76f      	b.n	8004e86 <__ieee754_exp+0xbe>
 8004fa6:	4b44      	ldr	r3, [pc, #272]	@ (80050b8 <__ieee754_exp+0x2f0>)
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d810      	bhi.n	8004fce <__ieee754_exp+0x206>
 8004fac:	a338      	add	r3, pc, #224	@ (adr r3, 8005090 <__ieee754_exp+0x2c8>)
 8004fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb2:	4620      	mov	r0, r4
 8004fb4:	4629      	mov	r1, r5
 8004fb6:	f7fb f915 	bl	80001e4 <__adddf3>
 8004fba:	4b3d      	ldr	r3, [pc, #244]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f7fb fd57 	bl	8000a70 <__aeabi_dcmpgt>
 8004fc2:	b138      	cbz	r0, 8004fd4 <__ieee754_exp+0x20c>
 8004fc4:	4b3a      	ldr	r3, [pc, #232]	@ (80050b0 <__ieee754_exp+0x2e8>)
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	4620      	mov	r0, r4
 8004fca:	4629      	mov	r1, r5
 8004fcc:	e712      	b.n	8004df4 <__ieee754_exp+0x2c>
 8004fce:	f04f 0a00 	mov.w	sl, #0
 8004fd2:	e760      	b.n	8004e96 <__ieee754_exp+0xce>
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	e75e      	b.n	8004e96 <__ieee754_exp+0xce>
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8004fe2:	f7fb f8fd 	bl	80001e0 <__aeabi_dsub>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	460b      	mov	r3, r1
 8004fea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fee:	f7fb fbd9 	bl	80007a4 <__aeabi_ddiv>
 8004ff2:	4602      	mov	r2, r0
 8004ff4:	460b      	mov	r3, r1
 8004ff6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffa:	f7fb f8f1 	bl	80001e0 <__aeabi_dsub>
 8004ffe:	4642      	mov	r2, r8
 8005000:	464b      	mov	r3, r9
 8005002:	f7fb f8ed 	bl	80001e0 <__aeabi_dsub>
 8005006:	4602      	mov	r2, r0
 8005008:	460b      	mov	r3, r1
 800500a:	2000      	movs	r0, #0
 800500c:	4928      	ldr	r1, [pc, #160]	@ (80050b0 <__ieee754_exp+0x2e8>)
 800500e:	f7fb f8e7 	bl	80001e0 <__aeabi_dsub>
 8005012:	f46f 727f 	mvn.w	r2, #1020	@ 0x3fc
 8005016:	4592      	cmp	sl, r2
 8005018:	db02      	blt.n	8005020 <__ieee754_exp+0x258>
 800501a:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 800501e:	e6eb      	b.n	8004df8 <__ieee754_exp+0x30>
 8005020:	f50a 7a7a 	add.w	sl, sl, #1000	@ 0x3e8
 8005024:	eb01 510a 	add.w	r1, r1, sl, lsl #20
 8005028:	2200      	movs	r2, #0
 800502a:	f04f 73b8 	mov.w	r3, #24117248	@ 0x1700000
 800502e:	f7fb fa8f 	bl	8000550 <__aeabi_dmul>
 8005032:	e6e1      	b.n	8004df8 <__ieee754_exp+0x30>
 8005034:	2400      	movs	r4, #0
 8005036:	2500      	movs	r5, #0
 8005038:	e6e4      	b.n	8004e04 <__ieee754_exp+0x3c>
 800503a:	bf00      	nop
 800503c:	f3af 8000 	nop.w
 8005040:	fefa39ef 	.word	0xfefa39ef
 8005044:	40862e42 	.word	0x40862e42
 8005048:	d52d3051 	.word	0xd52d3051
 800504c:	c0874910 	.word	0xc0874910
 8005050:	72bea4d0 	.word	0x72bea4d0
 8005054:	3e663769 	.word	0x3e663769
 8005058:	c5d26bf1 	.word	0xc5d26bf1
 800505c:	3ebbbd41 	.word	0x3ebbbd41
 8005060:	af25de2c 	.word	0xaf25de2c
 8005064:	3f11566a 	.word	0x3f11566a
 8005068:	16bebd93 	.word	0x16bebd93
 800506c:	3f66c16c 	.word	0x3f66c16c
 8005070:	5555553e 	.word	0x5555553e
 8005074:	3fc55555 	.word	0x3fc55555
 8005078:	652b82fe 	.word	0x652b82fe
 800507c:	3ff71547 	.word	0x3ff71547
 8005080:	fee00000 	.word	0xfee00000
 8005084:	3fe62e42 	.word	0x3fe62e42
 8005088:	35793c76 	.word	0x35793c76
 800508c:	3dea39ef 	.word	0x3dea39ef
 8005090:	8800759c 	.word	0x8800759c
 8005094:	7e37e43c 	.word	0x7e37e43c
 8005098:	40862e41 	.word	0x40862e41
 800509c:	7fefffff 	.word	0x7fefffff
 80050a0:	3fd62e42 	.word	0x3fd62e42
 80050a4:	3ff0a2b1 	.word	0x3ff0a2b1
 80050a8:	08005198 	.word	0x08005198
 80050ac:	08005188 	.word	0x08005188
 80050b0:	3ff00000 	.word	0x3ff00000
 80050b4:	080051a8 	.word	0x080051a8
 80050b8:	3defffff 	.word	0x3defffff

080050bc <with_errno>:
 80050bc:	b510      	push	{r4, lr}
 80050be:	ed2d 8b02 	vpush	{d8}
 80050c2:	eeb0 8a40 	vmov.f32	s16, s0
 80050c6:	eef0 8a60 	vmov.f32	s17, s1
 80050ca:	4604      	mov	r4, r0
 80050cc:	f7ff fdfc 	bl	8004cc8 <__errno>
 80050d0:	eeb0 0a48 	vmov.f32	s0, s16
 80050d4:	eef0 0a68 	vmov.f32	s1, s17
 80050d8:	ecbd 8b02 	vpop	{d8}
 80050dc:	6004      	str	r4, [r0, #0]
 80050de:	bd10      	pop	{r4, pc}

080050e0 <xflow>:
 80050e0:	4603      	mov	r3, r0
 80050e2:	b507      	push	{r0, r1, r2, lr}
 80050e4:	ec51 0b10 	vmov	r0, r1, d0
 80050e8:	b183      	cbz	r3, 800510c <xflow+0x2c>
 80050ea:	4602      	mov	r2, r0
 80050ec:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80050f0:	e9cd 2300 	strd	r2, r3, [sp]
 80050f4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050f8:	f7fb fa2a 	bl	8000550 <__aeabi_dmul>
 80050fc:	ec41 0b10 	vmov	d0, r0, r1
 8005100:	2022      	movs	r0, #34	@ 0x22
 8005102:	b003      	add	sp, #12
 8005104:	f85d eb04 	ldr.w	lr, [sp], #4
 8005108:	f7ff bfd8 	b.w	80050bc <with_errno>
 800510c:	4602      	mov	r2, r0
 800510e:	460b      	mov	r3, r1
 8005110:	e7ee      	b.n	80050f0 <xflow+0x10>
 8005112:	0000      	movs	r0, r0
 8005114:	0000      	movs	r0, r0
	...

08005118 <__math_uflow>:
 8005118:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005120 <__math_uflow+0x8>
 800511c:	f7ff bfe0 	b.w	80050e0 <xflow>
 8005120:	00000000 	.word	0x00000000
 8005124:	10000000 	.word	0x10000000

08005128 <__math_oflow>:
 8005128:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8005130 <__math_oflow+0x8>
 800512c:	f7ff bfd8 	b.w	80050e0 <xflow>
 8005130:	00000000 	.word	0x00000000
 8005134:	70000000 	.word	0x70000000

08005138 <_init>:
 8005138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800513a:	bf00      	nop
 800513c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800513e:	bc08      	pop	{r3}
 8005140:	469e      	mov	lr, r3
 8005142:	4770      	bx	lr

08005144 <_fini>:
 8005144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005146:	bf00      	nop
 8005148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800514a:	bc08      	pop	{r3}
 800514c:	469e      	mov	lr, r3
 800514e:	4770      	bx	lr


mnistNN_NUCLEO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a94  08000194  08000194  00001194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000f5a0  08003c28  08003c28  00004c28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080131c8  080131c8  0001505c  2**0
                  CONTENTS
  4 .ARM          00000000  080131c8  080131c8  0001505c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080131c8  080131c8  0001505c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080131c8  080131c8  000141c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080131cc  080131cc  000141cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080131d0  00015000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0001505c  2**0
                  CONTENTS
 10 .bss          00000ed4  2000005c  2000005c  0001505c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000f30  20000f30  0001505c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0001505c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000997b  00000000  00000000  0001508c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001889  00000000  00000000  0001ea07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000730  00000000  00000000  00020290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000583  00000000  00000000  000209c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f88f  00000000  00000000  00020f43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a284  00000000  00000000  000407d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bff51  00000000  00000000  0004aa56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010a9a7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001ea8  00000000  00000000  0010a9ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000059  00000000  00000000  0010c894  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	@ (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000005c 	.word	0x2000005c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003c10 	.word	0x08003c10

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	@ (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	@ (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	@ (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000060 	.word	0x20000060
 80001d0:	08003c10 	.word	0x08003c10

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	b082      	sub	sp, #8
 80001d8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001da:	f000 fb89 	bl	80008f0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001de:	f000 f82d 	bl	800023c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e2:	f000 f8d3 	bl	800038c <MX_GPIO_Init>
  MX_DMA_Init();
 80001e6:	f000 f8ab 	bl	8000340 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80001ea:	f000 f879 	bl	80002e0 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  if (data_ready){
 80001ee:	4b0f      	ldr	r3, [pc, #60]	@ (800022c <main+0x58>)
 80001f0:	781b      	ldrb	r3, [r3, #0]
 80001f2:	2b00      	cmp	r3, #0
 80001f4:	d013      	beq.n	800021e <main+0x4a>
		forward_pass(rx_buffer, tx_buffer, 784, 20, 10);
 80001f6:	230a      	movs	r3, #10
 80001f8:	9300      	str	r3, [sp, #0]
 80001fa:	2314      	movs	r3, #20
 80001fc:	f44f 7244 	mov.w	r2, #784	@ 0x310
 8000200:	490b      	ldr	r1, [pc, #44]	@ (8000230 <main+0x5c>)
 8000202:	480c      	ldr	r0, [pc, #48]	@ (8000234 <main+0x60>)
 8000204:	f000 f976 	bl	80004f4 <forward_pass>
		HAL_UART_Transmit(&huart2 ,tx_buffer, (sizeof(tx_buffer)*4), HAL_MAX_DELAY);
 8000208:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800020c:	22a0      	movs	r2, #160	@ 0xa0
 800020e:	4908      	ldr	r1, [pc, #32]	@ (8000230 <main+0x5c>)
 8000210:	4809      	ldr	r0, [pc, #36]	@ (8000238 <main+0x64>)
 8000212:	f002 fd01 	bl	8002c18 <HAL_UART_Transmit>
		data_ready = false;
 8000216:	4b05      	ldr	r3, [pc, #20]	@ (800022c <main+0x58>)
 8000218:	2200      	movs	r2, #0
 800021a:	701a      	strb	r2, [r3, #0]
 800021c:	e7e7      	b.n	80001ee <main+0x1a>
	  }
	  else{
		  HAL_UART_Receive_DMA(&huart2, rx_buffer, (sizeof(rx_buffer)*4));
 800021e:	f44f 5244 	mov.w	r2, #12544	@ 0x3100
 8000222:	4904      	ldr	r1, [pc, #16]	@ (8000234 <main+0x60>)
 8000224:	4804      	ldr	r0, [pc, #16]	@ (8000238 <main+0x64>)
 8000226:	f002 fd80 	bl	8002d2a <HAL_UART_Receive_DMA>
	  if (data_ready){
 800022a:	e7e0      	b.n	80001ee <main+0x1a>
 800022c:	20000df0 	.word	0x20000df0
 8000230:	20000dc8 	.word	0x20000dc8
 8000234:	20000188 	.word	0x20000188
 8000238:	20000078 	.word	0x20000078

0800023c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	b0a6      	sub	sp, #152	@ 0x98
 8000240:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000242:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000246:	2228      	movs	r2, #40	@ 0x28
 8000248:	2100      	movs	r1, #0
 800024a:	4618      	mov	r0, r3
 800024c:	f003 fb79 	bl	8003942 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000250:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000254:	2200      	movs	r2, #0
 8000256:	601a      	str	r2, [r3, #0]
 8000258:	605a      	str	r2, [r3, #4]
 800025a:	609a      	str	r2, [r3, #8]
 800025c:	60da      	str	r2, [r3, #12]
 800025e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000260:	1d3b      	adds	r3, r7, #4
 8000262:	2258      	movs	r2, #88	@ 0x58
 8000264:	2100      	movs	r1, #0
 8000266:	4618      	mov	r0, r3
 8000268:	f003 fb6b 	bl	8003942 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800026c:	2302      	movs	r3, #2
 800026e:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000270:	2301      	movs	r3, #1
 8000272:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000274:	2310      	movs	r3, #16
 8000276:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 800027a:	2300      	movs	r3, #0
 800027c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000280:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000284:	4618      	mov	r0, r3
 8000286:	f000 ffe7 	bl	8001258 <HAL_RCC_OscConfig>
 800028a:	4603      	mov	r3, r0
 800028c:	2b00      	cmp	r3, #0
 800028e:	d001      	beq.n	8000294 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8000290:	f000 f9ee 	bl	8000670 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000294:	230f      	movs	r3, #15
 8000296:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000298:	2300      	movs	r3, #0
 800029a:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800029c:	2300      	movs	r3, #0
 800029e:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80002a0:	2300      	movs	r3, #0
 80002a2:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002a4:	2300      	movs	r3, #0
 80002a6:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002a8:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 80002ac:	2100      	movs	r1, #0
 80002ae:	4618      	mov	r0, r3
 80002b0:	f002 f826 	bl	8002300 <HAL_RCC_ClockConfig>
 80002b4:	4603      	mov	r3, r0
 80002b6:	2b00      	cmp	r3, #0
 80002b8:	d001      	beq.n	80002be <SystemClock_Config+0x82>
  {
    Error_Handler();
 80002ba:	f000 f9d9 	bl	8000670 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80002be:	2302      	movs	r3, #2
 80002c0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80002c2:	2300      	movs	r3, #0
 80002c4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80002c6:	1d3b      	adds	r3, r7, #4
 80002c8:	4618      	mov	r0, r3
 80002ca:	f002 fa39 	bl	8002740 <HAL_RCCEx_PeriphCLKConfig>
 80002ce:	4603      	mov	r3, r0
 80002d0:	2b00      	cmp	r3, #0
 80002d2:	d001      	beq.n	80002d8 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80002d4:	f000 f9cc 	bl	8000670 <Error_Handler>
  }
}
 80002d8:	bf00      	nop
 80002da:	3798      	adds	r7, #152	@ 0x98
 80002dc:	46bd      	mov	sp, r7
 80002de:	bd80      	pop	{r7, pc}

080002e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80002e0:	b580      	push	{r7, lr}
 80002e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80002e4:	4b14      	ldr	r3, [pc, #80]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 80002e6:	4a15      	ldr	r2, [pc, #84]	@ (800033c <MX_USART2_UART_Init+0x5c>)
 80002e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80002ea:	4b13      	ldr	r3, [pc, #76]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 80002ec:	f44f 4216 	mov.w	r2, #38400	@ 0x9600
 80002f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80002f2:	4b11      	ldr	r3, [pc, #68]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 80002f4:	2200      	movs	r2, #0
 80002f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80002f8:	4b0f      	ldr	r3, [pc, #60]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 80002fa:	2200      	movs	r2, #0
 80002fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80002fe:	4b0e      	ldr	r3, [pc, #56]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 8000300:	2200      	movs	r2, #0
 8000302:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000304:	4b0c      	ldr	r3, [pc, #48]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 8000306:	220c      	movs	r2, #12
 8000308:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800030a:	4b0b      	ldr	r3, [pc, #44]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 800030c:	2200      	movs	r2, #0
 800030e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000310:	4b09      	ldr	r3, [pc, #36]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 8000312:	2200      	movs	r2, #0
 8000314:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000316:	4b08      	ldr	r3, [pc, #32]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 8000318:	2200      	movs	r2, #0
 800031a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800031c:	4b06      	ldr	r3, [pc, #24]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 800031e:	2200      	movs	r2, #0
 8000320:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000322:	4805      	ldr	r0, [pc, #20]	@ (8000338 <MX_USART2_UART_Init+0x58>)
 8000324:	f002 fc2a 	bl	8002b7c <HAL_UART_Init>
 8000328:	4603      	mov	r3, r0
 800032a:	2b00      	cmp	r3, #0
 800032c:	d001      	beq.n	8000332 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800032e:	f000 f99f 	bl	8000670 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000332:	bf00      	nop
 8000334:	bd80      	pop	{r7, pc}
 8000336:	bf00      	nop
 8000338:	20000078 	.word	0x20000078
 800033c:	40004400 	.word	0x40004400

08000340 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000340:	b580      	push	{r7, lr}
 8000342:	b082      	sub	sp, #8
 8000344:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000346:	4b10      	ldr	r3, [pc, #64]	@ (8000388 <MX_DMA_Init+0x48>)
 8000348:	695b      	ldr	r3, [r3, #20]
 800034a:	4a0f      	ldr	r2, [pc, #60]	@ (8000388 <MX_DMA_Init+0x48>)
 800034c:	f043 0301 	orr.w	r3, r3, #1
 8000350:	6153      	str	r3, [r2, #20]
 8000352:	4b0d      	ldr	r3, [pc, #52]	@ (8000388 <MX_DMA_Init+0x48>)
 8000354:	695b      	ldr	r3, [r3, #20]
 8000356:	f003 0301 	and.w	r3, r3, #1
 800035a:	607b      	str	r3, [r7, #4]
 800035c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 800035e:	2200      	movs	r2, #0
 8000360:	2100      	movs	r1, #0
 8000362:	2010      	movs	r0, #16
 8000364:	f000 fc05 	bl	8000b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000368:	2010      	movs	r0, #16
 800036a:	f000 fc1e 	bl	8000baa <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel7_IRQn, 0, 0);
 800036e:	2200      	movs	r2, #0
 8000370:	2100      	movs	r1, #0
 8000372:	2011      	movs	r0, #17
 8000374:	f000 fbfd 	bl	8000b72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8000378:	2011      	movs	r0, #17
 800037a:	f000 fc16 	bl	8000baa <HAL_NVIC_EnableIRQ>

}
 800037e:	bf00      	nop
 8000380:	3708      	adds	r7, #8
 8000382:	46bd      	mov	sp, r7
 8000384:	bd80      	pop	{r7, pc}
 8000386:	bf00      	nop
 8000388:	40021000 	.word	0x40021000

0800038c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800038c:	b480      	push	{r7}
 800038e:	b083      	sub	sp, #12
 8000390:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000392:	4b09      	ldr	r3, [pc, #36]	@ (80003b8 <MX_GPIO_Init+0x2c>)
 8000394:	695b      	ldr	r3, [r3, #20]
 8000396:	4a08      	ldr	r2, [pc, #32]	@ (80003b8 <MX_GPIO_Init+0x2c>)
 8000398:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800039c:	6153      	str	r3, [r2, #20]
 800039e:	4b06      	ldr	r3, [pc, #24]	@ (80003b8 <MX_GPIO_Init+0x2c>)
 80003a0:	695b      	ldr	r3, [r3, #20]
 80003a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80003a6:	607b      	str	r3, [r7, #4]
 80003a8:	687b      	ldr	r3, [r7, #4]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80003aa:	bf00      	nop
 80003ac:	370c      	adds	r7, #12
 80003ae:	46bd      	mov	sp, r7
 80003b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b4:	4770      	bx	lr
 80003b6:	bf00      	nop
 80003b8:	40021000 	.word	0x40021000

080003bc <relu>:

/* USER CODE BEGIN 4 */
//ReLu activation function
void relu(float *input, int size) {
 80003bc:	b480      	push	{r7}
 80003be:	b085      	sub	sp, #20
 80003c0:	af00      	add	r7, sp, #0
 80003c2:	6078      	str	r0, [r7, #4]
 80003c4:	6039      	str	r1, [r7, #0]
    for (int i = 0; i < size; i++) {
 80003c6:	2300      	movs	r3, #0
 80003c8:	60fb      	str	r3, [r7, #12]
 80003ca:	e014      	b.n	80003f6 <relu+0x3a>
        if (input[i] < 0) {
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	009b      	lsls	r3, r3, #2
 80003d0:	687a      	ldr	r2, [r7, #4]
 80003d2:	4413      	add	r3, r2
 80003d4:	edd3 7a00 	vldr	s15, [r3]
 80003d8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80003dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80003e0:	d506      	bpl.n	80003f0 <relu+0x34>
            input[i] = 0;
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	009b      	lsls	r3, r3, #2
 80003e6:	687a      	ldr	r2, [r7, #4]
 80003e8:	4413      	add	r3, r2
 80003ea:	f04f 0200 	mov.w	r2, #0
 80003ee:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < size; i++) {
 80003f0:	68fb      	ldr	r3, [r7, #12]
 80003f2:	3301      	adds	r3, #1
 80003f4:	60fb      	str	r3, [r7, #12]
 80003f6:	68fa      	ldr	r2, [r7, #12]
 80003f8:	683b      	ldr	r3, [r7, #0]
 80003fa:	429a      	cmp	r2, r3
 80003fc:	dbe6      	blt.n	80003cc <relu+0x10>
        }
    }
}
 80003fe:	bf00      	nop
 8000400:	bf00      	nop
 8000402:	3714      	adds	r7, #20
 8000404:	46bd      	mov	sp, r7
 8000406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800040a:	4770      	bx	lr

0800040c <softmax>:

//Softmax activation function
void softmax(float *input, int size) {
 800040c:	b590      	push	{r4, r7, lr}
 800040e:	b089      	sub	sp, #36	@ 0x24
 8000410:	af00      	add	r7, sp, #0
 8000412:	6078      	str	r0, [r7, #4]
 8000414:	6039      	str	r1, [r7, #0]
    float max_val = input[0];
 8000416:	687b      	ldr	r3, [r7, #4]
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < size; i++) {
 800041c:	2301      	movs	r3, #1
 800041e:	61bb      	str	r3, [r7, #24]
 8000420:	e015      	b.n	800044e <softmax+0x42>
        if (input[i] > max_val) {
 8000422:	69bb      	ldr	r3, [r7, #24]
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	4413      	add	r3, r2
 800042a:	edd3 7a00 	vldr	s15, [r3]
 800042e:	ed97 7a07 	vldr	s14, [r7, #28]
 8000432:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800043a:	d505      	bpl.n	8000448 <softmax+0x3c>
            max_val = input[i];
 800043c:	69bb      	ldr	r3, [r7, #24]
 800043e:	009b      	lsls	r3, r3, #2
 8000440:	687a      	ldr	r2, [r7, #4]
 8000442:	4413      	add	r3, r2
 8000444:	681b      	ldr	r3, [r3, #0]
 8000446:	61fb      	str	r3, [r7, #28]
    for (int i = 1; i < size; i++) {
 8000448:	69bb      	ldr	r3, [r7, #24]
 800044a:	3301      	adds	r3, #1
 800044c:	61bb      	str	r3, [r7, #24]
 800044e:	69ba      	ldr	r2, [r7, #24]
 8000450:	683b      	ldr	r3, [r7, #0]
 8000452:	429a      	cmp	r2, r3
 8000454:	dbe5      	blt.n	8000422 <softmax+0x16>
        }
    }

    float sum_exp = 0.0;
 8000456:	f04f 0300 	mov.w	r3, #0
 800045a:	617b      	str	r3, [r7, #20]
    for (int i = 0; i < size; i++) {
 800045c:	2300      	movs	r3, #0
 800045e:	613b      	str	r3, [r7, #16]
 8000460:	e024      	b.n	80004ac <softmax+0xa0>
        input[i] = expf(input[i] - max_val);
 8000462:	693b      	ldr	r3, [r7, #16]
 8000464:	009b      	lsls	r3, r3, #2
 8000466:	687a      	ldr	r2, [r7, #4]
 8000468:	4413      	add	r3, r2
 800046a:	ed93 7a00 	vldr	s14, [r3]
 800046e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000472:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000476:	693b      	ldr	r3, [r7, #16]
 8000478:	009b      	lsls	r3, r3, #2
 800047a:	687a      	ldr	r2, [r7, #4]
 800047c:	18d4      	adds	r4, r2, r3
 800047e:	eeb0 0a67 	vmov.f32	s0, s15
 8000482:	f003 fa91 	bl	80039a8 <expf>
 8000486:	eef0 7a40 	vmov.f32	s15, s0
 800048a:	edc4 7a00 	vstr	s15, [r4]
        sum_exp += input[i];
 800048e:	693b      	ldr	r3, [r7, #16]
 8000490:	009b      	lsls	r3, r3, #2
 8000492:	687a      	ldr	r2, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	edd3 7a00 	vldr	s15, [r3]
 800049a:	ed97 7a05 	vldr	s14, [r7, #20]
 800049e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80004a2:	edc7 7a05 	vstr	s15, [r7, #20]
    for (int i = 0; i < size; i++) {
 80004a6:	693b      	ldr	r3, [r7, #16]
 80004a8:	3301      	adds	r3, #1
 80004aa:	613b      	str	r3, [r7, #16]
 80004ac:	693a      	ldr	r2, [r7, #16]
 80004ae:	683b      	ldr	r3, [r7, #0]
 80004b0:	429a      	cmp	r2, r3
 80004b2:	dbd6      	blt.n	8000462 <softmax+0x56>
    }

    for (int i = 0; i < size; i++) {
 80004b4:	2300      	movs	r3, #0
 80004b6:	60fb      	str	r3, [r7, #12]
 80004b8:	e012      	b.n	80004e0 <softmax+0xd4>
        input[i] /= sum_exp;
 80004ba:	68fb      	ldr	r3, [r7, #12]
 80004bc:	009b      	lsls	r3, r3, #2
 80004be:	687a      	ldr	r2, [r7, #4]
 80004c0:	4413      	add	r3, r2
 80004c2:	edd3 6a00 	vldr	s13, [r3]
 80004c6:	68fb      	ldr	r3, [r7, #12]
 80004c8:	009b      	lsls	r3, r3, #2
 80004ca:	687a      	ldr	r2, [r7, #4]
 80004cc:	4413      	add	r3, r2
 80004ce:	ed97 7a05 	vldr	s14, [r7, #20]
 80004d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80004d6:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < size; i++) {
 80004da:	68fb      	ldr	r3, [r7, #12]
 80004dc:	3301      	adds	r3, #1
 80004de:	60fb      	str	r3, [r7, #12]
 80004e0:	68fa      	ldr	r2, [r7, #12]
 80004e2:	683b      	ldr	r3, [r7, #0]
 80004e4:	429a      	cmp	r2, r3
 80004e6:	dbe8      	blt.n	80004ba <softmax+0xae>
    }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3724      	adds	r7, #36	@ 0x24
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bd90      	pop	{r4, r7, pc}
	...

080004f4 <forward_pass>:

// Forward pass function
void forward_pass(const float *input, float *output, int input_size, int hidden_size, int output_size) {
 80004f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80004f8:	b089      	sub	sp, #36	@ 0x24
 80004fa:	af02      	add	r7, sp, #8
 80004fc:	60f8      	str	r0, [r7, #12]
 80004fe:	60b9      	str	r1, [r7, #8]
 8000500:	607a      	str	r2, [r7, #4]
 8000502:	603b      	str	r3, [r7, #0]
 8000504:	466b      	mov	r3, sp
 8000506:	461e      	mov	r6, r3
    // Define the layer outputs
    float hidden_layer_output[hidden_size];
 8000508:	6839      	ldr	r1, [r7, #0]
 800050a:	1e4b      	subs	r3, r1, #1
 800050c:	617b      	str	r3, [r7, #20]
 800050e:	460a      	mov	r2, r1
 8000510:	2300      	movs	r3, #0
 8000512:	4690      	mov	r8, r2
 8000514:	4699      	mov	r9, r3
 8000516:	f04f 0200 	mov.w	r2, #0
 800051a:	f04f 0300 	mov.w	r3, #0
 800051e:	ea4f 1349 	mov.w	r3, r9, lsl #5
 8000522:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 8000526:	ea4f 1248 	mov.w	r2, r8, lsl #5
 800052a:	460a      	mov	r2, r1
 800052c:	2300      	movs	r3, #0
 800052e:	4614      	mov	r4, r2
 8000530:	461d      	mov	r5, r3
 8000532:	f04f 0200 	mov.w	r2, #0
 8000536:	f04f 0300 	mov.w	r3, #0
 800053a:	016b      	lsls	r3, r5, #5
 800053c:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000540:	0162      	lsls	r2, r4, #5
 8000542:	460b      	mov	r3, r1
 8000544:	009b      	lsls	r3, r3, #2
 8000546:	3307      	adds	r3, #7
 8000548:	08db      	lsrs	r3, r3, #3
 800054a:	00db      	lsls	r3, r3, #3
 800054c:	ebad 0d03 	sub.w	sp, sp, r3
 8000550:	ab02      	add	r3, sp, #8
 8000552:	3303      	adds	r3, #3
 8000554:	089b      	lsrs	r3, r3, #2
 8000556:	009b      	lsls	r3, r3, #2
 8000558:	613b      	str	r3, [r7, #16]

    // First Dense Layer
    dense_layer(input, layers_dense_vars_0, layers_dense_vars_1, hidden_layer_output, input_size, hidden_size);
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	683a      	ldr	r2, [r7, #0]
 800055e:	9201      	str	r2, [sp, #4]
 8000560:	9300      	str	r3, [sp, #0]
 8000562:	693b      	ldr	r3, [r7, #16]
 8000564:	4a0e      	ldr	r2, [pc, #56]	@ (80005a0 <forward_pass+0xac>)
 8000566:	490f      	ldr	r1, [pc, #60]	@ (80005a4 <forward_pass+0xb0>)
 8000568:	68f8      	ldr	r0, [r7, #12]
 800056a:	f000 f81d 	bl	80005a8 <dense_layer>
    relu(hidden_layer_output, hidden_size);
 800056e:	6839      	ldr	r1, [r7, #0]
 8000570:	6938      	ldr	r0, [r7, #16]
 8000572:	f7ff ff23 	bl	80003bc <relu>

    // Second Dense Layer
    dense_layer(hidden_layer_output, layers_dense_vars_0, layers_dense_vars_1, output, hidden_size, output_size);
 8000576:	683b      	ldr	r3, [r7, #0]
 8000578:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800057a:	9201      	str	r2, [sp, #4]
 800057c:	9300      	str	r3, [sp, #0]
 800057e:	68bb      	ldr	r3, [r7, #8]
 8000580:	4a07      	ldr	r2, [pc, #28]	@ (80005a0 <forward_pass+0xac>)
 8000582:	4908      	ldr	r1, [pc, #32]	@ (80005a4 <forward_pass+0xb0>)
 8000584:	6938      	ldr	r0, [r7, #16]
 8000586:	f000 f80f 	bl	80005a8 <dense_layer>

    // Apply softmax to the output layer
    softmax(output, output_size);
 800058a:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800058c:	68b8      	ldr	r0, [r7, #8]
 800058e:	f7ff ff3d 	bl	800040c <softmax>
 8000592:	46b5      	mov	sp, r6
}
 8000594:	bf00      	nop
 8000596:	371c      	adds	r7, #28
 8000598:	46bd      	mov	sp, r7
 800059a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800059e:	bf00      	nop
 80005a0:	08013128 	.word	0x08013128
 80005a4:	08003c28 	.word	0x08003c28

080005a8 <dense_layer>:

// Dense Layer
void dense_layer(const float* input, const float* weights, const float* biases, float* output, uint32_t input_size, uint32_t nodes) {
 80005a8:	b480      	push	{r7}
 80005aa:	b087      	sub	sp, #28
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	60f8      	str	r0, [r7, #12]
 80005b0:	60b9      	str	r1, [r7, #8]
 80005b2:	607a      	str	r2, [r7, #4]
 80005b4:	603b      	str	r3, [r7, #0]
    for (uint32_t i = 0; i < nodes; i++) {
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
 80005ba:	e037      	b.n	800062c <dense_layer+0x84>
        output[i] = biases[i]; // Initialize output with the bias
 80005bc:	697b      	ldr	r3, [r7, #20]
 80005be:	009b      	lsls	r3, r3, #2
 80005c0:	687a      	ldr	r2, [r7, #4]
 80005c2:	441a      	add	r2, r3
 80005c4:	697b      	ldr	r3, [r7, #20]
 80005c6:	009b      	lsls	r3, r3, #2
 80005c8:	6839      	ldr	r1, [r7, #0]
 80005ca:	440b      	add	r3, r1
 80005cc:	6812      	ldr	r2, [r2, #0]
 80005ce:	601a      	str	r2, [r3, #0]
        for (uint32_t j = 0; j < input_size; j++) {
 80005d0:	2300      	movs	r3, #0
 80005d2:	613b      	str	r3, [r7, #16]
 80005d4:	e023      	b.n	800061e <dense_layer+0x76>
            output[i] += input[j] * weights[j * nodes + i];
 80005d6:	697b      	ldr	r3, [r7, #20]
 80005d8:	009b      	lsls	r3, r3, #2
 80005da:	683a      	ldr	r2, [r7, #0]
 80005dc:	4413      	add	r3, r2
 80005de:	ed93 7a00 	vldr	s14, [r3]
 80005e2:	693b      	ldr	r3, [r7, #16]
 80005e4:	009b      	lsls	r3, r3, #2
 80005e6:	68fa      	ldr	r2, [r7, #12]
 80005e8:	4413      	add	r3, r2
 80005ea:	edd3 6a00 	vldr	s13, [r3]
 80005ee:	693b      	ldr	r3, [r7, #16]
 80005f0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80005f2:	fb03 f202 	mul.w	r2, r3, r2
 80005f6:	697b      	ldr	r3, [r7, #20]
 80005f8:	4413      	add	r3, r2
 80005fa:	009b      	lsls	r3, r3, #2
 80005fc:	68ba      	ldr	r2, [r7, #8]
 80005fe:	4413      	add	r3, r2
 8000600:	edd3 7a00 	vldr	s15, [r3]
 8000604:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000608:	697b      	ldr	r3, [r7, #20]
 800060a:	009b      	lsls	r3, r3, #2
 800060c:	683a      	ldr	r2, [r7, #0]
 800060e:	4413      	add	r3, r2
 8000610:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000614:	edc3 7a00 	vstr	s15, [r3]
        for (uint32_t j = 0; j < input_size; j++) {
 8000618:	693b      	ldr	r3, [r7, #16]
 800061a:	3301      	adds	r3, #1
 800061c:	613b      	str	r3, [r7, #16]
 800061e:	693a      	ldr	r2, [r7, #16]
 8000620:	6a3b      	ldr	r3, [r7, #32]
 8000622:	429a      	cmp	r2, r3
 8000624:	d3d7      	bcc.n	80005d6 <dense_layer+0x2e>
    for (uint32_t i = 0; i < nodes; i++) {
 8000626:	697b      	ldr	r3, [r7, #20]
 8000628:	3301      	adds	r3, #1
 800062a:	617b      	str	r3, [r7, #20]
 800062c:	697a      	ldr	r2, [r7, #20]
 800062e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000630:	429a      	cmp	r2, r3
 8000632:	d3c3      	bcc.n	80005bc <dense_layer+0x14>
        }
    }
}
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	371c      	adds	r7, #28
 800063a:	46bd      	mov	sp, r7
 800063c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000640:	4770      	bx	lr
	...

08000644 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000644:	b480      	push	{r7}
 8000646:	b083      	sub	sp, #12
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2)
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a05      	ldr	r2, [pc, #20]	@ (8000668 <HAL_UART_RxCpltCallback+0x24>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d102      	bne.n	800065c <HAL_UART_RxCpltCallback+0x18>
	  {
		data_ready = true;
 8000656:	4b05      	ldr	r3, [pc, #20]	@ (800066c <HAL_UART_RxCpltCallback+0x28>)
 8000658:	2201      	movs	r2, #1
 800065a:	701a      	strb	r2, [r3, #0]
	  }
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40004400 	.word	0x40004400
 800066c:	20000df0 	.word	0x20000df0

08000670 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000670:	b480      	push	{r7}
 8000672:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000674:	b672      	cpsid	i
}
 8000676:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000678:	bf00      	nop
 800067a:	e7fd      	b.n	8000678 <Error_Handler+0x8>

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000682:	4b0f      	ldr	r3, [pc, #60]	@ (80006c0 <HAL_MspInit+0x44>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a0e      	ldr	r2, [pc, #56]	@ (80006c0 <HAL_MspInit+0x44>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b0c      	ldr	r3, [pc, #48]	@ (80006c0 <HAL_MspInit+0x44>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b09      	ldr	r3, [pc, #36]	@ (80006c0 <HAL_MspInit+0x44>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a08      	ldr	r2, [pc, #32]	@ (80006c0 <HAL_MspInit+0x44>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b06      	ldr	r3, [pc, #24]	@ (80006c0 <HAL_MspInit+0x44>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006b2:	bf00      	nop
 80006b4:	370c      	adds	r7, #12
 80006b6:	46bd      	mov	sp, r7
 80006b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006bc:	4770      	bx	lr
 80006be:	bf00      	nop
 80006c0:	40021000 	.word	0x40021000

080006c4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b08a      	sub	sp, #40	@ 0x28
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006cc:	f107 0314 	add.w	r3, r7, #20
 80006d0:	2200      	movs	r2, #0
 80006d2:	601a      	str	r2, [r3, #0]
 80006d4:	605a      	str	r2, [r3, #4]
 80006d6:	609a      	str	r2, [r3, #8]
 80006d8:	60da      	str	r2, [r3, #12]
 80006da:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	4a3d      	ldr	r2, [pc, #244]	@ (80007d8 <HAL_UART_MspInit+0x114>)
 80006e2:	4293      	cmp	r3, r2
 80006e4:	d174      	bne.n	80007d0 <HAL_UART_MspInit+0x10c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80006e6:	4b3d      	ldr	r3, [pc, #244]	@ (80007dc <HAL_UART_MspInit+0x118>)
 80006e8:	69db      	ldr	r3, [r3, #28]
 80006ea:	4a3c      	ldr	r2, [pc, #240]	@ (80007dc <HAL_UART_MspInit+0x118>)
 80006ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80006f0:	61d3      	str	r3, [r2, #28]
 80006f2:	4b3a      	ldr	r3, [pc, #232]	@ (80007dc <HAL_UART_MspInit+0x118>)
 80006f4:	69db      	ldr	r3, [r3, #28]
 80006f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006fe:	4b37      	ldr	r3, [pc, #220]	@ (80007dc <HAL_UART_MspInit+0x118>)
 8000700:	695b      	ldr	r3, [r3, #20]
 8000702:	4a36      	ldr	r2, [pc, #216]	@ (80007dc <HAL_UART_MspInit+0x118>)
 8000704:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000708:	6153      	str	r3, [r2, #20]
 800070a:	4b34      	ldr	r3, [pc, #208]	@ (80007dc <HAL_UART_MspInit+0x118>)
 800070c:	695b      	ldr	r3, [r3, #20]
 800070e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000712:	60fb      	str	r3, [r7, #12]
 8000714:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000716:	230c      	movs	r3, #12
 8000718:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800071a:	2302      	movs	r3, #2
 800071c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800071e:	2300      	movs	r3, #0
 8000720:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000722:	2303      	movs	r3, #3
 8000724:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000726:	2307      	movs	r3, #7
 8000728:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800072a:	f107 0314 	add.w	r3, r7, #20
 800072e:	4619      	mov	r1, r3
 8000730:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000734:	f000 fc06 	bl	8000f44 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 8000738:	4b29      	ldr	r3, [pc, #164]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 800073a:	4a2a      	ldr	r2, [pc, #168]	@ (80007e4 <HAL_UART_MspInit+0x120>)
 800073c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800073e:	4b28      	ldr	r3, [pc, #160]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000740:	2200      	movs	r2, #0
 8000742:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000744:	4b26      	ldr	r3, [pc, #152]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000746:	2200      	movs	r2, #0
 8000748:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800074a:	4b25      	ldr	r3, [pc, #148]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 800074c:	2280      	movs	r2, #128	@ 0x80
 800074e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000750:	4b23      	ldr	r3, [pc, #140]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000752:	2200      	movs	r2, #0
 8000754:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000756:	4b22      	ldr	r3, [pc, #136]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000758:	2200      	movs	r2, #0
 800075a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 800075c:	4b20      	ldr	r3, [pc, #128]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 800075e:	2200      	movs	r2, #0
 8000760:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000762:	4b1f      	ldr	r3, [pc, #124]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000764:	2200      	movs	r2, #0
 8000766:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8000768:	481d      	ldr	r0, [pc, #116]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 800076a:	f000 fa38 	bl	8000bde <HAL_DMA_Init>
 800076e:	4603      	mov	r3, r0
 8000770:	2b00      	cmp	r3, #0
 8000772:	d001      	beq.n	8000778 <HAL_UART_MspInit+0xb4>
    {
      Error_Handler();
 8000774:	f7ff ff7c 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8000778:	687b      	ldr	r3, [r7, #4]
 800077a:	4a19      	ldr	r2, [pc, #100]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 800077c:	675a      	str	r2, [r3, #116]	@ 0x74
 800077e:	4a18      	ldr	r2, [pc, #96]	@ (80007e0 <HAL_UART_MspInit+0x11c>)
 8000780:	687b      	ldr	r3, [r7, #4]
 8000782:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Channel7;
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 8000786:	4a19      	ldr	r2, [pc, #100]	@ (80007ec <HAL_UART_MspInit+0x128>)
 8000788:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800078a:	4b17      	ldr	r3, [pc, #92]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 800078c:	2210      	movs	r2, #16
 800078e:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000790:	4b15      	ldr	r3, [pc, #84]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 8000792:	2200      	movs	r2, #0
 8000794:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8000796:	4b14      	ldr	r3, [pc, #80]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 8000798:	2280      	movs	r2, #128	@ 0x80
 800079a:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800079c:	4b12      	ldr	r3, [pc, #72]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 800079e:	2200      	movs	r2, #0
 80007a0:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80007a2:	4b11      	ldr	r3, [pc, #68]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80007a8:	4b0f      	ldr	r3, [pc, #60]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80007ae:	4b0e      	ldr	r3, [pc, #56]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80007b4:	480c      	ldr	r0, [pc, #48]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007b6:	f000 fa12 	bl	8000bde <HAL_DMA_Init>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <HAL_UART_MspInit+0x100>
    {
      Error_Handler();
 80007c0:	f7ff ff56 	bl	8000670 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	4a08      	ldr	r2, [pc, #32]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007c8:	671a      	str	r2, [r3, #112]	@ 0x70
 80007ca:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <HAL_UART_MspInit+0x124>)
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	6253      	str	r3, [r2, #36]	@ 0x24
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007d0:	bf00      	nop
 80007d2:	3728      	adds	r7, #40	@ 0x28
 80007d4:	46bd      	mov	sp, r7
 80007d6:	bd80      	pop	{r7, pc}
 80007d8:	40004400 	.word	0x40004400
 80007dc:	40021000 	.word	0x40021000
 80007e0:	20000100 	.word	0x20000100
 80007e4:	4002006c 	.word	0x4002006c
 80007e8:	20000144 	.word	0x20000144
 80007ec:	40020080 	.word	0x40020080

080007f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007f4:	bf00      	nop
 80007f6:	e7fd      	b.n	80007f4 <NMI_Handler+0x4>

080007f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007f8:	b480      	push	{r7}
 80007fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007fc:	bf00      	nop
 80007fe:	e7fd      	b.n	80007fc <HardFault_Handler+0x4>

08000800 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000804:	bf00      	nop
 8000806:	e7fd      	b.n	8000804 <MemManage_Handler+0x4>

08000808 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000808:	b480      	push	{r7}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800080c:	bf00      	nop
 800080e:	e7fd      	b.n	800080c <BusFault_Handler+0x4>

08000810 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000814:	bf00      	nop
 8000816:	e7fd      	b.n	8000814 <UsageFault_Handler+0x4>

08000818 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800081c:	bf00      	nop
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr

08000826 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000826:	b480      	push	{r7}
 8000828:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800082a:	bf00      	nop
 800082c:	46bd      	mov	sp, r7
 800082e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000832:	4770      	bx	lr

08000834 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000834:	b480      	push	{r7}
 8000836:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000838:	bf00      	nop
 800083a:	46bd      	mov	sp, r7
 800083c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000840:	4770      	bx	lr

08000842 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000842:	b580      	push	{r7, lr}
 8000844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000846:	f000 f899 	bl	800097c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800084a:	bf00      	nop
 800084c:	bd80      	pop	{r7, pc}
	...

08000850 <DMA1_Channel6_IRQHandler>:

/**
  * @brief This function handles DMA1 channel6 global interrupt.
  */
void DMA1_Channel6_IRQHandler(void)
{
 8000850:	b580      	push	{r7, lr}
 8000852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8000854:	4802      	ldr	r0, [pc, #8]	@ (8000860 <DMA1_Channel6_IRQHandler+0x10>)
 8000856:	f000 fa68 	bl	8000d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel6_IRQn 1 */

  /* USER CODE END DMA1_Channel6_IRQn 1 */
}
 800085a:	bf00      	nop
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	20000100 	.word	0x20000100

08000864 <DMA1_Channel7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel7 global interrupt.
  */
void DMA1_Channel7_IRQHandler(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel7_IRQn 0 */

  /* USER CODE END DMA1_Channel7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8000868:	4802      	ldr	r0, [pc, #8]	@ (8000874 <DMA1_Channel7_IRQHandler+0x10>)
 800086a:	f000 fa5e 	bl	8000d2a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel7_IRQn 1 */

  /* USER CODE END DMA1_Channel7_IRQn 1 */
}
 800086e:	bf00      	nop
 8000870:	bd80      	pop	{r7, pc}
 8000872:	bf00      	nop
 8000874:	20000144 	.word	0x20000144

08000878 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800087c:	4b06      	ldr	r3, [pc, #24]	@ (8000898 <SystemInit+0x20>)
 800087e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000882:	4a05      	ldr	r2, [pc, #20]	@ (8000898 <SystemInit+0x20>)
 8000884:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000888:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800088c:	bf00      	nop
 800088e:	46bd      	mov	sp, r7
 8000890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000894:	4770      	bx	lr
 8000896:	bf00      	nop
 8000898:	e000ed00 	.word	0xe000ed00

0800089c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800089c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80008d4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80008a0:	f7ff ffea 	bl	8000878 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008a4:	480c      	ldr	r0, [pc, #48]	@ (80008d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80008a6:	490d      	ldr	r1, [pc, #52]	@ (80008dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80008a8:	4a0d      	ldr	r2, [pc, #52]	@ (80008e0 <LoopForever+0xe>)
  movs r3, #0
 80008aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008ac:	e002      	b.n	80008b4 <LoopCopyDataInit>

080008ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008b2:	3304      	adds	r3, #4

080008b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008b8:	d3f9      	bcc.n	80008ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008ba:	4a0a      	ldr	r2, [pc, #40]	@ (80008e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80008bc:	4c0a      	ldr	r4, [pc, #40]	@ (80008e8 <LoopForever+0x16>)
  movs r3, #0
 80008be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008c0:	e001      	b.n	80008c6 <LoopFillZerobss>

080008c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008c4:	3204      	adds	r2, #4

080008c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008c8:	d3fb      	bcc.n	80008c2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80008ca:	f003 f849 	bl	8003960 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80008ce:	f7ff fc81 	bl	80001d4 <main>

080008d2 <LoopForever>:

LoopForever:
    b LoopForever
 80008d2:	e7fe      	b.n	80008d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80008d4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80008d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008dc:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008e0:	080131d0 	.word	0x080131d0
  ldr r2, =_sbss
 80008e4:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008e8:	20000f30 	.word	0x20000f30

080008ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80008ec:	e7fe      	b.n	80008ec <ADC1_2_IRQHandler>
	...

080008f0 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80008f4:	4b08      	ldr	r3, [pc, #32]	@ (8000918 <HAL_Init+0x28>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a07      	ldr	r2, [pc, #28]	@ (8000918 <HAL_Init+0x28>)
 80008fa:	f043 0310 	orr.w	r3, r3, #16
 80008fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000900:	2003      	movs	r0, #3
 8000902:	f000 f92b 	bl	8000b5c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000906:	200f      	movs	r0, #15
 8000908:	f000 f808 	bl	800091c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800090c:	f7ff feb6 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000910:	2300      	movs	r3, #0
}
 8000912:	4618      	mov	r0, r3
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	40022000 	.word	0x40022000

0800091c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b082      	sub	sp, #8
 8000920:	af00      	add	r7, sp, #0
 8000922:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000924:	4b12      	ldr	r3, [pc, #72]	@ (8000970 <HAL_InitTick+0x54>)
 8000926:	681a      	ldr	r2, [r3, #0]
 8000928:	4b12      	ldr	r3, [pc, #72]	@ (8000974 <HAL_InitTick+0x58>)
 800092a:	781b      	ldrb	r3, [r3, #0]
 800092c:	4619      	mov	r1, r3
 800092e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000932:	fbb3 f3f1 	udiv	r3, r3, r1
 8000936:	fbb2 f3f3 	udiv	r3, r2, r3
 800093a:	4618      	mov	r0, r3
 800093c:	f000 f943 	bl	8000bc6 <HAL_SYSTICK_Config>
 8000940:	4603      	mov	r3, r0
 8000942:	2b00      	cmp	r3, #0
 8000944:	d001      	beq.n	800094a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000946:	2301      	movs	r3, #1
 8000948:	e00e      	b.n	8000968 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2b0f      	cmp	r3, #15
 800094e:	d80a      	bhi.n	8000966 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000950:	2200      	movs	r2, #0
 8000952:	6879      	ldr	r1, [r7, #4]
 8000954:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000958:	f000 f90b 	bl	8000b72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800095c:	4a06      	ldr	r2, [pc, #24]	@ (8000978 <HAL_InitTick+0x5c>)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000962:	2300      	movs	r3, #0
 8000964:	e000      	b.n	8000968 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000966:	2301      	movs	r3, #1
}
 8000968:	4618      	mov	r0, r3
 800096a:	3708      	adds	r7, #8
 800096c:	46bd      	mov	sp, r7
 800096e:	bd80      	pop	{r7, pc}
 8000970:	20000000 	.word	0x20000000
 8000974:	20000008 	.word	0x20000008
 8000978:	20000004 	.word	0x20000004

0800097c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000980:	4b06      	ldr	r3, [pc, #24]	@ (800099c <HAL_IncTick+0x20>)
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	461a      	mov	r2, r3
 8000986:	4b06      	ldr	r3, [pc, #24]	@ (80009a0 <HAL_IncTick+0x24>)
 8000988:	681b      	ldr	r3, [r3, #0]
 800098a:	4413      	add	r3, r2
 800098c:	4a04      	ldr	r2, [pc, #16]	@ (80009a0 <HAL_IncTick+0x24>)
 800098e:	6013      	str	r3, [r2, #0]
}
 8000990:	bf00      	nop
 8000992:	46bd      	mov	sp, r7
 8000994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop
 800099c:	20000008 	.word	0x20000008
 80009a0:	20000df4 	.word	0x20000df4

080009a4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009a4:	b480      	push	{r7}
 80009a6:	af00      	add	r7, sp, #0
  return uwTick;  
 80009a8:	4b03      	ldr	r3, [pc, #12]	@ (80009b8 <HAL_GetTick+0x14>)
 80009aa:	681b      	ldr	r3, [r3, #0]
}
 80009ac:	4618      	mov	r0, r3
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	20000df4 	.word	0x20000df4

080009bc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009bc:	b480      	push	{r7}
 80009be:	b085      	sub	sp, #20
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	f003 0307 	and.w	r3, r3, #7
 80009ca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009cc:	4b0c      	ldr	r3, [pc, #48]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009ce:	68db      	ldr	r3, [r3, #12]
 80009d0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009d2:	68ba      	ldr	r2, [r7, #8]
 80009d4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80009d8:	4013      	ands	r3, r2
 80009da:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009e0:	68bb      	ldr	r3, [r7, #8]
 80009e2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009e4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009e8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009ec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009ee:	4a04      	ldr	r2, [pc, #16]	@ (8000a00 <__NVIC_SetPriorityGrouping+0x44>)
 80009f0:	68bb      	ldr	r3, [r7, #8]
 80009f2:	60d3      	str	r3, [r2, #12]
}
 80009f4:	bf00      	nop
 80009f6:	3714      	adds	r7, #20
 80009f8:	46bd      	mov	sp, r7
 80009fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fe:	4770      	bx	lr
 8000a00:	e000ed00 	.word	0xe000ed00

08000a04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a04:	b480      	push	{r7}
 8000a06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a08:	4b04      	ldr	r3, [pc, #16]	@ (8000a1c <__NVIC_GetPriorityGrouping+0x18>)
 8000a0a:	68db      	ldr	r3, [r3, #12]
 8000a0c:	0a1b      	lsrs	r3, r3, #8
 8000a0e:	f003 0307 	and.w	r3, r3, #7
}
 8000a12:	4618      	mov	r0, r3
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	e000ed00 	.word	0xe000ed00

08000a20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	4603      	mov	r3, r0
 8000a28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	db0b      	blt.n	8000a4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	f003 021f 	and.w	r2, r3, #31
 8000a38:	4907      	ldr	r1, [pc, #28]	@ (8000a58 <__NVIC_EnableIRQ+0x38>)
 8000a3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a3e:	095b      	lsrs	r3, r3, #5
 8000a40:	2001      	movs	r0, #1
 8000a42:	fa00 f202 	lsl.w	r2, r0, r2
 8000a46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a4a:	bf00      	nop
 8000a4c:	370c      	adds	r7, #12
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr
 8000a56:	bf00      	nop
 8000a58:	e000e100 	.word	0xe000e100

08000a5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b083      	sub	sp, #12
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	4603      	mov	r3, r0
 8000a64:	6039      	str	r1, [r7, #0]
 8000a66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	db0a      	blt.n	8000a86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a70:	683b      	ldr	r3, [r7, #0]
 8000a72:	b2da      	uxtb	r2, r3
 8000a74:	490c      	ldr	r1, [pc, #48]	@ (8000aa8 <__NVIC_SetPriority+0x4c>)
 8000a76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a7a:	0112      	lsls	r2, r2, #4
 8000a7c:	b2d2      	uxtb	r2, r2
 8000a7e:	440b      	add	r3, r1
 8000a80:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a84:	e00a      	b.n	8000a9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a86:	683b      	ldr	r3, [r7, #0]
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4908      	ldr	r1, [pc, #32]	@ (8000aac <__NVIC_SetPriority+0x50>)
 8000a8c:	79fb      	ldrb	r3, [r7, #7]
 8000a8e:	f003 030f 	and.w	r3, r3, #15
 8000a92:	3b04      	subs	r3, #4
 8000a94:	0112      	lsls	r2, r2, #4
 8000a96:	b2d2      	uxtb	r2, r2
 8000a98:	440b      	add	r3, r1
 8000a9a:	761a      	strb	r2, [r3, #24]
}
 8000a9c:	bf00      	nop
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000e100 	.word	0xe000e100
 8000aac:	e000ed00 	.word	0xe000ed00

08000ab0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	b089      	sub	sp, #36	@ 0x24
 8000ab4:	af00      	add	r7, sp, #0
 8000ab6:	60f8      	str	r0, [r7, #12]
 8000ab8:	60b9      	str	r1, [r7, #8]
 8000aba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000abc:	68fb      	ldr	r3, [r7, #12]
 8000abe:	f003 0307 	and.w	r3, r3, #7
 8000ac2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ac4:	69fb      	ldr	r3, [r7, #28]
 8000ac6:	f1c3 0307 	rsb	r3, r3, #7
 8000aca:	2b04      	cmp	r3, #4
 8000acc:	bf28      	it	cs
 8000ace:	2304      	movcs	r3, #4
 8000ad0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ad2:	69fb      	ldr	r3, [r7, #28]
 8000ad4:	3304      	adds	r3, #4
 8000ad6:	2b06      	cmp	r3, #6
 8000ad8:	d902      	bls.n	8000ae0 <NVIC_EncodePriority+0x30>
 8000ada:	69fb      	ldr	r3, [r7, #28]
 8000adc:	3b03      	subs	r3, #3
 8000ade:	e000      	b.n	8000ae2 <NVIC_EncodePriority+0x32>
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ae4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000ae8:	69bb      	ldr	r3, [r7, #24]
 8000aea:	fa02 f303 	lsl.w	r3, r2, r3
 8000aee:	43da      	mvns	r2, r3
 8000af0:	68bb      	ldr	r3, [r7, #8]
 8000af2:	401a      	ands	r2, r3
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000af8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000afc:	697b      	ldr	r3, [r7, #20]
 8000afe:	fa01 f303 	lsl.w	r3, r1, r3
 8000b02:	43d9      	mvns	r1, r3
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b08:	4313      	orrs	r3, r2
         );
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	3724      	adds	r7, #36	@ 0x24
 8000b0e:	46bd      	mov	sp, r7
 8000b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b14:	4770      	bx	lr
	...

08000b18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	3b01      	subs	r3, #1
 8000b24:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000b28:	d301      	bcc.n	8000b2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000b2a:	2301      	movs	r3, #1
 8000b2c:	e00f      	b.n	8000b4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	@ (8000b58 <SysTick_Config+0x40>)
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3b01      	subs	r3, #1
 8000b34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000b36:	210f      	movs	r1, #15
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000b3c:	f7ff ff8e 	bl	8000a5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000b40:	4b05      	ldr	r3, [pc, #20]	@ (8000b58 <SysTick_Config+0x40>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000b46:	4b04      	ldr	r3, [pc, #16]	@ (8000b58 <SysTick_Config+0x40>)
 8000b48:	2207      	movs	r2, #7
 8000b4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000b4c:	2300      	movs	r3, #0
}
 8000b4e:	4618      	mov	r0, r3
 8000b50:	3708      	adds	r7, #8
 8000b52:	46bd      	mov	sp, r7
 8000b54:	bd80      	pop	{r7, pc}
 8000b56:	bf00      	nop
 8000b58:	e000e010 	.word	0xe000e010

08000b5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b64:	6878      	ldr	r0, [r7, #4]
 8000b66:	f7ff ff29 	bl	80009bc <__NVIC_SetPriorityGrouping>
}
 8000b6a:	bf00      	nop
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}

08000b72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b72:	b580      	push	{r7, lr}
 8000b74:	b086      	sub	sp, #24
 8000b76:	af00      	add	r7, sp, #0
 8000b78:	4603      	mov	r3, r0
 8000b7a:	60b9      	str	r1, [r7, #8]
 8000b7c:	607a      	str	r2, [r7, #4]
 8000b7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b84:	f7ff ff3e 	bl	8000a04 <__NVIC_GetPriorityGrouping>
 8000b88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b8a:	687a      	ldr	r2, [r7, #4]
 8000b8c:	68b9      	ldr	r1, [r7, #8]
 8000b8e:	6978      	ldr	r0, [r7, #20]
 8000b90:	f7ff ff8e 	bl	8000ab0 <NVIC_EncodePriority>
 8000b94:	4602      	mov	r2, r0
 8000b96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b9a:	4611      	mov	r1, r2
 8000b9c:	4618      	mov	r0, r3
 8000b9e:	f7ff ff5d 	bl	8000a5c <__NVIC_SetPriority>
}
 8000ba2:	bf00      	nop
 8000ba4:	3718      	adds	r7, #24
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}

08000baa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f7ff ff31 	bl	8000a20 <__NVIC_EnableIRQ>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}

08000bc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000bc6:	b580      	push	{r7, lr}
 8000bc8:	b082      	sub	sp, #8
 8000bca:	af00      	add	r7, sp, #0
 8000bcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000bce:	6878      	ldr	r0, [r7, #4]
 8000bd0:	f7ff ffa2 	bl	8000b18 <SysTick_Config>
 8000bd4:	4603      	mov	r3, r0
}
 8000bd6:	4618      	mov	r0, r3
 8000bd8:	3708      	adds	r7, #8
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	bd80      	pop	{r7, pc}

08000bde <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8000bde:	b580      	push	{r7, lr}
 8000be0:	b084      	sub	sp, #16
 8000be2:	af00      	add	r7, sp, #0
 8000be4:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(NULL == hdma)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d101      	bne.n	8000bf4 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8000bf0:	2301      	movs	r3, #1
 8000bf2:	e037      	b.n	8000c64 <HAL_DMA_Init+0x86>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	2202      	movs	r2, #2
 8000bf8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	681b      	ldr	r3, [r3, #0]
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8000c0a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8000c0e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8000c18:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	68db      	ldr	r3, [r3, #12]
 8000c1e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000c24:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	695b      	ldr	r3, [r3, #20]
 8000c2a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000c30:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	69db      	ldr	r3, [r3, #28]
 8000c36:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8000c38:	68fa      	ldr	r2, [r7, #12]
 8000c3a:	4313      	orrs	r3, r2
 8000c3c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8000c3e:	687b      	ldr	r3, [r7, #4]
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68fa      	ldr	r2, [r7, #12]
 8000c44:	601a      	str	r2, [r3, #0]

  /* Initialize DmaBaseAddress and ChannelIndex parameters used
     by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  DMA_CalcBaseAndBitshift(hdma);
 8000c46:	6878      	ldr	r0, [r7, #4]
 8000c48:	f000 f940 	bl	8000ecc <DMA_CalcBaseAndBitshift>

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	2200      	movs	r2, #0
 8000c50:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8000c52:	687b      	ldr	r3, [r7, #4]
 8000c54:	2201      	movs	r2, #1
 8000c56:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8000c62:	2300      	movs	r3, #0
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	3710      	adds	r7, #16
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	bd80      	pop	{r7, pc}

08000c6c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b086      	sub	sp, #24
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	60f8      	str	r0, [r7, #12]
 8000c74:	60b9      	str	r1, [r7, #8]
 8000c76:	607a      	str	r2, [r7, #4]
 8000c78:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000c84:	2b01      	cmp	r3, #1
 8000c86:	d101      	bne.n	8000c8c <HAL_DMA_Start_IT+0x20>
 8000c88:	2302      	movs	r3, #2
 8000c8a:	e04a      	b.n	8000d22 <HAL_DMA_Start_IT+0xb6>
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	2201      	movs	r2, #1
 8000c90:	f883 2020 	strb.w	r2, [r3, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d13a      	bne.n	8000d14 <HAL_DMA_Start_IT+0xa8>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	2202      	movs	r2, #2
 8000ca2:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000ca6:	68fb      	ldr	r3, [r7, #12]
 8000ca8:	2200      	movs	r2, #0
 8000caa:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Disable the peripheral */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	681b      	ldr	r3, [r3, #0]
 8000cb0:	681a      	ldr	r2, [r3, #0]
 8000cb2:	68fb      	ldr	r3, [r7, #12]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	f022 0201 	bic.w	r2, r2, #1
 8000cba:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8000cbc:	683b      	ldr	r3, [r7, #0]
 8000cbe:	687a      	ldr	r2, [r7, #4]
 8000cc0:	68b9      	ldr	r1, [r7, #8]
 8000cc2:	68f8      	ldr	r0, [r7, #12]
 8000cc4:	f000 f8d4 	bl	8000e70 <DMA_SetConfig>

    /* Enable the transfer complete, & transfer error interrupts */
    /* Half transfer interrupt is optional: enable it only if associated callback is available */
    if(NULL != hdma->XferHalfCpltCallback )
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d008      	beq.n	8000ce2 <HAL_DMA_Start_IT+0x76>
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	681a      	ldr	r2, [r3, #0]
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f042 020e 	orr.w	r2, r2, #14
 8000cde:	601a      	str	r2, [r3, #0]
 8000ce0:	e00f      	b.n	8000d02 <HAL_DMA_Start_IT+0x96>
    }
    else
    {
      hdma->Instance->CCR |= (DMA_IT_TC | DMA_IT_TE);
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	681a      	ldr	r2, [r3, #0]
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	f042 020a 	orr.w	r2, r2, #10
 8000cf0:	601a      	str	r2, [r3, #0]
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	f022 0204 	bic.w	r2, r2, #4
 8000d00:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    hdma->Instance->CCR |= DMA_CCR_EN;
 8000d02:	68fb      	ldr	r3, [r7, #12]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	681a      	ldr	r2, [r3, #0]
 8000d08:	68fb      	ldr	r3, [r7, #12]
 8000d0a:	681b      	ldr	r3, [r3, #0]
 8000d0c:	f042 0201 	orr.w	r2, r2, #1
 8000d10:	601a      	str	r2, [r3, #0]
 8000d12:	e005      	b.n	8000d20 <HAL_DMA_Start_IT+0xb4>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	2200      	movs	r2, #0
 8000d18:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8000d1c:	2302      	movs	r3, #2
 8000d1e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8000d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}

08000d2a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8000d2a:	b580      	push	{r7, lr}
 8000d2c:	b084      	sub	sp, #16
 8000d2e:	af00      	add	r7, sp, #0
 8000d30:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d46:	2204      	movs	r2, #4
 8000d48:	409a      	lsls	r2, r3
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	4013      	ands	r3, r2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d024      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x72>
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	f003 0304 	and.w	r3, r3, #4
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	d01f      	beq.n	8000d9c <HAL_DMA_IRQHandler+0x72>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	681b      	ldr	r3, [r3, #0]
 8000d60:	681b      	ldr	r3, [r3, #0]
 8000d62:	f003 0320 	and.w	r3, r3, #32
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d107      	bne.n	8000d7a <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      hdma->Instance->CCR &= ~DMA_IT_HT;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0204 	bic.w	r2, r2, #4
 8000d78:	601a      	str	r2, [r3, #0]
    }

    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_HT1 << hdma->ChannelIndex;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d82:	2104      	movs	r1, #4
 8000d84:	fa01 f202 	lsl.w	r2, r1, r2
 8000d88:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* State is updated only in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d06a      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d96:	6878      	ldr	r0, [r7, #4]
 8000d98:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8000d9a:	e065      	b.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000da0:	2202      	movs	r2, #2
 8000da2:	409a      	lsls	r2, r3
 8000da4:	68fb      	ldr	r3, [r7, #12]
 8000da6:	4013      	ands	r3, r2
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d02c      	beq.n	8000e06 <HAL_DMA_IRQHandler+0xdc>
 8000dac:	68bb      	ldr	r3, [r7, #8]
 8000dae:	f003 0302 	and.w	r3, r3, #2
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d027      	beq.n	8000e06 <HAL_DMA_IRQHandler+0xdc>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	f003 0320 	and.w	r3, r3, #32
 8000dc0:	2b00      	cmp	r3, #0
 8000dc2:	d10b      	bne.n	8000ddc <HAL_DMA_IRQHandler+0xb2>
    {
      /* Disable the transfer complete  & transfer error interrupts */
      /* if the DMA mode is not CIRCULAR */
      hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_TE);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	681b      	ldr	r3, [r3, #0]
 8000dc8:	681a      	ldr	r2, [r3, #0]
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	f022 020a 	bic.w	r2, r2, #10
 8000dd2:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }

    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_TC1 << hdma->ChannelIndex;
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000de4:	2102      	movs	r1, #2
 8000de6:	fa01 f202 	lsl.w	r2, r1, r2
 8000dea:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2200      	movs	r2, #0
 8000df0:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df8:	2b00      	cmp	r3, #0
 8000dfa:	d035      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e00:	6878      	ldr	r0, [r7, #4]
 8000e02:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8000e04:	e030      	b.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
    }
  }

  /* Transfer Error Interrupt management ***************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e0a:	2208      	movs	r2, #8
 8000e0c:	409a      	lsls	r2, r3
 8000e0e:	68fb      	ldr	r3, [r7, #12]
 8000e10:	4013      	ands	r3, r2
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d028      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
 8000e16:	68bb      	ldr	r3, [r7, #8]
 8000e18:	f003 0308 	and.w	r3, r3, #8
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d023      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Then, disable all DMA interrupts */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	681a      	ldr	r2, [r3, #0]
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f022 020e 	bic.w	r2, r2, #14
 8000e2e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000e30:	687b      	ldr	r3, [r7, #4]
 8000e32:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e38:	2101      	movs	r1, #1
 8000e3a:	fa01 f202 	lsl.w	r2, r1, r2
 8000e3e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2201      	movs	r2, #1
 8000e44:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	2200      	movs	r2, #0
 8000e52:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferErrorCallback != NULL)
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d004      	beq.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e62:	6878      	ldr	r0, [r7, #4]
 8000e64:	4798      	blx	r3
    }
  }
}
 8000e66:	e7ff      	b.n	8000e68 <HAL_DMA_IRQHandler+0x13e>
 8000e68:	bf00      	nop
 8000e6a:	3710      	adds	r7, #16
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd80      	pop	{r7, pc}

08000e70 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
 8000e7c:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR  = (DMA_FLAG_GL1 << hdma->ChannelIndex);
 8000e7e:	68fb      	ldr	r3, [r7, #12]
 8000e80:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000e86:	2101      	movs	r1, #1
 8000e88:	fa01 f202 	lsl.w	r2, r1, r2
 8000e8c:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000e8e:	68fb      	ldr	r3, [r7, #12]
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	683a      	ldr	r2, [r7, #0]
 8000e94:	605a      	str	r2, [r3, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	2b10      	cmp	r3, #16
 8000e9c:	d108      	bne.n	8000eb0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8000ea6:	68fb      	ldr	r3, [r7, #12]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8000eae:	e007      	b.n	8000ec0 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	681b      	ldr	r3, [r3, #0]
 8000eb4:	68ba      	ldr	r2, [r7, #8]
 8000eb6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	687a      	ldr	r2, [r7, #4]
 8000ebe:	60da      	str	r2, [r3, #12]
}
 8000ec0:	bf00      	nop
 8000ec2:	3714      	adds	r7, #20
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
#if defined (DMA2)
  /* calculation of the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	461a      	mov	r2, r3
 8000eda:	4b14      	ldr	r3, [pc, #80]	@ (8000f2c <DMA_CalcBaseAndBitshift+0x60>)
 8000edc:	429a      	cmp	r2, r3
 8000ede:	d80f      	bhi.n	8000f00 <DMA_CalcBaseAndBitshift+0x34>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	4b12      	ldr	r3, [pc, #72]	@ (8000f30 <DMA_CalcBaseAndBitshift+0x64>)
 8000ee8:	4413      	add	r3, r2
 8000eea:	4a12      	ldr	r2, [pc, #72]	@ (8000f34 <DMA_CalcBaseAndBitshift+0x68>)
 8000eec:	fba2 2303 	umull	r2, r3, r2, r3
 8000ef0:	091b      	lsrs	r3, r3, #4
 8000ef2:	009a      	lsls	r2, r3, #2
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA1;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	4a0f      	ldr	r2, [pc, #60]	@ (8000f38 <DMA_CalcBaseAndBitshift+0x6c>)
 8000efc:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
  hdma->DmaBaseAddress = DMA1;
#endif
}
 8000efe:	e00e      	b.n	8000f1e <DMA_CalcBaseAndBitshift+0x52>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	461a      	mov	r2, r3
 8000f06:	4b0d      	ldr	r3, [pc, #52]	@ (8000f3c <DMA_CalcBaseAndBitshift+0x70>)
 8000f08:	4413      	add	r3, r2
 8000f0a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <DMA_CalcBaseAndBitshift+0x68>)
 8000f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8000f10:	091b      	lsrs	r3, r3, #4
 8000f12:	009a      	lsls	r2, r3, #2
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	641a      	str	r2, [r3, #64]	@ 0x40
    hdma->DmaBaseAddress = DMA2;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4a09      	ldr	r2, [pc, #36]	@ (8000f40 <DMA_CalcBaseAndBitshift+0x74>)
 8000f1c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8000f1e:	bf00      	nop
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40020407 	.word	0x40020407
 8000f30:	bffdfff8 	.word	0xbffdfff8
 8000f34:	cccccccd 	.word	0xcccccccd
 8000f38:	40020000 	.word	0x40020000
 8000f3c:	bffdfbf8 	.word	0xbffdfbf8
 8000f40:	40020400 	.word	0x40020400

08000f44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b087      	sub	sp, #28
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
 8000f4c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f52:	e160      	b.n	8001216 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f54:	683b      	ldr	r3, [r7, #0]
 8000f56:	681a      	ldr	r2, [r3, #0]
 8000f58:	2101      	movs	r1, #1
 8000f5a:	697b      	ldr	r3, [r7, #20]
 8000f5c:	fa01 f303 	lsl.w	r3, r1, r3
 8000f60:	4013      	ands	r3, r2
 8000f62:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	f000 8152 	beq.w	8001210 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	685b      	ldr	r3, [r3, #4]
 8000f70:	f003 0303 	and.w	r3, r3, #3
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d005      	beq.n	8000f84 <HAL_GPIO_Init+0x40>
 8000f78:	683b      	ldr	r3, [r7, #0]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f003 0303 	and.w	r3, r3, #3
 8000f80:	2b02      	cmp	r3, #2
 8000f82:	d130      	bne.n	8000fe6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	2203      	movs	r2, #3
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	43db      	mvns	r3, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4013      	ands	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	68da      	ldr	r2, [r3, #12]
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	005b      	lsls	r3, r3, #1
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4313      	orrs	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000fba:	2201      	movs	r2, #1
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc2:	43db      	mvns	r3, r3
 8000fc4:	693a      	ldr	r2, [r7, #16]
 8000fc6:	4013      	ands	r3, r2
 8000fc8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	091b      	lsrs	r3, r3, #4
 8000fd0:	f003 0201 	and.w	r2, r3, #1
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fda:	693a      	ldr	r2, [r7, #16]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	685b      	ldr	r3, [r3, #4]
 8000fea:	f003 0303 	and.w	r3, r3, #3
 8000fee:	2b03      	cmp	r3, #3
 8000ff0:	d017      	beq.n	8001022 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	68db      	ldr	r3, [r3, #12]
 8000ff6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	005b      	lsls	r3, r3, #1
 8000ffc:	2203      	movs	r2, #3
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	43db      	mvns	r3, r3
 8001004:	693a      	ldr	r2, [r7, #16]
 8001006:	4013      	ands	r3, r2
 8001008:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	689a      	ldr	r2, [r3, #8]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	005b      	lsls	r3, r3, #1
 8001012:	fa02 f303 	lsl.w	r3, r2, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4313      	orrs	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	693a      	ldr	r2, [r7, #16]
 8001020:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
 800102a:	2b02      	cmp	r3, #2
 800102c:	d123      	bne.n	8001076 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	08da      	lsrs	r2, r3, #3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	3208      	adds	r2, #8
 8001036:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800103a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	f003 0307 	and.w	r3, r3, #7
 8001042:	009b      	lsls	r3, r3, #2
 8001044:	220f      	movs	r2, #15
 8001046:	fa02 f303 	lsl.w	r3, r2, r3
 800104a:	43db      	mvns	r3, r3
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	4013      	ands	r3, r2
 8001050:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	691a      	ldr	r2, [r3, #16]
 8001056:	697b      	ldr	r3, [r7, #20]
 8001058:	f003 0307 	and.w	r3, r3, #7
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	fa02 f303 	lsl.w	r3, r2, r3
 8001062:	693a      	ldr	r2, [r7, #16]
 8001064:	4313      	orrs	r3, r2
 8001066:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001068:	697b      	ldr	r3, [r7, #20]
 800106a:	08da      	lsrs	r2, r3, #3
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	3208      	adds	r2, #8
 8001070:	6939      	ldr	r1, [r7, #16]
 8001072:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 800107c:	697b      	ldr	r3, [r7, #20]
 800107e:	005b      	lsls	r3, r3, #1
 8001080:	2203      	movs	r2, #3
 8001082:	fa02 f303 	lsl.w	r3, r2, r3
 8001086:	43db      	mvns	r3, r3
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4013      	ands	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f003 0203 	and.w	r2, r3, #3
 8001096:	697b      	ldr	r3, [r7, #20]
 8001098:	005b      	lsls	r3, r3, #1
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	693a      	ldr	r2, [r7, #16]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 80ac 	beq.w	8001210 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010b8:	4b5e      	ldr	r3, [pc, #376]	@ (8001234 <HAL_GPIO_Init+0x2f0>)
 80010ba:	699b      	ldr	r3, [r3, #24]
 80010bc:	4a5d      	ldr	r2, [pc, #372]	@ (8001234 <HAL_GPIO_Init+0x2f0>)
 80010be:	f043 0301 	orr.w	r3, r3, #1
 80010c2:	6193      	str	r3, [r2, #24]
 80010c4:	4b5b      	ldr	r3, [pc, #364]	@ (8001234 <HAL_GPIO_Init+0x2f0>)
 80010c6:	699b      	ldr	r3, [r3, #24]
 80010c8:	f003 0301 	and.w	r3, r3, #1
 80010cc:	60bb      	str	r3, [r7, #8]
 80010ce:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010d0:	4a59      	ldr	r2, [pc, #356]	@ (8001238 <HAL_GPIO_Init+0x2f4>)
 80010d2:	697b      	ldr	r3, [r7, #20]
 80010d4:	089b      	lsrs	r3, r3, #2
 80010d6:	3302      	adds	r3, #2
 80010d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010dc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	f003 0303 	and.w	r3, r3, #3
 80010e4:	009b      	lsls	r3, r3, #2
 80010e6:	220f      	movs	r2, #15
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	693a      	ldr	r2, [r7, #16]
 80010f0:	4013      	ands	r3, r2
 80010f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80010fa:	d025      	beq.n	8001148 <HAL_GPIO_Init+0x204>
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	4a4f      	ldr	r2, [pc, #316]	@ (800123c <HAL_GPIO_Init+0x2f8>)
 8001100:	4293      	cmp	r3, r2
 8001102:	d01f      	beq.n	8001144 <HAL_GPIO_Init+0x200>
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	4a4e      	ldr	r2, [pc, #312]	@ (8001240 <HAL_GPIO_Init+0x2fc>)
 8001108:	4293      	cmp	r3, r2
 800110a:	d019      	beq.n	8001140 <HAL_GPIO_Init+0x1fc>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4a4d      	ldr	r2, [pc, #308]	@ (8001244 <HAL_GPIO_Init+0x300>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d013      	beq.n	800113c <HAL_GPIO_Init+0x1f8>
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	4a4c      	ldr	r2, [pc, #304]	@ (8001248 <HAL_GPIO_Init+0x304>)
 8001118:	4293      	cmp	r3, r2
 800111a:	d00d      	beq.n	8001138 <HAL_GPIO_Init+0x1f4>
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	4a4b      	ldr	r2, [pc, #300]	@ (800124c <HAL_GPIO_Init+0x308>)
 8001120:	4293      	cmp	r3, r2
 8001122:	d007      	beq.n	8001134 <HAL_GPIO_Init+0x1f0>
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	4a4a      	ldr	r2, [pc, #296]	@ (8001250 <HAL_GPIO_Init+0x30c>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d101      	bne.n	8001130 <HAL_GPIO_Init+0x1ec>
 800112c:	2306      	movs	r3, #6
 800112e:	e00c      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001130:	2307      	movs	r3, #7
 8001132:	e00a      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001134:	2305      	movs	r3, #5
 8001136:	e008      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001138:	2304      	movs	r3, #4
 800113a:	e006      	b.n	800114a <HAL_GPIO_Init+0x206>
 800113c:	2303      	movs	r3, #3
 800113e:	e004      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001140:	2302      	movs	r3, #2
 8001142:	e002      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001144:	2301      	movs	r3, #1
 8001146:	e000      	b.n	800114a <HAL_GPIO_Init+0x206>
 8001148:	2300      	movs	r3, #0
 800114a:	697a      	ldr	r2, [r7, #20]
 800114c:	f002 0203 	and.w	r2, r2, #3
 8001150:	0092      	lsls	r2, r2, #2
 8001152:	4093      	lsls	r3, r2
 8001154:	693a      	ldr	r2, [r7, #16]
 8001156:	4313      	orrs	r3, r2
 8001158:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800115a:	4937      	ldr	r1, [pc, #220]	@ (8001238 <HAL_GPIO_Init+0x2f4>)
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	089b      	lsrs	r3, r3, #2
 8001160:	3302      	adds	r3, #2
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001168:	4b3a      	ldr	r3, [pc, #232]	@ (8001254 <HAL_GPIO_Init+0x310>)
 800116a:	689b      	ldr	r3, [r3, #8]
 800116c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	43db      	mvns	r3, r3
 8001172:	693a      	ldr	r2, [r7, #16]
 8001174:	4013      	ands	r3, r2
 8001176:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001180:	2b00      	cmp	r3, #0
 8001182:	d003      	beq.n	800118c <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8001184:	693a      	ldr	r2, [r7, #16]
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	4313      	orrs	r3, r2
 800118a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800118c:	4a31      	ldr	r2, [pc, #196]	@ (8001254 <HAL_GPIO_Init+0x310>)
 800118e:	693b      	ldr	r3, [r7, #16]
 8001190:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001192:	4b30      	ldr	r3, [pc, #192]	@ (8001254 <HAL_GPIO_Init+0x310>)
 8001194:	68db      	ldr	r3, [r3, #12]
 8001196:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	43db      	mvns	r3, r3
 800119c:	693a      	ldr	r2, [r7, #16]
 800119e:	4013      	ands	r3, r2
 80011a0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d003      	beq.n	80011b6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80011ae:	693a      	ldr	r2, [r7, #16]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	4313      	orrs	r3, r2
 80011b4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011b6:	4a27      	ldr	r2, [pc, #156]	@ (8001254 <HAL_GPIO_Init+0x310>)
 80011b8:	693b      	ldr	r3, [r7, #16]
 80011ba:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80011bc:	4b25      	ldr	r3, [pc, #148]	@ (8001254 <HAL_GPIO_Init+0x310>)
 80011be:	685b      	ldr	r3, [r3, #4]
 80011c0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	43db      	mvns	r3, r3
 80011c6:	693a      	ldr	r2, [r7, #16]
 80011c8:	4013      	ands	r3, r2
 80011ca:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	685b      	ldr	r3, [r3, #4]
 80011d0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d003      	beq.n	80011e0 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80011d8:	693a      	ldr	r2, [r7, #16]
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	4313      	orrs	r3, r2
 80011de:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80011e0:	4a1c      	ldr	r2, [pc, #112]	@ (8001254 <HAL_GPIO_Init+0x310>)
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e6:	4b1b      	ldr	r3, [pc, #108]	@ (8001254 <HAL_GPIO_Init+0x310>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	43db      	mvns	r3, r3
 80011f0:	693a      	ldr	r2, [r7, #16]
 80011f2:	4013      	ands	r3, r2
 80011f4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d003      	beq.n	800120a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8001202:	693a      	ldr	r2, [r7, #16]
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	4313      	orrs	r3, r2
 8001208:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120a:	4a12      	ldr	r2, [pc, #72]	@ (8001254 <HAL_GPIO_Init+0x310>)
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	681a      	ldr	r2, [r3, #0]
 800121a:	697b      	ldr	r3, [r7, #20]
 800121c:	fa22 f303 	lsr.w	r3, r2, r3
 8001220:	2b00      	cmp	r3, #0
 8001222:	f47f ae97 	bne.w	8000f54 <HAL_GPIO_Init+0x10>
  }
}
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	371c      	adds	r7, #28
 800122c:	46bd      	mov	sp, r7
 800122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001232:	4770      	bx	lr
 8001234:	40021000 	.word	0x40021000
 8001238:	40010000 	.word	0x40010000
 800123c:	48000400 	.word	0x48000400
 8001240:	48000800 	.word	0x48000800
 8001244:	48000c00 	.word	0x48000c00
 8001248:	48001000 	.word	0x48001000
 800124c:	48001400 	.word	0x48001400
 8001250:	48001800 	.word	0x48001800
 8001254:	40010400 	.word	0x40010400

08001258 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 800125e:	af00      	add	r7, sp, #0
 8001260:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001264:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001268:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800126a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800126e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	2b00      	cmp	r3, #0
 8001276:	d102      	bne.n	800127e <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8001278:	2301      	movs	r3, #1
 800127a:	f001 b83a 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800127e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001282:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	f003 0301 	and.w	r3, r3, #1
 800128e:	2b00      	cmp	r3, #0
 8001290:	f000 816f 	beq.w	8001572 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001294:	4bb5      	ldr	r3, [pc, #724]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f003 030c 	and.w	r3, r3, #12
 800129c:	2b04      	cmp	r3, #4
 800129e:	d00c      	beq.n	80012ba <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80012a0:	4bb2      	ldr	r3, [pc, #712]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f003 030c 	and.w	r3, r3, #12
 80012a8:	2b08      	cmp	r3, #8
 80012aa:	d15c      	bne.n	8001366 <HAL_RCC_OscConfig+0x10e>
 80012ac:	4baf      	ldr	r3, [pc, #700]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80012ae:	685b      	ldr	r3, [r3, #4]
 80012b0:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80012b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80012b8:	d155      	bne.n	8001366 <HAL_RCC_OscConfig+0x10e>
 80012ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012be:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80012c6:	fa93 f3a3 	rbit	r3, r3
 80012ca:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80012ce:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012d2:	fab3 f383 	clz	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
 80012d8:	095b      	lsrs	r3, r3, #5
 80012da:	b2db      	uxtb	r3, r3
 80012dc:	f043 0301 	orr.w	r3, r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	d102      	bne.n	80012ec <HAL_RCC_OscConfig+0x94>
 80012e6:	4ba1      	ldr	r3, [pc, #644]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	e015      	b.n	8001318 <HAL_RCC_OscConfig+0xc0>
 80012ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80012f0:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f4:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8001300:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001304:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8001308:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 800130c:	fa93 f3a3 	rbit	r3, r3
 8001310:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8001314:	4b95      	ldr	r3, [pc, #596]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001316:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001318:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800131c:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8001320:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8001324:	fa92 f2a2 	rbit	r2, r2
 8001328:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 800132c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8001330:	fab2 f282 	clz	r2, r2
 8001334:	b2d2      	uxtb	r2, r2
 8001336:	f042 0220 	orr.w	r2, r2, #32
 800133a:	b2d2      	uxtb	r2, r2
 800133c:	f002 021f 	and.w	r2, r2, #31
 8001340:	2101      	movs	r1, #1
 8001342:	fa01 f202 	lsl.w	r2, r1, r2
 8001346:	4013      	ands	r3, r2
 8001348:	2b00      	cmp	r3, #0
 800134a:	f000 8111 	beq.w	8001570 <HAL_RCC_OscConfig+0x318>
 800134e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001352:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	2b00      	cmp	r3, #0
 800135c:	f040 8108 	bne.w	8001570 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8001360:	2301      	movs	r3, #1
 8001362:	f000 bfc6 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001366:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800136a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001376:	d106      	bne.n	8001386 <HAL_RCC_OscConfig+0x12e>
 8001378:	4b7c      	ldr	r3, [pc, #496]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 800137a:	681b      	ldr	r3, [r3, #0]
 800137c:	4a7b      	ldr	r2, [pc, #492]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 800137e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001382:	6013      	str	r3, [r2, #0]
 8001384:	e036      	b.n	80013f4 <HAL_RCC_OscConfig+0x19c>
 8001386:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800138a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	2b00      	cmp	r3, #0
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0x158>
 8001396:	4b75      	ldr	r3, [pc, #468]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a74      	ldr	r2, [pc, #464]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 800139c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b72      	ldr	r3, [pc, #456]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a71      	ldr	r2, [pc, #452]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e021      	b.n	80013f4 <HAL_RCC_OscConfig+0x19c>
 80013b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013c0:	d10c      	bne.n	80013dc <HAL_RCC_OscConfig+0x184>
 80013c2:	4b6a      	ldr	r3, [pc, #424]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	4a69      	ldr	r2, [pc, #420]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013cc:	6013      	str	r3, [r2, #0]
 80013ce:	4b67      	ldr	r3, [pc, #412]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	4a66      	ldr	r2, [pc, #408]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013d8:	6013      	str	r3, [r2, #0]
 80013da:	e00b      	b.n	80013f4 <HAL_RCC_OscConfig+0x19c>
 80013dc:	4b63      	ldr	r3, [pc, #396]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4a62      	ldr	r2, [pc, #392]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013e6:	6013      	str	r3, [r2, #0]
 80013e8:	4b60      	ldr	r3, [pc, #384]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	4a5f      	ldr	r2, [pc, #380]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 80013ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013f2:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80013f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	2b00      	cmp	r3, #0
 8001402:	d059      	beq.n	80014b8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001404:	f7ff face 	bl	80009a4 <HAL_GetTick>
 8001408:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800140c:	e00a      	b.n	8001424 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800140e:	f7ff fac9 	bl	80009a4 <HAL_GetTick>
 8001412:	4602      	mov	r2, r0
 8001414:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	2b64      	cmp	r3, #100	@ 0x64
 800141c:	d902      	bls.n	8001424 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 800141e:	2303      	movs	r3, #3
 8001420:	f000 bf67 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001424:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001428:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8001430:	fa93 f3a3 	rbit	r3, r3
 8001434:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8001438:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800143c:	fab3 f383 	clz	r3, r3
 8001440:	b2db      	uxtb	r3, r3
 8001442:	095b      	lsrs	r3, r3, #5
 8001444:	b2db      	uxtb	r3, r3
 8001446:	f043 0301 	orr.w	r3, r3, #1
 800144a:	b2db      	uxtb	r3, r3
 800144c:	2b01      	cmp	r3, #1
 800144e:	d102      	bne.n	8001456 <HAL_RCC_OscConfig+0x1fe>
 8001450:	4b46      	ldr	r3, [pc, #280]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	e015      	b.n	8001482 <HAL_RCC_OscConfig+0x22a>
 8001456:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800145a:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800145e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8001462:	fa93 f3a3 	rbit	r3, r3
 8001466:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800146a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800146e:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8001472:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 8001476:	fa93 f3a3 	rbit	r3, r3
 800147a:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 800147e:	4b3b      	ldr	r3, [pc, #236]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001480:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001482:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8001486:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800148a:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 800148e:	fa92 f2a2 	rbit	r2, r2
 8001492:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 8001496:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 800149a:	fab2 f282 	clz	r2, r2
 800149e:	b2d2      	uxtb	r2, r2
 80014a0:	f042 0220 	orr.w	r2, r2, #32
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	f002 021f 	and.w	r2, r2, #31
 80014aa:	2101      	movs	r1, #1
 80014ac:	fa01 f202 	lsl.w	r2, r1, r2
 80014b0:	4013      	ands	r3, r2
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ab      	beq.n	800140e <HAL_RCC_OscConfig+0x1b6>
 80014b6:	e05c      	b.n	8001572 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b8:	f7ff fa74 	bl	80009a4 <HAL_GetTick>
 80014bc:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014c0:	e00a      	b.n	80014d8 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014c2:	f7ff fa6f 	bl	80009a4 <HAL_GetTick>
 80014c6:	4602      	mov	r2, r0
 80014c8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80014cc:	1ad3      	subs	r3, r2, r3
 80014ce:	2b64      	cmp	r3, #100	@ 0x64
 80014d0:	d902      	bls.n	80014d8 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80014d2:	2303      	movs	r3, #3
 80014d4:	f000 bf0d 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 80014d8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80014dc:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80014e4:	fa93 f3a3 	rbit	r3, r3
 80014e8:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 80014ec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014f0:	fab3 f383 	clz	r3, r3
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	095b      	lsrs	r3, r3, #5
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	f043 0301 	orr.w	r3, r3, #1
 80014fe:	b2db      	uxtb	r3, r3
 8001500:	2b01      	cmp	r3, #1
 8001502:	d102      	bne.n	800150a <HAL_RCC_OscConfig+0x2b2>
 8001504:	4b19      	ldr	r3, [pc, #100]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x2de>
 800150a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800150e:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001512:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 8001516:	fa93 f3a3 	rbit	r3, r3
 800151a:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 800151e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8001522:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 8001526:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800152a:	fa93 f3a3 	rbit	r3, r3
 800152e:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8001532:	4b0e      	ldr	r3, [pc, #56]	@ (800156c <HAL_RCC_OscConfig+0x314>)
 8001534:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001536:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800153a:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 800153e:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8001542:	fa92 f2a2 	rbit	r2, r2
 8001546:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800154a:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 800154e:	fab2 f282 	clz	r2, r2
 8001552:	b2d2      	uxtb	r2, r2
 8001554:	f042 0220 	orr.w	r2, r2, #32
 8001558:	b2d2      	uxtb	r2, r2
 800155a:	f002 021f 	and.w	r2, r2, #31
 800155e:	2101      	movs	r1, #1
 8001560:	fa01 f202 	lsl.w	r2, r1, r2
 8001564:	4013      	ands	r3, r2
 8001566:	2b00      	cmp	r3, #0
 8001568:	d1ab      	bne.n	80014c2 <HAL_RCC_OscConfig+0x26a>
 800156a:	e002      	b.n	8001572 <HAL_RCC_OscConfig+0x31a>
 800156c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001570:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001572:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001576:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	f000 817f 	beq.w	8001886 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001588:	4ba7      	ldr	r3, [pc, #668]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f003 030c 	and.w	r3, r3, #12
 8001590:	2b00      	cmp	r3, #0
 8001592:	d00c      	beq.n	80015ae <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001594:	4ba4      	ldr	r3, [pc, #656]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f003 030c 	and.w	r3, r3, #12
 800159c:	2b08      	cmp	r3, #8
 800159e:	d173      	bne.n	8001688 <HAL_RCC_OscConfig+0x430>
 80015a0:	4ba1      	ldr	r3, [pc, #644]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 80015a2:	685b      	ldr	r3, [r3, #4]
 80015a4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80015a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80015ac:	d16c      	bne.n	8001688 <HAL_RCC_OscConfig+0x430>
 80015ae:	2302      	movs	r3, #2
 80015b0:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80015b8:	fa93 f3a3 	rbit	r3, r3
 80015bc:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80015c0:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80015c4:	fab3 f383 	clz	r3, r3
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	095b      	lsrs	r3, r3, #5
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b01      	cmp	r3, #1
 80015d6:	d102      	bne.n	80015de <HAL_RCC_OscConfig+0x386>
 80015d8:	4b93      	ldr	r3, [pc, #588]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	e013      	b.n	8001606 <HAL_RCC_OscConfig+0x3ae>
 80015de:	2302      	movs	r3, #2
 80015e0:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e4:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80015e8:	fa93 f3a3 	rbit	r3, r3
 80015ec:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 80015f0:	2302      	movs	r3, #2
 80015f2:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 80015f6:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 80015fa:	fa93 f3a3 	rbit	r3, r3
 80015fe:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8001602:	4b89      	ldr	r3, [pc, #548]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001604:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001606:	2202      	movs	r2, #2
 8001608:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 800160c:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8001610:	fa92 f2a2 	rbit	r2, r2
 8001614:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8001618:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 800161c:	fab2 f282 	clz	r2, r2
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f042 0220 	orr.w	r2, r2, #32
 8001626:	b2d2      	uxtb	r2, r2
 8001628:	f002 021f 	and.w	r2, r2, #31
 800162c:	2101      	movs	r1, #1
 800162e:	fa01 f202 	lsl.w	r2, r1, r2
 8001632:	4013      	ands	r3, r2
 8001634:	2b00      	cmp	r3, #0
 8001636:	d00a      	beq.n	800164e <HAL_RCC_OscConfig+0x3f6>
 8001638:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800163c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	68db      	ldr	r3, [r3, #12]
 8001644:	2b01      	cmp	r3, #1
 8001646:	d002      	beq.n	800164e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001648:	2301      	movs	r3, #1
 800164a:	f000 be52 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800164e:	4b76      	ldr	r3, [pc, #472]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001656:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800165a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	691b      	ldr	r3, [r3, #16]
 8001662:	21f8      	movs	r1, #248	@ 0xf8
 8001664:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001668:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 800166c:	fa91 f1a1 	rbit	r1, r1
 8001670:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8001674:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 8001678:	fab1 f181 	clz	r1, r1
 800167c:	b2c9      	uxtb	r1, r1
 800167e:	408b      	lsls	r3, r1
 8001680:	4969      	ldr	r1, [pc, #420]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001686:	e0fe      	b.n	8001886 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001688:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800168c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	68db      	ldr	r3, [r3, #12]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f000 8088 	beq.w	80017aa <HAL_RCC_OscConfig+0x552>
 800169a:	2301      	movs	r3, #1
 800169c:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a0:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80016a4:	fa93 f3a3 	rbit	r3, r3
 80016a8:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80016ac:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80016b0:	fab3 f383 	clz	r3, r3
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80016ba:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80016be:	009b      	lsls	r3, r3, #2
 80016c0:	461a      	mov	r2, r3
 80016c2:	2301      	movs	r3, #1
 80016c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016c6:	f7ff f96d 	bl	80009a4 <HAL_GetTick>
 80016ca:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016ce:	e00a      	b.n	80016e6 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80016d0:	f7ff f968 	bl	80009a4 <HAL_GetTick>
 80016d4:	4602      	mov	r2, r0
 80016d6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d902      	bls.n	80016e6 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	f000 be06 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 80016e6:	2302      	movs	r3, #2
 80016e8:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 80016f0:	fa93 f3a3 	rbit	r3, r3
 80016f4:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 80016f8:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	095b      	lsrs	r3, r3, #5
 8001704:	b2db      	uxtb	r3, r3
 8001706:	f043 0301 	orr.w	r3, r3, #1
 800170a:	b2db      	uxtb	r3, r3
 800170c:	2b01      	cmp	r3, #1
 800170e:	d102      	bne.n	8001716 <HAL_RCC_OscConfig+0x4be>
 8001710:	4b45      	ldr	r3, [pc, #276]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	e013      	b.n	800173e <HAL_RCC_OscConfig+0x4e6>
 8001716:	2302      	movs	r3, #2
 8001718:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001720:	fa93 f3a3 	rbit	r3, r3
 8001724:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001728:	2302      	movs	r3, #2
 800172a:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 800172e:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001732:	fa93 f3a3 	rbit	r3, r3
 8001736:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800173a:	4b3b      	ldr	r3, [pc, #236]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 800173c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800173e:	2202      	movs	r2, #2
 8001740:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8001744:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001748:	fa92 f2a2 	rbit	r2, r2
 800174c:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8001750:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001754:	fab2 f282 	clz	r2, r2
 8001758:	b2d2      	uxtb	r2, r2
 800175a:	f042 0220 	orr.w	r2, r2, #32
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	f002 021f 	and.w	r2, r2, #31
 8001764:	2101      	movs	r1, #1
 8001766:	fa01 f202 	lsl.w	r2, r1, r2
 800176a:	4013      	ands	r3, r2
 800176c:	2b00      	cmp	r3, #0
 800176e:	d0af      	beq.n	80016d0 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001770:	4b2d      	ldr	r3, [pc, #180]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001778:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800177c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	691b      	ldr	r3, [r3, #16]
 8001784:	21f8      	movs	r1, #248	@ 0xf8
 8001786:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800178a:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 800178e:	fa91 f1a1 	rbit	r1, r1
 8001792:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 8001796:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 800179a:	fab1 f181 	clz	r1, r1
 800179e:	b2c9      	uxtb	r1, r1
 80017a0:	408b      	lsls	r3, r1
 80017a2:	4921      	ldr	r1, [pc, #132]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e06d      	b.n	8001886 <HAL_RCC_OscConfig+0x62e>
 80017aa:	2301      	movs	r3, #1
 80017ac:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80017b4:	fa93 f3a3 	rbit	r3, r3
 80017b8:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80017bc:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017c0:	fab3 f383 	clz	r3, r3
 80017c4:	b2db      	uxtb	r3, r3
 80017c6:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80017ca:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	461a      	mov	r2, r3
 80017d2:	2300      	movs	r3, #0
 80017d4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017d6:	f7ff f8e5 	bl	80009a4 <HAL_GetTick>
 80017da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017de:	e00a      	b.n	80017f6 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80017e0:	f7ff f8e0 	bl	80009a4 <HAL_GetTick>
 80017e4:	4602      	mov	r2, r0
 80017e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80017ea:	1ad3      	subs	r3, r2, r3
 80017ec:	2b02      	cmp	r3, #2
 80017ee:	d902      	bls.n	80017f6 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 80017f0:	2303      	movs	r3, #3
 80017f2:	f000 bd7e 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 80017f6:	2302      	movs	r3, #2
 80017f8:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017fc:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001800:	fa93 f3a3 	rbit	r3, r3
 8001804:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8001808:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800180c:	fab3 f383 	clz	r3, r3
 8001810:	b2db      	uxtb	r3, r3
 8001812:	095b      	lsrs	r3, r3, #5
 8001814:	b2db      	uxtb	r3, r3
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	b2db      	uxtb	r3, r3
 800181c:	2b01      	cmp	r3, #1
 800181e:	d105      	bne.n	800182c <HAL_RCC_OscConfig+0x5d4>
 8001820:	4b01      	ldr	r3, [pc, #4]	@ (8001828 <HAL_RCC_OscConfig+0x5d0>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	e016      	b.n	8001854 <HAL_RCC_OscConfig+0x5fc>
 8001826:	bf00      	nop
 8001828:	40021000 	.word	0x40021000
 800182c:	2302      	movs	r3, #2
 800182e:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001832:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001836:	fa93 f3a3 	rbit	r3, r3
 800183a:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 800183e:	2302      	movs	r3, #2
 8001840:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8001844:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001848:	fa93 f3a3 	rbit	r3, r3
 800184c:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8001850:	4bbf      	ldr	r3, [pc, #764]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001852:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001854:	2202      	movs	r2, #2
 8001856:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800185a:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 800185e:	fa92 f2a2 	rbit	r2, r2
 8001862:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 8001866:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800186a:	fab2 f282 	clz	r2, r2
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	f042 0220 	orr.w	r2, r2, #32
 8001874:	b2d2      	uxtb	r2, r2
 8001876:	f002 021f 	and.w	r2, r2, #31
 800187a:	2101      	movs	r1, #1
 800187c:	fa01 f202 	lsl.w	r2, r1, r2
 8001880:	4013      	ands	r3, r2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1ac      	bne.n	80017e0 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001886:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800188a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	f003 0308 	and.w	r3, r3, #8
 8001896:	2b00      	cmp	r3, #0
 8001898:	f000 8113 	beq.w	8001ac2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800189c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80018a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	695b      	ldr	r3, [r3, #20]
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d07c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x74e>
 80018ac:	2301      	movs	r3, #1
 80018ae:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80018b6:	fa93 f3a3 	rbit	r3, r3
 80018ba:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80018be:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80018c2:	fab3 f383 	clz	r3, r3
 80018c6:	b2db      	uxtb	r3, r3
 80018c8:	461a      	mov	r2, r3
 80018ca:	4ba2      	ldr	r3, [pc, #648]	@ (8001b54 <HAL_RCC_OscConfig+0x8fc>)
 80018cc:	4413      	add	r3, r2
 80018ce:	009b      	lsls	r3, r3, #2
 80018d0:	461a      	mov	r2, r3
 80018d2:	2301      	movs	r3, #1
 80018d4:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80018d6:	f7ff f865 	bl	80009a4 <HAL_GetTick>
 80018da:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018de:	e00a      	b.n	80018f6 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80018e0:	f7ff f860 	bl	80009a4 <HAL_GetTick>
 80018e4:	4602      	mov	r2, r0
 80018e6:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d902      	bls.n	80018f6 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	f000 bcfe 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 80018f6:	2302      	movs	r3, #2
 80018f8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001900:	fa93 f2a3 	rbit	r2, r3
 8001904:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001908:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800190c:	601a      	str	r2, [r3, #0]
 800190e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001912:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001916:	2202      	movs	r2, #2
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800191e:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	fa93 f2a3 	rbit	r2, r3
 8001928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800192c:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8001930:	601a      	str	r2, [r3, #0]
 8001932:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001936:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800193a:	2202      	movs	r2, #2
 800193c:	601a      	str	r2, [r3, #0]
 800193e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001942:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	fa93 f2a3 	rbit	r2, r3
 800194c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001950:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8001954:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001956:	4b7e      	ldr	r3, [pc, #504]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001958:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800195a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800195e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8001962:	2102      	movs	r1, #2
 8001964:	6019      	str	r1, [r3, #0]
 8001966:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800196a:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	fa93 f1a3 	rbit	r1, r3
 8001974:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001978:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800197c:	6019      	str	r1, [r3, #0]
  return result;
 800197e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001982:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	fab3 f383 	clz	r3, r3
 800198c:	b2db      	uxtb	r3, r3
 800198e:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001992:	b2db      	uxtb	r3, r3
 8001994:	f003 031f 	and.w	r3, r3, #31
 8001998:	2101      	movs	r1, #1
 800199a:	fa01 f303 	lsl.w	r3, r1, r3
 800199e:	4013      	ands	r3, r2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d09d      	beq.n	80018e0 <HAL_RCC_OscConfig+0x688>
 80019a4:	e08d      	b.n	8001ac2 <HAL_RCC_OscConfig+0x86a>
 80019a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019aa:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019ae:	2201      	movs	r2, #1
 80019b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019b6:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019c4:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019c8:	601a      	str	r2, [r3, #0]
  return result;
 80019ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80019ce:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80019d2:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019d4:	fab3 f383 	clz	r3, r3
 80019d8:	b2db      	uxtb	r3, r3
 80019da:	461a      	mov	r2, r3
 80019dc:	4b5d      	ldr	r3, [pc, #372]	@ (8001b54 <HAL_RCC_OscConfig+0x8fc>)
 80019de:	4413      	add	r3, r2
 80019e0:	009b      	lsls	r3, r3, #2
 80019e2:	461a      	mov	r2, r3
 80019e4:	2300      	movs	r3, #0
 80019e6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019e8:	f7fe ffdc 	bl	80009a4 <HAL_GetTick>
 80019ec:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80019f2:	f7fe ffd7 	bl	80009a4 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80019fc:	1ad3      	subs	r3, r2, r3
 80019fe:	2b02      	cmp	r3, #2
 8001a00:	d902      	bls.n	8001a08 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001a02:	2303      	movs	r3, #3
 8001a04:	f000 bc75 	b.w	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001a08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a0c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a10:	2202      	movs	r2, #2
 8001a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a18:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	fa93 f2a3 	rbit	r2, r3
 8001a22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a26:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a30:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a34:	2202      	movs	r2, #2
 8001a36:	601a      	str	r2, [r3, #0]
 8001a38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a3c:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	fa93 f2a3 	rbit	r2, r3
 8001a46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a4a:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8001a4e:	601a      	str	r2, [r3, #0]
 8001a50:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a54:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a58:	2202      	movs	r2, #2
 8001a5a:	601a      	str	r2, [r3, #0]
 8001a5c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a60:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	fa93 f2a3 	rbit	r2, r3
 8001a6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a6e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a72:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a74:	4b36      	ldr	r3, [pc, #216]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001a76:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001a78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a7c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a80:	2102      	movs	r1, #2
 8001a82:	6019      	str	r1, [r3, #0]
 8001a84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a88:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	fa93 f1a3 	rbit	r1, r3
 8001a92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001a96:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001a9a:	6019      	str	r1, [r3, #0]
  return result;
 8001a9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001aa0:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	fab3 f383 	clz	r3, r3
 8001aaa:	b2db      	uxtb	r3, r3
 8001aac:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8001ab0:	b2db      	uxtb	r3, r3
 8001ab2:	f003 031f 	and.w	r3, r3, #31
 8001ab6:	2101      	movs	r1, #1
 8001ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8001abc:	4013      	ands	r3, r2
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d197      	bne.n	80019f2 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ac2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ac6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	f003 0304 	and.w	r3, r3, #4
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	f000 81a5 	beq.w	8001e22 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ade:	4b1c      	ldr	r3, [pc, #112]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001ae0:	69db      	ldr	r3, [r3, #28]
 8001ae2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d116      	bne.n	8001b18 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001aea:	4b19      	ldr	r3, [pc, #100]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001aec:	69db      	ldr	r3, [r3, #28]
 8001aee:	4a18      	ldr	r2, [pc, #96]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001af0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001af4:	61d3      	str	r3, [r2, #28]
 8001af6:	4b16      	ldr	r3, [pc, #88]	@ (8001b50 <HAL_RCC_OscConfig+0x8f8>)
 8001af8:	69db      	ldr	r3, [r3, #28]
 8001afa:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8001afe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b02:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b0c:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8001b10:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b12:	2301      	movs	r3, #1
 8001b14:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b18:	4b0f      	ldr	r3, [pc, #60]	@ (8001b58 <HAL_RCC_OscConfig+0x900>)
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d121      	bne.n	8001b68 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b24:	4b0c      	ldr	r3, [pc, #48]	@ (8001b58 <HAL_RCC_OscConfig+0x900>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4a0b      	ldr	r2, [pc, #44]	@ (8001b58 <HAL_RCC_OscConfig+0x900>)
 8001b2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b2e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b30:	f7fe ff38 	bl	80009a4 <HAL_GetTick>
 8001b34:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b38:	e010      	b.n	8001b5c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b3a:	f7fe ff33 	bl	80009a4 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b64      	cmp	r3, #100	@ 0x64
 8001b48:	d908      	bls.n	8001b5c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e3d1      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001b4e:	bf00      	nop
 8001b50:	40021000 	.word	0x40021000
 8001b54:	10908120 	.word	0x10908120
 8001b58:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b5c:	4b8d      	ldr	r3, [pc, #564]	@ (8001d94 <HAL_RCC_OscConfig+0xb3c>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d0e8      	beq.n	8001b3a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b6c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d106      	bne.n	8001b86 <HAL_RCC_OscConfig+0x92e>
 8001b78:	4b87      	ldr	r3, [pc, #540]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001b7a:	6a1b      	ldr	r3, [r3, #32]
 8001b7c:	4a86      	ldr	r2, [pc, #536]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001b7e:	f043 0301 	orr.w	r3, r3, #1
 8001b82:	6213      	str	r3, [r2, #32]
 8001b84:	e035      	b.n	8001bf2 <HAL_RCC_OscConfig+0x99a>
 8001b86:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001b8a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	689b      	ldr	r3, [r3, #8]
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d10c      	bne.n	8001bb0 <HAL_RCC_OscConfig+0x958>
 8001b96:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001b98:	6a1b      	ldr	r3, [r3, #32]
 8001b9a:	4a7f      	ldr	r2, [pc, #508]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6213      	str	r3, [r2, #32]
 8001ba2:	4b7d      	ldr	r3, [pc, #500]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001ba4:	6a1b      	ldr	r3, [r3, #32]
 8001ba6:	4a7c      	ldr	r2, [pc, #496]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001ba8:	f023 0304 	bic.w	r3, r3, #4
 8001bac:	6213      	str	r3, [r2, #32]
 8001bae:	e020      	b.n	8001bf2 <HAL_RCC_OscConfig+0x99a>
 8001bb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bb4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	2b05      	cmp	r3, #5
 8001bbe:	d10c      	bne.n	8001bda <HAL_RCC_OscConfig+0x982>
 8001bc0:	4b75      	ldr	r3, [pc, #468]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a74      	ldr	r2, [pc, #464]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bc6:	f043 0304 	orr.w	r3, r3, #4
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b72      	ldr	r3, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a71      	ldr	r2, [pc, #452]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bd2:	f043 0301 	orr.w	r3, r3, #1
 8001bd6:	6213      	str	r3, [r2, #32]
 8001bd8:	e00b      	b.n	8001bf2 <HAL_RCC_OscConfig+0x99a>
 8001bda:	4b6f      	ldr	r3, [pc, #444]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bdc:	6a1b      	ldr	r3, [r3, #32]
 8001bde:	4a6e      	ldr	r2, [pc, #440]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001be0:	f023 0301 	bic.w	r3, r3, #1
 8001be4:	6213      	str	r3, [r2, #32]
 8001be6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001be8:	6a1b      	ldr	r3, [r3, #32]
 8001bea:	4a6b      	ldr	r2, [pc, #428]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001bec:	f023 0304 	bic.w	r3, r3, #4
 8001bf0:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bf2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001bf6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	f000 8081 	beq.w	8001d06 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001c04:	f7fe fece 	bl	80009a4 <HAL_GetTick>
 8001c08:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c0c:	e00b      	b.n	8001c26 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001c0e:	f7fe fec9 	bl	80009a4 <HAL_GetTick>
 8001c12:	4602      	mov	r2, r0
 8001c14:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001c18:	1ad3      	subs	r3, r2, r3
 8001c1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d901      	bls.n	8001c26 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001c22:	2303      	movs	r3, #3
 8001c24:	e365      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001c26:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c2a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c2e:	2202      	movs	r2, #2
 8001c30:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c36:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	fa93 f2a3 	rbit	r2, r3
 8001c40:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c44:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c4e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c52:	2202      	movs	r2, #2
 8001c54:	601a      	str	r2, [r3, #0]
 8001c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c5a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	fa93 f2a3 	rbit	r2, r3
 8001c64:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c68:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c6c:	601a      	str	r2, [r3, #0]
  return result;
 8001c6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c72:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8001c76:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c78:	fab3 f383 	clz	r3, r3
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	095b      	lsrs	r3, r3, #5
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	2b02      	cmp	r3, #2
 8001c8a:	d102      	bne.n	8001c92 <HAL_RCC_OscConfig+0xa3a>
 8001c8c:	4b42      	ldr	r3, [pc, #264]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001c8e:	6a1b      	ldr	r3, [r3, #32]
 8001c90:	e013      	b.n	8001cba <HAL_RCC_OscConfig+0xa62>
 8001c92:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001c96:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001c9a:	2202      	movs	r2, #2
 8001c9c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c9e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ca2:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	fa93 f2a3 	rbit	r2, r3
 8001cac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001cb0:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	4b38      	ldr	r3, [pc, #224]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cba:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cbe:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001cc2:	2102      	movs	r1, #2
 8001cc4:	6011      	str	r1, [r2, #0]
 8001cc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cca:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8001cce:	6812      	ldr	r2, [r2, #0]
 8001cd0:	fa92 f1a2 	rbit	r1, r2
 8001cd4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001cd8:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001cdc:	6011      	str	r1, [r2, #0]
  return result;
 8001cde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001ce2:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8001ce6:	6812      	ldr	r2, [r2, #0]
 8001ce8:	fab2 f282 	clz	r2, r2
 8001cec:	b2d2      	uxtb	r2, r2
 8001cee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001cf2:	b2d2      	uxtb	r2, r2
 8001cf4:	f002 021f 	and.w	r2, r2, #31
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001cfe:	4013      	ands	r3, r2
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d084      	beq.n	8001c0e <HAL_RCC_OscConfig+0x9b6>
 8001d04:	e083      	b.n	8001e0e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001d06:	f7fe fe4d 	bl	80009a4 <HAL_GetTick>
 8001d0a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d0e:	e00b      	b.n	8001d28 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001d10:	f7fe fe48 	bl	80009a4 <HAL_GetTick>
 8001d14:	4602      	mov	r2, r0
 8001d16:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001d1a:	1ad3      	subs	r3, r2, r3
 8001d1c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d901      	bls.n	8001d28 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001d24:	2303      	movs	r3, #3
 8001d26:	e2e4      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001d28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d2c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d38:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	fa93 f2a3 	rbit	r2, r3
 8001d42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d46:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d50:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d54:	2202      	movs	r2, #2
 8001d56:	601a      	str	r2, [r3, #0]
 8001d58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d5c:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	fa93 f2a3 	rbit	r2, r3
 8001d66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d6a:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d6e:	601a      	str	r2, [r3, #0]
  return result;
 8001d70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001d74:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8001d78:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d7a:	fab3 f383 	clz	r3, r3
 8001d7e:	b2db      	uxtb	r3, r3
 8001d80:	095b      	lsrs	r3, r3, #5
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	f043 0302 	orr.w	r3, r3, #2
 8001d88:	b2db      	uxtb	r3, r3
 8001d8a:	2b02      	cmp	r3, #2
 8001d8c:	d106      	bne.n	8001d9c <HAL_RCC_OscConfig+0xb44>
 8001d8e:	4b02      	ldr	r3, [pc, #8]	@ (8001d98 <HAL_RCC_OscConfig+0xb40>)
 8001d90:	6a1b      	ldr	r3, [r3, #32]
 8001d92:	e017      	b.n	8001dc4 <HAL_RCC_OscConfig+0xb6c>
 8001d94:	40007000 	.word	0x40007000
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001da0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001da4:	2202      	movs	r2, #2
 8001da6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001da8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dac:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	fa93 f2a3 	rbit	r2, r3
 8001db6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001dba:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8001dbe:	601a      	str	r2, [r3, #0]
 8001dc0:	4bb3      	ldr	r3, [pc, #716]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dc4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dc8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001dcc:	2102      	movs	r1, #2
 8001dce:	6011      	str	r1, [r2, #0]
 8001dd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dd4:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8001dd8:	6812      	ldr	r2, [r2, #0]
 8001dda:	fa92 f1a2 	rbit	r1, r2
 8001dde:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001de2:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001de6:	6011      	str	r1, [r2, #0]
  return result;
 8001de8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001dec:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8001df0:	6812      	ldr	r2, [r2, #0]
 8001df2:	fab2 f282 	clz	r2, r2
 8001df6:	b2d2      	uxtb	r2, r2
 8001df8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001dfc:	b2d2      	uxtb	r2, r2
 8001dfe:	f002 021f 	and.w	r2, r2, #31
 8001e02:	2101      	movs	r1, #1
 8001e04:	fa01 f202 	lsl.w	r2, r1, r2
 8001e08:	4013      	ands	r3, r2
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d180      	bne.n	8001d10 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001e0e:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8001e12:	2b01      	cmp	r3, #1
 8001e14:	d105      	bne.n	8001e22 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e16:	4b9e      	ldr	r3, [pc, #632]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001e18:	69db      	ldr	r3, [r3, #28]
 8001e1a:	4a9d      	ldr	r2, [pc, #628]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001e1c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001e20:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001e22:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e26:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 825e 	beq.w	80022f0 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001e34:	4b96      	ldr	r3, [pc, #600]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f003 030c 	and.w	r3, r3, #12
 8001e3c:	2b08      	cmp	r3, #8
 8001e3e:	f000 821f 	beq.w	8002280 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001e42:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e46:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	699b      	ldr	r3, [r3, #24]
 8001e4e:	2b02      	cmp	r3, #2
 8001e50:	f040 8170 	bne.w	8002134 <HAL_RCC_OscConfig+0xedc>
 8001e54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e58:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e5c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001e60:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e62:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e66:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	fa93 f2a3 	rbit	r2, r3
 8001e70:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e74:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e78:	601a      	str	r2, [r3, #0]
  return result;
 8001e7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001e7e:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8001e82:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001e84:	fab3 f383 	clz	r3, r3
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8001e8e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8001e92:	009b      	lsls	r3, r3, #2
 8001e94:	461a      	mov	r2, r3
 8001e96:	2300      	movs	r3, #0
 8001e98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e9a:	f7fe fd83 	bl	80009a4 <HAL_GetTick>
 8001e9e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ea2:	e009      	b.n	8001eb8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7fe fd7e 	bl	80009a4 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8001eae:	1ad3      	subs	r3, r2, r3
 8001eb0:	2b02      	cmp	r3, #2
 8001eb2:	d901      	bls.n	8001eb8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001eb4:	2303      	movs	r3, #3
 8001eb6:	e21c      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8001eb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ebc:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ec0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001ec4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ec6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001eca:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	fa93 f2a3 	rbit	r2, r3
 8001ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ed8:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001edc:	601a      	str	r2, [r3, #0]
  return result;
 8001ede:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ee2:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8001ee6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001ee8:	fab3 f383 	clz	r3, r3
 8001eec:	b2db      	uxtb	r3, r3
 8001eee:	095b      	lsrs	r3, r3, #5
 8001ef0:	b2db      	uxtb	r3, r3
 8001ef2:	f043 0301 	orr.w	r3, r3, #1
 8001ef6:	b2db      	uxtb	r3, r3
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d102      	bne.n	8001f02 <HAL_RCC_OscConfig+0xcaa>
 8001efc:	4b64      	ldr	r3, [pc, #400]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	e027      	b.n	8001f52 <HAL_RCC_OscConfig+0xcfa>
 8001f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f06:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f0a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f14:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	fa93 f2a3 	rbit	r2, r3
 8001f1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f22:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8001f26:	601a      	str	r2, [r3, #0]
 8001f28:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f2c:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f30:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8001f34:	601a      	str	r2, [r3, #0]
 8001f36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f3a:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	fa93 f2a3 	rbit	r2, r3
 8001f44:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001f48:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001f4c:	601a      	str	r2, [r3, #0]
 8001f4e:	4b50      	ldr	r3, [pc, #320]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001f52:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f56:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f5a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8001f5e:	6011      	str	r1, [r2, #0]
 8001f60:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f64:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8001f68:	6812      	ldr	r2, [r2, #0]
 8001f6a:	fa92 f1a2 	rbit	r1, r2
 8001f6e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f72:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f76:	6011      	str	r1, [r2, #0]
  return result;
 8001f78:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8001f7c:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8001f80:	6812      	ldr	r2, [r2, #0]
 8001f82:	fab2 f282 	clz	r2, r2
 8001f86:	b2d2      	uxtb	r2, r2
 8001f88:	f042 0220 	orr.w	r2, r2, #32
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f002 021f 	and.w	r2, r2, #31
 8001f92:	2101      	movs	r1, #1
 8001f94:	fa01 f202 	lsl.w	r2, r1, r2
 8001f98:	4013      	ands	r3, r2
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d182      	bne.n	8001ea4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001fa0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa2:	f023 020f 	bic.w	r2, r3, #15
 8001fa6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001faa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001fb2:	4937      	ldr	r1, [pc, #220]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001fb4:	4313      	orrs	r3, r2
 8001fb6:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8001fb8:	4b35      	ldr	r3, [pc, #212]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8001fc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fc4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	6a19      	ldr	r1, [r3, #32]
 8001fcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fd0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	69db      	ldr	r3, [r3, #28]
 8001fd8:	430b      	orrs	r3, r1
 8001fda:	492d      	ldr	r1, [pc, #180]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	604b      	str	r3, [r1, #4]
 8001fe0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001fe4:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001fe8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8001ff2:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	fa93 f2a3 	rbit	r2, r3
 8001ffc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002000:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8002004:	601a      	str	r2, [r3, #0]
  return result;
 8002006:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800200a:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 800200e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002010:	fab3 f383 	clz	r3, r3
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800201a:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	461a      	mov	r2, r3
 8002022:	2301      	movs	r3, #1
 8002024:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002026:	f7fe fcbd 	bl	80009a4 <HAL_GetTick>
 800202a:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800202e:	e009      	b.n	8002044 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002030:	f7fe fcb8 	bl	80009a4 <HAL_GetTick>
 8002034:	4602      	mov	r2, r0
 8002036:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800203a:	1ad3      	subs	r3, r2, r3
 800203c:	2b02      	cmp	r3, #2
 800203e:	d901      	bls.n	8002044 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8002040:	2303      	movs	r3, #3
 8002042:	e156      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8002044:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002048:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800204c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002050:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002052:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002056:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	fa93 f2a3 	rbit	r2, r3
 8002060:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002064:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002068:	601a      	str	r2, [r3, #0]
  return result;
 800206a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800206e:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8002072:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002074:	fab3 f383 	clz	r3, r3
 8002078:	b2db      	uxtb	r3, r3
 800207a:	095b      	lsrs	r3, r3, #5
 800207c:	b2db      	uxtb	r3, r3
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	b2db      	uxtb	r3, r3
 8002084:	2b01      	cmp	r3, #1
 8002086:	d105      	bne.n	8002094 <HAL_RCC_OscConfig+0xe3c>
 8002088:	4b01      	ldr	r3, [pc, #4]	@ (8002090 <HAL_RCC_OscConfig+0xe38>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	e02a      	b.n	80020e4 <HAL_RCC_OscConfig+0xe8c>
 800208e:	bf00      	nop
 8002090:	40021000 	.word	0x40021000
 8002094:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002098:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 800209c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020a0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020a6:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	fa93 f2a3 	rbit	r2, r3
 80020b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020b4:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 80020b8:	601a      	str	r2, [r3, #0]
 80020ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80020c2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80020c6:	601a      	str	r2, [r3, #0]
 80020c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020cc:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	fa93 f2a3 	rbit	r2, r3
 80020d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80020da:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	4b86      	ldr	r3, [pc, #536]	@ (80022fc <HAL_RCC_OscConfig+0x10a4>)
 80020e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020e4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020e8:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020ec:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 80020f0:	6011      	str	r1, [r2, #0]
 80020f2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 80020f6:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 80020fa:	6812      	ldr	r2, [r2, #0]
 80020fc:	fa92 f1a2 	rbit	r1, r2
 8002100:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002104:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002108:	6011      	str	r1, [r2, #0]
  return result;
 800210a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800210e:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8002112:	6812      	ldr	r2, [r2, #0]
 8002114:	fab2 f282 	clz	r2, r2
 8002118:	b2d2      	uxtb	r2, r2
 800211a:	f042 0220 	orr.w	r2, r2, #32
 800211e:	b2d2      	uxtb	r2, r2
 8002120:	f002 021f 	and.w	r2, r2, #31
 8002124:	2101      	movs	r1, #1
 8002126:	fa01 f202 	lsl.w	r2, r1, r2
 800212a:	4013      	ands	r3, r2
 800212c:	2b00      	cmp	r3, #0
 800212e:	f43f af7f 	beq.w	8002030 <HAL_RCC_OscConfig+0xdd8>
 8002132:	e0dd      	b.n	80022f0 <HAL_RCC_OscConfig+0x1098>
 8002134:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002138:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800213c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8002140:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002146:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	fa93 f2a3 	rbit	r2, r3
 8002150:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002154:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002158:	601a      	str	r2, [r3, #0]
  return result;
 800215a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800215e:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8002162:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	b2db      	uxtb	r3, r3
 800216a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 800216e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	461a      	mov	r2, r3
 8002176:	2300      	movs	r3, #0
 8002178:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800217a:	f7fe fc13 	bl	80009a4 <HAL_GetTick>
 800217e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002182:	e009      	b.n	8002198 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002184:	f7fe fc0e 	bl	80009a4 <HAL_GetTick>
 8002188:	4602      	mov	r2, r0
 800218a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	2b02      	cmp	r3, #2
 8002192:	d901      	bls.n	8002198 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8002194:	2303      	movs	r3, #3
 8002196:	e0ac      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
 8002198:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800219c:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021aa:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	fa93 f2a3 	rbit	r2, r3
 80021b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021b8:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021bc:	601a      	str	r2, [r3, #0]
  return result;
 80021be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021c2:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80021c6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f043 0301 	orr.w	r3, r3, #1
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b01      	cmp	r3, #1
 80021da:	d102      	bne.n	80021e2 <HAL_RCC_OscConfig+0xf8a>
 80021dc:	4b47      	ldr	r3, [pc, #284]	@ (80022fc <HAL_RCC_OscConfig+0x10a4>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	e027      	b.n	8002232 <HAL_RCC_OscConfig+0xfda>
 80021e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021e6:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021ea:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80021ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80021f4:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	fa93 f2a3 	rbit	r2, r3
 80021fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002202:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8002206:	601a      	str	r2, [r3, #0]
 8002208:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800220c:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8002210:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002214:	601a      	str	r2, [r3, #0]
 8002216:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800221a:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	fa93 f2a3 	rbit	r2, r3
 8002224:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002228:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 800222c:	601a      	str	r2, [r3, #0]
 800222e:	4b33      	ldr	r3, [pc, #204]	@ (80022fc <HAL_RCC_OscConfig+0x10a4>)
 8002230:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002232:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002236:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800223a:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 800223e:	6011      	str	r1, [r2, #0]
 8002240:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002244:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	fa92 f1a2 	rbit	r1, r2
 800224e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8002252:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002256:	6011      	str	r1, [r2, #0]
  return result;
 8002258:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800225c:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8002260:	6812      	ldr	r2, [r2, #0]
 8002262:	fab2 f282 	clz	r2, r2
 8002266:	b2d2      	uxtb	r2, r2
 8002268:	f042 0220 	orr.w	r2, r2, #32
 800226c:	b2d2      	uxtb	r2, r2
 800226e:	f002 021f 	and.w	r2, r2, #31
 8002272:	2101      	movs	r1, #1
 8002274:	fa01 f202 	lsl.w	r2, r1, r2
 8002278:	4013      	ands	r3, r2
 800227a:	2b00      	cmp	r3, #0
 800227c:	d182      	bne.n	8002184 <HAL_RCC_OscConfig+0xf2c>
 800227e:	e037      	b.n	80022f0 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002280:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002284:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	699b      	ldr	r3, [r3, #24]
 800228c:	2b01      	cmp	r3, #1
 800228e:	d101      	bne.n	8002294 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	e02e      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002294:	4b19      	ldr	r3, [pc, #100]	@ (80022fc <HAL_RCC_OscConfig+0x10a4>)
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 800229c:	4b17      	ldr	r3, [pc, #92]	@ (80022fc <HAL_RCC_OscConfig+0x10a4>)
 800229e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022a0:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022a4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022a8:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80022ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022b0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	69db      	ldr	r3, [r3, #28]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d117      	bne.n	80022ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022bc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80022c0:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80022d0:	429a      	cmp	r2, r3
 80022d2:	d10b      	bne.n	80022ec <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80022d4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80022d8:	f003 020f 	and.w	r2, r3, #15
 80022dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80022e0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80022e8:	429a      	cmp	r2, r3
 80022ea:	d001      	beq.n	80022f0 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 80022ec:	2301      	movs	r3, #1
 80022ee:	e000      	b.n	80022f2 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	40021000 	.word	0x40021000

08002300 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b09e      	sub	sp, #120	@ 0x78
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800230a:	2300      	movs	r3, #0
 800230c:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d101      	bne.n	8002318 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002314:	2301      	movs	r3, #1
 8002316:	e162      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002318:	4b90      	ldr	r3, [pc, #576]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0307 	and.w	r3, r3, #7
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	429a      	cmp	r2, r3
 8002324:	d910      	bls.n	8002348 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002326:	4b8d      	ldr	r3, [pc, #564]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f023 0207 	bic.w	r2, r3, #7
 800232e:	498b      	ldr	r1, [pc, #556]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	4313      	orrs	r3, r2
 8002334:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b89      	ldr	r3, [pc, #548]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e14a      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0302 	and.w	r3, r3, #2
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002354:	4b82      	ldr	r3, [pc, #520]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	689b      	ldr	r3, [r3, #8]
 8002360:	497f      	ldr	r1, [pc, #508]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002362:	4313      	orrs	r3, r2
 8002364:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	2b00      	cmp	r3, #0
 8002370:	f000 80dc 	beq.w	800252c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	2b01      	cmp	r3, #1
 800237a:	d13c      	bne.n	80023f6 <HAL_RCC_ClockConfig+0xf6>
 800237c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8002380:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002382:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002384:	fa93 f3a3 	rbit	r3, r3
 8002388:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800238a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800238c:	fab3 f383 	clz	r3, r3
 8002390:	b2db      	uxtb	r3, r3
 8002392:	095b      	lsrs	r3, r3, #5
 8002394:	b2db      	uxtb	r3, r3
 8002396:	f043 0301 	orr.w	r3, r3, #1
 800239a:	b2db      	uxtb	r3, r3
 800239c:	2b01      	cmp	r3, #1
 800239e:	d102      	bne.n	80023a6 <HAL_RCC_ClockConfig+0xa6>
 80023a0:	4b6f      	ldr	r3, [pc, #444]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	e00f      	b.n	80023c6 <HAL_RCC_ClockConfig+0xc6>
 80023a6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023aa:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023ac:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023ae:	fa93 f3a3 	rbit	r3, r3
 80023b2:	667b      	str	r3, [r7, #100]	@ 0x64
 80023b4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80023b8:	663b      	str	r3, [r7, #96]	@ 0x60
 80023ba:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80023bc:	fa93 f3a3 	rbit	r3, r3
 80023c0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80023c2:	4b67      	ldr	r3, [pc, #412]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80023c6:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80023ca:	65ba      	str	r2, [r7, #88]	@ 0x58
 80023cc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80023ce:	fa92 f2a2 	rbit	r2, r2
 80023d2:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80023d4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80023d6:	fab2 f282 	clz	r2, r2
 80023da:	b2d2      	uxtb	r2, r2
 80023dc:	f042 0220 	orr.w	r2, r2, #32
 80023e0:	b2d2      	uxtb	r2, r2
 80023e2:	f002 021f 	and.w	r2, r2, #31
 80023e6:	2101      	movs	r1, #1
 80023e8:	fa01 f202 	lsl.w	r2, r1, r2
 80023ec:	4013      	ands	r3, r2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d17b      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80023f2:	2301      	movs	r3, #1
 80023f4:	e0f3      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b02      	cmp	r3, #2
 80023fc:	d13c      	bne.n	8002478 <HAL_RCC_ClockConfig+0x178>
 80023fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002402:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002404:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002406:	fa93 f3a3 	rbit	r3, r3
 800240a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 800240c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800240e:	fab3 f383 	clz	r3, r3
 8002412:	b2db      	uxtb	r3, r3
 8002414:	095b      	lsrs	r3, r3, #5
 8002416:	b2db      	uxtb	r3, r3
 8002418:	f043 0301 	orr.w	r3, r3, #1
 800241c:	b2db      	uxtb	r3, r3
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <HAL_RCC_ClockConfig+0x128>
 8002422:	4b4f      	ldr	r3, [pc, #316]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	e00f      	b.n	8002448 <HAL_RCC_ClockConfig+0x148>
 8002428:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800242c:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800242e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002430:	fa93 f3a3 	rbit	r3, r3
 8002434:	647b      	str	r3, [r7, #68]	@ 0x44
 8002436:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800243a:	643b      	str	r3, [r7, #64]	@ 0x40
 800243c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800243e:	fa93 f3a3 	rbit	r3, r3
 8002442:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002444:	4b46      	ldr	r3, [pc, #280]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 8002446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002448:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 800244c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800244e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8002450:	fa92 f2a2 	rbit	r2, r2
 8002454:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 8002456:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8002458:	fab2 f282 	clz	r2, r2
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	f042 0220 	orr.w	r2, r2, #32
 8002462:	b2d2      	uxtb	r2, r2
 8002464:	f002 021f 	and.w	r2, r2, #31
 8002468:	2101      	movs	r1, #1
 800246a:	fa01 f202 	lsl.w	r2, r1, r2
 800246e:	4013      	ands	r3, r2
 8002470:	2b00      	cmp	r3, #0
 8002472:	d13a      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	e0b2      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
 8002478:	2302      	movs	r3, #2
 800247a:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800247c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800247e:	fa93 f3a3 	rbit	r3, r3
 8002482:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002484:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002486:	fab3 f383 	clz	r3, r3
 800248a:	b2db      	uxtb	r3, r3
 800248c:	095b      	lsrs	r3, r3, #5
 800248e:	b2db      	uxtb	r3, r3
 8002490:	f043 0301 	orr.w	r3, r3, #1
 8002494:	b2db      	uxtb	r3, r3
 8002496:	2b01      	cmp	r3, #1
 8002498:	d102      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x1a0>
 800249a:	4b31      	ldr	r3, [pc, #196]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	e00d      	b.n	80024bc <HAL_RCC_ClockConfig+0x1bc>
 80024a0:	2302      	movs	r3, #2
 80024a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80024a6:	fa93 f3a3 	rbit	r3, r3
 80024aa:	627b      	str	r3, [r7, #36]	@ 0x24
 80024ac:	2302      	movs	r3, #2
 80024ae:	623b      	str	r3, [r7, #32]
 80024b0:	6a3b      	ldr	r3, [r7, #32]
 80024b2:	fa93 f3a3 	rbit	r3, r3
 80024b6:	61fb      	str	r3, [r7, #28]
 80024b8:	4b29      	ldr	r3, [pc, #164]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024bc:	2202      	movs	r2, #2
 80024be:	61ba      	str	r2, [r7, #24]
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	fa92 f2a2 	rbit	r2, r2
 80024c6:	617a      	str	r2, [r7, #20]
  return result;
 80024c8:	697a      	ldr	r2, [r7, #20]
 80024ca:	fab2 f282 	clz	r2, r2
 80024ce:	b2d2      	uxtb	r2, r2
 80024d0:	f042 0220 	orr.w	r2, r2, #32
 80024d4:	b2d2      	uxtb	r2, r2
 80024d6:	f002 021f 	and.w	r2, r2, #31
 80024da:	2101      	movs	r1, #1
 80024dc:	fa01 f202 	lsl.w	r2, r1, r2
 80024e0:	4013      	ands	r3, r2
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d101      	bne.n	80024ea <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e079      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80024ea:	4b1d      	ldr	r3, [pc, #116]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	f023 0203 	bic.w	r2, r3, #3
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	685b      	ldr	r3, [r3, #4]
 80024f6:	491a      	ldr	r1, [pc, #104]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 80024f8:	4313      	orrs	r3, r2
 80024fa:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024fc:	f7fe fa52 	bl	80009a4 <HAL_GetTick>
 8002500:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002502:	e00a      	b.n	800251a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002504:	f7fe fa4e 	bl	80009a4 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002512:	4293      	cmp	r3, r2
 8002514:	d901      	bls.n	800251a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002516:	2303      	movs	r3, #3
 8002518:	e061      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251a:	4b11      	ldr	r3, [pc, #68]	@ (8002560 <HAL_RCC_ClockConfig+0x260>)
 800251c:	685b      	ldr	r3, [r3, #4]
 800251e:	f003 020c 	and.w	r2, r3, #12
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	685b      	ldr	r3, [r3, #4]
 8002526:	009b      	lsls	r3, r3, #2
 8002528:	429a      	cmp	r2, r3
 800252a:	d1eb      	bne.n	8002504 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800252c:	4b0b      	ldr	r3, [pc, #44]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0307 	and.w	r3, r3, #7
 8002534:	683a      	ldr	r2, [r7, #0]
 8002536:	429a      	cmp	r2, r3
 8002538:	d214      	bcs.n	8002564 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800253a:	4b08      	ldr	r3, [pc, #32]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f023 0207 	bic.w	r2, r3, #7
 8002542:	4906      	ldr	r1, [pc, #24]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	4313      	orrs	r3, r2
 8002548:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800254a:	4b04      	ldr	r3, [pc, #16]	@ (800255c <HAL_RCC_ClockConfig+0x25c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f003 0307 	and.w	r3, r3, #7
 8002552:	683a      	ldr	r2, [r7, #0]
 8002554:	429a      	cmp	r2, r3
 8002556:	d005      	beq.n	8002564 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002558:	2301      	movs	r3, #1
 800255a:	e040      	b.n	80025de <HAL_RCC_ClockConfig+0x2de>
 800255c:	40022000 	.word	0x40022000
 8002560:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0304 	and.w	r3, r3, #4
 800256c:	2b00      	cmp	r3, #0
 800256e:	d008      	beq.n	8002582 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002570:	4b1d      	ldr	r3, [pc, #116]	@ (80025e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002572:	685b      	ldr	r3, [r3, #4]
 8002574:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	491a      	ldr	r1, [pc, #104]	@ (80025e8 <HAL_RCC_ClockConfig+0x2e8>)
 800257e:	4313      	orrs	r3, r2
 8002580:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d009      	beq.n	80025a2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800258e:	4b16      	ldr	r3, [pc, #88]	@ (80025e8 <HAL_RCC_ClockConfig+0x2e8>)
 8002590:	685b      	ldr	r3, [r3, #4]
 8002592:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	00db      	lsls	r3, r3, #3
 800259c:	4912      	ldr	r1, [pc, #72]	@ (80025e8 <HAL_RCC_ClockConfig+0x2e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80025a2:	f000 f829 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 80025a6:	4601      	mov	r1, r0
 80025a8:	4b0f      	ldr	r3, [pc, #60]	@ (80025e8 <HAL_RCC_ClockConfig+0x2e8>)
 80025aa:	685b      	ldr	r3, [r3, #4]
 80025ac:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80025b0:	22f0      	movs	r2, #240	@ 0xf0
 80025b2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b4:	693a      	ldr	r2, [r7, #16]
 80025b6:	fa92 f2a2 	rbit	r2, r2
 80025ba:	60fa      	str	r2, [r7, #12]
  return result;
 80025bc:	68fa      	ldr	r2, [r7, #12]
 80025be:	fab2 f282 	clz	r2, r2
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	40d3      	lsrs	r3, r2
 80025c6:	4a09      	ldr	r2, [pc, #36]	@ (80025ec <HAL_RCC_ClockConfig+0x2ec>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	fa21 f303 	lsr.w	r3, r1, r3
 80025ce:	4a08      	ldr	r2, [pc, #32]	@ (80025f0 <HAL_RCC_ClockConfig+0x2f0>)
 80025d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80025d2:	4b08      	ldr	r3, [pc, #32]	@ (80025f4 <HAL_RCC_ClockConfig+0x2f4>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fe f9a0 	bl	800091c <HAL_InitTick>
  
  return HAL_OK;
 80025dc:	2300      	movs	r3, #0
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3778      	adds	r7, #120	@ 0x78
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	40021000 	.word	0x40021000
 80025ec:	08013178 	.word	0x08013178
 80025f0:	20000000 	.word	0x20000000
 80025f4:	20000004 	.word	0x20000004

080025f8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80025fe:	2300      	movs	r3, #0
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	2300      	movs	r3, #0
 8002604:	60bb      	str	r3, [r7, #8]
 8002606:	2300      	movs	r3, #0
 8002608:	617b      	str	r3, [r7, #20]
 800260a:	2300      	movs	r3, #0
 800260c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800260e:	2300      	movs	r3, #0
 8002610:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8002612:	4b1f      	ldr	r3, [pc, #124]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 8002614:	685b      	ldr	r3, [r3, #4]
 8002616:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	f003 030c 	and.w	r3, r3, #12
 800261e:	2b04      	cmp	r3, #4
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x30>
 8002622:	2b08      	cmp	r3, #8
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x36>
 8002626:	e029      	b.n	800267c <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002628:	4b1a      	ldr	r3, [pc, #104]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 800262a:	613b      	str	r3, [r7, #16]
      break;
 800262c:	e029      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	0c9b      	lsrs	r3, r3, #18
 8002632:	f003 030f 	and.w	r3, r3, #15
 8002636:	4a18      	ldr	r2, [pc, #96]	@ (8002698 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002638:	5cd3      	ldrb	r3, [r2, r3]
 800263a:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 800263c:	4b14      	ldr	r3, [pc, #80]	@ (8002690 <HAL_RCC_GetSysClockFreq+0x98>)
 800263e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002640:	f003 030f 	and.w	r3, r3, #15
 8002644:	4a15      	ldr	r2, [pc, #84]	@ (800269c <HAL_RCC_GetSysClockFreq+0xa4>)
 8002646:	5cd3      	ldrb	r3, [r2, r3]
 8002648:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002654:	4a0f      	ldr	r2, [pc, #60]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	fbb2 f2f3 	udiv	r2, r2, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	fb02 f303 	mul.w	r3, r2, r3
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e007      	b.n	8002676 <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8002666:	4a0b      	ldr	r2, [pc, #44]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002668:	68bb      	ldr	r3, [r7, #8]
 800266a:	fbb2 f2f3 	udiv	r2, r2, r3
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	fb02 f303 	mul.w	r3, r2, r3
 8002674:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	613b      	str	r3, [r7, #16]
      break;
 800267a:	e002      	b.n	8002682 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800267c:	4b05      	ldr	r3, [pc, #20]	@ (8002694 <HAL_RCC_GetSysClockFreq+0x9c>)
 800267e:	613b      	str	r3, [r7, #16]
      break;
 8002680:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002682:	693b      	ldr	r3, [r7, #16]
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr
 8002690:	40021000 	.word	0x40021000
 8002694:	007a1200 	.word	0x007a1200
 8002698:	08013190 	.word	0x08013190
 800269c:	080131a0 	.word	0x080131a0

080026a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80026a4:	4b03      	ldr	r3, [pc, #12]	@ (80026b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80026a6:	681b      	ldr	r3, [r3, #0]
}
 80026a8:	4618      	mov	r0, r3
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	20000000 	.word	0x20000000

080026b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80026b8:	b580      	push	{r7, lr}
 80026ba:	b082      	sub	sp, #8
 80026bc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80026be:	f7ff ffef 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 80026c2:	4601      	mov	r1, r0
 80026c4:	4b0b      	ldr	r3, [pc, #44]	@ (80026f4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80026c6:	685b      	ldr	r3, [r3, #4]
 80026c8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80026cc:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80026d0:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d2:	687a      	ldr	r2, [r7, #4]
 80026d4:	fa92 f2a2 	rbit	r2, r2
 80026d8:	603a      	str	r2, [r7, #0]
  return result;
 80026da:	683a      	ldr	r2, [r7, #0]
 80026dc:	fab2 f282 	clz	r2, r2
 80026e0:	b2d2      	uxtb	r2, r2
 80026e2:	40d3      	lsrs	r3, r2
 80026e4:	4a04      	ldr	r2, [pc, #16]	@ (80026f8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80026e6:	5cd3      	ldrb	r3, [r2, r3]
 80026e8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80026ec:	4618      	mov	r0, r3
 80026ee:	3708      	adds	r7, #8
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}
 80026f4:	40021000 	.word	0x40021000
 80026f8:	08013188 	.word	0x08013188

080026fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b082      	sub	sp, #8
 8002700:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002702:	f7ff ffcd 	bl	80026a0 <HAL_RCC_GetHCLKFreq>
 8002706:	4601      	mov	r1, r0
 8002708:	4b0b      	ldr	r3, [pc, #44]	@ (8002738 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8002710:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8002714:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002716:	687a      	ldr	r2, [r7, #4]
 8002718:	fa92 f2a2 	rbit	r2, r2
 800271c:	603a      	str	r2, [r7, #0]
  return result;
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	fab2 f282 	clz	r2, r2
 8002724:	b2d2      	uxtb	r2, r2
 8002726:	40d3      	lsrs	r3, r2
 8002728:	4a04      	ldr	r2, [pc, #16]	@ (800273c <HAL_RCC_GetPCLK2Freq+0x40>)
 800272a:	5cd3      	ldrb	r3, [r2, r3]
 800272c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002730:	4618      	mov	r0, r3
 8002732:	3708      	adds	r7, #8
 8002734:	46bd      	mov	sp, r7
 8002736:	bd80      	pop	{r7, pc}
 8002738:	40021000 	.word	0x40021000
 800273c:	08013188 	.word	0x08013188

08002740 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b092      	sub	sp, #72	@ 0x48
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002748:	2300      	movs	r3, #0
 800274a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 800274c:	2300      	movs	r3, #0
 800274e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002750:	2300      	movs	r3, #0
 8002752:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800275e:	2b00      	cmp	r3, #0
 8002760:	f000 80d4 	beq.w	800290c <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002764:	4b4e      	ldr	r3, [pc, #312]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002766:	69db      	ldr	r3, [r3, #28]
 8002768:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276c:	2b00      	cmp	r3, #0
 800276e:	d10e      	bne.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	4b4b      	ldr	r3, [pc, #300]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002772:	69db      	ldr	r3, [r3, #28]
 8002774:	4a4a      	ldr	r2, [pc, #296]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002776:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800277a:	61d3      	str	r3, [r2, #28]
 800277c:	4b48      	ldr	r3, [pc, #288]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800277e:	69db      	ldr	r3, [r3, #28]
 8002780:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002788:	2301      	movs	r3, #1
 800278a:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800278e:	4b45      	ldr	r3, [pc, #276]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002796:	2b00      	cmp	r3, #0
 8002798:	d118      	bne.n	80027cc <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800279a:	4b42      	ldr	r3, [pc, #264]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4a41      	ldr	r2, [pc, #260]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027a4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80027a6:	f7fe f8fd 	bl	80009a4 <HAL_GetTick>
 80027aa:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027ac:	e008      	b.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80027ae:	f7fe f8f9 	bl	80009a4 <HAL_GetTick>
 80027b2:	4602      	mov	r2, r0
 80027b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80027b6:	1ad3      	subs	r3, r2, r3
 80027b8:	2b64      	cmp	r3, #100	@ 0x64
 80027ba:	d901      	bls.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80027bc:	2303      	movs	r3, #3
 80027be:	e1d6      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80027c0:	4b38      	ldr	r3, [pc, #224]	@ (80028a4 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f0      	beq.n	80027ae <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80027cc:	4b34      	ldr	r3, [pc, #208]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ce:	6a1b      	ldr	r3, [r3, #32]
 80027d0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80027d6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8084 	beq.w	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	685b      	ldr	r3, [r3, #4]
 80027e2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80027e6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80027e8:	429a      	cmp	r2, r3
 80027ea:	d07c      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80027ec:	4b2c      	ldr	r3, [pc, #176]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80027ee:	6a1b      	ldr	r3, [r3, #32]
 80027f0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027f6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80027fa:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8002804:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002806:	fab3 f383 	clz	r3, r3
 800280a:	b2db      	uxtb	r3, r3
 800280c:	461a      	mov	r2, r3
 800280e:	4b26      	ldr	r3, [pc, #152]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002810:	4413      	add	r3, r2
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	461a      	mov	r2, r3
 8002816:	2301      	movs	r3, #1
 8002818:	6013      	str	r3, [r2, #0]
 800281a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800281e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002820:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002822:	fa93 f3a3 	rbit	r3, r3
 8002826:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002828:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800282a:	fab3 f383 	clz	r3, r3
 800282e:	b2db      	uxtb	r3, r3
 8002830:	461a      	mov	r2, r3
 8002832:	4b1d      	ldr	r3, [pc, #116]	@ (80028a8 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002834:	4413      	add	r3, r2
 8002836:	009b      	lsls	r3, r3, #2
 8002838:	461a      	mov	r2, r3
 800283a:	2300      	movs	r3, #0
 800283c:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800283e:	4a18      	ldr	r2, [pc, #96]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002840:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002842:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002844:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002846:	f003 0301 	and.w	r3, r3, #1
 800284a:	2b00      	cmp	r3, #0
 800284c:	d04b      	beq.n	80028e6 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284e:	f7fe f8a9 	bl	80009a4 <HAL_GetTick>
 8002852:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002854:	e00a      	b.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002856:	f7fe f8a5 	bl	80009a4 <HAL_GetTick>
 800285a:	4602      	mov	r2, r0
 800285c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800285e:	1ad3      	subs	r3, r2, r3
 8002860:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002864:	4293      	cmp	r3, r2
 8002866:	d901      	bls.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002868:	2303      	movs	r3, #3
 800286a:	e180      	b.n	8002b6e <HAL_RCCEx_PeriphCLKConfig+0x42e>
 800286c:	2302      	movs	r3, #2
 800286e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002872:	fa93 f3a3 	rbit	r3, r3
 8002876:	627b      	str	r3, [r7, #36]	@ 0x24
 8002878:	2302      	movs	r3, #2
 800287a:	623b      	str	r3, [r7, #32]
 800287c:	6a3b      	ldr	r3, [r7, #32]
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	61fb      	str	r3, [r7, #28]
  return result;
 8002884:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002886:	fab3 f383 	clz	r3, r3
 800288a:	b2db      	uxtb	r3, r3
 800288c:	095b      	lsrs	r3, r3, #5
 800288e:	b2db      	uxtb	r3, r3
 8002890:	f043 0302 	orr.w	r3, r3, #2
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b02      	cmp	r3, #2
 8002898:	d108      	bne.n	80028ac <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800289a:	4b01      	ldr	r3, [pc, #4]	@ (80028a0 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800289c:	6a1b      	ldr	r3, [r3, #32]
 800289e:	e00d      	b.n	80028bc <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80028a0:	40021000 	.word	0x40021000
 80028a4:	40007000 	.word	0x40007000
 80028a8:	10908100 	.word	0x10908100
 80028ac:	2302      	movs	r3, #2
 80028ae:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	fa93 f3a3 	rbit	r3, r3
 80028b6:	617b      	str	r3, [r7, #20]
 80028b8:	4b9a      	ldr	r3, [pc, #616]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028bc:	2202      	movs	r2, #2
 80028be:	613a      	str	r2, [r7, #16]
 80028c0:	693a      	ldr	r2, [r7, #16]
 80028c2:	fa92 f2a2 	rbit	r2, r2
 80028c6:	60fa      	str	r2, [r7, #12]
  return result;
 80028c8:	68fa      	ldr	r2, [r7, #12]
 80028ca:	fab2 f282 	clz	r2, r2
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80028d4:	b2d2      	uxtb	r2, r2
 80028d6:	f002 021f 	and.w	r2, r2, #31
 80028da:	2101      	movs	r1, #1
 80028dc:	fa01 f202 	lsl.w	r2, r1, r2
 80028e0:	4013      	ands	r3, r2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d0b7      	beq.n	8002856 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80028e6:	4b8f      	ldr	r3, [pc, #572]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028e8:	6a1b      	ldr	r3, [r3, #32]
 80028ea:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	685b      	ldr	r3, [r3, #4]
 80028f2:	498c      	ldr	r1, [pc, #560]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80028f4:	4313      	orrs	r3, r2
 80028f6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80028f8:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d105      	bne.n	800290c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002900:	4b88      	ldr	r3, [pc, #544]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	4a87      	ldr	r2, [pc, #540]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002906:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800290a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f003 0301 	and.w	r3, r3, #1
 8002914:	2b00      	cmp	r3, #0
 8002916:	d008      	beq.n	800292a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002918:	4b82      	ldr	r3, [pc, #520]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800291a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800291c:	f023 0203 	bic.w	r2, r3, #3
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	689b      	ldr	r3, [r3, #8]
 8002924:	497f      	ldr	r1, [pc, #508]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002926:	4313      	orrs	r3, r2
 8002928:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f003 0302 	and.w	r3, r3, #2
 8002932:	2b00      	cmp	r3, #0
 8002934:	d008      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002936:	4b7b      	ldr	r3, [pc, #492]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002938:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293a:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	4978      	ldr	r1, [pc, #480]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002944:	4313      	orrs	r3, r2
 8002946:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0304 	and.w	r3, r3, #4
 8002950:	2b00      	cmp	r3, #0
 8002952:	d008      	beq.n	8002966 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002954:	4b73      	ldr	r3, [pc, #460]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002956:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002958:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	691b      	ldr	r3, [r3, #16]
 8002960:	4970      	ldr	r1, [pc, #448]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002962:	4313      	orrs	r3, r2
 8002964:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d008      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002972:	4b6c      	ldr	r3, [pc, #432]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002976:	f023 0210 	bic.w	r2, r3, #16
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	69db      	ldr	r3, [r3, #28]
 800297e:	4969      	ldr	r1, [pc, #420]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002980:	4313      	orrs	r3, r2
 8002982:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298c:	2b00      	cmp	r3, #0
 800298e:	d008      	beq.n	80029a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002990:	4b64      	ldr	r3, [pc, #400]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800299c:	4961      	ldr	r1, [pc, #388]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800299e:	4313      	orrs	r3, r2
 80029a0:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d008      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80029ae:	4b5d      	ldr	r3, [pc, #372]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b2:	f023 0220 	bic.w	r2, r3, #32
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	495a      	ldr	r1, [pc, #360]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d008      	beq.n	80029de <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80029cc:	4b55      	ldr	r3, [pc, #340]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d0:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d8:	4952      	ldr	r1, [pc, #328]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029da:	4313      	orrs	r3, r2
 80029dc:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f003 0308 	and.w	r3, r3, #8
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d008      	beq.n	80029fc <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80029ea:	4b4e      	ldr	r3, [pc, #312]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029ee:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	695b      	ldr	r3, [r3, #20]
 80029f6:	494b      	ldr	r1, [pc, #300]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80029f8:	4313      	orrs	r3, r2
 80029fa:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	f003 0310 	and.w	r3, r3, #16
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d008      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002a08:	4b46      	ldr	r3, [pc, #280]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a0c:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	699b      	ldr	r3, [r3, #24]
 8002a14:	4943      	ldr	r1, [pc, #268]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a16:	4313      	orrs	r3, r2
 8002a18:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	d008      	beq.n	8002a38 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002a26:	4b3f      	ldr	r3, [pc, #252]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a32:	493c      	ldr	r1, [pc, #240]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a34:	4313      	orrs	r3, r2
 8002a36:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d008      	beq.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002a44:	4b37      	ldr	r3, [pc, #220]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a48:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a50:	4934      	ldr	r1, [pc, #208]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a52:	4313      	orrs	r3, r2
 8002a54:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d008      	beq.n	8002a74 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8002a62:	4b30      	ldr	r3, [pc, #192]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a66:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a6e:	492d      	ldr	r1, [pc, #180]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a70:	4313      	orrs	r3, r2
 8002a72:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d008      	beq.n	8002a92 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002a80:	4b28      	ldr	r3, [pc, #160]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a8c:	4925      	ldr	r1, [pc, #148]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d008      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 8002a9e:	4b21      	ldr	r3, [pc, #132]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aaa:	491e      	ldr	r1, [pc, #120]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aac:	4313      	orrs	r3, r2
 8002aae:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d008      	beq.n	8002ace <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002abc:	4b19      	ldr	r3, [pc, #100]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002abe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ac0:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002ac8:	4916      	ldr	r1, [pc, #88]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002aca:	4313      	orrs	r3, r2
 8002acc:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d008      	beq.n	8002aec <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002ada:	4b12      	ldr	r3, [pc, #72]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002adc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ade:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae6:	490f      	ldr	r1, [pc, #60]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002ae8:	4313      	orrs	r3, r2
 8002aea:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d008      	beq.n	8002b0a <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002af8:	4b0a      	ldr	r3, [pc, #40]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002afa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002afc:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	4907      	ldr	r1, [pc, #28]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b06:	4313      	orrs	r3, r2
 8002b08:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00c      	beq.n	8002b30 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002b16:	4b03      	ldr	r3, [pc, #12]	@ (8002b24 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b1a:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	e002      	b.n	8002b28 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8002b22:	bf00      	nop
 8002b24:	40021000 	.word	0x40021000
 8002b28:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b2a:	4913      	ldr	r1, [pc, #76]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d008      	beq.n	8002b4e <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002b3c:	4b0e      	ldr	r3, [pc, #56]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b40:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b48:	490b      	ldr	r1, [pc, #44]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b4a:	4313      	orrs	r3, r2
 8002b4c:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d008      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002b5a:	4b07      	ldr	r3, [pc, #28]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b5e:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b66:	4904      	ldr	r1, [pc, #16]	@ (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3748      	adds	r7, #72	@ 0x48
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b082      	sub	sp, #8
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d101      	bne.n	8002b8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b8a:	2301      	movs	r3, #1
 8002b8c:	e040      	b.n	8002c10 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d106      	bne.n	8002ba4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f7fd fd90 	bl	80006c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2224      	movs	r2, #36	@ 0x24
 8002ba8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	681a      	ldr	r2, [r3, #0]
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f022 0201 	bic.w	r2, r2, #1
 8002bb8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8002bc2:	6878      	ldr	r0, [r7, #4]
 8002bc4:	f000 faea 	bl	800319c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002bc8:	6878      	ldr	r0, [r7, #4]
 8002bca:	f000 f913 	bl	8002df4 <UART_SetConfig>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d101      	bne.n	8002bd8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e01b      	b.n	8002c10 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	685a      	ldr	r2, [r3, #4]
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002be6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689a      	ldr	r2, [r3, #8]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002bf6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f042 0201 	orr.w	r2, r2, #1
 8002c06:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fb69 	bl	80032e0 <UART_CheckIdleState>
 8002c0e:	4603      	mov	r3, r0
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b08a      	sub	sp, #40	@ 0x28
 8002c1c:	af02      	add	r7, sp, #8
 8002c1e:	60f8      	str	r0, [r7, #12]
 8002c20:	60b9      	str	r1, [r7, #8]
 8002c22:	603b      	str	r3, [r7, #0]
 8002c24:	4613      	mov	r3, r2
 8002c26:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002c2c:	2b20      	cmp	r3, #32
 8002c2e:	d177      	bne.n	8002d20 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d002      	beq.n	8002c3c <HAL_UART_Transmit+0x24>
 8002c36:	88fb      	ldrh	r3, [r7, #6]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d101      	bne.n	8002c40 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8002c3c:	2301      	movs	r3, #1
 8002c3e:	e070      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2200      	movs	r2, #0
 8002c44:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	2221      	movs	r2, #33	@ 0x21
 8002c4c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c4e:	f7fd fea9 	bl	80009a4 <HAL_GetTick>
 8002c52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	88fa      	ldrh	r2, [r7, #6]
 8002c58:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	88fa      	ldrh	r2, [r7, #6]
 8002c60:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689b      	ldr	r3, [r3, #8]
 8002c68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002c6c:	d108      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	691b      	ldr	r3, [r3, #16]
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d104      	bne.n	8002c80 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8002c76:	2300      	movs	r3, #0
 8002c78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c7a:	68bb      	ldr	r3, [r7, #8]
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e003      	b.n	8002c88 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8002c80:	68bb      	ldr	r3, [r7, #8]
 8002c82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c84:	2300      	movs	r3, #0
 8002c86:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002c88:	e02f      	b.n	8002cea <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	9300      	str	r3, [sp, #0]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	2200      	movs	r2, #0
 8002c92:	2180      	movs	r1, #128	@ 0x80
 8002c94:	68f8      	ldr	r0, [r7, #12]
 8002c96:	f000 fbcb 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8002c9a:	4603      	mov	r3, r0
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d004      	beq.n	8002caa <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2220      	movs	r2, #32
 8002ca4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e03b      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d10b      	bne.n	8002cc8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	881a      	ldrh	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002cbc:	b292      	uxth	r2, r2
 8002cbe:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3302      	adds	r3, #2
 8002cc4:	61bb      	str	r3, [r7, #24]
 8002cc6:	e007      	b.n	8002cd8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	781a      	ldrb	r2, [r3, #0]
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cde:	b29b      	uxth	r3, r3
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8002cf0:	b29b      	uxth	r3, r3
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1c9      	bne.n	8002c8a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	9300      	str	r3, [sp, #0]
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	2140      	movs	r1, #64	@ 0x40
 8002d00:	68f8      	ldr	r0, [r7, #12]
 8002d02:	f000 fb95 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d004      	beq.n	8002d16 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	2220      	movs	r2, #32
 8002d10:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e005      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2220      	movs	r2, #32
 8002d1a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	e000      	b.n	8002d22 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8002d20:	2302      	movs	r3, #2
  }
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3720      	adds	r7, #32
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b08a      	sub	sp, #40	@ 0x28
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	4613      	mov	r3, r2
 8002d36:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002d3e:	2b20      	cmp	r3, #32
 8002d40:	d132      	bne.n	8002da8 <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d002      	beq.n	8002d4e <HAL_UART_Receive_DMA+0x24>
 8002d48:	88fb      	ldrh	r3, [r7, #6]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d101      	bne.n	8002d52 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	e02b      	b.n	8002daa <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	2200      	movs	r2, #0
 8002d56:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	685b      	ldr	r3, [r3, #4]
 8002d5e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d018      	beq.n	8002d98 <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	e853 3f00 	ldrex	r3, [r3]
 8002d72:	613b      	str	r3, [r7, #16]
   return(result);
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002d7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	461a      	mov	r2, r3
 8002d82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d84:	623b      	str	r3, [r7, #32]
 8002d86:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d88:	69f9      	ldr	r1, [r7, #28]
 8002d8a:	6a3a      	ldr	r2, [r7, #32]
 8002d8c:	e841 2300 	strex	r3, r2, [r1]
 8002d90:	61bb      	str	r3, [r7, #24]
   return(result);
 8002d92:	69bb      	ldr	r3, [r7, #24]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d1e6      	bne.n	8002d66 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8002d98:	88fb      	ldrh	r3, [r7, #6]
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	68b9      	ldr	r1, [r7, #8]
 8002d9e:	68f8      	ldr	r0, [r7, #12]
 8002da0:	f000 fbb4 	bl	800350c <UART_Start_Receive_DMA>
 8002da4:	4603      	mov	r3, r0
 8002da6:	e000      	b.n	8002daa <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 8002da8:	2302      	movs	r3, #2
  }
}
 8002daa:	4618      	mov	r0, r3
 8002dac:	3728      	adds	r7, #40	@ 0x28
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}

08002db2 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
 8002de2:	460b      	mov	r3, r1
 8002de4:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002de6:	bf00      	nop
 8002de8:	370c      	adds	r7, #12
 8002dea:	46bd      	mov	sp, r7
 8002dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df0:	4770      	bx	lr
	...

08002df4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b088      	sub	sp, #32
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689a      	ldr	r2, [r3, #8]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	691b      	ldr	r3, [r3, #16]
 8002e08:	431a      	orrs	r2, r3
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	695b      	ldr	r3, [r3, #20]
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	69db      	ldr	r3, [r3, #28]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	4b92      	ldr	r3, [pc, #584]	@ (8003068 <UART_SetConfig+0x274>)
 8002e20:	4013      	ands	r3, r2
 8002e22:	687a      	ldr	r2, [r7, #4]
 8002e24:	6812      	ldr	r2, [r2, #0]
 8002e26:	6979      	ldr	r1, [r7, #20]
 8002e28:	430b      	orrs	r3, r1
 8002e2a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68da      	ldr	r2, [r3, #12]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	430a      	orrs	r2, r1
 8002e40:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	699b      	ldr	r3, [r3, #24]
 8002e46:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	6a1b      	ldr	r3, [r3, #32]
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	4313      	orrs	r3, r2
 8002e50:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	430a      	orrs	r2, r1
 8002e64:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	4a80      	ldr	r2, [pc, #512]	@ (800306c <UART_SetConfig+0x278>)
 8002e6c:	4293      	cmp	r3, r2
 8002e6e:	d120      	bne.n	8002eb2 <UART_SetConfig+0xbe>
 8002e70:	4b7f      	ldr	r3, [pc, #508]	@ (8003070 <UART_SetConfig+0x27c>)
 8002e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e74:	f003 0303 	and.w	r3, r3, #3
 8002e78:	2b03      	cmp	r3, #3
 8002e7a:	d817      	bhi.n	8002eac <UART_SetConfig+0xb8>
 8002e7c:	a201      	add	r2, pc, #4	@ (adr r2, 8002e84 <UART_SetConfig+0x90>)
 8002e7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e82:	bf00      	nop
 8002e84:	08002e95 	.word	0x08002e95
 8002e88:	08002ea1 	.word	0x08002ea1
 8002e8c:	08002ea7 	.word	0x08002ea7
 8002e90:	08002e9b 	.word	0x08002e9b
 8002e94:	2301      	movs	r3, #1
 8002e96:	77fb      	strb	r3, [r7, #31]
 8002e98:	e0b5      	b.n	8003006 <UART_SetConfig+0x212>
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	77fb      	strb	r3, [r7, #31]
 8002e9e:	e0b2      	b.n	8003006 <UART_SetConfig+0x212>
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	77fb      	strb	r3, [r7, #31]
 8002ea4:	e0af      	b.n	8003006 <UART_SetConfig+0x212>
 8002ea6:	2308      	movs	r3, #8
 8002ea8:	77fb      	strb	r3, [r7, #31]
 8002eaa:	e0ac      	b.n	8003006 <UART_SetConfig+0x212>
 8002eac:	2310      	movs	r3, #16
 8002eae:	77fb      	strb	r3, [r7, #31]
 8002eb0:	e0a9      	b.n	8003006 <UART_SetConfig+0x212>
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	4a6f      	ldr	r2, [pc, #444]	@ (8003074 <UART_SetConfig+0x280>)
 8002eb8:	4293      	cmp	r3, r2
 8002eba:	d124      	bne.n	8002f06 <UART_SetConfig+0x112>
 8002ebc:	4b6c      	ldr	r3, [pc, #432]	@ (8003070 <UART_SetConfig+0x27c>)
 8002ebe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002ec4:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ec8:	d011      	beq.n	8002eee <UART_SetConfig+0xfa>
 8002eca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002ece:	d817      	bhi.n	8002f00 <UART_SetConfig+0x10c>
 8002ed0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002ed4:	d011      	beq.n	8002efa <UART_SetConfig+0x106>
 8002ed6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002eda:	d811      	bhi.n	8002f00 <UART_SetConfig+0x10c>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d003      	beq.n	8002ee8 <UART_SetConfig+0xf4>
 8002ee0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee4:	d006      	beq.n	8002ef4 <UART_SetConfig+0x100>
 8002ee6:	e00b      	b.n	8002f00 <UART_SetConfig+0x10c>
 8002ee8:	2300      	movs	r3, #0
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e08b      	b.n	8003006 <UART_SetConfig+0x212>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	77fb      	strb	r3, [r7, #31]
 8002ef2:	e088      	b.n	8003006 <UART_SetConfig+0x212>
 8002ef4:	2304      	movs	r3, #4
 8002ef6:	77fb      	strb	r3, [r7, #31]
 8002ef8:	e085      	b.n	8003006 <UART_SetConfig+0x212>
 8002efa:	2308      	movs	r3, #8
 8002efc:	77fb      	strb	r3, [r7, #31]
 8002efe:	e082      	b.n	8003006 <UART_SetConfig+0x212>
 8002f00:	2310      	movs	r3, #16
 8002f02:	77fb      	strb	r3, [r7, #31]
 8002f04:	e07f      	b.n	8003006 <UART_SetConfig+0x212>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4a5b      	ldr	r2, [pc, #364]	@ (8003078 <UART_SetConfig+0x284>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d124      	bne.n	8002f5a <UART_SetConfig+0x166>
 8002f10:	4b57      	ldr	r3, [pc, #348]	@ (8003070 <UART_SetConfig+0x27c>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f14:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8002f18:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f1c:	d011      	beq.n	8002f42 <UART_SetConfig+0x14e>
 8002f1e:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8002f22:	d817      	bhi.n	8002f54 <UART_SetConfig+0x160>
 8002f24:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f28:	d011      	beq.n	8002f4e <UART_SetConfig+0x15a>
 8002f2a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8002f2e:	d811      	bhi.n	8002f54 <UART_SetConfig+0x160>
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	d003      	beq.n	8002f3c <UART_SetConfig+0x148>
 8002f34:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002f38:	d006      	beq.n	8002f48 <UART_SetConfig+0x154>
 8002f3a:	e00b      	b.n	8002f54 <UART_SetConfig+0x160>
 8002f3c:	2300      	movs	r3, #0
 8002f3e:	77fb      	strb	r3, [r7, #31]
 8002f40:	e061      	b.n	8003006 <UART_SetConfig+0x212>
 8002f42:	2302      	movs	r3, #2
 8002f44:	77fb      	strb	r3, [r7, #31]
 8002f46:	e05e      	b.n	8003006 <UART_SetConfig+0x212>
 8002f48:	2304      	movs	r3, #4
 8002f4a:	77fb      	strb	r3, [r7, #31]
 8002f4c:	e05b      	b.n	8003006 <UART_SetConfig+0x212>
 8002f4e:	2308      	movs	r3, #8
 8002f50:	77fb      	strb	r3, [r7, #31]
 8002f52:	e058      	b.n	8003006 <UART_SetConfig+0x212>
 8002f54:	2310      	movs	r3, #16
 8002f56:	77fb      	strb	r3, [r7, #31]
 8002f58:	e055      	b.n	8003006 <UART_SetConfig+0x212>
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a47      	ldr	r2, [pc, #284]	@ (800307c <UART_SetConfig+0x288>)
 8002f60:	4293      	cmp	r3, r2
 8002f62:	d124      	bne.n	8002fae <UART_SetConfig+0x1ba>
 8002f64:	4b42      	ldr	r3, [pc, #264]	@ (8003070 <UART_SetConfig+0x27c>)
 8002f66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f68:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8002f6c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f70:	d011      	beq.n	8002f96 <UART_SetConfig+0x1a2>
 8002f72:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002f76:	d817      	bhi.n	8002fa8 <UART_SetConfig+0x1b4>
 8002f78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f7c:	d011      	beq.n	8002fa2 <UART_SetConfig+0x1ae>
 8002f7e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002f82:	d811      	bhi.n	8002fa8 <UART_SetConfig+0x1b4>
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d003      	beq.n	8002f90 <UART_SetConfig+0x19c>
 8002f88:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002f8c:	d006      	beq.n	8002f9c <UART_SetConfig+0x1a8>
 8002f8e:	e00b      	b.n	8002fa8 <UART_SetConfig+0x1b4>
 8002f90:	2300      	movs	r3, #0
 8002f92:	77fb      	strb	r3, [r7, #31]
 8002f94:	e037      	b.n	8003006 <UART_SetConfig+0x212>
 8002f96:	2302      	movs	r3, #2
 8002f98:	77fb      	strb	r3, [r7, #31]
 8002f9a:	e034      	b.n	8003006 <UART_SetConfig+0x212>
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	77fb      	strb	r3, [r7, #31]
 8002fa0:	e031      	b.n	8003006 <UART_SetConfig+0x212>
 8002fa2:	2308      	movs	r3, #8
 8002fa4:	77fb      	strb	r3, [r7, #31]
 8002fa6:	e02e      	b.n	8003006 <UART_SetConfig+0x212>
 8002fa8:	2310      	movs	r3, #16
 8002faa:	77fb      	strb	r3, [r7, #31]
 8002fac:	e02b      	b.n	8003006 <UART_SetConfig+0x212>
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4a33      	ldr	r2, [pc, #204]	@ (8003080 <UART_SetConfig+0x28c>)
 8002fb4:	4293      	cmp	r3, r2
 8002fb6:	d124      	bne.n	8003002 <UART_SetConfig+0x20e>
 8002fb8:	4b2d      	ldr	r3, [pc, #180]	@ (8003070 <UART_SetConfig+0x27c>)
 8002fba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fbc:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8002fc0:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fc4:	d011      	beq.n	8002fea <UART_SetConfig+0x1f6>
 8002fc6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8002fca:	d817      	bhi.n	8002ffc <UART_SetConfig+0x208>
 8002fcc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fd0:	d011      	beq.n	8002ff6 <UART_SetConfig+0x202>
 8002fd2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002fd6:	d811      	bhi.n	8002ffc <UART_SetConfig+0x208>
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d003      	beq.n	8002fe4 <UART_SetConfig+0x1f0>
 8002fdc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002fe0:	d006      	beq.n	8002ff0 <UART_SetConfig+0x1fc>
 8002fe2:	e00b      	b.n	8002ffc <UART_SetConfig+0x208>
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	77fb      	strb	r3, [r7, #31]
 8002fe8:	e00d      	b.n	8003006 <UART_SetConfig+0x212>
 8002fea:	2302      	movs	r3, #2
 8002fec:	77fb      	strb	r3, [r7, #31]
 8002fee:	e00a      	b.n	8003006 <UART_SetConfig+0x212>
 8002ff0:	2304      	movs	r3, #4
 8002ff2:	77fb      	strb	r3, [r7, #31]
 8002ff4:	e007      	b.n	8003006 <UART_SetConfig+0x212>
 8002ff6:	2308      	movs	r3, #8
 8002ff8:	77fb      	strb	r3, [r7, #31]
 8002ffa:	e004      	b.n	8003006 <UART_SetConfig+0x212>
 8002ffc:	2310      	movs	r3, #16
 8002ffe:	77fb      	strb	r3, [r7, #31]
 8003000:	e001      	b.n	8003006 <UART_SetConfig+0x212>
 8003002:	2310      	movs	r3, #16
 8003004:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69db      	ldr	r3, [r3, #28]
 800300a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800300e:	d16b      	bne.n	80030e8 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003010:	7ffb      	ldrb	r3, [r7, #31]
 8003012:	2b08      	cmp	r3, #8
 8003014:	d838      	bhi.n	8003088 <UART_SetConfig+0x294>
 8003016:	a201      	add	r2, pc, #4	@ (adr r2, 800301c <UART_SetConfig+0x228>)
 8003018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800301c:	08003041 	.word	0x08003041
 8003020:	08003049 	.word	0x08003049
 8003024:	08003051 	.word	0x08003051
 8003028:	08003089 	.word	0x08003089
 800302c:	08003057 	.word	0x08003057
 8003030:	08003089 	.word	0x08003089
 8003034:	08003089 	.word	0x08003089
 8003038:	08003089 	.word	0x08003089
 800303c:	0800305f 	.word	0x0800305f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003040:	f7ff fb3a 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 8003044:	61b8      	str	r0, [r7, #24]
        break;
 8003046:	e024      	b.n	8003092 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003048:	f7ff fb58 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 800304c:	61b8      	str	r0, [r7, #24]
        break;
 800304e:	e020      	b.n	8003092 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003050:	4b0c      	ldr	r3, [pc, #48]	@ (8003084 <UART_SetConfig+0x290>)
 8003052:	61bb      	str	r3, [r7, #24]
        break;
 8003054:	e01d      	b.n	8003092 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003056:	f7ff facf 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 800305a:	61b8      	str	r0, [r7, #24]
        break;
 800305c:	e019      	b.n	8003092 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800305e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003062:	61bb      	str	r3, [r7, #24]
        break;
 8003064:	e015      	b.n	8003092 <UART_SetConfig+0x29e>
 8003066:	bf00      	nop
 8003068:	efff69f3 	.word	0xefff69f3
 800306c:	40013800 	.word	0x40013800
 8003070:	40021000 	.word	0x40021000
 8003074:	40004400 	.word	0x40004400
 8003078:	40004800 	.word	0x40004800
 800307c:	40004c00 	.word	0x40004c00
 8003080:	40005000 	.word	0x40005000
 8003084:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003088:	2300      	movs	r3, #0
 800308a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	77bb      	strb	r3, [r7, #30]
        break;
 8003090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003092:	69bb      	ldr	r3, [r7, #24]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d073      	beq.n	8003180 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	005a      	lsls	r2, r3, #1
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	441a      	add	r2, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d916      	bls.n	80030e2 <UART_SetConfig+0x2ee>
 80030b4:	693b      	ldr	r3, [r7, #16]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ba:	d212      	bcs.n	80030e2 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c6:	693b      	ldr	r3, [r7, #16]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	89fb      	ldrh	r3, [r7, #14]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	89fa      	ldrh	r2, [r7, #14]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e04e      	b.n	8003180 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	77bb      	strb	r3, [r7, #30]
 80030e6:	e04b      	b.n	8003180 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030e8:	7ffb      	ldrb	r3, [r7, #31]
 80030ea:	2b08      	cmp	r3, #8
 80030ec:	d827      	bhi.n	800313e <UART_SetConfig+0x34a>
 80030ee:	a201      	add	r2, pc, #4	@ (adr r2, 80030f4 <UART_SetConfig+0x300>)
 80030f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003121 	.word	0x08003121
 80030fc:	08003129 	.word	0x08003129
 8003100:	0800313f 	.word	0x0800313f
 8003104:	0800312f 	.word	0x0800312f
 8003108:	0800313f 	.word	0x0800313f
 800310c:	0800313f 	.word	0x0800313f
 8003110:	0800313f 	.word	0x0800313f
 8003114:	08003137 	.word	0x08003137
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7ff face 	bl	80026b8 <HAL_RCC_GetPCLK1Freq>
 800311c:	61b8      	str	r0, [r7, #24]
        break;
 800311e:	e013      	b.n	8003148 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003120:	f7ff faec 	bl	80026fc <HAL_RCC_GetPCLK2Freq>
 8003124:	61b8      	str	r0, [r7, #24]
        break;
 8003126:	e00f      	b.n	8003148 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003128:	4b1b      	ldr	r3, [pc, #108]	@ (8003198 <UART_SetConfig+0x3a4>)
 800312a:	61bb      	str	r3, [r7, #24]
        break;
 800312c:	e00c      	b.n	8003148 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800312e:	f7ff fa63 	bl	80025f8 <HAL_RCC_GetSysClockFreq>
 8003132:	61b8      	str	r0, [r7, #24]
        break;
 8003134:	e008      	b.n	8003148 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003136:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800313a:	61bb      	str	r3, [r7, #24]
        break;
 800313c:	e004      	b.n	8003148 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 800313e:	2300      	movs	r3, #0
 8003140:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	77bb      	strb	r3, [r7, #30]
        break;
 8003146:	bf00      	nop
    }

    if (pclk != 0U)
 8003148:	69bb      	ldr	r3, [r7, #24]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d018      	beq.n	8003180 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	085a      	lsrs	r2, r3, #1
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	441a      	add	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003160:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b0f      	cmp	r3, #15
 8003166:	d909      	bls.n	800317c <UART_SetConfig+0x388>
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800316e:	d205      	bcs.n	800317c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003170:	693b      	ldr	r3, [r7, #16]
 8003172:	b29a      	uxth	r2, r3
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	60da      	str	r2, [r3, #12]
 800317a:	e001      	b.n	8003180 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2200      	movs	r2, #0
 8003184:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 800318c:	7fbb      	ldrb	r3, [r7, #30]
}
 800318e:	4618      	mov	r0, r3
 8003190:	3720      	adds	r7, #32
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	007a1200 	.word	0x007a1200

0800319c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031a8:	f003 0308 	and.w	r3, r3, #8
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d00a      	beq.n	80031c6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	685b      	ldr	r3, [r3, #4]
 80031b6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	430a      	orrs	r2, r1
 80031c4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d00a      	beq.n	80031e8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	430a      	orrs	r2, r1
 80031e6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d00a      	beq.n	800320a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	430a      	orrs	r2, r1
 8003208:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	2b00      	cmp	r3, #0
 8003214:	d00a      	beq.n	800322c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	430a      	orrs	r2, r1
 800322a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	d00a      	beq.n	800324e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	689b      	ldr	r3, [r3, #8]
 800323e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	430a      	orrs	r2, r1
 800324c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00a      	beq.n	8003270 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	689b      	ldr	r3, [r3, #8]
 8003260:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	430a      	orrs	r2, r1
 800326e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003274:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01a      	beq.n	80032b2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	430a      	orrs	r2, r1
 8003290:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003296:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800329a:	d10a      	bne.n	80032b2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	685b      	ldr	r3, [r3, #4]
 80032a2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	430a      	orrs	r2, r1
 80032b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d00a      	beq.n	80032d4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	605a      	str	r2, [r3, #4]
  }
}
 80032d4:	bf00      	nop
 80032d6:	370c      	adds	r7, #12
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr

080032e0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b098      	sub	sp, #96	@ 0x60
 80032e4:	af02      	add	r7, sp, #8
 80032e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032f0:	f7fd fb58 	bl	80009a4 <HAL_GetTick>
 80032f4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b08      	cmp	r3, #8
 8003302:	d12e      	bne.n	8003362 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003304:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003308:	9300      	str	r3, [sp, #0]
 800330a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800330c:	2200      	movs	r2, #0
 800330e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f000 f88c 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d021      	beq.n	8003362 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003324:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003326:	e853 3f00 	ldrex	r3, [r3]
 800332a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800332c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800332e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003332:	653b      	str	r3, [r7, #80]	@ 0x50
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	461a      	mov	r2, r3
 800333a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800333c:	647b      	str	r3, [r7, #68]	@ 0x44
 800333e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003340:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003342:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003344:	e841 2300 	strex	r3, r2, [r1]
 8003348:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800334a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800334c:	2b00      	cmp	r3, #0
 800334e:	d1e6      	bne.n	800331e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2220      	movs	r2, #32
 8003354:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2200      	movs	r2, #0
 800335a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800335e:	2303      	movs	r3, #3
 8003360:	e062      	b.n	8003428 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	f003 0304 	and.w	r3, r3, #4
 800336c:	2b04      	cmp	r3, #4
 800336e:	d149      	bne.n	8003404 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003370:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003374:	9300      	str	r3, [sp, #0]
 8003376:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003378:	2200      	movs	r2, #0
 800337a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800337e:	6878      	ldr	r0, [r7, #4]
 8003380:	f000 f856 	bl	8003430 <UART_WaitOnFlagUntilTimeout>
 8003384:	4603      	mov	r3, r0
 8003386:	2b00      	cmp	r3, #0
 8003388:	d03c      	beq.n	8003404 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003390:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003392:	e853 3f00 	ldrex	r3, [r3]
 8003396:	623b      	str	r3, [r7, #32]
   return(result);
 8003398:	6a3b      	ldr	r3, [r7, #32]
 800339a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800339e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	461a      	mov	r2, r3
 80033a6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80033aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033ac:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80033ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80033b0:	e841 2300 	strex	r3, r2, [r1]
 80033b4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80033b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d1e6      	bne.n	800338a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	3308      	adds	r3, #8
 80033c2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	e853 3f00 	ldrex	r3, [r3]
 80033ca:	60fb      	str	r3, [r7, #12]
   return(result);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f023 0301 	bic.w	r3, r3, #1
 80033d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	3308      	adds	r3, #8
 80033da:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80033dc:	61fa      	str	r2, [r7, #28]
 80033de:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033e0:	69b9      	ldr	r1, [r7, #24]
 80033e2:	69fa      	ldr	r2, [r7, #28]
 80033e4:	e841 2300 	strex	r3, r2, [r1]
 80033e8:	617b      	str	r3, [r7, #20]
   return(result);
 80033ea:	697b      	ldr	r3, [r7, #20]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d1e5      	bne.n	80033bc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2220      	movs	r2, #32
 80033f4:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	2200      	movs	r2, #0
 80033fc:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e011      	b.n	8003428 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	2220      	movs	r2, #32
 8003408:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2220      	movs	r2, #32
 800340e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2200      	movs	r2, #0
 8003416:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	2200      	movs	r2, #0
 8003422:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8003426:	2300      	movs	r3, #0
}
 8003428:	4618      	mov	r0, r3
 800342a:	3758      	adds	r7, #88	@ 0x58
 800342c:	46bd      	mov	sp, r7
 800342e:	bd80      	pop	{r7, pc}

08003430 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b084      	sub	sp, #16
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	603b      	str	r3, [r7, #0]
 800343c:	4613      	mov	r3, r2
 800343e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003440:	e04f      	b.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003442:	69bb      	ldr	r3, [r7, #24]
 8003444:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003448:	d04b      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800344a:	f7fd faab 	bl	80009a4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	69ba      	ldr	r2, [r7, #24]
 8003456:	429a      	cmp	r2, r3
 8003458:	d302      	bcc.n	8003460 <UART_WaitOnFlagUntilTimeout+0x30>
 800345a:	69bb      	ldr	r3, [r7, #24]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d101      	bne.n	8003464 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e04e      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 0304 	and.w	r3, r3, #4
 800346e:	2b00      	cmp	r3, #0
 8003470:	d037      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003472:	68bb      	ldr	r3, [r7, #8]
 8003474:	2b80      	cmp	r3, #128	@ 0x80
 8003476:	d034      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003478:	68bb      	ldr	r3, [r7, #8]
 800347a:	2b40      	cmp	r3, #64	@ 0x40
 800347c:	d031      	beq.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	69db      	ldr	r3, [r3, #28]
 8003484:	f003 0308 	and.w	r3, r3, #8
 8003488:	2b08      	cmp	r3, #8
 800348a:	d110      	bne.n	80034ae <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2208      	movs	r2, #8
 8003492:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 f8ff 	bl	8003698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2208      	movs	r2, #8
 800349e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	2200      	movs	r2, #0
 80034a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80034aa:	2301      	movs	r3, #1
 80034ac:	e029      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	69db      	ldr	r3, [r3, #28]
 80034b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80034b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034bc:	d111      	bne.n	80034e2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80034c6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80034c8:	68f8      	ldr	r0, [r7, #12]
 80034ca:	f000 f8e5 	bl	8003698 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	2220      	movs	r2, #32
 80034d2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	2200      	movs	r2, #0
 80034da:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 80034de:	2303      	movs	r3, #3
 80034e0:	e00f      	b.n	8003502 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69da      	ldr	r2, [r3, #28]
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	4013      	ands	r3, r2
 80034ec:	68ba      	ldr	r2, [r7, #8]
 80034ee:	429a      	cmp	r2, r3
 80034f0:	bf0c      	ite	eq
 80034f2:	2301      	moveq	r3, #1
 80034f4:	2300      	movne	r3, #0
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	461a      	mov	r2, r3
 80034fa:	79fb      	ldrb	r3, [r7, #7]
 80034fc:	429a      	cmp	r2, r3
 80034fe:	d0a0      	beq.n	8003442 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003500:	2300      	movs	r3, #0
}
 8003502:	4618      	mov	r0, r3
 8003504:	3710      	adds	r7, #16
 8003506:	46bd      	mov	sp, r7
 8003508:	bd80      	pop	{r7, pc}
	...

0800350c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800350c:	b580      	push	{r7, lr}
 800350e:	b096      	sub	sp, #88	@ 0x58
 8003510:	af00      	add	r7, sp, #0
 8003512:	60f8      	str	r0, [r7, #12]
 8003514:	60b9      	str	r1, [r7, #8]
 8003516:	4613      	mov	r3, r2
 8003518:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	88fa      	ldrh	r2, [r7, #6]
 8003524:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2200      	movs	r2, #0
 800352c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2222      	movs	r2, #34	@ 0x22
 8003534:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800353c:	2b00      	cmp	r3, #0
 800353e:	d028      	beq.n	8003592 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003544:	4a3e      	ldr	r2, [pc, #248]	@ (8003640 <UART_Start_Receive_DMA+0x134>)
 8003546:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800354c:	4a3d      	ldr	r2, [pc, #244]	@ (8003644 <UART_Start_Receive_DMA+0x138>)
 800354e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003554:	4a3c      	ldr	r2, [pc, #240]	@ (8003648 <UART_Start_Receive_DMA+0x13c>)
 8003556:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800355c:	2200      	movs	r2, #0
 800355e:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	3324      	adds	r3, #36	@ 0x24
 800356a:	4619      	mov	r1, r3
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003570:	461a      	mov	r2, r3
 8003572:	88fb      	ldrh	r3, [r7, #6]
 8003574:	f7fd fb7a 	bl	8000c6c <HAL_DMA_Start_IT>
 8003578:	4603      	mov	r3, r0
 800357a:	2b00      	cmp	r3, #0
 800357c:	d009      	beq.n	8003592 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2210      	movs	r2, #16
 8003582:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2220      	movs	r2, #32
 800358a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	e051      	b.n	8003636 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d018      	beq.n	80035cc <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80035a2:	e853 3f00 	ldrex	r3, [r3]
 80035a6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80035a8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80035aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ae:	657b      	str	r3, [r7, #84]	@ 0x54
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	461a      	mov	r2, r3
 80035b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80035b8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80035ba:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035bc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80035be:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035c0:	e841 2300 	strex	r3, r2, [r1]
 80035c4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80035c6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d1e6      	bne.n	800359a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	3308      	adds	r3, #8
 80035d2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035d6:	e853 3f00 	ldrex	r3, [r3]
 80035da:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035de:	f043 0301 	orr.w	r3, r3, #1
 80035e2:	653b      	str	r3, [r7, #80]	@ 0x50
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	3308      	adds	r3, #8
 80035ea:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80035ec:	637a      	str	r2, [r7, #52]	@ 0x34
 80035ee:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035f0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035f2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80035f4:	e841 2300 	strex	r3, r2, [r1]
 80035f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80035fa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d1e5      	bne.n	80035cc <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	3308      	adds	r3, #8
 8003606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	e853 3f00 	ldrex	r3, [r3]
 800360e:	613b      	str	r3, [r7, #16]
   return(result);
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003616:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	3308      	adds	r3, #8
 800361e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003620:	623a      	str	r2, [r7, #32]
 8003622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003624:	69f9      	ldr	r1, [r7, #28]
 8003626:	6a3a      	ldr	r2, [r7, #32]
 8003628:	e841 2300 	strex	r3, r2, [r1]
 800362c:	61bb      	str	r3, [r7, #24]
   return(result);
 800362e:	69bb      	ldr	r3, [r7, #24]
 8003630:	2b00      	cmp	r3, #0
 8003632:	d1e5      	bne.n	8003600 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8003634:	2300      	movs	r3, #0
}
 8003636:	4618      	mov	r0, r3
 8003638:	3758      	adds	r7, #88	@ 0x58
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	08003761 	.word	0x08003761
 8003644:	08003887 	.word	0x08003887
 8003648:	080038c5 	.word	0x080038c5

0800364c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800364c:	b480      	push	{r7}
 800364e:	b089      	sub	sp, #36	@ 0x24
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	e853 3f00 	ldrex	r3, [r3]
 8003660:	60bb      	str	r3, [r7, #8]
   return(result);
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003668:	61fb      	str	r3, [r7, #28]
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	461a      	mov	r2, r3
 8003670:	69fb      	ldr	r3, [r7, #28]
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003676:	6979      	ldr	r1, [r7, #20]
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	e841 2300 	strex	r3, r2, [r1]
 800367e:	613b      	str	r3, [r7, #16]
   return(result);
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d1e6      	bne.n	8003654 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	2220      	movs	r2, #32
 800368a:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 800368c:	bf00      	nop
 800368e:	3724      	adds	r7, #36	@ 0x24
 8003690:	46bd      	mov	sp, r7
 8003692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003696:	4770      	bx	lr

08003698 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003698:	b480      	push	{r7}
 800369a:	b095      	sub	sp, #84	@ 0x54
 800369c:	af00      	add	r7, sp, #0
 800369e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036a6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80036a8:	e853 3f00 	ldrex	r3, [r3]
 80036ac:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80036ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036b0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80036b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	461a      	mov	r2, r3
 80036bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036be:	643b      	str	r3, [r7, #64]	@ 0x40
 80036c0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036c2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80036c4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80036c6:	e841 2300 	strex	r3, r2, [r1]
 80036ca:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80036cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d1e6      	bne.n	80036a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	3308      	adds	r3, #8
 80036d8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036da:	6a3b      	ldr	r3, [r7, #32]
 80036dc:	e853 3f00 	ldrex	r3, [r3]
 80036e0:	61fb      	str	r3, [r7, #28]
   return(result);
 80036e2:	69fb      	ldr	r3, [r7, #28]
 80036e4:	f023 0301 	bic.w	r3, r3, #1
 80036e8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	3308      	adds	r3, #8
 80036f0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80036f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80036fa:	e841 2300 	strex	r3, r2, [r1]
 80036fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003700:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003702:	2b00      	cmp	r3, #0
 8003704:	d1e5      	bne.n	80036d2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800370a:	2b01      	cmp	r3, #1
 800370c:	d118      	bne.n	8003740 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	e853 3f00 	ldrex	r3, [r3]
 800371a:	60bb      	str	r3, [r7, #8]
   return(result);
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f023 0310 	bic.w	r3, r3, #16
 8003722:	647b      	str	r3, [r7, #68]	@ 0x44
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	461a      	mov	r2, r3
 800372a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800372c:	61bb      	str	r3, [r7, #24]
 800372e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003730:	6979      	ldr	r1, [r7, #20]
 8003732:	69ba      	ldr	r2, [r7, #24]
 8003734:	e841 2300 	strex	r3, r2, [r1]
 8003738:	613b      	str	r3, [r7, #16]
   return(result);
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1e6      	bne.n	800370e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	2220      	movs	r2, #32
 8003744:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2200      	movs	r2, #0
 800374c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	2200      	movs	r2, #0
 8003752:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8003754:	bf00      	nop
 8003756:	3754      	adds	r7, #84	@ 0x54
 8003758:	46bd      	mov	sp, r7
 800375a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800375e:	4770      	bx	lr

08003760 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8003760:	b580      	push	{r7, lr}
 8003762:	b09c      	sub	sp, #112	@ 0x70
 8003764:	af00      	add	r7, sp, #0
 8003766:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	699b      	ldr	r3, [r3, #24]
 8003772:	2b20      	cmp	r3, #32
 8003774:	d071      	beq.n	800385a <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8003776:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003778:	2200      	movs	r2, #0
 800377a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800377e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003784:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003786:	e853 3f00 	ldrex	r3, [r3]
 800378a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800378c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800378e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003792:	66bb      	str	r3, [r7, #104]	@ 0x68
 8003794:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	461a      	mov	r2, r3
 800379a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800379c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800379e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037a0:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80037a2:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80037a4:	e841 2300 	strex	r3, r2, [r1]
 80037a8:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80037aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d1e6      	bne.n	800377e <UART_DMAReceiveCplt+0x1e>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037b0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	3308      	adds	r3, #8
 80037b6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80037ba:	e853 3f00 	ldrex	r3, [r3]
 80037be:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80037c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80037c8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	3308      	adds	r3, #8
 80037ce:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80037d0:	647a      	str	r2, [r7, #68]	@ 0x44
 80037d2:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037d4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80037d6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80037d8:	e841 2300 	strex	r3, r2, [r1]
 80037dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80037de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d1e5      	bne.n	80037b0 <UART_DMAReceiveCplt+0x50>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80037e4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	3308      	adds	r3, #8
 80037ea:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ee:	e853 3f00 	ldrex	r3, [r3]
 80037f2:	623b      	str	r3, [r7, #32]
   return(result);
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037fa:	663b      	str	r3, [r7, #96]	@ 0x60
 80037fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	3308      	adds	r3, #8
 8003802:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8003804:	633a      	str	r2, [r7, #48]	@ 0x30
 8003806:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003808:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800380a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800380c:	e841 2300 	strex	r3, r2, [r1]
 8003810:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003812:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003814:	2b00      	cmp	r3, #0
 8003816:	d1e5      	bne.n	80037e4 <UART_DMAReceiveCplt+0x84>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003818:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800381a:	2220      	movs	r2, #32
 800381c:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003820:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003822:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003824:	2b01      	cmp	r3, #1
 8003826:	d118      	bne.n	800385a <UART_DMAReceiveCplt+0xfa>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003828:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	e853 3f00 	ldrex	r3, [r3]
 8003834:	60fb      	str	r3, [r7, #12]
   return(result);
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	f023 0310 	bic.w	r3, r3, #16
 800383c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800383e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	461a      	mov	r2, r3
 8003844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003846:	61fb      	str	r3, [r7, #28]
 8003848:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800384a:	69b9      	ldr	r1, [r7, #24]
 800384c:	69fa      	ldr	r2, [r7, #28]
 800384e:	e841 2300 	strex	r3, r2, [r1]
 8003852:	617b      	str	r3, [r7, #20]
   return(result);
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1e6      	bne.n	8003828 <UART_DMAReceiveCplt+0xc8>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800385a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800385c:	2200      	movs	r2, #0
 800385e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003860:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003862:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003864:	2b01      	cmp	r3, #1
 8003866:	d107      	bne.n	8003878 <UART_DMAReceiveCplt+0x118>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003868:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800386a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800386e:	4619      	mov	r1, r3
 8003870:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8003872:	f7ff fab2 	bl	8002dda <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8003876:	e002      	b.n	800387e <UART_DMAReceiveCplt+0x11e>
    HAL_UART_RxCpltCallback(huart);
 8003878:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800387a:	f7fc fee3 	bl	8000644 <HAL_UART_RxCpltCallback>
}
 800387e:	bf00      	nop
 8003880:	3770      	adds	r7, #112	@ 0x70
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}

08003886 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8003886:	b580      	push	{r7, lr}
 8003888:	b084      	sub	sp, #16
 800388a:	af00      	add	r7, sp, #0
 800388c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2201      	movs	r2, #1
 8003898:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800389e:	2b01      	cmp	r3, #1
 80038a0:	d109      	bne.n	80038b6 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 80038a8:	085b      	lsrs	r3, r3, #1
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4619      	mov	r1, r3
 80038ae:	68f8      	ldr	r0, [r7, #12]
 80038b0:	f7ff fa93 	bl	8002dda <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80038b4:	e002      	b.n	80038bc <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f7ff fa7b 	bl	8002db2 <HAL_UART_RxHalfCpltCallback>
}
 80038bc:	bf00      	nop
 80038be:	3710      	adds	r7, #16
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b086      	sub	sp, #24
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038d0:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80038d2:	697b      	ldr	r3, [r7, #20]
 80038d4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80038d6:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80038d8:	697b      	ldr	r3, [r7, #20]
 80038da:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80038de:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	689b      	ldr	r3, [r3, #8]
 80038e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80038ea:	2b80      	cmp	r3, #128	@ 0x80
 80038ec:	d109      	bne.n	8003902 <UART_DMAError+0x3e>
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	2b21      	cmp	r3, #33	@ 0x21
 80038f2:	d106      	bne.n	8003902 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	2200      	movs	r2, #0
 80038f8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80038fc:	6978      	ldr	r0, [r7, #20]
 80038fe:	f7ff fea5 	bl	800364c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8003902:	697b      	ldr	r3, [r7, #20]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	689b      	ldr	r3, [r3, #8]
 8003908:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800390c:	2b40      	cmp	r3, #64	@ 0x40
 800390e:	d109      	bne.n	8003924 <UART_DMAError+0x60>
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	2b22      	cmp	r3, #34	@ 0x22
 8003914:	d106      	bne.n	8003924 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2200      	movs	r2, #0
 800391a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 800391e:	6978      	ldr	r0, [r7, #20]
 8003920:	f7ff feba 	bl	8003698 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800392a:	f043 0210 	orr.w	r2, r3, #16
 800392e:	697b      	ldr	r3, [r7, #20]
 8003930:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003934:	6978      	ldr	r0, [r7, #20]
 8003936:	f7ff fa46 	bl	8002dc6 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800393a:	bf00      	nop
 800393c:	3718      	adds	r7, #24
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <memset>:
 8003942:	4402      	add	r2, r0
 8003944:	4603      	mov	r3, r0
 8003946:	4293      	cmp	r3, r2
 8003948:	d100      	bne.n	800394c <memset+0xa>
 800394a:	4770      	bx	lr
 800394c:	f803 1b01 	strb.w	r1, [r3], #1
 8003950:	e7f9      	b.n	8003946 <memset+0x4>
	...

08003954 <__errno>:
 8003954:	4b01      	ldr	r3, [pc, #4]	@ (800395c <__errno+0x8>)
 8003956:	6818      	ldr	r0, [r3, #0]
 8003958:	4770      	bx	lr
 800395a:	bf00      	nop
 800395c:	2000000c 	.word	0x2000000c

08003960 <__libc_init_array>:
 8003960:	b570      	push	{r4, r5, r6, lr}
 8003962:	4d0d      	ldr	r5, [pc, #52]	@ (8003998 <__libc_init_array+0x38>)
 8003964:	4c0d      	ldr	r4, [pc, #52]	@ (800399c <__libc_init_array+0x3c>)
 8003966:	1b64      	subs	r4, r4, r5
 8003968:	10a4      	asrs	r4, r4, #2
 800396a:	2600      	movs	r6, #0
 800396c:	42a6      	cmp	r6, r4
 800396e:	d109      	bne.n	8003984 <__libc_init_array+0x24>
 8003970:	4d0b      	ldr	r5, [pc, #44]	@ (80039a0 <__libc_init_array+0x40>)
 8003972:	4c0c      	ldr	r4, [pc, #48]	@ (80039a4 <__libc_init_array+0x44>)
 8003974:	f000 f94c 	bl	8003c10 <_init>
 8003978:	1b64      	subs	r4, r4, r5
 800397a:	10a4      	asrs	r4, r4, #2
 800397c:	2600      	movs	r6, #0
 800397e:	42a6      	cmp	r6, r4
 8003980:	d105      	bne.n	800398e <__libc_init_array+0x2e>
 8003982:	bd70      	pop	{r4, r5, r6, pc}
 8003984:	f855 3b04 	ldr.w	r3, [r5], #4
 8003988:	4798      	blx	r3
 800398a:	3601      	adds	r6, #1
 800398c:	e7ee      	b.n	800396c <__libc_init_array+0xc>
 800398e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003992:	4798      	blx	r3
 8003994:	3601      	adds	r6, #1
 8003996:	e7f2      	b.n	800397e <__libc_init_array+0x1e>
 8003998:	080131c8 	.word	0x080131c8
 800399c:	080131c8 	.word	0x080131c8
 80039a0:	080131c8 	.word	0x080131c8
 80039a4:	080131cc 	.word	0x080131cc

080039a8 <expf>:
 80039a8:	b508      	push	{r3, lr}
 80039aa:	ed2d 8b02 	vpush	{d8}
 80039ae:	eef0 8a40 	vmov.f32	s17, s0
 80039b2:	f000 f839 	bl	8003a28 <__ieee754_expf>
 80039b6:	eeb0 8a40 	vmov.f32	s16, s0
 80039ba:	eeb0 0a68 	vmov.f32	s0, s17
 80039be:	f000 f829 	bl	8003a14 <finitef>
 80039c2:	b160      	cbz	r0, 80039de <expf+0x36>
 80039c4:	eddf 7a0f 	vldr	s15, [pc, #60]	@ 8003a04 <expf+0x5c>
 80039c8:	eef4 8ae7 	vcmpe.f32	s17, s15
 80039cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039d0:	dd0a      	ble.n	80039e8 <expf+0x40>
 80039d2:	f7ff ffbf 	bl	8003954 <__errno>
 80039d6:	ed9f 8a0c 	vldr	s16, [pc, #48]	@ 8003a08 <expf+0x60>
 80039da:	2322      	movs	r3, #34	@ 0x22
 80039dc:	6003      	str	r3, [r0, #0]
 80039de:	eeb0 0a48 	vmov.f32	s0, s16
 80039e2:	ecbd 8b02 	vpop	{d8}
 80039e6:	bd08      	pop	{r3, pc}
 80039e8:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8003a0c <expf+0x64>
 80039ec:	eef4 8ae7 	vcmpe.f32	s17, s15
 80039f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80039f4:	d5f3      	bpl.n	80039de <expf+0x36>
 80039f6:	f7ff ffad 	bl	8003954 <__errno>
 80039fa:	2322      	movs	r3, #34	@ 0x22
 80039fc:	ed9f 8a04 	vldr	s16, [pc, #16]	@ 8003a10 <expf+0x68>
 8003a00:	6003      	str	r3, [r0, #0]
 8003a02:	e7ec      	b.n	80039de <expf+0x36>
 8003a04:	42b17217 	.word	0x42b17217
 8003a08:	7f800000 	.word	0x7f800000
 8003a0c:	c2cff1b5 	.word	0xc2cff1b5
 8003a10:	00000000 	.word	0x00000000

08003a14 <finitef>:
 8003a14:	ee10 3a10 	vmov	r3, s0
 8003a18:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 8003a1c:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 8003a20:	bfac      	ite	ge
 8003a22:	2000      	movge	r0, #0
 8003a24:	2001      	movlt	r0, #1
 8003a26:	4770      	bx	lr

08003a28 <__ieee754_expf>:
 8003a28:	ee10 2a10 	vmov	r2, s0
 8003a2c:	f022 4300 	bic.w	r3, r2, #2147483648	@ 0x80000000
 8003a30:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8003a34:	d902      	bls.n	8003a3c <__ieee754_expf+0x14>
 8003a36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8003a3a:	4770      	bx	lr
 8003a3c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8003a40:	d106      	bne.n	8003a50 <__ieee754_expf+0x28>
 8003a42:	eddf 7a4e 	vldr	s15, [pc, #312]	@ 8003b7c <__ieee754_expf+0x154>
 8003a46:	2900      	cmp	r1, #0
 8003a48:	bf18      	it	ne
 8003a4a:	eeb0 0a67 	vmovne.f32	s0, s15
 8003a4e:	4770      	bx	lr
 8003a50:	484b      	ldr	r0, [pc, #300]	@ (8003b80 <__ieee754_expf+0x158>)
 8003a52:	4282      	cmp	r2, r0
 8003a54:	dd02      	ble.n	8003a5c <__ieee754_expf+0x34>
 8003a56:	2000      	movs	r0, #0
 8003a58:	f000 b8d4 	b.w	8003c04 <__math_oflowf>
 8003a5c:	2a00      	cmp	r2, #0
 8003a5e:	da05      	bge.n	8003a6c <__ieee754_expf+0x44>
 8003a60:	4a48      	ldr	r2, [pc, #288]	@ (8003b84 <__ieee754_expf+0x15c>)
 8003a62:	4293      	cmp	r3, r2
 8003a64:	d902      	bls.n	8003a6c <__ieee754_expf+0x44>
 8003a66:	2000      	movs	r0, #0
 8003a68:	f000 b8c6 	b.w	8003bf8 <__math_uflowf>
 8003a6c:	4a46      	ldr	r2, [pc, #280]	@ (8003b88 <__ieee754_expf+0x160>)
 8003a6e:	4293      	cmp	r3, r2
 8003a70:	eef7 5a00 	vmov.f32	s11, #112	@ 0x3f800000  1.0
 8003a74:	d952      	bls.n	8003b1c <__ieee754_expf+0xf4>
 8003a76:	4a45      	ldr	r2, [pc, #276]	@ (8003b8c <__ieee754_expf+0x164>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8003a7e:	d834      	bhi.n	8003aea <__ieee754_expf+0xc2>
 8003a80:	4b43      	ldr	r3, [pc, #268]	@ (8003b90 <__ieee754_expf+0x168>)
 8003a82:	4413      	add	r3, r2
 8003a84:	ed93 7a00 	vldr	s14, [r3]
 8003a88:	4b42      	ldr	r3, [pc, #264]	@ (8003b94 <__ieee754_expf+0x16c>)
 8003a8a:	4413      	add	r3, r2
 8003a8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8003a90:	f1c1 0201 	rsb	r2, r1, #1
 8003a94:	edd3 7a00 	vldr	s15, [r3]
 8003a98:	1a52      	subs	r2, r2, r1
 8003a9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8003a9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8003aa2:	ed9f 5a3d 	vldr	s10, [pc, #244]	@ 8003b98 <__ieee754_expf+0x170>
 8003aa6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003b9c <__ieee754_expf+0x174>
 8003aaa:	eee6 6a05 	vfma.f32	s13, s12, s10
 8003aae:	ed9f 5a3c 	vldr	s10, [pc, #240]	@ 8003ba0 <__ieee754_expf+0x178>
 8003ab2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8003ab6:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8003ba4 <__ieee754_expf+0x17c>
 8003aba:	eee5 6a06 	vfma.f32	s13, s10, s12
 8003abe:	ed9f 5a3a 	vldr	s10, [pc, #232]	@ 8003ba8 <__ieee754_expf+0x180>
 8003ac2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8003ac6:	eef0 6a40 	vmov.f32	s13, s0
 8003aca:	eee5 6a46 	vfms.f32	s13, s10, s12
 8003ace:	eeb0 6a00 	vmov.f32	s12, #0	@ 0x40000000  2.0
 8003ad2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8003ad6:	bb92      	cbnz	r2, 8003b3e <__ieee754_expf+0x116>
 8003ad8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8003adc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8003ae0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8003ae4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8003ae8:	4770      	bx	lr
 8003aea:	4b30      	ldr	r3, [pc, #192]	@ (8003bac <__ieee754_expf+0x184>)
 8003aec:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8003bb0 <__ieee754_expf+0x188>
 8003af0:	eddf 6a30 	vldr	s13, [pc, #192]	@ 8003bb4 <__ieee754_expf+0x18c>
 8003af4:	4413      	add	r3, r2
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8003afe:	eeb0 7a40 	vmov.f32	s14, s0
 8003b02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b06:	ee17 2a90 	vmov	r2, s15
 8003b0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8003b12:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8003bb8 <__ieee754_expf+0x190>
 8003b16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8003b1a:	e7be      	b.n	8003a9a <__ieee754_expf+0x72>
 8003b1c:	f1b3 5f50 	cmp.w	r3, #872415232	@ 0x34000000
 8003b20:	d20b      	bcs.n	8003b3a <__ieee754_expf+0x112>
 8003b22:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8003bbc <__ieee754_expf+0x194>
 8003b26:	ee70 6a26 	vadd.f32	s13, s0, s13
 8003b2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8003b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b32:	dd02      	ble.n	8003b3a <__ieee754_expf+0x112>
 8003b34:	ee30 0a25 	vadd.f32	s0, s0, s11
 8003b38:	4770      	bx	lr
 8003b3a:	2200      	movs	r2, #0
 8003b3c:	e7af      	b.n	8003a9e <__ieee754_expf+0x76>
 8003b3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8003b42:	f112 0f7d 	cmn.w	r2, #125	@ 0x7d
 8003b46:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8003b4a:	bfb8      	it	lt
 8003b4c:	3264      	addlt	r2, #100	@ 0x64
 8003b4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8003b52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8003b5a:	ee17 3a90 	vmov	r3, s15
 8003b5e:	bfab      	itete	ge
 8003b60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8003b64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8003b68:	ee00 3a10 	vmovge	s0, r3
 8003b6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	@ 8003bc0 <__ieee754_expf+0x198>
 8003b70:	bfbc      	itt	lt
 8003b72:	ee00 3a10 	vmovlt	s0, r3
 8003b76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8003b7a:	4770      	bx	lr
 8003b7c:	00000000 	.word	0x00000000
 8003b80:	42b17217 	.word	0x42b17217
 8003b84:	42cff1b5 	.word	0x42cff1b5
 8003b88:	3eb17218 	.word	0x3eb17218
 8003b8c:	3f851591 	.word	0x3f851591
 8003b90:	080131b8 	.word	0x080131b8
 8003b94:	080131b0 	.word	0x080131b0
 8003b98:	3331bb4c 	.word	0x3331bb4c
 8003b9c:	b5ddea0e 	.word	0xb5ddea0e
 8003ba0:	388ab355 	.word	0x388ab355
 8003ba4:	bb360b61 	.word	0xbb360b61
 8003ba8:	3e2aaaab 	.word	0x3e2aaaab
 8003bac:	080131c0 	.word	0x080131c0
 8003bb0:	3fb8aa3b 	.word	0x3fb8aa3b
 8003bb4:	3f317180 	.word	0x3f317180
 8003bb8:	3717f7d1 	.word	0x3717f7d1
 8003bbc:	7149f2ca 	.word	0x7149f2ca
 8003bc0:	0d800000 	.word	0x0d800000

08003bc4 <with_errnof>:
 8003bc4:	b510      	push	{r4, lr}
 8003bc6:	ed2d 8b02 	vpush	{d8}
 8003bca:	eeb0 8a40 	vmov.f32	s16, s0
 8003bce:	4604      	mov	r4, r0
 8003bd0:	f7ff fec0 	bl	8003954 <__errno>
 8003bd4:	eeb0 0a48 	vmov.f32	s0, s16
 8003bd8:	ecbd 8b02 	vpop	{d8}
 8003bdc:	6004      	str	r4, [r0, #0]
 8003bde:	bd10      	pop	{r4, pc}

08003be0 <xflowf>:
 8003be0:	b130      	cbz	r0, 8003bf0 <xflowf+0x10>
 8003be2:	eef1 7a40 	vneg.f32	s15, s0
 8003be6:	ee27 0a80 	vmul.f32	s0, s15, s0
 8003bea:	2022      	movs	r0, #34	@ 0x22
 8003bec:	f7ff bfea 	b.w	8003bc4 <with_errnof>
 8003bf0:	eef0 7a40 	vmov.f32	s15, s0
 8003bf4:	e7f7      	b.n	8003be6 <xflowf+0x6>
	...

08003bf8 <__math_uflowf>:
 8003bf8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003c00 <__math_uflowf+0x8>
 8003bfc:	f7ff bff0 	b.w	8003be0 <xflowf>
 8003c00:	10000000 	.word	0x10000000

08003c04 <__math_oflowf>:
 8003c04:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003c0c <__math_oflowf+0x8>
 8003c08:	f7ff bfea 	b.w	8003be0 <xflowf>
 8003c0c:	70000000 	.word	0x70000000

08003c10 <_init>:
 8003c10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c12:	bf00      	nop
 8003c14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c16:	bc08      	pop	{r3}
 8003c18:	469e      	mov	lr, r3
 8003c1a:	4770      	bx	lr

08003c1c <_fini>:
 8003c1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003c1e:	bf00      	nop
 8003c20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003c22:	bc08      	pop	{r3}
 8003c24:	469e      	mov	lr, r3
 8003c26:	4770      	bx	lr
